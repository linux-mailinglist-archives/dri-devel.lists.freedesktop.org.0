Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id B3C1CF83FB
	for <lists+dri-devel@lfdr.de>; Tue, 12 Nov 2019 01:07:41 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 6A0BD6EA0B;
	Tue, 12 Nov 2019 00:07:21 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from hqemgate14.nvidia.com (hqemgate14.nvidia.com [216.228.121.143])
 by gabe.freedesktop.org (Postfix) with ESMTPS id BB7DE6EA0E
 for <dri-devel@lists.freedesktop.org>; Tue, 12 Nov 2019 00:07:15 +0000 (UTC)
Received: from hqpgpgate101.nvidia.com (Not Verified[216.228.121.13]) by
 hqemgate14.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
 id <B5dc9f7b50000>; Mon, 11 Nov 2019 16:07:17 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
 by hqpgpgate101.nvidia.com (PGP Universal service);
 Mon, 11 Nov 2019 16:07:15 -0800
X-PGP-Universal: processed;
 by hqpgpgate101.nvidia.com on Mon, 11 Nov 2019 16:07:15 -0800
Received: from HQMAIL101.nvidia.com (172.20.187.10) by HQMAIL105.nvidia.com
 (172.20.187.12) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Tue, 12 Nov
 2019 00:07:14 +0000
Received: from rnnvemgw01.nvidia.com (10.128.109.123) by HQMAIL101.nvidia.com
 (172.20.187.10) with Microsoft SMTP Server (TLS) id 15.0.1473.3 via
 Frontend Transport; Tue, 12 Nov 2019 00:07:13 +0000
Received: from blueforge.nvidia.com (Not Verified[10.110.48.28]) by
 rnnvemgw01.nvidia.com with Trustwave SEG (v7, 5, 8, 10121)
 id <B5dc9f7af0002>; Mon, 11 Nov 2019 16:07:13 -0800
From: John Hubbard <jhubbard@nvidia.com>
To: Andrew Morton <akpm@linux-foundation.org>
Subject: [PATCH v3 09/23] mm/gup: introduce pin_user_pages*() and FOLL_PIN
Date: Mon, 11 Nov 2019 16:06:46 -0800
Message-ID: <20191112000700.3455038-10-jhubbard@nvidia.com>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20191112000700.3455038-1-jhubbard@nvidia.com>
References: <20191112000700.3455038-1-jhubbard@nvidia.com>
MIME-Version: 1.0
X-NVConfidentiality: public
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=nvidia.com; s=n1; 
 t=1573517238; bh=NlHV4Xgok5ZU8TaAFKmeS4btcWTwEZUcH8SPgzpp278=;
 h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
 In-Reply-To:References:MIME-Version:X-NVConfidentiality:
 Content-Type:Content-Transfer-Encoding;
 b=IBjil0PY8dLzuMCfXj7TyQrUoGPtXXmvJPW5S5UVpPPxr/c8Auc8cTknHgDnUQmiM
 r41Pao3cPu2aP/z6b0HX0dwlot1Zf87P6OvM52CTfp3ByW1G97jsg2RF/QuVE1iqT9
 M09lOgDs5F28KEZbISw2kiYTCiwsaOu23r3uX7zLz+29aCyCC4+FgojbZZpRXpLP9E
 2FYsE5eIgqUFZ8CWlKdc6lbKaILHH2sNNqnJaSC8eJQEDOuXAKOTXD+6ltqxBNcZ1G
 fcKTpa2OnV+JSM/ggk7AfIx7nQAyjrzy137wAeU/PiSIL9XnkC5LXr/HjOv2fDsXbW
 WERT3Bm4wdlBw==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Michal Hocko <mhocko@suse.com>, Jan Kara <jack@suse.cz>,
 kvm@vger.kernel.org, linux-doc@vger.kernel.org,
 David Airlie <airlied@linux.ie>, Dave Chinner <david@fromorbit.com>,
 dri-devel@lists.freedesktop.org, LKML <linux-kernel@vger.kernel.org>,
 linux-mm@kvack.org, Paul Mackerras <paulus@samba.org>,
 linux-kselftest@vger.kernel.org, Ira Weiny <ira.weiny@intel.com>,
 Jonathan Corbet <corbet@lwn.net>, linux-rdma@vger.kernel.org,
 Michael Ellerman <mpe@ellerman.id.au>, Christoph Hellwig <hch@infradead.org>,
 Jason Gunthorpe <jgg@ziepe.ca>, Vlastimil Babka <vbabka@suse.cz>,
 =?UTF-8?q?Bj=C3=B6rn=20T=C3=B6pel?= <bjorn.topel@intel.com>,
 linux-media@vger.kernel.org, Shuah Khan <shuah@kernel.org>,
 John Hubbard <jhubbard@nvidia.com>, linux-block@vger.kernel.org,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Al Viro <viro@zeniv.linux.org.uk>, Dan Williams <dan.j.williams@intel.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Magnus Karlsson <magnus.karlsson@intel.com>, Jens Axboe <axboe@kernel.dk>,
 netdev@vger.kernel.org, Alex Williamson <alex.williamson@redhat.com>,
 linux-fsdevel@vger.kernel.org, bpf@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org, "David S . Miller" <davem@davemloft.net>,
 Mike Rapoport <rppt@kernel.org>, Mike Kravetz <mike.kravetz@oracle.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

SW50cm9kdWNlIHBpbl91c2VyX3BhZ2VzKigpIHZhcmlhdGlvbnMgb2YgZ2V0X3VzZXJfcGFnZXMq
KCkgY2FsbHMsCmFuZCBhbHNvIHBpbl9sb25ndGVybV9wYWdlcyooKSB2YXJpYXRpb25zLgoKVGhl
c2UgdmFyaWFudHMgYWxsIHNldCBGT0xMX1BJTiwgd2hpY2ggaXMgYWxzbyBpbnRyb2R1Y2VkLCBh
bmQKdGhvcm91Z2hseSBkb2N1bWVudGVkLgoKVGhlIHBpbl9sb25ndGVybSooKSB2YXJpYW50cyBh
bHNvIHNldCBGT0xMX0xPTkdURVJNLCBpbiBhZGRpdGlvbgp0byBGT0xMX1BJTjoKCiAgICBwaW5f
dXNlcl9wYWdlcygpCiAgICBwaW5fdXNlcl9wYWdlc19yZW1vdGUoKQogICAgcGluX3VzZXJfcGFn
ZXNfZmFzdCgpCgogICAgcGluX2xvbmd0ZXJtX3BhZ2VzKCkKICAgIHBpbl9sb25ndGVybV9wYWdl
c19yZW1vdGUoKQogICAgcGluX2xvbmd0ZXJtX3BhZ2VzX2Zhc3QoKQoKQWxsIHBhZ2VzIHRoYXQg
YXJlIHBpbm5lZCB2aWEgdGhlIGFib3ZlIGNhbGxzLCBtdXN0IGJlIHVucGlubmVkIHZpYQpwdXRf
dXNlcl9wYWdlKCkuCgpUaGUgdW5kZXJseWluZyBydWxlcyBhcmU6CgoqIFRoZXNlIGFyZSBndXAt
aW50ZXJuYWwgZmxhZ3MsIHNvIHRoZSBjYWxsIHNpdGVzIHNob3VsZCBub3QgZGlyZWN0bHkKc2V0
IEZPTExfUElOIG5vciBGT0xMX0xPTkdURVJNLiBUaGF0IGJlaGF2aW9yIGlzIGVuZm9yY2VkIHdp
dGgKYXNzZXJ0aW9ucywgZm9yIHRoZSBuZXcgRk9MTF9QSU4gZmxhZy4gSG93ZXZlciwgZm9yIHRo
ZSBwcmUtZXhpc3RpbmcKRk9MTF9MT05HVEVSTSBmbGFnLCB3aGljaCBoYXMgc29tZSBjYWxsIHNp
dGVzIHRoYXQgc3RpbGwgZGlyZWN0bHkKc2V0IEZPTExfTE9OR1RFUk0sIHRoZXJlIGlzIG5vIGFz
c2VydGlvbiB5ZXQuCgoqIENhbGwgc2l0ZXMgdGhhdCB3YW50IHRvIGluZGljYXRlIHRoYXQgdGhl
eSBhcmUgZ29pbmcgdG8gZG8gRGlyZWN0SU8KICAoIkRJTyIpIG9yIHNvbWV0aGluZyB3aXRoIHNp
bWlsYXIgY2hhcmFjdGVyaXN0aWNzLCBzaG91bGQgY2FsbCBhCiAgZ2V0X3VzZXJfcGFnZXMoKS1s
aWtlIHdyYXBwZXIgY2FsbCB0aGF0IHNldHMgRk9MTF9QSU4uIFRoZXNlIHdyYXBwZXJzCiAgd2ls
bDoKICAgICAgICAqIFN0YXJ0IHdpdGggInBpbl91c2VyX3BhZ2VzIiBpbnN0ZWFkIG9mICJnZXRf
dXNlcl9wYWdlcyIuIFRoYXQKICAgICAgICAgIG1ha2VzIGl0IGVhc3kgdG8gZmluZCBhbmQgYXVk
aXQgdGhlIGNhbGwgc2l0ZXMuCiAgICAgICAgKiBTZXQgRk9MTF9QSU4KCiogRm9yIHBhZ2VzIHRo
YXQgYXJlIHJlY2VpdmVkIHZpYSBGT0xMX1BJTiwgdGhvc2UgcGFnZXMgbXVzdCBiZSByZXR1cm5l
ZAogIHZpYSBwdXRfdXNlcl9wYWdlKCkuCgpUaGFua3MgdG8gSmFuIEthcmEgYW5kIFZsYXN0aW1p
bCBCYWJrYSBmb3IgZXhwbGFpbmluZyB0aGUgNCBjYXNlcwppbiB0aGlzIGRvY3VtZW50YXRpb24u
IChJJ3ZlIHJld29yZGVkIGl0IGFuZCBleHBhbmRlZCB1cG9uIGl0LikKClJldmlld2VkLWJ5OiBK
w6lyw7RtZSBHbGlzc2UgPGpnbGlzc2VAcmVkaGF0LmNvbT4KQ2M6IE1pa2UgUmFwb3BvcnQgPHJw
cHRAa2VybmVsLm9yZz4KQ2M6IEpvbmF0aGFuIENvcmJldCA8Y29yYmV0QGx3bi5uZXQ+CkNjOiBJ
cmEgV2VpbnkgPGlyYS53ZWlueUBpbnRlbC5jb20+ClNpZ25lZC1vZmYtYnk6IEpvaG4gSHViYmFy
ZCA8amh1YmJhcmRAbnZpZGlhLmNvbT4KLS0tCiBEb2N1bWVudGF0aW9uL2NvcmUtYXBpL2luZGV4
LnJzdCAgICAgICAgICB8ICAgMSArCiBEb2N1bWVudGF0aW9uL2NvcmUtYXBpL3Bpbl91c2VyX3Bh
Z2VzLnJzdCB8IDIxOCArKysrKysrKysrKysrKysrKysKIGluY2x1ZGUvbGludXgvbW0uaCAgICAg
ICAgICAgICAgICAgICAgICAgIHwgIDYyICsrKysrLQogbW0vZ3VwLmMgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgfCAyNjAgKysrKysrKysrKysrKysrKysrKystLQogNCBmaWxlcyBj
aGFuZ2VkLCA1MTQgaW5zZXJ0aW9ucygrKSwgMjcgZGVsZXRpb25zKC0pCiBjcmVhdGUgbW9kZSAx
MDA2NDQgRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9waW5fdXNlcl9wYWdlcy5yc3QKCmRpZmYgLS1n
aXQgYS9Eb2N1bWVudGF0aW9uL2NvcmUtYXBpL2luZGV4LnJzdCBiL0RvY3VtZW50YXRpb24vY29y
ZS1hcGkvaW5kZXgucnN0CmluZGV4IGFiMGVhZTFjMTUzYS4uNDEzZjdkN2M4NjQyIDEwMDY0NAot
LS0gYS9Eb2N1bWVudGF0aW9uL2NvcmUtYXBpL2luZGV4LnJzdAorKysgYi9Eb2N1bWVudGF0aW9u
L2NvcmUtYXBpL2luZGV4LnJzdApAQCAtMzEsNiArMzEsNyBAQCBDb3JlIHV0aWxpdGllcwogICAg
Z2VuZXJpYy1yYWRpeC10cmVlCiAgICBtZW1vcnktYWxsb2NhdGlvbgogICAgbW0tYXBpCisgICBw
aW5fdXNlcl9wYWdlcwogICAgZ2ZwX21hc2stZnJvbS1mcy1pbwogICAgdGltZWtlZXBpbmcKICAg
IGJvb3QtdGltZS1tbQpkaWZmIC0tZ2l0IGEvRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9waW5fdXNl
cl9wYWdlcy5yc3QgYi9Eb2N1bWVudGF0aW9uL2NvcmUtYXBpL3Bpbl91c2VyX3BhZ2VzLnJzdApu
ZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMDAuLmNlODE5ZTcwOTQzNQotLS0g
L2Rldi9udWxsCisrKyBiL0RvY3VtZW50YXRpb24vY29yZS1hcGkvcGluX3VzZXJfcGFnZXMucnN0
CkBAIC0wLDAgKzEsMjE4IEBACisuLiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMAor
Cis9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Citw
aW5fdXNlcl9wYWdlcygpIGFuZCByZWxhdGVkIGNhbGxzCis9PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CisKKy4uIGNvbnRlbnRzOjogOmxvY2FsOgor
CitPdmVydmlldworPT09PT09PT0KKworVGhpcyBkb2N1bWVudCBkZXNjcmliZXMgdGhlIGZvbGxv
d2luZyBmdW5jdGlvbnM6IDo6CisKKyBwaW5fdXNlcl9wYWdlcworIHBpbl91c2VyX3BhZ2VzX2Zh
c3QKKyBwaW5fdXNlcl9wYWdlc19yZW1vdGUKKworIHBpbl9sb25ndGVybV9wYWdlcworIHBpbl9s
b25ndGVybV9wYWdlc19mYXN0CisgcGluX2xvbmd0ZXJtX3BhZ2VzX3JlbW90ZQorCitCYXNpYyBk
ZXNjcmlwdGlvbiBvZiBGT0xMX1BJTgorPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KKwor
Rk9MTF9QSU4gYW5kIEZPTExfTE9OR1RFUk0gYXJlIGZsYWdzIHRoYXQgY2FuIGJlIHBhc3NlZCB0
byB0aGUgZ2V0X3VzZXJfcGFnZXMqKCkKKygiZ3VwIikgZmFtaWx5IG9mIGZ1bmN0aW9ucy4gRk9M
TF9QSU4gaGFzIHNpZ25pZmljYW50IGludGVyYWN0aW9ucyBhbmQKK2ludGVyZGVwZW5kZW5jaWVz
IHdpdGggRk9MTF9MT05HVEVSTSwgc28gYm90aCBhcmUgY292ZXJlZCBoZXJlLgorCitCb3RoIEZP
TExfUElOIGFuZCBGT0xMX0xPTkdURVJNIGFyZSBpbnRlcm5hbCB0byBndXAsIG1lYW5pbmcgdGhh
dCBuZWl0aGVyCitGT0xMX1BJTiBub3IgRk9MTF9MT05HVEVSTSBzaG91bGQgbm90IGFwcGVhciBh
dCB0aGUgZ3VwIGNhbGwgc2l0ZXMuIFRoaXMgYWxsb3dzCit0aGUgYXNzb2NpYXRlZCB3cmFwcGVy
IGZ1bmN0aW9ucyAgKHBpbl91c2VyX3BhZ2VzKCkgYW5kIG90aGVycykgdG8gc2V0IHRoZQorY29y
cmVjdCBjb21iaW5hdGlvbiBvZiB0aGVzZSBmbGFncywgYW5kIHRvIGNoZWNrIGZvciBwcm9ibGVt
cyBhcyB3ZWxsLgorCitGT0xMX1BJTiBhbmQgRk9MTF9HRVQgYXJlIG11dHVhbGx5IGV4Y2x1c2l2
ZSBmb3IgYSBnaXZlbiBndXAgY2FsbC4gSG93ZXZlciwKK211bHRpcGxlIHRocmVhZHMgYW5kIGNh
bGwgc2l0ZXMgYXJlIGZyZWUgdG8gcGluIHRoZSBzYW1lIHN0cnVjdCBwYWdlcywgdmlhIGJvdGgK
K0ZPTExfUElOIGFuZCBGT0xMX0dFVC4gSXQncyBqdXN0IHRoZSBjYWxsIHNpdGUgdGhhdCBuZWVk
cyB0byBjaG9vc2Ugb25lIG9yIHRoZQorb3RoZXIsIG5vdCB0aGUgc3RydWN0IHBhZ2UocykuCisK
K1RoZSBGT0xMX1BJTiBpbXBsZW1lbnRhdGlvbiBpcyBuZWFybHkgdGhlIHNhbWUgYXMgRk9MTF9H
RVQsIGV4Y2VwdCB0aGF0IEZPTExfUElOCit1c2VzIGEgZGlmZmVyZW50IHJlZmVyZW5jZSBjb3Vu
dGluZyB0ZWNobmlxdWUuCisKK0ZPTExfUElOIGlzIGEgcHJlcmVxdWlzaXRlIHRvIEZPTExfTE9O
R1RHRVJNLiBBbm90aGVyIHdheSBvZiBzYXlpbmcgdGhhdCBpcywKK0ZPTExfTE9OR1RFUk0gaXMg
YSBzcGVjaWZpYyBjYXNlLCBtb3JlIHJlc3RyaWN0aXZlIGNhc2Ugb2YgRk9MTF9QSU4uCisKK1do
aWNoIGZsYWdzIGFyZSBzZXQgYnkgZWFjaCB3cmFwcGVyCis9PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PQorCitPbmx5IEZPTExfUElOIGFuZCBGT0xMX0xPTkdURVJNIGFyZSBjb3Zl
cmVkIGhlcmUuIFRoZXNlIGZsYWdzIGFyZSBhZGRlZCB0bword2hhdGV2ZXIgZmxhZ3MgdGhlIGNh
bGxlciBwcm92aWRlczo6CisKKyBGdW5jdGlvbiAgICAgICAgICAgICAgICAgICAgZ3VwIGZsYWdz
IChGT0xMX1BJTiBvciBGT0xMX0xPTkdURVJNIG9ubHkpCisgLS0tLS0tLS0gICAgICAgICAgICAg
ICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQorIHBpbl91
c2VyX3BhZ2VzICAgICAgICAgICAgICBGT0xMX1BJTgorIHBpbl91c2VyX3BhZ2VzX2Zhc3QgICAg
ICAgICBGT0xMX1BJTgorIHBpbl91c2VyX3BhZ2VzX3JlbW90ZSAgICAgICBGT0xMX1BJTgorCisg
cGluX2xvbmd0ZXJtX3BhZ2VzICAgICAgICAgIEZPTExfUElOIHwgRk9MTF9MT05HVEVSTQorIHBp
bl9sb25ndGVybV9wYWdlc19mYXN0ICAgICBGT0xMX1BJTiB8IEZPTExfTE9OR1RFUk0KKyBwaW5f
bG9uZ3Rlcm1fcGFnZXNfcmVtb3RlICAgRk9MTF9QSU4gfCBGT0xMX0xPTkdURVJNCisKK1RyYWNr
aW5nIGRtYS1waW5uZWQgcGFnZXMKKz09PT09PT09PT09PT09PT09PT09PT09PT0KKworU29tZSBv
ZiB0aGUga2V5IGRlc2lnbiBjb25zdHJhaW50cywgYW5kIHNvbHV0aW9ucywgZm9yIHRyYWNraW5n
IGRtYS1waW5uZWQKK3BhZ2VzOgorCisqIEFuIGFjdHVhbCByZWZlcmVuY2UgY291bnQsIHBlciBz
dHJ1Y3QgcGFnZSwgaXMgcmVxdWlyZWQuIFRoaXMgaXMgYmVjYXVzZQorICBtdWx0aXBsZSBwcm9j
ZXNzZXMgbWF5IHBpbiBhbmQgdW5waW4gYSBwYWdlLgorCisqIEZhbHNlIHBvc2l0aXZlcyAocmVw
b3J0aW5nIHRoYXQgYSBwYWdlIGlzIGRtYS1waW5uZWQsIHdoZW4gaW4gZmFjdCBpdCBpcyBub3Qp
CisgIGFyZSBhY2NlcHRhYmxlLCBidXQgZmFsc2UgbmVnYXRpdmVzIGFyZSBub3QuCisKKyogc3Ry
dWN0IHBhZ2UgbWF5IG5vdCBiZSBpbmNyZWFzZWQgaW4gc2l6ZSBmb3IgdGhpcywgYW5kIGFsbCBm
aWVsZHMgYXJlIGFscmVhZHkKKyAgdXNlZC4KKworKiBHaXZlbiB0aGUgYWJvdmUsIHdlIGNhbiBv
dmVybG9hZCB0aGUgcGFnZS0+X3JlZmNvdW50IGZpZWxkIGJ5IHVzaW5nLCBzb3J0IG9mLAorICB0
aGUgdXBwZXIgYml0cyBpbiB0aGF0IGZpZWxkIGZvciBhIGRtYS1waW5uZWQgY291bnQuICJTb3J0
IG9mIiwgbWVhbnMgdGhhdCwKKyAgcmF0aGVyIHRoYW4gZGl2aWRpbmcgcGFnZS0+X3JlZmNvdW50
IGludG8gYml0IGZpZWxkcywgd2Ugc2ltcGxlIGFkZCBhIG1lZGl1bS0KKyAgbGFyZ2UgdmFsdWUg
KEdVUF9QSU5fQ09VTlRJTkdfQklBUywgaW5pdGlhbGx5IGNob3NlbiB0byBiZSAxMDI0OiAxMCBi
aXRzKSB0bworICBwYWdlLT5fcmVmY291bnQuIFRoaXMgcHJvdmlkZXMgZnV6enkgYmVoYXZpb3I6
IGlmIGEgcGFnZSBoYXMgZ2V0X3BhZ2UoKSBjYWxsZWQKKyAgb24gaXQgMTAyNCB0aW1lcywgdGhl
biBpdCB3aWxsIGFwcGVhciB0byBoYXZlIGEgc2luZ2xlIGRtYS1waW5uZWQgY291bnQuCisgIEFu
ZCBhZ2FpbiwgdGhhdCdzIGFjY2VwdGFibGUuCisKK1RoaXMgYWxzbyBsZWFkcyB0byBsaW1pdGF0
aW9uczogdGhlcmUgYXJlIG9ubHkgMzEtMTA9PTIxIGJpdHMgYXZhaWxhYmxlIGZvciBhCitjb3Vu
dGVyIHRoYXQgaW5jcmVtZW50cyAxMCBiaXRzIGF0IGEgdGltZS4KKworVE9ETzogZm9yIDFHQiBh
bmQgbGFyZ2VyIGh1Z2UgcGFnZXMsIHRoaXMgaXMgY3V0dGluZyBpdCBjbG9zZS4gVGhhdCdzIGJl
Y2F1c2UKK3doZW4gcGluX3VzZXJfcGFnZXMoKSBmb2xsb3dzIHN1Y2ggcGFnZXMsIGl0IGluY3Jl
bWVudHMgdGhlIGhlYWQgcGFnZSBieSAiMSIKKyh3aGVyZSAiMSIgdXNlZCB0byBtZWFuICIrMSIg
Zm9yIGdldF91c2VyX3BhZ2VzKCksIGJ1dCBub3cgbWVhbnMgIisxMDI0IiBmb3IKK3Bpbl91c2Vy
X3BhZ2VzKCkpIGZvciBlYWNoIHRhaWwgcGFnZS4gU28gaWYgeW91IGhhdmUgYSAxR0IgaHVnZSBw
YWdlOgorCisqIFRoZXJlIGFyZSAyNTZLICgxOCBiaXRzKSB3b3J0aCBvZiA0IEtCIHRhaWwgcGFn
ZXMuCisqIFRoZXJlIGFyZSAyMSBiaXRzIGF2YWlsYWJsZSB0byBjb3VudCB1cCB2aWEgR1VQX1BJ
Tl9DT1VOVElOR19CSUFTICh0aGF0IGlzLAorICAxMCBiaXRzIGF0IGEgdGltZSkKKyogVGhlcmUg
YXJlIDIxIC0gMTggPT0gMyBiaXRzIGF2YWlsYWJsZSB0byBjb3VudC4gRXhjZXB0IHRoYXQgdGhl
cmUgYXJlbid0LAorICBiZWNhdXNlIHlvdSBuZWVkIHRvIGFsbG93IGZvciBhIGZldyBub3JtYWwg
Z2V0X3BhZ2UoKSBjYWxscyBvbiB0aGUgaGVhZCBwYWdlLAorICBhcyB3ZWxsLiBGb3J0dW5hdGVs
eSwgdGhlIGFwcHJvYWNoIG9mIHVzaW5nIGFkZGl0aW9uLCByYXRoZXIgdGhhbiAiaGFyZCIKKyAg
Yml0ZmllbGRzLCB3aXRoaW4gcGFnZS0+X3JlZmNvdW50LCBhbGxvd3MgZm9yIHNoYXJpbmcgdGhl
c2UgYml0cyBncmFjZWZ1bGx5LgorICBCdXQgd2UncmUgc3RpbGwgbG9va2luZyBhdCBhYm91dCA4
IHJlZmVyZW5jZXMuCisKK1RoaXMsIGhvd2V2ZXIsIGlzIGEgbWlzc2luZyBmZWF0dXJlIG1vcmUg
dGhhbiBhbnl0aGluZyBlbHNlLCBiZWNhdXNlIGl0J3MgZWFzaWx5Citzb2x2ZWQgYnkgYWRkcmVz
c2luZyBhbiBvYnZpb3VzIGluZWZmaWNpZW5jeSBpbiB0aGUgb3JpZ2luYWwgZ2V0X3VzZXJfcGFn
ZXMoKQorYXBwcm9hY2ggb2YgcmV0cmlldmluZyBwYWdlczogc3RvcCB0cmVhdGluZyBhbGwgdGhl
IHBhZ2VzIGFzIGlmIHRoZXkgd2VyZQorUEFHRV9TSVpFLiBSZXRyaWV2ZSBodWdlIHBhZ2VzIGFz
IGh1Z2UgcGFnZXMuIFRoZSBjYWxsZXJzIG5lZWQgdG8gYmUgYXdhcmUgb2YKK3RoaXMsIHNvIHNv
bWUgd29yayBpcyByZXF1aXJlZC4gT25jZSB0aGF0J3MgaW4gcGxhY2UsIHRoaXMgbGltaXRhdGlv
biBtb3N0bHkKK2Rpc2FwcGVhcnMgZnJvbSB2aWV3LCBiZWNhdXNlIHRoZXJlIHdpbGwgYmUgYW1w
bGUgcmVmY291bnRpbmcgcmFuZ2UgYXZhaWxhYmxlLgorCisqIENhbGxlcnMgbXVzdCBzcGVjaWZp
Y2FsbHkgcmVxdWVzdCAiZG1hLXBpbm5lZCB0cmFja2luZyBvZiBwYWdlcyIuIEluIG90aGVyCisg
IHdvcmRzLCBqdXN0IGNhbGxpbmcgZ2V0X3VzZXJfcGFnZXMoKSB3aWxsIG5vdCBzdWZmaWNlOyBh
IG5ldyBzZXQgb2YgZnVuY3Rpb25zLAorICBwaW5fdXNlcl9wYWdlKCkgYW5kIHJlbGF0ZWQsIG11
c3QgYmUgdXNlZC4KKworRk9MTF9QSU4sIEZPTExfR0VULCBGT0xMX0xPTkdURVJNOiB3aGVuIHRv
IHVzZSB3aGljaCBmbGFncworPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PQorCitUaGFua3MgdG8gSmFuIEthcmEsIFZsYXN0aW1pbCBCYWJr
YSBhbmQgc2V2ZXJhbCBvdGhlciAtbW0gcGVvcGxlLCBmb3IgZGVzY3JpYmluZwordGhlc2UgY2F0
ZWdvcmllczoKKworQ0FTRSAxOiBEaXJlY3QgSU8gKERJTykKKy0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tCitUaGVyZSBhcmUgR1VQIHJlZmVyZW5jZXMgdG8gcGFnZXMgdGhhdCBhcmUgc2VydmluZwor
YXMgRElPIGJ1ZmZlcnMuIFRoZXNlIGJ1ZmZlcnMgYXJlIG5lZWRlZCBmb3IgYSByZWxhdGl2ZWx5
IHNob3J0IHRpbWUgKHNvIHRoZXkKK2FyZSBub3QgImxvbmcgdGVybSIpLiBObyBzcGVjaWFsIHN5
bmNocm9uaXphdGlvbiB3aXRoIHBhZ2VfbWtjbGVhbigpIG9yCittdW5tYXAoKSBpcyBwcm92aWRl
ZC4gVGhlcmVmb3JlLCBmbGFncyB0byBzZXQgYXQgdGhlIGNhbGwgc2l0ZSBhcmU6IDo6CisKKyAg
ICBGT0xMX1BJTgorCisuLi5idXQgcmF0aGVyIHRoYW4gc2V0dGluZyBGT0xMX1BJTiBkaXJlY3Rs
eSwgY2FsbCBzaXRlcyBzaG91bGQgdXNlIG9uZSBvZgordGhlIHBpbl91c2VyX3BhZ2VzKigpIHJv
dXRpbmVzIHRoYXQgc2V0IEZPTExfUElOLgorCitDQVNFIDI6IFJETUEKKy0tLS0tLS0tLS0tLQor
VGhlcmUgYXJlIEdVUCByZWZlcmVuY2VzIHRvIHBhZ2VzIHRoYXQgYXJlIHNlcnZpbmcgYXMgRE1B
CitidWZmZXJzLiBUaGVzZSBidWZmZXJzIGFyZSBuZWVkZWQgZm9yIGEgbG9uZyB0aW1lICgibG9u
ZyB0ZXJtIikuIE5vIHNwZWNpYWwKK3N5bmNocm9uaXphdGlvbiB3aXRoIHBhZ2VfbWtjbGVhbigp
IG9yIG11bm1hcCgpIGlzIHByb3ZpZGVkLiBUaGVyZWZvcmUsIGZsYWdzCit0byBzZXQgYXQgdGhl
IGNhbGwgc2l0ZSBhcmU6IDo6CisKKyAgICBGT0xMX1BJTiB8IEZPTExfTE9OR1RFUk0KKworTk9U
RTogU29tZSBwYWdlcywgc3VjaCBhcyBEQVggcGFnZXMsIGNhbm5vdCBiZSBwaW5uZWQgd2l0aCBs
b25ndGVybSBwaW5zLiBUaGF0J3MKK2JlY2F1c2UgREFYIHBhZ2VzIGRvIG5vdCBoYXZlIGEgc2Vw
YXJhdGUgcGFnZSBjYWNoZSwgYW5kIHNvICJwaW5uaW5nIiBpbXBsaWVzCitsb2NraW5nIGRvd24g
ZmlsZSBzeXN0ZW0gYmxvY2tzLCB3aGljaCBpcyBub3QgKHlldCkgc3VwcG9ydGVkIGluIHRoYXQg
d2F5LgorCitDQVNFIDM6IEhhcmR3YXJlIHdpdGggcGFnZSBmYXVsdGluZyBzdXBwb3J0CistLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCitIZXJlLCBhIHdlbGwtd3Jp
dHRlbiBkcml2ZXIgZG9lc24ndCBub3JtYWxseSBuZWVkIHRvIHBpbiBwYWdlcyBhdCBhbGwuIEhv
d2V2ZXIsCitpZiB0aGUgZHJpdmVyIGRvZXMgY2hvb3NlIHRvIGRvIHNvLCBpdCBjYW4gcmVnaXN0
ZXIgTU1VIG5vdGlmaWVycyBmb3IgdGhlIHJhbmdlLAorYW5kIHdpbGwgYmUgY2FsbGVkIGJhY2sg
dXBvbiBpbnZhbGlkYXRpb24uIEVpdGhlciB3YXkgKGF2b2lkaW5nIHBhZ2UgcGlubmluZywgb3IK
K3VzaW5nIE1NVSBub3RpZmllcnMgdG8gdW5waW4gdXBvbiByZXF1ZXN0KSwgdGhlcmUgaXMgcHJv
cGVyIHN5bmNocm9uaXphdGlvbiB3aXRoCitib3RoIGZpbGVzeXN0ZW0gYW5kIG1tIChwYWdlX21r
Y2xlYW4oKSwgbXVubWFwKCksIGV0YykuCisKK1RoZXJlZm9yZSwgbmVpdGhlciBmbGFnIG5lZWRz
IHRvIGJlIHNldC4KKworSW4gdGhpcyBjYXNlLCBpZGVhbGx5LCBuZWl0aGVyIGdldF91c2VyX3Bh
Z2VzKCkgbm9yIHBpbl91c2VyX3BhZ2VzKCkgc2hvdWxkIGJlCitjYWxsZWQuIEluc3RlYWQsIHRo
ZSBzb2Z0d2FyZSBzaG91bGQgYmUgd3JpdHRlbiBzbyB0aGF0IGl0IGRvZXMgbm90IHBpbiBwYWdl
cy4KK1RoaXMgYWxsb3dzIG1tIGFuZCBmaWxlc3lzdGVtcyB0byBvcGVyYXRlIG1vcmUgZWZmaWNp
ZW50bHkgYW5kIHJlbGlhYmx5LgorCitDQVNFIDQ6IFBpbm5pbmcgZm9yIHN0cnVjdCBwYWdlIG1h
bmlwdWxhdGlvbiBvbmx5CistLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tCitIZXJlLCBub3JtYWwgR1VQIGNhbGxzIGFyZSBzdWZmaWNpZW50LCBzbyBuZWl0
aGVyIGZsYWcgbmVlZHMgdG8gYmUgc2V0LgorCitwYWdlX2RtYV9waW5uZWQoKTogdGhlIHdob2xl
IHBvaW50IG9mIHBpbm5pbmcKKz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PQorCitUaGUgd2hvbGUgcG9pbnQgb2YgbWFya2luZyBwYWdlcyBhcyAiRE1BLXBpbm5l
ZCIgb3IgImd1cC1waW5uZWQiIGlzIHRvIGJlIGFibGUKK3RvIHF1ZXJ5LCAiaXMgdGhpcyBwYWdl
IERNQS1waW5uZWQ/IiBUaGF0IGFsbG93cyBjb2RlIHN1Y2ggYXMgcGFnZV9ta2NsZWFuKCkKKyhh
bmQgZmlsZSBzeXN0ZW0gd3JpdGViYWNrIGNvZGUgaW4gZ2VuZXJhbCkgdG8gbWFrZSBpbmZvcm1l
ZCBkZWNpc2lvbnMgYWJvdXQKK3doYXQgdG8gZG8gd2hlbiBhIHBhZ2UgY2Fubm90IGJlIHVubWFw
cGVkIGR1ZSB0byBzdWNoIHBpbnMuCisKK1doYXQgdG8gZG8gaW4gdGhvc2UgY2FzZXMgaXMgdGhl
IHN1YmplY3Qgb2YgYSB5ZWFycy1sb25nIHNlcmllcyBvZiBkaXNjdXNzaW9ucworYW5kIGRlYmF0
ZXMgKHNlZSB0aGUgUmVmZXJlbmNlcyBhdCB0aGUgZW5kIG9mIHRoaXMgZG9jdW1lbnQpLiBJdCdz
IGEgVE9ETyBpdGVtCitoZXJlOiBmaWxsIGluIHRoZSBkZXRhaWxzIG9uY2UgdGhhdCdzIHdvcmtl
ZCBvdXQuIE1lYW53aGlsZSwgaXQncyBzYWZlIHRvIHNheQordGhhdCBoYXZpbmcgdGhpcyBhdmFp
bGFibGU6IDo6CisKKyAgICAgICAgc3RhdGljIGlubGluZSBib29sIHBhZ2VfZG1hX3Bpbm5lZChz
dHJ1Y3QgcGFnZSAqcGFnZSkKKworLi4uaXMgYSBwcmVyZXF1aXNpdGUgdG8gc29sdmluZyB0aGUg
bG9uZy1ydW5uaW5nIGd1cCtETUEgcHJvYmxlbS4KKworQW5vdGhlciB3YXkgb2YgdGhpbmtpbmcg
YWJvdXQgRk9MTF9HRVQsIEZPTExfUElOLCBhbmQgRk9MTF9MT05HVEVSTQorPT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQor
CitBbm90aGVyIHdheSBvZiB0aGlua2luZyBhYm91dCB0aGVzZSBmbGFncyBpcyBhcyBhIHByb2dy
ZXNzaW9uIG9mIHJlc3RyaWN0aW9uczoKK0ZPTExfR0VUIGlzIGZvciBzdHJ1Y3QgcGFnZSBtYW5p
cHVsYXRpb24sIHdpdGhvdXQgYWZmZWN0aW5nIHRoZSBkYXRhIHRoYXQgdGhlCitzdHJ1Y3QgcGFn
ZSByZWZlcnMgdG8uIEZPTExfUElOIGlzIGEgKnJlcGxhY2VtZW50KiBmb3IgRk9MTF9HRVQsIGFu
ZCBpcyBmb3IKK3Nob3J0IHRlcm0gcGlucyBvbiBwYWdlcyB3aG9zZSBkYXRhICp3aWxsKiBnZXQg
YWNjZXNzZWQuIEFzIHN1Y2gsIEZPTExfUElOIGlzCithICJtb3JlIHNldmVyZSIgZm9ybSBvZiBw
aW5uaW5nLiBBbmQgZmluYWxseSwgRk9MTF9MT05HVEVSTSBpcyBhbiBldmVuIG1vcmUKK3Jlc3Ry
aWN0aXZlIGNhc2UgdGhhdCBoYXMgRk9MTF9QSU4gYXMgYSBwcmVyZXF1aXNpdGU6IHRoaXMgaXMg
Zm9yIHBhZ2VzIHRoYXQKK3dpbGwgYmUgcGlubmVkIGxvbmd0ZXJtLCBhbmQgd2hvc2UgZGF0YSB3
aWxsIGJlIGFjY2Vzc2VkLgorCitVbml0IHRlc3RpbmcKKz09PT09PT09PT09PQorVGhpcyBmaWxl
OjoKKworIHRvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL3ZtL2d1cF9iZW5jaG1hcmsuYworCitoYXMg
dGhlIGZvbGxvd2luZyBuZXcgY2FsbHMgdG8gZXhlcmNpc2UgdGhlIG5ldyBwaW4qKCkgd3JhcHBl
ciBmdW5jdGlvbnM6CisKKyogUElOX0ZBU1RfQkVOQ0hNQVJLICguL2d1cF9iZW5jaG1hcmsgLWEp
CisqIFBJTl9MT05HVEVSTV9CRU5DSE1BUksgKC4vZ3VwX2JlbmNobWFyayAtYSkKKyogUElOX0JF
TkNITUFSSyAoLi9ndXBfYmVuY2htYXJrIC1hKQorCitZb3UgY2FuIG1vbml0b3IgaG93IG1hbnkg
dG90YWwgZG1hLXBpbm5lZCBwYWdlcyBoYXZlIGJlZW4gYWNxdWlyZWQgYW5kIHJlbGVhc2VkCitz
aW5jZSB0aGUgc3lzdGVtIHdhcyBib290ZWQsIHZpYSB0d28gbmV3IC9wcm9jL3Ztc3RhdCBlbnRy
aWVzOiA6OgorCisgICAgL3Byb2Mvdm1zdGF0L25yX2ZvbGxfcGluX3JlcXVlc3RlZAorICAgIC9w
cm9jL3Ztc3RhdC9ucl9mb2xsX3Bpbl9yZXF1ZXN0ZWQKKworVGhvc2UgYXJlIGJvdGggZ29pbmcg
dG8gc2hvdyB6ZXJvLCB1bmxlc3MgQ09ORklHX0RFQlVHX1ZNIGlzIHNldC4gVGhpcyBpcworYmVj
YXVzZSB0aGVyZSBpcyBhIG5vdGljZWFibGUgcGVyZm9ybWFuY2UgZHJvcCBpbiBwdXRfdXNlcl9w
YWdlKCksIHdoZW4gdGhleQorYXJlIGFjdGl2YXRlZC4KKworUmVmZXJlbmNlcworPT09PT09PT09
PQorCisqIGBTb21lIHNsb3cgcHJvZ3Jlc3Mgb24gZ2V0X3VzZXJfcGFnZXMoKSAoQXByIDIsIDIw
MTkpIDxodHRwczovL2x3bi5uZXQvQXJ0aWNsZXMvNzg0NTc0Lz5gXworKiBgRE1BIGFuZCBnZXRf
dXNlcl9wYWdlcygpIChMUEM6IERlYyAxMiwgMjAxOCkgPGh0dHBzOi8vbHduLm5ldC9BcnRpY2xl
cy83NzQ0MTEvPmBfCisqIGBUaGUgdHJvdWJsZSB3aXRoIGdldF91c2VyX3BhZ2VzKCkgKEFwciAz
MCwgMjAxOCkgPGh0dHBzOi8vbHduLm5ldC9BcnRpY2xlcy83NTMwMjcvPmBfCisKK0pvaG4gSHVi
YmFyZCwgT2N0b2JlciwgMjAxOQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9tbS5oIGIvaW5j
bHVkZS9saW51eC9tbS5oCmluZGV4IDk2MjI4Mzc2MTM5Yy4uMTFlMDA4NmQ2NGE0IDEwMDY0NAot
LS0gYS9pbmNsdWRlL2xpbnV4L21tLmgKKysrIGIvaW5jbHVkZS9saW51eC9tbS5oCkBAIC0xNTQy
LDkgKzE1NDIsMjMgQEAgbG9uZyBnZXRfdXNlcl9wYWdlc19yZW1vdGUoc3RydWN0IHRhc2tfc3Ry
dWN0ICp0c2ssIHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAogCQkJICAgIHVuc2lnbmVkIGxvbmcgc3Rh
cnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCiAJCQkgICAgdW5zaWduZWQgaW50IGd1cF9mbGFn
cywgc3RydWN0IHBhZ2UgKipwYWdlcywKIAkJCSAgICBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2
bWFzLCBpbnQgKmxvY2tlZCk7Citsb25nIHBpbl91c2VyX3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFz
a19zdHJ1Y3QgKnRzaywgc3RydWN0IG1tX3N0cnVjdCAqbW0sCisJCQkgICB1bnNpZ25lZCBsb25n
IHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAorCQkJICAgdW5zaWduZWQgaW50IGd1cF9m
bGFncywgc3RydWN0IHBhZ2UgKipwYWdlcywKKwkJCSAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAq
KnZtYXMsIGludCAqbG9ja2VkKTsKK2xvbmcgcGluX2xvbmd0ZXJtX3BhZ2VzX3JlbW90ZShzdHJ1
Y3QgdGFza19zdHJ1Y3QgKnRzaywgc3RydWN0IG1tX3N0cnVjdCAqbW0sCisJCQkgICAgICAgdW5z
aWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBucl9wYWdlcywKKwkJCSAgICAgICB1bnNp
Z25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkJICAgICAgIHN0cnVj
dCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMsIGludCAqbG9ja2VkKTsKIGxvbmcgZ2V0X3VzZXJfcGFn
ZXModW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBucl9wYWdlcywKIAkJCSAgICB1
bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAogCQkJICAgIHN0cnVj
dCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMpOworbG9uZyBwaW5fdXNlcl9wYWdlcyh1bnNpZ25lZCBs
b25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAorCQkgICAgdW5zaWduZWQgaW50IGd1
cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcywKKwkJICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVj
dCAqKnZtYXMpOworbG9uZyBwaW5fbG9uZ3Rlcm1fcGFnZXModW5zaWduZWQgbG9uZyBzdGFydCwg
dW5zaWduZWQgbG9uZyBucl9wYWdlcywKKwkJCXVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVj
dCBwYWdlICoqcGFnZXMsCisJCQlzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2bWFzKTsKIGxvbmcg
Z2V0X3VzZXJfcGFnZXNfbG9ja2VkKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcg
bnJfcGFnZXMsCiAJCSAgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBh
Z2VzLCBpbnQgKmxvY2tlZCk7CiBsb25nIGdldF91c2VyX3BhZ2VzX3VubG9ja2VkKHVuc2lnbmVk
IGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCkBAIC0xNTUyLDYgKzE1NjYsMTAg
QEAgbG9uZyBnZXRfdXNlcl9wYWdlc191bmxvY2tlZCh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNp
Z25lZCBsb25nIG5yX3BhZ2VzLAogCiBpbnQgZ2V0X3VzZXJfcGFnZXNfZmFzdCh1bnNpZ25lZCBs
b25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCiAJCQl1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1
Y3QgcGFnZSAqKnBhZ2VzKTsKK2ludCBwaW5fdXNlcl9wYWdlc19mYXN0KHVuc2lnbmVkIGxvbmcg
c3RhcnQsIGludCBucl9wYWdlcywKKwkJCXVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBw
YWdlICoqcGFnZXMpOworaW50IHBpbl9sb25ndGVybV9wYWdlc19mYXN0KHVuc2lnbmVkIGxvbmcg
c3RhcnQsIGludCBucl9wYWdlcywKKwkJCSAgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1
Y3QgcGFnZSAqKnBhZ2VzKTsKIAogaW50IGFjY291bnRfbG9ja2VkX3ZtKHN0cnVjdCBtbV9zdHJ1
Y3QgKm1tLCB1bnNpZ25lZCBsb25nIHBhZ2VzLCBib29sIGluYyk7CiBpbnQgX19hY2NvdW50X2xv
Y2tlZF92bShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBwYWdlcywgYm9vbCBp
bmMsCkBAIC0yNjEwLDEzICsyNjI4LDE1IEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfcGFnZShzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRyZXNzLAogI2RlZmluZSBG
T0xMX0FOT04JMHg4MDAwCS8qIGRvbid0IGRvIGZpbGUgbWFwcGluZ3MgKi8KICNkZWZpbmUgRk9M
TF9MT05HVEVSTQkweDEwMDAwCS8qIG1hcHBpbmcgbGlmZXRpbWUgaXMgaW5kZWZpbml0ZTogc2Vl
IGJlbG93ICovCiAjZGVmaW5lIEZPTExfU1BMSVRfUE1ECTB4MjAwMDAJLyogc3BsaXQgaHVnZSBw
bWQgYmVmb3JlIHJldHVybmluZyAqLworI2RlZmluZSBGT0xMX1BJTgkweDQwMDAwCS8qIHBhZ2Vz
IG11c3QgYmUgcmVsZWFzZWQgdmlhIHB1dF91c2VyX3BhZ2UoKSAqLwogCiAvKgotICogTk9URSBv
biBGT0xMX0xPTkdURVJNOgorICogRk9MTF9QSU4gYW5kIEZPTExfTE9OR1RFUk0gbWF5IGJlIHVz
ZWQgaW4gdmFyaW91cyBjb21iaW5hdGlvbnMgd2l0aCBlYWNoCisgKiBvdGhlci4gSGVyZSBpcyB3
aGF0IHRoZXkgbWVhbiwgYW5kIGhvdyB0byB1c2UgdGhlbToKICAqCiAgKiBGT0xMX0xPTkdURVJN
IGluZGljYXRlcyB0aGF0IHRoZSBwYWdlIHdpbGwgYmUgaGVsZCBmb3IgYW4gaW5kZWZpbml0ZSB0
aW1lCi0gKiBwZXJpb2QgX29mdGVuXyB1bmRlciB1c2Vyc3BhY2UgY29udHJvbC4gIFRoaXMgaXMg
Y29udHJhc3RlZCB3aXRoCi0gKiBpb3ZfaXRlcl9nZXRfcGFnZXMoKSB3aGVyZSB1c2FnZXMgd2hp
Y2ggYXJlIHRyYW5zaWVudC4KKyAqIHBlcmlvZCBfb2Z0ZW5fIHVuZGVyIHVzZXJzcGFjZSBjb250
cm9sLiAgVGhpcyBpcyBpbiBjb250cmFzdCB0bworICogaW92X2l0ZXJfZ2V0X3BhZ2VzKCksIHdo
ZXJlIHVzYWdlcyB3aGljaCBhcmUgdHJhbnNpZW50LgogICoKICAqIEZJWE1FOiBGb3IgcGFnZXMg
d2hpY2ggYXJlIHBhcnQgb2YgYSBmaWxlc3lzdGVtLCBtYXBwaW5ncyBhcmUgc3ViamVjdCB0byB0
aGUKICAqIGxpZmV0aW1lIGVuZm9yY2VkIGJ5IHRoZSBmaWxlc3lzdGVtIGFuZCB3ZSBuZWVkIGd1
YXJhbnRlZXMgdGhhdCBsb25ndGVybQpAQCAtMjYzMSwxMSArMjY1MSw0MSBAQCBzdHJ1Y3QgcGFn
ZSAqZm9sbG93X3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcg
YWRkcmVzcywKICAqIEN1cnJlbnRseSBvbmx5IGdldF91c2VyX3BhZ2VzKCkgYW5kIGdldF91c2Vy
X3BhZ2VzX2Zhc3QoKSBzdXBwb3J0IHRoaXMgZmxhZwogICogYW5kIGNhbGxzIHRvIGdldF91c2Vy
X3BhZ2VzX1t1bl1sb2NrZWQgYXJlIHNwZWNpZmljYWxseSBub3QgYWxsb3dlZC4gIFRoaXMKICAq
IGlzIGR1ZSB0byBhbiBpbmNvbXBhdGliaWxpdHkgd2l0aCB0aGUgRlMgREFYIGNoZWNrIGFuZAot
ICogRkFVTFRfRkxBR19BTExPV19SRVRSWQorICogRkFVTFRfRkxBR19BTExPV19SRVRSWS4KICAq
Ci0gKiBJbiB0aGUgQ01BIGNhc2U6IGxvbmd0ZXJtIHBpbnMgaW4gYSBDTUEgcmVnaW9uIHdvdWxk
IHVubmVjZXNzYXJpbHkgZnJhZ21lbnQKLSAqIHRoYXQgcmVnaW9uLiAgQW5kIHNvIENNQSBhdHRl
bXB0cyB0byBtaWdyYXRlIHRoZSBwYWdlIGJlZm9yZSBwaW5uaW5nIHdoZW4KKyAqIEluIHRoZSBD
TUEgY2FzZTogbG9uZyB0ZXJtIHBpbnMgaW4gYSBDTUEgcmVnaW9uIHdvdWxkIHVubmVjZXNzYXJp
bHkgZnJhZ21lbnQKKyAqIHRoYXQgcmVnaW9uLiAgQW5kIHNvLCBDTUEgYXR0ZW1wdHMgdG8gbWln
cmF0ZSB0aGUgcGFnZSBiZWZvcmUgcGlubmluZywgd2hlbgogICogRk9MTF9MT05HVEVSTSBpcyBz
cGVjaWZpZWQuCisgKgorICogRk9MTF9QSU4gaW5kaWNhdGVzIHRoYXQgYSBzcGVjaWFsIGtpbmQg
b2YgdHJhY2tpbmcgKG5vdCBqdXN0IHBhZ2UtPl9yZWZjb3VudCwKKyAqIGJ1dCBhbiBhZGRpdGlv
bmFsIHBpbiBjb3VudGluZyBzeXN0ZW0pIHdpbGwgYmUgaW52b2tlZC4gVGhpcyBpcyBpbnRlbmRl
ZCBmb3IKKyAqIGFueXRoaW5nIHRoYXQgZ2V0cyBhIHBhZ2UgcmVmZXJlbmNlIGFuZCB0aGVuIHRv
dWNoZXMgcGFnZSBkYXRhIChmb3IgZXhhbXBsZSwKKyAqIERpcmVjdCBJTykuIFRoaXMgbGV0cyB0
aGUgZmlsZXN5c3RlbSBrbm93IHRoYXQgc29tZSBub24tZmlsZS1zeXN0ZW0gZW50aXR5IGlzCisg
KiBwb3RlbnRpYWxseSBjaGFuZ2luZyB0aGUgcGFnZXMnIGRhdGEuIEluIGNvbnRyYXN0IHRvIEZP
TExfR0VUICh3aG9zZSBwYWdlcworICogYXJlIHJlbGVhc2VkIHZpYSBwdXRfcGFnZSgpKSwgRk9M
TF9QSU4gcGFnZXMgbXVzdCBiZSByZWxlYXNlZCwgdWx0aW1hdGVseSwgYnkKKyAqIGEgY2FsbCB0
byBwdXRfdXNlcl9wYWdlKCkuCisgKgorICogRk9MTF9QSU4gaXMgc2ltaWxhciB0byBGT0xMX0dF
VDogYm90aCBvZiB0aGVzZSBwaW4gcGFnZXMuIFRoZXkgdXNlIGRpZmZlcmVudAorICogYW5kIHNl
cGFyYXRlIHJlZmNvdW50aW5nIG1lY2hhbmlzbXMsIGhvd2V2ZXIsIGFuZCB0aGF0IG1lYW5zIHRo
YXQgZWFjaCBoYXMKKyAqIGl0cyBvd24gYWNxdWlyZSBhbmQgcmVsZWFzZSBtZWNoYW5pc21zOgor
ICoKKyAqICAgICBGT0xMX0dFVDogZ2V0X3VzZXJfcGFnZXMqKCkgdG8gYWNxdWlyZSwgYW5kIHB1
dF9wYWdlKCkgdG8gcmVsZWFzZS4KKyAqCisgKiAgICAgRk9MTF9QSU46IHBpbl91c2VyX3BhZ2Vz
KigpIG9yIHBpbl9sb25ndGVybV9wYWdlcyooKSB0byBhY3F1aXJlLCBhbmQKKyAqICAgICAgICAg
ICAgICAgcHV0X3VzZXJfcGFnZXMgdG8gcmVsZWFzZS4KKyAqCisgKiBGT0xMX1BJTiBhbmQgRk9M
TF9HRVQgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZSBmb3IgYSBnaXZlbiBmdW5jdGlvbiBjYWxsLgor
ICogKFRoZSB1bmRlcmx5aW5nIHBhZ2VzIG1heSBleHBlcmllbmNlIGJvdGggRk9MTF9HRVQtYmFz
ZWQgYW5kIEZPTExfUElOLWJhc2VkCisgKiBjYWxscyBhcHBsaWVkIHRvIHRoZW0sIGFuZCB0aGF0
J3MgcGVyZmVjdGx5IE9LLiBUaGlzIGlzIGEgY29uc3RyYWludCBvbiB0aGUKKyAqIGNhbGxlcnMs
IG5vdCBvbiB0aGUgcGFnZXMuKQorICoKKyAqIEZPTExfUElOIGFuZCBGT0xMX0xPTkdURVJNIHNo
b3VsZCBiZSBzZXQgaW50ZXJuYWxseSBieSB0aGUgcGluX3VzZXJfcGFnZSooKQorICogYW5kIHBp
bl9sb25ndGVybV8qKCkgQVBJcywgbmV2ZXIgZGlyZWN0bHkgYnkgdGhlIGNhbGxlci4gVGhhdCdz
IGluIG9yZGVyIHRvCisgKiBoZWxwIGF2b2lkIG1pc21hdGNoZXMgd2hlbiByZWxlYXNpbmcgcGFn
ZXM6IGdldF91c2VyX3BhZ2VzKigpIHBhZ2VzIG11c3QgYmUKKyAqIHJlbGVhc2VkIHZpYSBwdXRf
cGFnZSgpLCB3aGlsZSBwaW5fdXNlcl9wYWdlcyooKSBwYWdlcyBtdXN0IGJlIHJlbGVhc2VkIHZp
YQorICogcHV0X3VzZXJfcGFnZSgpLgorICoKKyAqIFBsZWFzZSBzZWUgRG9jdW1lbnRhdGlvbi92
bS9waW5fdXNlcl9wYWdlcy5yc3QgZm9yIG1vcmUgaW5mb3JtYXRpb24uCiAgKi8KIAogc3RhdGlj
IGlubGluZSBpbnQgdm1fZmF1bHRfdG9fZXJybm8odm1fZmF1bHRfdCB2bV9mYXVsdCwgaW50IGZv
bGxfZmxhZ3MpCmRpZmYgLS1naXQgYS9tbS9ndXAuYyBiL21tL2d1cC5jCmluZGV4IGNmZTZkYzVm
YzM0My4uZWEzMTgxMGRhODI4IDEwMDY0NAotLS0gYS9tbS9ndXAuYworKysgYi9tbS9ndXAuYwpA
QCAtMTk0LDYgKzE5NCwxMCBAQCBzdGF0aWMgc3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlX3B0ZShz
dHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIAlzcGlubG9ja190ICpwdGw7CiAJcHRlX3QgKnB0
ZXAsIHB0ZTsKIAorCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVz
aXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoKGZsYWdzICYgKEZPTExfUElOIHwgRk9MTF9HRVQp
KSA9PQorCQkJIChGT0xMX1BJTiB8IEZPTExfR0VUKSkpCisJCXJldHVybiBFUlJfUFRSKC1FSU5W
QUwpOwogcmV0cnk6CiAJaWYgKHVubGlrZWx5KHBtZF9iYWQoKnBtZCkpKQogCQlyZXR1cm4gbm9f
cGFnZV90YWJsZSh2bWEsIGZsYWdzKTsKQEAgLTgwNSw3ICs4MDksNyBAQCBzdGF0aWMgbG9uZyBf
X2dldF91c2VyX3BhZ2VzKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLCBzdHJ1Y3QgbW1fc3RydWN0
ICptbSwKIAogCXN0YXJ0ID0gdW50YWdnZWRfYWRkcihzdGFydCk7CiAKLQlWTV9CVUdfT04oISFw
YWdlcyAhPSAhIShndXBfZmxhZ3MgJiBGT0xMX0dFVCkpOworCVZNX0JVR19PTighIXBhZ2VzICE9
ICEhKGd1cF9mbGFncyAmIChGT0xMX0dFVCB8IEZPTExfUElOKSkpOwogCiAJLyoKIAkgKiBJZiBG
T0xMX0ZPUkNFIGlzIHNldCB0aGVuIGRvIG5vdCBmb3JjZSBhIGZ1bGwgZmF1bHQgYXMgdGhlIGhp
bnRpbmcKQEAgLTEwMjksNyArMTAzMywxNiBAQCBzdGF0aWMgX19hbHdheXNfaW5saW5lIGxvbmcg
X19nZXRfdXNlcl9wYWdlc19sb2NrZWQoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ssCiAJCUJVR19P
TigqbG9ja2VkICE9IDEpOwogCX0KIAotCWlmIChwYWdlcykKKwkvKgorCSAqIEZPTExfUElOIGFu
ZCBGT0xMX0dFVCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiBUcmFkaXRpb25hbCBiZWhhdmlvcgor
CSAqIGlzIHRvIHNldCBGT0xMX0dFVCBpZiB0aGUgY2FsbGVyIHdhbnRzIHBhZ2VzW10gZmlsbGVk
IGluIChidXQgaGFzCisJICogY2FyZWxlc3NseSBmYWlsZWQgdG8gc3BlY2lmeSBGT0xMX0dFVCks
IHNvIGtlZXAgZG9pbmcgdGhhdCwgYnV0IG9ubHkKKwkgKiBmb3IgRk9MTF9HRVQsIG5vdCBmb3Ig
dGhlIG5ld2VyIEZPTExfUElOLgorCSAqCisJICogRk9MTF9QSU4gYWx3YXlzIGV4cGVjdHMgcGFn
ZXMgdG8gYmUgbm9uLW51bGwsIGJ1dCBubyBuZWVkIHRvIGFzc2VydAorCSAqIHRoYXQgaGVyZSwg
YXMgYW55IGZhaWx1cmVzIHdpbGwgYmUgb2J2aW91cyBlbm91Z2guCisJICovCisJaWYgKHBhZ2Vz
ICYmICEoZmxhZ3MgJiBGT0xMX1BJTikpCiAJCWZsYWdzIHw9IEZPTExfR0VUOwogCiAJcGFnZXNf
ZG9uZSA9IDA7CkBAIC0xMTY2LDYgKzExNzksMTQgQEAgbG9uZyBnZXRfdXNlcl9wYWdlc19yZW1v
dGUoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ssIHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAogCQl1bnNp
Z25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAogCQlzdHJ1Y3Qgdm1fYXJl
YV9zdHJ1Y3QgKip2bWFzLCBpbnQgKmxvY2tlZCkKIHsKKwkvKgorCSAqIEZPTExfUElOIG11c3Qg
b25seSBiZSBzZXQgaW50ZXJuYWxseSBieSB0aGUgcGluX3VzZXJfcGFnZSooKSBhbmQKKwkgKiBw
aW5fbG9uZ3Rlcm1fKigpIEFQSXMsIG5ldmVyIGRpcmVjdGx5IGJ5IHRoZSBjYWxsZXIsIHNvIGVu
Zm9yY2UgdGhhdAorCSAqIHdpdGggYW4gYXNzZXJ0aW9uOgorCSAqLworCWlmIChXQVJOX09OX09O
Q0UoZ3VwX2ZsYWdzICYgRk9MTF9QSU4pKQorCQlyZXR1cm4gLUVJTlZBTDsKKwogCS8qCiAJICog
Q3VycmVudCBGT0xMX0xPTkdURVJNIGJlaGF2aW9yIGlzIGluY29tcGF0aWJsZSB3aXRoCiAJICog
RkFVTFRfRkxBR19BTExPV19SRVRSWSBiZWNhdXNlIG9mIHRoZSBGUyBEQVggY2hlY2sgcmVxdWly
ZW1lbnQgb24KQEAgLTE2MjYsNiArMTY0NywxNCBAQCBsb25nIGdldF91c2VyX3BhZ2VzKHVuc2ln
bmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCiAJCXVuc2lnbmVkIGludCBn
dXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMsCiAJCXN0cnVjdCB2bV9hcmVhX3N0cnVjdCAq
KnZtYXMpCiB7CisJLyoKKwkgKiBGT0xMX1BJTiBtdXN0IG9ubHkgYmUgc2V0IGludGVybmFsbHkg
YnkgdGhlIHBpbl91c2VyX3BhZ2UqKCkgYW5kCisJICogcGluX2xvbmd0ZXJtXyooKSBBUElzLCBu
ZXZlciBkaXJlY3RseSBieSB0aGUgY2FsbGVyLCBzbyBlbmZvcmNlIHRoYXQKKwkgKiB3aXRoIGFu
IGFzc2VydGlvbjoKKwkgKi8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfUElO
KSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKIAlyZXR1cm4gX19ndXBfbG9uZ3Rlcm1fbG9ja2VkKGN1
cnJlbnQsIGN1cnJlbnQtPm1tLCBzdGFydCwgbnJfcGFnZXMsCiAJCQkJICAgICBwYWdlcywgdm1h
cywgZ3VwX2ZsYWdzIHwgRk9MTF9UT1VDSCk7CiB9CkBAIC0yMzc3LDI5ICsyNDA2LDE0IEBAIHN0
YXRpYyBpbnQgX19ndXBfbG9uZ3Rlcm1fdW5sb2NrZWQodW5zaWduZWQgbG9uZyBzdGFydCwgaW50
IG5yX3BhZ2VzLAogCXJldHVybiByZXQ7CiB9CiAKLS8qKgotICogZ2V0X3VzZXJfcGFnZXNfZmFz
dCgpIC0gcGluIHVzZXIgcGFnZXMgaW4gbWVtb3J5Ci0gKiBAc3RhcnQ6CXN0YXJ0aW5nIHVzZXIg
YWRkcmVzcwotICogQG5yX3BhZ2VzOgludW1iZXIgb2YgcGFnZXMgZnJvbSBzdGFydCB0byBwaW4K
LSAqIEBndXBfZmxhZ3M6CWZsYWdzIG1vZGlmeWluZyBwaW4gYmVoYXZpb3VyCi0gKiBAcGFnZXM6
CWFycmF5IHRoYXQgcmVjZWl2ZXMgcG9pbnRlcnMgdG8gdGhlIHBhZ2VzIHBpbm5lZC4KLSAqCQlT
aG91bGQgYmUgYXQgbGVhc3QgbnJfcGFnZXMgbG9uZy4KLSAqCi0gKiBBdHRlbXB0IHRvIHBpbiB1
c2VyIHBhZ2VzIGluIG1lbW9yeSB3aXRob3V0IHRha2luZyBtbS0+bW1hcF9zZW0uCi0gKiBJZiBu
b3Qgc3VjY2Vzc2Z1bCwgaXQgd2lsbCBmYWxsIGJhY2sgdG8gdGFraW5nIHRoZSBsb2NrIGFuZAot
ICogY2FsbGluZyBnZXRfdXNlcl9wYWdlcygpLgotICoKLSAqIFJldHVybnMgbnVtYmVyIG9mIHBh
Z2VzIHBpbm5lZC4gVGhpcyBtYXkgYmUgZmV3ZXIgdGhhbiB0aGUgbnVtYmVyCi0gKiByZXF1ZXN0
ZWQuIElmIG5yX3BhZ2VzIGlzIDAgb3IgbmVnYXRpdmUsIHJldHVybnMgMC4gSWYgbm8gcGFnZXMK
LSAqIHdlcmUgcGlubmVkLCByZXR1cm5zIC1lcnJuby4KLSAqLwotaW50IGdldF91c2VyX3BhZ2Vz
X2Zhc3QodW5zaWduZWQgbG9uZyBzdGFydCwgaW50IG5yX3BhZ2VzLAotCQkJdW5zaWduZWQgaW50
IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcykKK3N0YXRpYyBpbnQgaW50ZXJuYWxfZ2V0
X3VzZXJfcGFnZXNfZmFzdCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCisJCQkJ
CXVuc2lnbmVkIGludCBndXBfZmxhZ3MsCisJCQkJCXN0cnVjdCBwYWdlICoqcGFnZXMpCiB7CiAJ
dW5zaWduZWQgbG9uZyBhZGRyLCBsZW4sIGVuZDsKIAlpbnQgbnIgPSAwLCByZXQgPSAwOwogCi0J
aWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiB+KEZPTExfV1JJVEUgfCBGT0xMX0xPTkdURVJN
KSkpCisJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiB+KEZPTExfV1JJVEUgfCBGT0xMX0xP
TkdURVJNIHwgRk9MTF9QSU4pKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKIAlzdGFydCA9IHVudGFn
Z2VkX2FkZHIoc3RhcnQpICYgUEFHRV9NQVNLOwpAQCAtMjQzOSw0ICsyNDUzLDIwOCBAQCBpbnQg
Z2V0X3VzZXJfcGFnZXNfZmFzdCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCiAK
IAlyZXR1cm4gcmV0OwogfQorCisvKioKKyAqIGdldF91c2VyX3BhZ2VzX2Zhc3QoKSAtIHBpbiB1
c2VyIHBhZ2VzIGluIG1lbW9yeQorICogQHN0YXJ0OglzdGFydGluZyB1c2VyIGFkZHJlc3MKKyAq
IEBucl9wYWdlczoJbnVtYmVyIG9mIHBhZ2VzIGZyb20gc3RhcnQgdG8gcGluCisgKiBAZ3VwX2Zs
YWdzOglmbGFncyBtb2RpZnlpbmcgcGluIGJlaGF2aW91cgorICogQHBhZ2VzOglhcnJheSB0aGF0
IHJlY2VpdmVzIHBvaW50ZXJzIHRvIHRoZSBwYWdlcyBwaW5uZWQuCisgKgkJU2hvdWxkIGJlIGF0
IGxlYXN0IG5yX3BhZ2VzIGxvbmcuCisgKgorICogQXR0ZW1wdCB0byBwaW4gdXNlciBwYWdlcyBp
biBtZW1vcnkgd2l0aG91dCB0YWtpbmcgbW0tPm1tYXBfc2VtLgorICogSWYgbm90IHN1Y2Nlc3Nm
dWwsIGl0IHdpbGwgZmFsbCBiYWNrIHRvIHRha2luZyB0aGUgbG9jayBhbmQKKyAqIGNhbGxpbmcg
Z2V0X3VzZXJfcGFnZXMoKS4KKyAqCisgKiBSZXR1cm5zIG51bWJlciBvZiBwYWdlcyBwaW5uZWQu
IFRoaXMgbWF5IGJlIGZld2VyIHRoYW4gdGhlIG51bWJlciByZXF1ZXN0ZWQuCisgKiBJZiBucl9w
YWdlcyBpcyAwIG9yIG5lZ2F0aXZlLCByZXR1cm5zIDAuIElmIG5vIHBhZ2VzIHdlcmUgcGlubmVk
LCByZXR1cm5zCisgKiAtZXJybm8uCisgKi8KK2ludCBnZXRfdXNlcl9wYWdlc19mYXN0KHVuc2ln
bmVkIGxvbmcgc3RhcnQsIGludCBucl9wYWdlcywKKwkJCXVuc2lnbmVkIGludCBndXBfZmxhZ3Ms
IHN0cnVjdCBwYWdlICoqcGFnZXMpCit7CisJLyoKKwkgKiBGT0xMX1BJTiBtdXN0IG9ubHkgYmUg
c2V0IGludGVybmFsbHkgYnkgdGhlIHBpbl91c2VyX3BhZ2UqKCkgYW5kCisJICogcGluX2xvbmd0
ZXJtXyooKSBBUElzLCBuZXZlciBkaXJlY3RseSBieSB0aGUgY2FsbGVyLCBzbyBlbmZvcmNlIHRo
YXQ6CisJICovCisJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX1BJTikpCisJCXJl
dHVybiAtRUlOVkFMOworCisJcmV0dXJuIGludGVybmFsX2dldF91c2VyX3BhZ2VzX2Zhc3Qoc3Rh
cnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3MsIHBhZ2VzKTsKK30KIEVYUE9SVF9TWU1CT0xfR1BMKGdl
dF91c2VyX3BhZ2VzX2Zhc3QpOworCisvKioKKyAqIHBpbl91c2VyX3BhZ2VzX2Zhc3QoKSAtIHBp
biB1c2VyIHBhZ2VzIGluIG1lbW9yeSB3aXRob3V0IHRha2luZyBsb2NrcworICoKKyAqIE5lYXJs
eSB0aGUgc2FtZSBhcyBnZXRfdXNlcl9wYWdlc19mYXN0KCksIGV4Y2VwdCB0aGF0IEZPTExfUElO
IGlzIHNldC4gU2VlCisgKiBnZXRfdXNlcl9wYWdlc19mYXN0KCkgZm9yIGRvY3VtZW50YXRpb24g
b24gdGhlIGZ1bmN0aW9uIGFyZ3VtZW50cywgYmVjYXVzZQorICogdGhlIGFyZ3VtZW50cyBoZXJl
IGFyZSBpZGVudGljYWwuCisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVz
dCBiZSByZWxlYXNlZCB2aWEgcHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVu
dGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBmb3IgZnVydGhlciBkZXRhaWxzLgorICoKKyAq
IFRoaXMgaXMgaW50ZW5kZWQgZm9yIENhc2UgMSAoRElPKSBpbiBEb2N1bWVudGF0aW9uL3ZtL3Bp
bl91c2VyX3BhZ2VzLnJzdC4gSXQKKyAqIGlzIE5PVCBpbnRlbmRlZCBmb3IgQ2FzZSAyIChSRE1B
OiBsb25nLXRlcm0gcGlucykuCisgKi8KK2ludCBwaW5fdXNlcl9wYWdlc19mYXN0KHVuc2lnbmVk
IGxvbmcgc3RhcnQsIGludCBucl9wYWdlcywKKwkJCXVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0
cnVjdCBwYWdlICoqcGFnZXMpCit7CisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1
YWxseSBleGNsdXNpdmUuICovCisJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX0dF
VCkpCisJCXJldHVybiAtRUlOVkFMOworCisJZ3VwX2ZsYWdzIHw9IEZPTExfUElOOworCXJldHVy
biBpbnRlcm5hbF9nZXRfdXNlcl9wYWdlc19mYXN0KHN0YXJ0LCBucl9wYWdlcywgZ3VwX2ZsYWdz
LCBwYWdlcyk7Cit9CitFWFBPUlRfU1lNQk9MX0dQTChwaW5fdXNlcl9wYWdlc19mYXN0KTsKKwor
LyoqCisgKiBwaW5fbG9uZ3Rlcm1fcGFnZXNfZmFzdCgpIC0gcGluIHVzZXIgcGFnZXMgaW4gbWVt
b3J5IHdpdGhvdXQgdGFraW5nIGxvY2tzCisgKgorICogTmVhcmx5IHRoZSBzYW1lIGFzIGdldF91
c2VyX3BhZ2VzX2Zhc3QoKSwgZXhjZXB0IHRoYXQgRk9MTF9QSU4gYW5kCisgKiBGT0xMX0xPTkdU
RVJNIGFyZSBzZXQuIFNlZSBnZXRfdXNlcl9wYWdlc19mYXN0KCkgZm9yIGRvY3VtZW50YXRpb24g
b24gdGhlCisgKiBmdW5jdGlvbiBhcmd1bWVudHMsIGJlY2F1c2UgdGhlIGFyZ3VtZW50cyBoZXJl
IGFyZSBpZGVudGljYWwuCisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVz
dCBiZSByZWxlYXNlZCB2aWEgcHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVu
dGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBmb3IgZnVydGhlciBkZXRhaWxzLgorICoKKyAq
IEZPTExfTE9OR1RFUk0gbWVhbnMgdGhhdCB0aGUgcGFnZXMgYXJlIGJlaW5nIHBpbm5lZCBmb3Ig
ImxvbmcgdGVybSIgdXNlLAorICogdHlwaWNhbGx5IGJ5IGEgbm9uLUNQVSBkZXZpY2UsIGFuZCB3
ZSBjYW5ub3QgYmUgc3VyZSB0aGF0IHdhaXRpbmcgZm9yIGEKKyAqIHBpbm5lZCBwYWdlIHRvIGJl
Y29tZSB1bnBpbiB3aWxsIGJlIGVmZmVjdGl2ZS4KKyAqCisgKiBUaGlzIGlzIGludGVuZGVkIGZv
ciBDYXNlIDIgKFJETUE6IGxvbmctdGVybSBwaW5zKSBvZiB0aGUgRk9MTF9QSU4KKyAqIGRvY3Vt
ZW50YXRpb24uCisgKi8KK2ludCBwaW5fbG9uZ3Rlcm1fcGFnZXNfZmFzdCh1bnNpZ25lZCBsb25n
IHN0YXJ0LCBpbnQgbnJfcGFnZXMsCisJCQkgICAgdW5zaWduZWQgaW50IGd1cF9mbGFncywgc3Ry
dWN0IHBhZ2UgKipwYWdlcykKK3sKKwkvKiBGT0xMX0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVh
bGx5IGV4Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfR0VU
KSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlndXBfZmxhZ3MgfD0gKEZPTExfUElOIHwgRk9MTF9M
T05HVEVSTSk7CisJcmV0dXJuIGludGVybmFsX2dldF91c2VyX3BhZ2VzX2Zhc3Qoc3RhcnQsIG5y
X3BhZ2VzLCBndXBfZmxhZ3MsIHBhZ2VzKTsKK30KK0VYUE9SVF9TWU1CT0xfR1BMKHBpbl9sb25n
dGVybV9wYWdlc19mYXN0KTsKKworLyoqCisgKiBwaW5fdXNlcl9wYWdlc19yZW1vdGUoKSAtIHBp
biBwYWdlcyBvZiBhIHJlbW90ZSBwcm9jZXNzICh0YXNrICE9IGN1cnJlbnQpCisgKgorICogTmVh
cmx5IHRoZSBzYW1lIGFzIGdldF91c2VyX3BhZ2VzX3JlbW90ZSgpLCBleGNlcHQgdGhhdCBGT0xM
X1BJTiBpcyBzZXQuIFNlZQorICogZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKCkgZm9yIGRvY3VtZW50
YXRpb24gb24gdGhlIGZ1bmN0aW9uIGFyZ3VtZW50cywgYmVjYXVzZQorICogdGhlIGFyZ3VtZW50
cyBoZXJlIGFyZSBpZGVudGljYWwuCisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFn
ZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEgcHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBE
b2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBmb3IgZGV0YWlscy4KKyAqCisgKiBU
aGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDEgKERJTykgaW4gRG9jdW1lbnRhdGlvbi92bS9waW5f
dXNlcl9wYWdlcy5yc3QuIEl0CisgKiBpcyBOT1QgaW50ZW5kZWQgZm9yIENhc2UgMiAoUkRNQTog
bG9uZy10ZXJtIHBpbnMpLgorICovCitsb25nIHBpbl91c2VyX3BhZ2VzX3JlbW90ZShzdHJ1Y3Qg
dGFza19zdHJ1Y3QgKnRzaywgc3RydWN0IG1tX3N0cnVjdCAqbW0sCisJCQkgICB1bnNpZ25lZCBs
b25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAorCQkJICAgdW5zaWduZWQgaW50IGd1
cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcywKKwkJCSAgIHN0cnVjdCB2bV9hcmVhX3N0cnVj
dCAqKnZtYXMsIGludCAqbG9ja2VkKQoreworCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUg
bXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9M
TF9HRVQpKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCWd1cF9mbGFncyB8PSBGT0xMX1RPVUNIIHwg
Rk9MTF9SRU1PVEUgfCBGT0xMX1BJTjsKKworCXJldHVybiBfX2dldF91c2VyX3BhZ2VzX2xvY2tl
ZCh0c2ssIG1tLCBzdGFydCwgbnJfcGFnZXMsIHBhZ2VzLCB2bWFzLAorCQkJCSAgICAgICBsb2Nr
ZWQsIGd1cF9mbGFncyk7Cit9CitFWFBPUlRfU1lNQk9MKHBpbl91c2VyX3BhZ2VzX3JlbW90ZSk7
CisKKy8qKgorICogcGluX2xvbmd0ZXJtX3BhZ2VzX3JlbW90ZSgpIC0gcGluIHBhZ2VzIG9mIGEg
cmVtb3RlIHByb2Nlc3MgKHRhc2sgIT0gY3VycmVudCkKKyAqCisgKiBOZWFybHkgdGhlIHNhbWUg
YXMgZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKCksIGJ1dCBub3RlIHRoYXQgRk9MTF9UT1VDSCBpcyBu
b3QKKyAqIHNldCwgYW5kIEZPTExfUElOIGFuZCBGT0xMX0xPTkdURVJNIGFyZSBzZXQuIFNlZSBn
ZXRfdXNlcl9wYWdlc19yZW1vdGUoKSBmb3IKKyAqIGRvY3VtZW50YXRpb24gb24gdGhlIGZ1bmN0
aW9uIGFyZ3VtZW50cywgYmVjYXVzZSB0aGUgYXJndW1lbnRzIGhlcmUgYXJlCisgKiBpZGVudGlj
YWwuCisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNl
ZCB2aWEgcHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bp
bl91c2VyX3BhZ2VzLnJzdCBmb3IgZnVydGhlciBkZXRhaWxzLgorICoKKyAqIEZPTExfTE9OR1RF
Uk0gbWVhbnMgdGhhdCB0aGUgcGFnZXMgYXJlIGJlaW5nIHBpbm5lZCBmb3IgImxvbmcgdGVybSIg
dXNlLAorICogdHlwaWNhbGx5IGJ5IGEgbm9uLUNQVSBkZXZpY2UsIGFuZCB3ZSBjYW5ub3QgYmUg
c3VyZSB0aGF0IHdhaXRpbmcgZm9yIGEKKyAqIHBpbm5lZCBwYWdlIHRvIGJlY29tZSB1bnBpbiB3
aWxsIGJlIGVmZmVjdGl2ZS4KKyAqCisgKiBUaGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDIgKFJE
TUE6IGxvbmctdGVybSBwaW5zKSBpbgorICogRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdl
cy5yc3QuCisgKi8KK2xvbmcgcGluX2xvbmd0ZXJtX3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFza19z
dHJ1Y3QgKnRzaywgc3RydWN0IG1tX3N0cnVjdCAqbW0sCisJCQkgICAgICAgdW5zaWduZWQgbG9u
ZyBzdGFydCwgdW5zaWduZWQgbG9uZyBucl9wYWdlcywKKwkJCSAgICAgICB1bnNpZ25lZCBpbnQg
Z3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkJICAgICAgIHN0cnVjdCB2bV9hcmVh
X3N0cnVjdCAqKnZtYXMsIGludCAqbG9ja2VkKQoreworCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJ
TiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoZ3VwX2ZsYWdz
ICYgRk9MTF9HRVQpKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCWd1cF9mbGFncyB8PSBGT0xMX0xP
TkdURVJNIHwgRk9MTF9SRU1PVEUgfCBGT0xMX1BJTjsKKworCXJldHVybiBfX2dldF91c2VyX3Bh
Z2VzX2xvY2tlZCh0c2ssIG1tLCBzdGFydCwgbnJfcGFnZXMsIHBhZ2VzLCB2bWFzLAorCQkJCSAg
ICAgICBsb2NrZWQsIGd1cF9mbGFncyk7Cit9CitFWFBPUlRfU1lNQk9MKHBpbl9sb25ndGVybV9w
YWdlc19yZW1vdGUpOworCisvKioKKyAqIHBpbl91c2VyX3BhZ2VzKCkgLSBwaW4gdXNlciBwYWdl
cyBpbiBtZW1vcnkgZm9yIHVzZSBieSBvdGhlciBkZXZpY2VzCisgKgorICogTmVhcmx5IHRoZSBz
YW1lIGFzIGdldF91c2VyX3BhZ2VzKCksIGV4Y2VwdCB0aGF0IEZPTExfVE9VQ0ggaXMgbm90IHNl
dCwgYW5kCisgKiBGT0xMX1BJTiBpcyBzZXQuCisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0
aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEgcHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAq
IHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBmb3IgZGV0YWlscy4KKyAq
CisgKiBUaGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDEgKERJTykgaW4gRG9jdW1lbnRhdGlvbi92
bS9waW5fdXNlcl9wYWdlcy5yc3QuIEl0CisgKiBpcyBOT1QgaW50ZW5kZWQgZm9yIENhc2UgMiAo
UkRNQTogbG9uZy10ZXJtIHBpbnMpLgorICovCitsb25nIHBpbl91c2VyX3BhZ2VzKHVuc2lnbmVk
IGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCisJCSAgICB1bnNpZ25lZCBpbnQg
Z3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkgICAgc3RydWN0IHZtX2FyZWFfc3Ry
dWN0ICoqdm1hcykKK3sKKwkvKiBGT0xMX0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4
Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfR0VUKSkKKwkJ
cmV0dXJuIC1FSU5WQUw7CisKKwlndXBfZmxhZ3MgfD0gRk9MTF9QSU47CisJcmV0dXJuIF9fZ3Vw
X2xvbmd0ZXJtX2xvY2tlZChjdXJyZW50LCBjdXJyZW50LT5tbSwgc3RhcnQsIG5yX3BhZ2VzLAor
CQkJCSAgICAgcGFnZXMsIHZtYXMsIGd1cF9mbGFncyk7Cit9CitFWFBPUlRfU1lNQk9MKHBpbl91
c2VyX3BhZ2VzKTsKKworLyoqCisgKiBwaW5fbG9uZ3Rlcm1fcGFnZXMoKSAtIHBpbiB1c2VyIHBh
Z2VzIGluIG1lbW9yeSBmb3IgbG9uZy10ZXJtIHVzZSAoUkRNQSwKKyAqIHR5cGljYWxseSkKKyAq
CisgKiBOZWFybHkgdGhlIHNhbWUgYXMgZ2V0X3VzZXJfcGFnZXMoKSwgZXhjZXB0IHRoYXQgRk9M
TF9QSU4gYW5kIEZPTExfTE9OR1RFUk0KKyAqIGFyZSBzZXQuIFNlZSBnZXRfdXNlcl9wYWdlc19m
YXN0KCkgZm9yIGRvY3VtZW50YXRpb24gb24gdGhlIGZ1bmN0aW9uCisgKiBhcmd1bWVudHMsIGJl
Y2F1c2UgdGhlIGFyZ3VtZW50cyBoZXJlIGFyZSBpZGVudGljYWwuCisgKgorICogRk9MTF9QSU4g
bWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEgcHV0X3VzZXJfcGFnZSgp
LiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBmb3Ig
ZnVydGhlciBkZXRhaWxzLgorICoKKyAqIEZPTExfTE9OR1RFUk0gbWVhbnMgdGhhdCB0aGUgcGFn
ZXMgYXJlIGJlaW5nIHBpbm5lZCBmb3IgImxvbmcgdGVybSIgdXNlLAorICogdHlwaWNhbGx5IGJ5
IGEgbm9uLUNQVSBkZXZpY2UsIGFuZCB3ZSBjYW5ub3QgYmUgc3VyZSB0aGF0IHdhaXRpbmcgZm9y
IGEKKyAqIHBpbm5lZCBwYWdlIHRvIGJlY29tZSB1bnBpbiB3aWxsIGJlIGVmZmVjdGl2ZS4KKyAq
CisgKiBUaGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDIgKFJETUE6IGxvbmctdGVybSBwaW5zKSBp
bgorICogRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuCisgKi8KK2xvbmcgcGlu
X2xvbmd0ZXJtX3BhZ2VzKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFn
ZXMsCisJCQl1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkJ
c3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcykKK3sKKwkvKiBGT0xMX0dFVCBhbmQgRk9MTF9Q
SU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFn
cyAmIEZPTExfR0VUKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlndXBfZmxhZ3MgfD0gRk9MTF9Q
SU4gfCBGT0xMX0xPTkdURVJNOworCXJldHVybiBfX2d1cF9sb25ndGVybV9sb2NrZWQoY3VycmVu
dCwgY3VycmVudC0+bW0sIHN0YXJ0LCBucl9wYWdlcywKKwkJCQkgICAgIHBhZ2VzLCB2bWFzLCBn
dXBfZmxhZ3MpOworfQorRVhQT1JUX1NZTUJPTChwaW5fbG9uZ3Rlcm1fcGFnZXMpOwotLSAKMi4y
NC4wCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkcmkt
ZGV2ZWwgbWFpbGluZyBsaXN0CmRyaS1kZXZlbEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6
Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9kcmktZGV2ZWw=
