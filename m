Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 04425E96BA
	for <lists+dri-devel@lfdr.de>; Wed, 30 Oct 2019 07:47:43 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 3278E6EC8C;
	Wed, 30 Oct 2019 06:47:40 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from us-smtp-delivery-1.mimecast.com (us-smtp-2.mimecast.com
 [205.139.110.61])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 04A7C6EC8E
 for <dri-devel@lists.freedesktop.org>; Wed, 30 Oct 2019 06:47:37 +0000 (UTC)
Received: from mimecast-mx01.redhat.com (mimecast-mx01.redhat.com
 [209.132.183.4]) (Using TLS) by relay.mimecast.com with ESMTP id
 us-mta-138-ChcU31QnMdmHj_vjoU3wlQ-1; Wed, 30 Oct 2019 02:47:32 -0400
Received: from smtp.corp.redhat.com (int-mx04.intmail.prod.int.phx2.redhat.com
 [10.5.11.14])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mimecast-mx01.redhat.com (Postfix) with ESMTPS id 38C2E80183D;
 Wed, 30 Oct 2019 06:47:29 +0000 (UTC)
Received: from jason-ThinkPad-X1-Carbon-6th.redhat.com
 (ovpn-12-223.pek2.redhat.com [10.72.12.223])
 by smtp.corp.redhat.com (Postfix) with ESMTP id 0A8F05D9C3;
 Wed, 30 Oct 2019 06:46:32 +0000 (UTC)
From: Jason Wang <jasowang@redhat.com>
To: kvm@vger.kernel.org, linux-s390@vger.kernel.org,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 intel-gfx@lists.freedesktop.org, intel-gvt-dev@lists.freedesktop.org,
 kwankhede@nvidia.com, alex.williamson@redhat.com, mst@redhat.com,
 tiwei.bie@intel.com
Subject: [PATCH V6 3/6] mdev: introduce device specific ops
Date: Wed, 30 Oct 2019 14:44:41 +0800
Message-Id: <20191030064444.21166-4-jasowang@redhat.com>
In-Reply-To: <20191030064444.21166-1-jasowang@redhat.com>
References: <20191030064444.21166-1-jasowang@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-MC-Unique: ChcU31QnMdmHj_vjoU3wlQ-1
X-Mimecast-Spam-Score: 0
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=redhat.com; 
 s=mimecast20190719; t=1572418056;
 h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
 to:to:cc:cc:mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=NSFBVC7EkaylSdVnvjw0dDmOs5Y+9J+ITmunYgn0bm4=;
 b=RG8jpqKjudpBz5fVsLbZwbAu8UWnZ+7apC/kjorB84uPxghN13OD4Yp7J7z24kgc7bwpBM
 HaISyR+pQDcusTCEDAgIuy8w3d1uLRmZXyfRUvxa4r7yqj3KhUP805V7Tca2ccJGoC1sgg
 O1KHhDXT4z49z+1jVtsHVFjt9jgNyAw=
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: christophe.de.dinechin@gmail.com, sebott@linux.ibm.com, airlied@linux.ie,
 Jason Wang <jasowang@redhat.com>, heiko.carstens@de.ibm.com,
 kevin.tian@intel.com, virtualization@lists.linux-foundation.org,
 rob.miller@broadcom.com, lulu@redhat.com, eperezma@redhat.com,
 pasic@linux.ibm.com, borntraeger@de.ibm.com, haotian.wang@sifive.com,
 zhi.a.wang@intel.com, farman@linux.ibm.com, idos@mellanox.com,
 gor@linux.ibm.com, cunming.liang@intel.com, rodrigo.vivi@intel.com,
 xiao.w.wang@intel.com, freude@linux.ibm.com, parav@mellanox.com,
 zhihong.wang@intel.com, stefanha@redhat.com, akrowiak@linux.ibm.com,
 netdev@vger.kernel.org, cohuck@redhat.com, oberpar@linux.ibm.com,
 maxime.coquelin@redhat.com, lingshan.zhu@intel.com
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

Q3VycmVudGx5LCBleGNlcHQgZm9yIHRoZSBjcmVhdGUgYW5kIHJlbW92ZSwgdGhlIHJlc3Qgb2YK
bWRldl9wYXJlbnRfb3BzIGlzIGRlc2lnbmVkIGZvciB2ZmlvLW1kZXYgZHJpdmVyIG9ubHkgYW5k
IG1heSBub3QgaGVscApmb3Iga2VybmVsIG1kZXYgZHJpdmVyLiBXaXRoIHRoZSBoZWxwIG9mIGNs
YXNzIGlkLCB0aGlzIHBhdGNoCmludHJvZHVjZXMgZGV2aWNlIHNwZWNpZmljIGNhbGxiYWNrcyBp
bnNpZGUgbWRldl9kZXZpY2UKc3RydWN0dXJlLiBUaGlzIGFsbG93cyBkaWZmZXJlbnQgc2V0IG9m
IGNhbGxiYWNrIHRvIGJlIHVzZWQgYnkKdmZpby1tZGV2IGFuZCB2aXJ0aW8tbWRldi4KClNpZ25l
ZC1vZmYtYnk6IEphc29uIFdhbmcgPGphc293YW5nQHJlZGhhdC5jb20+Ci0tLQogLi4uL2RyaXZl
ci1hcGkvdmZpby1tZWRpYXRlZC1kZXZpY2UucnN0ICAgICAgIHwgMzUgKysrKysrKysrLS0tLQog
TUFJTlRBSU5FUlMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDEgKwogZHJp
dmVycy9ncHUvZHJtL2k5MTUvZ3Z0L2t2bWd0LmMgICAgICAgICAgICAgIHwgMTggKysrKy0tLQog
ZHJpdmVycy9zMzkwL2Npby92ZmlvX2Njd19vcHMuYyAgICAgICAgICAgICAgIHwgMTggKysrKy0t
LQogZHJpdmVycy9zMzkwL2NyeXB0by92ZmlvX2FwX29wcy5jICAgICAgICAgICAgIHwgMTQgKysr
LS0KIGRyaXZlcnMvdmZpby9tZGV2L21kZXZfY29yZS5jICAgICAgICAgICAgICAgICB8IDI1ICsr
KysrKysrLQogZHJpdmVycy92ZmlvL21kZXYvbWRldl9wcml2YXRlLmggICAgICAgICAgICAgIHwg
IDUgKysKIGRyaXZlcnMvdmZpby9tZGV2L3ZmaW9fbWRldi5jICAgICAgICAgICAgICAgICB8IDM3
ICsrKysrKy0tLS0tLS0KIGluY2x1ZGUvbGludXgvbWRldi5oICAgICAgICAgICAgICAgICAgICAg
ICAgICB8IDQzICsrKystLS0tLS0tLS0tLQogaW5jbHVkZS9saW51eC92ZmlvX21kZXZfb3BzLmgg
ICAgICAgICAgICAgICAgIHwgNTIgKysrKysrKysrKysrKysrKysrKwogc2FtcGxlcy92ZmlvLW1k
ZXYvbWJvY2hzLmMgICAgICAgICAgICAgICAgICAgIHwgMjAgKysrKy0tLQogc2FtcGxlcy92Zmlv
LW1kZXYvbWRweS5jICAgICAgICAgICAgICAgICAgICAgIHwgMjAgKysrKy0tLQogc2FtcGxlcy92
ZmlvLW1kZXYvbXR0eS5jICAgICAgICAgICAgICAgICAgICAgIHwgMTggKysrKy0tLQogMTMgZmls
ZXMgY2hhbmdlZCwgMjA2IGluc2VydGlvbnMoKyksIDEwMCBkZWxldGlvbnMoLSkKIGNyZWF0ZSBt
b2RlIDEwMDY0NCBpbmNsdWRlL2xpbnV4L3ZmaW9fbWRldl9vcHMuaAoKZGlmZiAtLWdpdCBhL0Rv
Y3VtZW50YXRpb24vZHJpdmVyLWFwaS92ZmlvLW1lZGlhdGVkLWRldmljZS5yc3QgYi9Eb2N1bWVu
dGF0aW9uL2RyaXZlci1hcGkvdmZpby1tZWRpYXRlZC1kZXZpY2UucnN0CmluZGV4IDY3MDk0MTNi
ZWUyOS4uMGQ4ZjllN2Q3OTgzIDEwMDY0NAotLS0gYS9Eb2N1bWVudGF0aW9uL2RyaXZlci1hcGkv
dmZpby1tZWRpYXRlZC1kZXZpY2UucnN0CisrKyBiL0RvY3VtZW50YXRpb24vZHJpdmVyLWFwaS92
ZmlvLW1lZGlhdGVkLWRldmljZS5yc3QKQEAgLTE1MiwxNSArMTUyLDYgQEAgY2FsbGJhY2tzIHBl
ciBtZGV2IHBhcmVudCBkZXZpY2UsIHBlciBtZGV2IHR5cGUsIG9yIGFueSBvdGhlciBjYXRlZ29y
aXphdGlvbi4KIFZlbmRvciBkcml2ZXJzIGFyZSBleHBlY3RlZCB0byBiZSBmdWxseSBhc3luY2hy
b25vdXMgaW4gdGhpcyByZXNwZWN0IG9yCiBwcm92aWRlIHRoZWlyIG93biBpbnRlcm5hbCByZXNv
dXJjZSBwcm90ZWN0aW9uLikKIAotVGhlIGNhbGxiYWNrcyBpbiB0aGUgbWRldl9wYXJlbnRfb3Bz
IHN0cnVjdHVyZSBhcmUgYXMgZm9sbG93czoKLQotKiBvcGVuOiBvcGVuIGNhbGxiYWNrIG9mIG1l
ZGlhdGVkIGRldmljZQotKiBjbG9zZTogY2xvc2UgY2FsbGJhY2sgb2YgbWVkaWF0ZWQgZGV2aWNl
Ci0qIGlvY3RsOiBpb2N0bCBjYWxsYmFjayBvZiBtZWRpYXRlZCBkZXZpY2UKLSogcmVhZCA6IHJl
YWQgZW11bGF0aW9uIGNhbGxiYWNrCi0qIHdyaXRlOiB3cml0ZSBlbXVsYXRpb24gY2FsbGJhY2sK
LSogbW1hcDogbW1hcCBlbXVsYXRpb24gY2FsbGJhY2sKLQogQSBkcml2ZXIgc2hvdWxkIHVzZSB0
aGUgbWRldl9wYXJlbnRfb3BzIHN0cnVjdHVyZSBpbiB0aGUgZnVuY3Rpb24gY2FsbCB0bwogcmVn
aXN0ZXIgaXRzZWxmIHdpdGggdGhlIG1kZXYgY29yZSBkcml2ZXI6OgogCkBAIC0xNzIsMTAgKzE2
MywzNCBAQCB0aGF0IGEgZHJpdmVyIHNob3VsZCB1c2UgdG8gdW5yZWdpc3RlciBpdHNlbGYgd2l0
aCB0aGUgbWRldiBjb3JlIGRyaXZlcjo6CiAKIAlleHRlcm4gdm9pZCBtZGV2X3VucmVnaXN0ZXJf
ZGV2aWNlKHN0cnVjdCBkZXZpY2UgKmRldik7CiAKLUl0IGlzIGFsc28gcmVxdWlyZWQgdG8gc3Bl
Y2lmeSB0aGUgY2xhc3NfaWQgaW4gY3JlYXRlKCkgY2FsbGJhY2sgdGhyb3VnaDo6CitBcyBtdWx0
aXBsZSB0eXBlcyBvZiBtZWRpYXRlZCBkZXZpY2VzIG1heSBiZSBzdXBwb3J0ZWQsIGNsYXNzIGlk
IG5lZWRzCit0byBiZSBzcGVjaWZpZWQgaW4gdGhlIGNyZWF0ZSBjYWxsYmFjaygpLiBUaGlzIGNv
dWxkIGJlIGRvbmUKK2V4cGxpY2l0bHkgZm9yIHRoZSBkZXZpY2UgdGhhdCBkb2VzIG5vdCB1c2Ug
b24gbWRldiBidXMgZm9yIGl0cworb3BlcmF0aW9uIHRocm91Z2g6CiAKIAlpbnQgbWRldl9zZXRf
Y2xhc3Moc3RydWN0IG1kZXZfZGV2aWNlICptZGV2LCB1MTYgaWQpOwogCitGb3IgdGhlIGRldmlj
ZSB0aGF0IHVzZXMgb24gdGhlIG1kZXYgYnVzIGZvciBpdHMgb3BlcmF0aW9uLCB0aGUgY2xhc3MK
K3Nob3VsZCBwcm92aWRlIGhlbHBlciBmdW5jdGlvbiB0byBzZXQgY2xhc3MgaWQgYW5kIGRldmlj
ZSBzcGVjaWZpYworb3BzLiBFLmcgZm9yIHZmaW8tbWRldiBkZXZpY2VzLCB0aGUgZnVuY3Rpb24g
dG8gYmUgY2FsbGVkIGlzOjoKKworCWludCBtZGV2X3NldF92ZmlvX29wcyhzdHJ1Y3QgbWRldl9k
ZXZpY2UgKm1kZXYsCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJ1Y3Qg
dmZpb19tZGV2X29wcyAqdmZpb19vcHMpOworCitUaGUgY2xhc3MgaWQgKHNldCBieSB0aGlzIGZ1
bmN0aW9uIHRvIE1ERVZfQ0xBU1NfSURfVkZJTykgaXMgdXNlZCB0bworbWF0Y2ggYSBkZXZpY2Ug
d2l0aCBhbiBtZGV2IGRyaXZlciB2aWEgaXRzIGlkIHRhYmxlLiBUaGUgZGV2aWNlCitzcGVjaWZp
YyBjYWxsYmFja3MgKHNwZWNpZmllZCBpbiAqdmZpb19vcHMpIGFyZSBvYnRhaW5hYmxlIHZpYQor
bWRldl9nZXRfdmZpb19vcHMoKSAoZm9yIHVzZSBieSB0aGUgbWRldiBidXMgZHJpdmVyKS4gQSB2
ZmlvLW1kZXYKK2RldmljZSAoY2xhc3MgaWQgTURFVl9DTEFTU19JRF9WRklPKSB1c2VzIHRoZSBm
b2xsb3dpbmcKK2RldmljZS1zcGVjaWZpYyBvcHM6CisKKyogb3Blbjogb3BlbiBjYWxsYmFjayBv
ZiB2ZmlvIG1lZGlhdGVkIGRldmljZQorKiBjbG9zZTogY2xvc2UgY2FsbGJhY2sgb2YgdmZpbyBt
ZWRpYXRlZCBkZXZpY2UKKyogaW9jdGw6IGlvY3RsIGNhbGxiYWNrIG9mIHZmaW8gbWVkaWF0ZWQg
ZGV2aWNlCisqIHJlYWQgOiByZWFkIGVtdWxhdGlvbiBjYWxsYmFjaworKiB3cml0ZTogd3JpdGUg
ZW11bGF0aW9uIGNhbGxiYWNrCisqIG1tYXA6IG1tYXAgZW11bGF0aW9uIGNhbGxiYWNrCisKIE1l
ZGlhdGVkIERldmljZSBNYW5hZ2VtZW50IEludGVyZmFjZSBUaHJvdWdoIHN5c2ZzCiA9PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogCmRpZmYgLS1naXQg
YS9NQUlOVEFJTkVSUyBiL01BSU5UQUlORVJTCmluZGV4IGU1MWE2OGJmOGNhOC4uOWUxMGFlOWMy
YjRkIDEwMDY0NAotLS0gYS9NQUlOVEFJTkVSUworKysgYi9NQUlOVEFJTkVSUwpAQCAtMTcxMjEs
NiArMTcxMjEsNyBAQCBTOglNYWludGFpbmVkCiBGOglEb2N1bWVudGF0aW9uL2RyaXZlci1hcGkv
dmZpby1tZWRpYXRlZC1kZXZpY2UucnN0CiBGOglkcml2ZXJzL3ZmaW8vbWRldi8KIEY6CWluY2x1
ZGUvbGludXgvbWRldi5oCitGOglpbmNsdWRlL2xpbnV4L3ZmaW9fbWRldl9vcHMuaAogRjoJc2Ft
cGxlcy92ZmlvLW1kZXYvCiAKIFZGSU8gUExBVEZPUk0gRFJJVkVSCmRpZmYgLS1naXQgYS9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9ndnQva3ZtZ3QuYyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9r
dm1ndC5jCmluZGV4IDY0MjBmMGRiZDMxYi4uYzJiN2Y5ZGJlNGQxIDEwMDY0NAotLS0gYS9kcml2
ZXJzL2dwdS9kcm0vaTkxNS9ndnQva3ZtZ3QuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vaTkxNS9n
dnQva3ZtZ3QuYwpAQCAtNDIsNiArNDIsNyBAQAogI2luY2x1ZGUgPGxpbnV4L2t2bV9ob3N0Lmg+
CiAjaW5jbHVkZSA8bGludXgvdmZpby5oPgogI2luY2x1ZGUgPGxpbnV4L21kZXYuaD4KKyNpbmNs
dWRlIDxsaW51eC92ZmlvX21kZXZfb3BzLmg+CiAjaW5jbHVkZSA8bGludXgvZGVidWdmcy5oPgog
CiAjaW5jbHVkZSA8bGludXgvbm9zcGVjLmg+CkBAIC02NDMsNiArNjQ0LDggQEAgc3RhdGljIHZv
aWQga3ZtZ3RfcHV0X3ZmaW9fZGV2aWNlKHZvaWQgKnZncHUpCiAJdmZpb19kZXZpY2VfcHV0KCgo
c3RydWN0IGludGVsX3ZncHUgKil2Z3B1KS0+dmRldi52ZmlvX2RldmljZSk7CiB9CiAKK3N0YXRp
YyBjb25zdCBzdHJ1Y3QgdmZpb19tZGV2X2RldmljZV9vcHMgaW50ZWxfdmZpb192Z3B1X2Rldl9v
cHM7CisKIHN0YXRpYyBpbnQgaW50ZWxfdmdwdV9jcmVhdGUoc3RydWN0IGtvYmplY3QgKmtvYmos
IHN0cnVjdCBtZGV2X2RldmljZSAqbWRldikKIHsKIAlzdHJ1Y3QgaW50ZWxfdmdwdSAqdmdwdSA9
IE5VTEw7CkBAIC02NzgsNyArNjgxLDcgQEAgc3RhdGljIGludCBpbnRlbF92Z3B1X2NyZWF0ZShz
dHJ1Y3Qga29iamVjdCAqa29iaiwgc3RydWN0IG1kZXZfZGV2aWNlICptZGV2KQogCQkgICAgIGRl
dl9uYW1lKG1kZXZfZGV2KG1kZXYpKSk7CiAJcmV0ID0gMDsKIAotCW1kZXZfc2V0X2NsYXNzKG1k
ZXYsIE1ERVZfQ0xBU1NfSURfVkZJTyk7CisJbWRldl9zZXRfdmZpb19vcHMobWRldiwgJmludGVs
X3ZmaW9fdmdwdV9kZXZfb3BzKTsKIG91dDoKIAlyZXR1cm4gcmV0OwogfQpAQCAtMTU5OSwyMCAr
MTYwMiwyMSBAQCBzdGF0aWMgY29uc3Qgc3RydWN0IGF0dHJpYnV0ZV9ncm91cCAqaW50ZWxfdmdw
dV9ncm91cHNbXSA9IHsKIAlOVUxMLAogfTsKIAotc3RhdGljIHN0cnVjdCBtZGV2X3BhcmVudF9v
cHMgaW50ZWxfdmdwdV9vcHMgPSB7Ci0JLm1kZXZfYXR0cl9ncm91cHMgICAgICAgPSBpbnRlbF92
Z3B1X2dyb3VwcywKLQkuY3JlYXRlCQkJPSBpbnRlbF92Z3B1X2NyZWF0ZSwKLQkucmVtb3ZlCQkJ
PSBpbnRlbF92Z3B1X3JlbW92ZSwKLQorc3RhdGljIGNvbnN0IHN0cnVjdCB2ZmlvX21kZXZfZGV2
aWNlX29wcyBpbnRlbF92ZmlvX3ZncHVfZGV2X29wcyA9IHsKIAkub3BlbgkJCT0gaW50ZWxfdmdw
dV9vcGVuLAogCS5yZWxlYXNlCQk9IGludGVsX3ZncHVfcmVsZWFzZSwKLQogCS5yZWFkCQkJPSBp
bnRlbF92Z3B1X3JlYWQsCiAJLndyaXRlCQkJPSBpbnRlbF92Z3B1X3dyaXRlLAogCS5tbWFwCQkJ
PSBpbnRlbF92Z3B1X21tYXAsCiAJLmlvY3RsCQkJPSBpbnRlbF92Z3B1X2lvY3RsLAogfTsKIAor
c3RhdGljIHN0cnVjdCBtZGV2X3BhcmVudF9vcHMgaW50ZWxfdmdwdV9vcHMgPSB7CisJLm1kZXZf
YXR0cl9ncm91cHMgICAgICAgPSBpbnRlbF92Z3B1X2dyb3VwcywKKwkuY3JlYXRlCQkJPSBpbnRl
bF92Z3B1X2NyZWF0ZSwKKwkucmVtb3ZlCQkJPSBpbnRlbF92Z3B1X3JlbW92ZSwKK307CisKIHN0
YXRpYyBpbnQga3ZtZ3RfaG9zdF9pbml0KHN0cnVjdCBkZXZpY2UgKmRldiwgdm9pZCAqZ3Z0LCBj
b25zdCB2b2lkICpvcHMpCiB7CiAJc3RydWN0IGF0dHJpYnV0ZSAqKmt2bV90eXBlX2F0dHJzOwpk
aWZmIC0tZ2l0IGEvZHJpdmVycy9zMzkwL2Npby92ZmlvX2Njd19vcHMuYyBiL2RyaXZlcnMvczM5
MC9jaW8vdmZpb19jY3dfb3BzLmMKaW5kZXggY2YyYzAxM2FlMzJmLi5jMzZlNmNhOWVlNjUgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvczM5MC9jaW8vdmZpb19jY3dfb3BzLmMKKysrIGIvZHJpdmVycy9z
MzkwL2Npby92ZmlvX2Njd19vcHMuYwpAQCAtMTIsNiArMTIsNyBAQAogCiAjaW5jbHVkZSA8bGlu
dXgvdmZpby5oPgogI2luY2x1ZGUgPGxpbnV4L21kZXYuaD4KKyNpbmNsdWRlIDxsaW51eC92Zmlv
X21kZXZfb3BzLmg+CiAjaW5jbHVkZSA8bGludXgvbm9zcGVjLmg+CiAjaW5jbHVkZSA8bGludXgv
c2xhYi5oPgogCkBAIC0xMTAsNiArMTExLDggQEAgc3RhdGljIHN0cnVjdCBhdHRyaWJ1dGVfZ3Jv
dXAgKm1kZXZfdHlwZV9ncm91cHNbXSA9IHsKIAlOVUxMLAogfTsKIAorc3RhdGljIGNvbnN0IHN0
cnVjdCB2ZmlvX21kZXZfZGV2aWNlX29wcyB2ZmlvX21kZXZfb3BzOworCiBzdGF0aWMgaW50IHZm
aW9fY2N3X21kZXZfY3JlYXRlKHN0cnVjdCBrb2JqZWN0ICprb2JqLCBzdHJ1Y3QgbWRldl9kZXZp
Y2UgKm1kZXYpCiB7CiAJc3RydWN0IHZmaW9fY2N3X3ByaXZhdGUgKnByaXZhdGUgPQpAQCAtMTI5
LDcgKzEzMiw3IEBAIHN0YXRpYyBpbnQgdmZpb19jY3dfbWRldl9jcmVhdGUoc3RydWN0IGtvYmpl
Y3QgKmtvYmosIHN0cnVjdCBtZGV2X2RldmljZSAqbWRldikKIAkJCSAgIHByaXZhdGUtPnNjaC0+
c2NoaWQuc3NpZCwKIAkJCSAgIHByaXZhdGUtPnNjaC0+c2NoaWQuc2NoX25vKTsKIAotCW1kZXZf
c2V0X2NsYXNzKG1kZXYsIE1ERVZfQ0xBU1NfSURfVkZJTyk7CisJbWRldl9zZXRfdmZpb19vcHMo
bWRldiwgJnZmaW9fbWRldl9vcHMpOwogCXJldHVybiAwOwogfQogCkBAIC01NzUsMTEgKzU3OCw3
IEBAIHN0YXRpYyBzc2l6ZV90IHZmaW9fY2N3X21kZXZfaW9jdGwoc3RydWN0IG1kZXZfZGV2aWNl
ICptZGV2LAogCX0KIH0KIAotc3RhdGljIGNvbnN0IHN0cnVjdCBtZGV2X3BhcmVudF9vcHMgdmZp
b19jY3dfbWRldl9vcHMgPSB7Ci0JLm93bmVyCQkJPSBUSElTX01PRFVMRSwKLQkuc3VwcG9ydGVk
X3R5cGVfZ3JvdXBzICA9IG1kZXZfdHlwZV9ncm91cHMsCi0JLmNyZWF0ZQkJCT0gdmZpb19jY3df
bWRldl9jcmVhdGUsCi0JLnJlbW92ZQkJCT0gdmZpb19jY3dfbWRldl9yZW1vdmUsCitzdGF0aWMg
Y29uc3Qgc3RydWN0IHZmaW9fbWRldl9kZXZpY2Vfb3BzIHZmaW9fbWRldl9vcHMgPSB7CiAJLm9w
ZW4JCQk9IHZmaW9fY2N3X21kZXZfb3BlbiwKIAkucmVsZWFzZQkJPSB2ZmlvX2Njd19tZGV2X3Jl
bGVhc2UsCiAJLnJlYWQJCQk9IHZmaW9fY2N3X21kZXZfcmVhZCwKQEAgLTU4Nyw2ICs1ODYsMTMg
QEAgc3RhdGljIGNvbnN0IHN0cnVjdCBtZGV2X3BhcmVudF9vcHMgdmZpb19jY3dfbWRldl9vcHMg
PSB7CiAJLmlvY3RsCQkJPSB2ZmlvX2Njd19tZGV2X2lvY3RsLAogfTsKIAorc3RhdGljIGNvbnN0
IHN0cnVjdCBtZGV2X3BhcmVudF9vcHMgdmZpb19jY3dfbWRldl9vcHMgPSB7CisJLm93bmVyCQkJ
PSBUSElTX01PRFVMRSwKKwkuc3VwcG9ydGVkX3R5cGVfZ3JvdXBzICA9IG1kZXZfdHlwZV9ncm91
cHMsCisJLmNyZWF0ZQkJCT0gdmZpb19jY3dfbWRldl9jcmVhdGUsCisJLnJlbW92ZQkJCT0gdmZp
b19jY3dfbWRldl9yZW1vdmUsCit9OworCiBpbnQgdmZpb19jY3dfbWRldl9yZWcoc3RydWN0IHN1
YmNoYW5uZWwgKnNjaCkKIHsKIAlyZXR1cm4gbWRldl9yZWdpc3Rlcl9kZXZpY2UoJnNjaC0+ZGV2
LCAmdmZpb19jY3dfbWRldl9vcHMpOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9zMzkwL2NyeXB0by92
ZmlvX2FwX29wcy5jIGIvZHJpdmVycy9zMzkwL2NyeXB0by92ZmlvX2FwX29wcy5jCmluZGV4IDA3
YzMxMDcwYWZlYi4uZWQ2OGQ0ZjdjMGE5IDEwMDY0NAotLS0gYS9kcml2ZXJzL3MzOTAvY3J5cHRv
L3ZmaW9fYXBfb3BzLmMKKysrIGIvZHJpdmVycy9zMzkwL2NyeXB0by92ZmlvX2FwX29wcy5jCkBA
IC0xNiw2ICsxNiw3IEBACiAjaW5jbHVkZSA8bGludXgvYml0b3BzLmg+CiAjaW5jbHVkZSA8bGlu
dXgva3ZtX2hvc3QuaD4KICNpbmNsdWRlIDxsaW51eC9tb2R1bGUuaD4KKyNpbmNsdWRlIDxsaW51
eC92ZmlvX21kZXZfb3BzLmg+CiAjaW5jbHVkZSA8YXNtL2t2bS5oPgogI2luY2x1ZGUgPGFzbS96
Y3J5cHQuaD4KIApAQCAtMzIxLDYgKzMyMiw4IEBAIHN0YXRpYyB2b2lkIHZmaW9fYXBfbWF0cml4
X2luaXQoc3RydWN0IGFwX2NvbmZpZ19pbmZvICppbmZvLAogCW1hdHJpeC0+YWRtX21heCA9IGlu
Zm8tPmFweGEgPyBpbmZvLT5OZCA6IDE1OwogfQogCitzdGF0aWMgY29uc3Qgc3RydWN0IHZmaW9f
bWRldl9kZXZpY2Vfb3BzIHZmaW9fbWRldl9vcHM7CisKIHN0YXRpYyBpbnQgdmZpb19hcF9tZGV2
X2NyZWF0ZShzdHJ1Y3Qga29iamVjdCAqa29iaiwgc3RydWN0IG1kZXZfZGV2aWNlICptZGV2KQog
ewogCXN0cnVjdCBhcF9tYXRyaXhfbWRldiAqbWF0cml4X21kZXY7CkBAIC0zNDMsNyArMzQ2LDcg
QEAgc3RhdGljIGludCB2ZmlvX2FwX21kZXZfY3JlYXRlKHN0cnVjdCBrb2JqZWN0ICprb2JqLCBz
dHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYpCiAJbGlzdF9hZGQoJm1hdHJpeF9tZGV2LT5ub2RlLCAm
bWF0cml4X2Rldi0+bWRldl9saXN0KTsKIAltdXRleF91bmxvY2soJm1hdHJpeF9kZXYtPmxvY2sp
OwogCi0JbWRldl9zZXRfY2xhc3MobWRldiwgTURFVl9DTEFTU19JRF9WRklPKTsKKwltZGV2X3Nl
dF92ZmlvX29wcyhtZGV2LCAmdmZpb19tZGV2X29wcyk7CiAJcmV0dXJuIDA7CiB9CiAKQEAgLTEy
ODEsMTUgKzEyODQsMTggQEAgc3RhdGljIHNzaXplX3QgdmZpb19hcF9tZGV2X2lvY3RsKHN0cnVj
dCBtZGV2X2RldmljZSAqbWRldiwKIAlyZXR1cm4gcmV0OwogfQogCitzdGF0aWMgY29uc3Qgc3Ry
dWN0IHZmaW9fbWRldl9kZXZpY2Vfb3BzIHZmaW9fbWRldl9vcHMgPSB7CisJLm9wZW4JCQk9IHZm
aW9fYXBfbWRldl9vcGVuLAorCS5yZWxlYXNlCQk9IHZmaW9fYXBfbWRldl9yZWxlYXNlLAorCS5p
b2N0bAkJCT0gdmZpb19hcF9tZGV2X2lvY3RsLAorfTsKKwogc3RhdGljIGNvbnN0IHN0cnVjdCBt
ZGV2X3BhcmVudF9vcHMgdmZpb19hcF9tYXRyaXhfb3BzID0gewogCS5vd25lcgkJCT0gVEhJU19N
T0RVTEUsCiAJLnN1cHBvcnRlZF90eXBlX2dyb3Vwcwk9IHZmaW9fYXBfbWRldl90eXBlX2dyb3Vw
cywKIAkubWRldl9hdHRyX2dyb3Vwcwk9IHZmaW9fYXBfbWRldl9hdHRyX2dyb3VwcywKIAkuY3Jl
YXRlCQkJPSB2ZmlvX2FwX21kZXZfY3JlYXRlLAogCS5yZW1vdmUJCQk9IHZmaW9fYXBfbWRldl9y
ZW1vdmUsCi0JLm9wZW4JCQk9IHZmaW9fYXBfbWRldl9vcGVuLAotCS5yZWxlYXNlCQk9IHZmaW9f
YXBfbWRldl9yZWxlYXNlLAotCS5pb2N0bAkJCT0gdmZpb19hcF9tZGV2X2lvY3RsLAogfTsKIAog
aW50IHZmaW9fYXBfbWRldl9yZWdpc3Rlcih2b2lkKQpkaWZmIC0tZ2l0IGEvZHJpdmVycy92Zmlv
L21kZXYvbWRldl9jb3JlLmMgYi9kcml2ZXJzL3ZmaW8vbWRldi9tZGV2X2NvcmUuYwppbmRleCBk
MjNjYTM5ZTNiZTYuLmFiNmNmNWE1ZmY5ZiAxMDA2NDQKLS0tIGEvZHJpdmVycy92ZmlvL21kZXYv
bWRldl9jb3JlLmMKKysrIGIvZHJpdmVycy92ZmlvL21kZXYvbWRldl9jb3JlLmMKQEAgLTQ1LDkg
KzQ1LDEwIEBAIHZvaWQgbWRldl9zZXRfZHJ2ZGF0YShzdHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYs
IHZvaWQgKmRhdGEpCiB9CiBFWFBPUlRfU1lNQk9MKG1kZXZfc2V0X2RydmRhdGEpOwogCisKIC8q
IFNwZWNpZnkgdGhlIGNsYXNzIGZvciB0aGUgbWRldiBkZXZpY2UsIHRoaXMgbXVzdCBiZSBjYWxs
ZWQgZHVyaW5nCi0gKiBjcmVhdGUoKSBjYWxsYmFjay4KLSAqLworICogY3JlYXRlKCkgY2FsbGJh
Y2sgZXhwbGljaXRseSBvciBpbXBsaWNpdHkgdGhyb3VnaCB0aGUgaGVscGVycworICogcHJvdmlk
ZWQgYnkgZWFjaCBjbGFzcy4gKi8KIHZvaWQgbWRldl9zZXRfY2xhc3Moc3RydWN0IG1kZXZfZGV2
aWNlICptZGV2LCB1MTYgaWQpCiB7CiAJV0FSTl9PTihtZGV2LT5jbGFzc19pZCk7CkBAIC01NSw2
ICs1NiwyNiBAQCB2b2lkIG1kZXZfc2V0X2NsYXNzKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwg
dTE2IGlkKQogfQogRVhQT1JUX1NZTUJPTChtZGV2X3NldF9jbGFzcyk7CiAKKy8qIFNwZWNpZnkg
dGhlIG1kZXYgZGV2aWNlIHRvIGJlIGEgVkZJTyBtZGV2IGRldmljZSwgYW5kIHNldCBWRklPCisg
KiBkZXZpY2Ugb3BzIGZvciBpdC4gVGhpcyBtdXN0IGJlIGNhbGxlZCBmcm9tIHRoZSBjcmVhdGUo
KSBjYWxsYmFjaworICogZm9yIFZGSU8gbWRldiBkZXZpY2UuCisgKi8KK3ZvaWQgbWRldl9zZXRf
dmZpb19vcHMoc3RydWN0IG1kZXZfZGV2aWNlICptZGV2LAorCQkgICAgICAgY29uc3Qgc3RydWN0
IHZmaW9fbWRldl9kZXZpY2Vfb3BzICp2ZmlvX29wcykKK3sKKwltZGV2X3NldF9jbGFzcyhtZGV2
LCBNREVWX0NMQVNTX0lEX1ZGSU8pOworCW1kZXYtPnZmaW9fb3BzID0gdmZpb19vcHM7Cit9CitF
WFBPUlRfU1lNQk9MKG1kZXZfc2V0X3ZmaW9fb3BzKTsKKworLyogR2V0IHRoZSBWRklPIGRldmlj
ZSBvcHMgZm9yIHRoZSBtZGV2IGRldmljZS4gKi8KK2NvbnN0IHN0cnVjdCB2ZmlvX21kZXZfZGV2
aWNlX29wcyAqbWRldl9nZXRfdmZpb19vcHMoc3RydWN0IG1kZXZfZGV2aWNlICptZGV2KQorewor
CVdBUk5fT04obWRldi0+Y2xhc3NfaWQgIT0gTURFVl9DTEFTU19JRF9WRklPKTsKKwlyZXR1cm4g
bWRldi0+dmZpb19vcHM7Cit9CitFWFBPUlRfU1lNQk9MKG1kZXZfZ2V0X3ZmaW9fb3BzKTsKKwog
c3RydWN0IGRldmljZSAqbWRldl9kZXYoc3RydWN0IG1kZXZfZGV2aWNlICptZGV2KQogewogCXJl
dHVybiAmbWRldi0+ZGV2OwpkaWZmIC0tZ2l0IGEvZHJpdmVycy92ZmlvL21kZXYvbWRldl9wcml2
YXRlLmggYi9kcml2ZXJzL3ZmaW8vbWRldi9tZGV2X3ByaXZhdGUuaAppbmRleCBjNjVmNDM2YzE4
NjkuLjA3NzA0MTBkZWQyYSAxMDA2NDQKLS0tIGEvZHJpdmVycy92ZmlvL21kZXYvbWRldl9wcml2
YXRlLmgKKysrIGIvZHJpdmVycy92ZmlvL21kZXYvbWRldl9wcml2YXRlLmgKQEAgLTEwLDYgKzEw
LDggQEAKICNpZm5kZWYgTURFVl9QUklWQVRFX0gKICNkZWZpbmUgTURFVl9QUklWQVRFX0gKIAor
I2luY2x1ZGUgPGxpbnV4L3ZmaW9fbWRldl9vcHMuaD4KKwogaW50ICBtZGV2X2J1c19yZWdpc3Rl
cih2b2lkKTsKIHZvaWQgbWRldl9idXNfdW5yZWdpc3Rlcih2b2lkKTsKIApAQCAtMzQsNiArMzYs
OSBAQCBzdHJ1Y3QgbWRldl9kZXZpY2UgewogCXN0cnVjdCBkZXZpY2UgKmlvbW11X2RldmljZTsK
IAlib29sIGFjdGl2ZTsKIAl1MTYgY2xhc3NfaWQ7CisJdW5pb24geworCQljb25zdCBzdHJ1Y3Qg
dmZpb19tZGV2X2RldmljZV9vcHMgKnZmaW9fb3BzOworCX07CiB9OwogCiAjZGVmaW5lIHRvX21k
ZXZfZGV2aWNlKGRldikJY29udGFpbmVyX29mKGRldiwgc3RydWN0IG1kZXZfZGV2aWNlLCBkZXYp
CmRpZmYgLS1naXQgYS9kcml2ZXJzL3ZmaW8vbWRldi92ZmlvX21kZXYuYyBiL2RyaXZlcnMvdmZp
by9tZGV2L3ZmaW9fbWRldi5jCmluZGV4IGE2NjQxY2Q4YjVhMy4uMWUzMGYwODYwNzFhIDEwMDY0
NAotLS0gYS9kcml2ZXJzL3ZmaW8vbWRldi92ZmlvX21kZXYuYworKysgYi9kcml2ZXJzL3ZmaW8v
bWRldi92ZmlvX21kZXYuYwpAQCAtMTQsNiArMTQsNyBAQAogI2luY2x1ZGUgPGxpbnV4L3NsYWIu
aD4KICNpbmNsdWRlIDxsaW51eC92ZmlvLmg+CiAjaW5jbHVkZSA8bGludXgvbWRldi5oPgorI2lu
Y2x1ZGUgPGxpbnV4L3ZmaW9fbWRldl9vcHMuaD4KIAogI2luY2x1ZGUgIm1kZXZfcHJpdmF0ZS5o
IgogCkBAIC0yNCwxNiArMjUsMTYgQEAKIHN0YXRpYyBpbnQgdmZpb19tZGV2X29wZW4odm9pZCAq
ZGV2aWNlX2RhdGEpCiB7CiAJc3RydWN0IG1kZXZfZGV2aWNlICptZGV2ID0gZGV2aWNlX2RhdGE7
Ci0Jc3RydWN0IG1kZXZfcGFyZW50ICpwYXJlbnQgPSBtZGV2LT5wYXJlbnQ7CisJY29uc3Qgc3Ry
dWN0IHZmaW9fbWRldl9kZXZpY2Vfb3BzICpvcHMgPSBtZGV2X2dldF92ZmlvX29wcyhtZGV2KTsK
IAlpbnQgcmV0OwogCi0JaWYgKHVubGlrZWx5KCFwYXJlbnQtPm9wcy0+b3BlbikpCisJaWYgKHVu
bGlrZWx5KCFvcHMtPm9wZW4pKQogCQlyZXR1cm4gLUVJTlZBTDsKIAogCWlmICghdHJ5X21vZHVs
ZV9nZXQoVEhJU19NT0RVTEUpKQogCQlyZXR1cm4gLUVOT0RFVjsKIAotCXJldCA9IHBhcmVudC0+
b3BzLT5vcGVuKG1kZXYpOworCXJldCA9IG9wcy0+b3BlbihtZGV2KTsKIAlpZiAocmV0KQogCQlt
b2R1bGVfcHV0KFRISVNfTU9EVUxFKTsKIApAQCAtNDMsMTAgKzQ0LDEwIEBAIHN0YXRpYyBpbnQg
dmZpb19tZGV2X29wZW4odm9pZCAqZGV2aWNlX2RhdGEpCiBzdGF0aWMgdm9pZCB2ZmlvX21kZXZf
cmVsZWFzZSh2b2lkICpkZXZpY2VfZGF0YSkKIHsKIAlzdHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYg
PSBkZXZpY2VfZGF0YTsKLQlzdHJ1Y3QgbWRldl9wYXJlbnQgKnBhcmVudCA9IG1kZXYtPnBhcmVu
dDsKKwljb25zdCBzdHJ1Y3QgdmZpb19tZGV2X2RldmljZV9vcHMgKm9wcyA9IG1kZXZfZ2V0X3Zm
aW9fb3BzKG1kZXYpOwogCi0JaWYgKGxpa2VseShwYXJlbnQtPm9wcy0+cmVsZWFzZSkpCi0JCXBh
cmVudC0+b3BzLT5yZWxlYXNlKG1kZXYpOworCWlmIChsaWtlbHkob3BzLT5yZWxlYXNlKSkKKwkJ
b3BzLT5yZWxlYXNlKG1kZXYpOwogCiAJbW9kdWxlX3B1dChUSElTX01PRFVMRSk7CiB9CkBAIC01
NSw0NyArNTYsNDcgQEAgc3RhdGljIGxvbmcgdmZpb19tZGV2X3VubG9ja2VkX2lvY3RsKHZvaWQg
KmRldmljZV9kYXRhLAogCQkJCSAgICAgdW5zaWduZWQgaW50IGNtZCwgdW5zaWduZWQgbG9uZyBh
cmcpCiB7CiAJc3RydWN0IG1kZXZfZGV2aWNlICptZGV2ID0gZGV2aWNlX2RhdGE7Ci0Jc3RydWN0
IG1kZXZfcGFyZW50ICpwYXJlbnQgPSBtZGV2LT5wYXJlbnQ7CisJY29uc3Qgc3RydWN0IHZmaW9f
bWRldl9kZXZpY2Vfb3BzICpvcHMgPSBtZGV2X2dldF92ZmlvX29wcyhtZGV2KTsKIAotCWlmICh1
bmxpa2VseSghcGFyZW50LT5vcHMtPmlvY3RsKSkKKwlpZiAodW5saWtlbHkoIW9wcy0+aW9jdGwp
KQogCQlyZXR1cm4gLUVJTlZBTDsKIAotCXJldHVybiBwYXJlbnQtPm9wcy0+aW9jdGwobWRldiwg
Y21kLCBhcmcpOworCXJldHVybiBvcHMtPmlvY3RsKG1kZXYsIGNtZCwgYXJnKTsKIH0KIAogc3Rh
dGljIHNzaXplX3QgdmZpb19tZGV2X3JlYWQodm9pZCAqZGV2aWNlX2RhdGEsIGNoYXIgX191c2Vy
ICpidWYsCiAJCQkgICAgICBzaXplX3QgY291bnQsIGxvZmZfdCAqcHBvcykKIHsKIAlzdHJ1Y3Qg
bWRldl9kZXZpY2UgKm1kZXYgPSBkZXZpY2VfZGF0YTsKLQlzdHJ1Y3QgbWRldl9wYXJlbnQgKnBh
cmVudCA9IG1kZXYtPnBhcmVudDsKKwljb25zdCBzdHJ1Y3QgdmZpb19tZGV2X2RldmljZV9vcHMg
Km9wcyA9IG1kZXZfZ2V0X3ZmaW9fb3BzKG1kZXYpOwogCi0JaWYgKHVubGlrZWx5KCFwYXJlbnQt
Pm9wcy0+cmVhZCkpCisJaWYgKHVubGlrZWx5KCFvcHMtPnJlYWQpKQogCQlyZXR1cm4gLUVJTlZB
TDsKIAotCXJldHVybiBwYXJlbnQtPm9wcy0+cmVhZChtZGV2LCBidWYsIGNvdW50LCBwcG9zKTsK
KwlyZXR1cm4gb3BzLT5yZWFkKG1kZXYsIGJ1ZiwgY291bnQsIHBwb3MpOwogfQogCiBzdGF0aWMg
c3NpemVfdCB2ZmlvX21kZXZfd3JpdGUodm9pZCAqZGV2aWNlX2RhdGEsIGNvbnN0IGNoYXIgX191
c2VyICpidWYsCiAJCQkgICAgICAgc2l6ZV90IGNvdW50LCBsb2ZmX3QgKnBwb3MpCiB7CiAJc3Ry
dWN0IG1kZXZfZGV2aWNlICptZGV2ID0gZGV2aWNlX2RhdGE7Ci0Jc3RydWN0IG1kZXZfcGFyZW50
ICpwYXJlbnQgPSBtZGV2LT5wYXJlbnQ7CisJY29uc3Qgc3RydWN0IHZmaW9fbWRldl9kZXZpY2Vf
b3BzICpvcHMgPSBtZGV2X2dldF92ZmlvX29wcyhtZGV2KTsKIAotCWlmICh1bmxpa2VseSghcGFy
ZW50LT5vcHMtPndyaXRlKSkKKwlpZiAodW5saWtlbHkoIW9wcy0+d3JpdGUpKQogCQlyZXR1cm4g
LUVJTlZBTDsKIAotCXJldHVybiBwYXJlbnQtPm9wcy0+d3JpdGUobWRldiwgYnVmLCBjb3VudCwg
cHBvcyk7CisJcmV0dXJuIG9wcy0+d3JpdGUobWRldiwgYnVmLCBjb3VudCwgcHBvcyk7CiB9CiAK
IHN0YXRpYyBpbnQgdmZpb19tZGV2X21tYXAodm9pZCAqZGV2aWNlX2RhdGEsIHN0cnVjdCB2bV9h
cmVhX3N0cnVjdCAqdm1hKQogewogCXN0cnVjdCBtZGV2X2RldmljZSAqbWRldiA9IGRldmljZV9k
YXRhOwotCXN0cnVjdCBtZGV2X3BhcmVudCAqcGFyZW50ID0gbWRldi0+cGFyZW50OworCWNvbnN0
IHN0cnVjdCB2ZmlvX21kZXZfZGV2aWNlX29wcyAqb3BzID0gbWRldl9nZXRfdmZpb19vcHMobWRl
dik7CiAKLQlpZiAodW5saWtlbHkoIXBhcmVudC0+b3BzLT5tbWFwKSkKKwlpZiAodW5saWtlbHko
IW9wcy0+bW1hcCkpCiAJCXJldHVybiAtRUlOVkFMOwogCi0JcmV0dXJuIHBhcmVudC0+b3BzLT5t
bWFwKG1kZXYsIHZtYSk7CisJcmV0dXJuIG9wcy0+bW1hcChtZGV2LCB2bWEpOwogfQogCiBzdGF0
aWMgY29uc3Qgc3RydWN0IHZmaW9fZGV2aWNlX29wcyB2ZmlvX21kZXZfZGV2X29wcyA9IHsKZGlm
ZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbWRldi5oIGIvaW5jbHVkZS9saW51eC9tZGV2LmgKaW5k
ZXggNzhiNjlkMDllYjU0Li40NjI1ZjFhMTEwMTQgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgv
bWRldi5oCisrKyBiL2luY2x1ZGUvbGludXgvbWRldi5oCkBAIC0xMCw3ICsxMCwxMyBAQAogI2lm
bmRlZiBNREVWX0gKICNkZWZpbmUgTURFVl9ICiAKKyNpbmNsdWRlIDxsaW51eC90eXBlcy5oPgor
I2luY2x1ZGUgPGxpbnV4L2RldmljZS5oPgorI2luY2x1ZGUgPGxpbnV4L21kZXYuaD4KKyNpbmNs
dWRlIDx1YXBpL2xpbnV4L3V1aWQuaD4KKwogc3RydWN0IG1kZXZfZGV2aWNlOworc3RydWN0IHZm
aW9fbWRldl9kZXZpY2Vfb3BzOwogCiAvKgogICogQ2FsbGVkIGJ5IHRoZSBwYXJlbnQgZGV2aWNl
IGRyaXZlciB0byBzZXQgdGhlIGRldmljZSB3aGljaCByZXByZXNlbnRzCkBAIC00OCwzMCArNTQs
NyBAQCBzdHJ1Y3QgZGV2aWNlICptZGV2X2dldF9pb21tdV9kZXZpY2Uoc3RydWN0IGRldmljZSAq
ZGV2KTsKICAqCQkJQG1kZXY6IG1kZXZfZGV2aWNlIGRldmljZSBzdHJ1Y3R1cmUgd2hpY2ggaXMg
YmVpbmcKICAqCQkJICAgICAgIGRlc3Ryb3llZAogICoJCQlSZXR1cm5zIGludGVnZXI6IHN1Y2Nl
c3MgKDApIG9yIGVycm9yICg8IDApCi0gKiBAb3BlbjoJCU9wZW4gbWVkaWF0ZWQgZGV2aWNlLgot
ICoJCQlAbWRldjogbWVkaWF0ZWQgZGV2aWNlLgotICoJCQlSZXR1cm5zIGludGVnZXI6IHN1Y2Nl
c3MgKDApIG9yIGVycm9yICg8IDApCi0gKiBAcmVsZWFzZToJCXJlbGVhc2UgbWVkaWF0ZWQgZGV2
aWNlCi0gKgkJCUBtZGV2OiBtZWRpYXRlZCBkZXZpY2UuCi0gKiBAcmVhZDoJCVJlYWQgZW11bGF0
aW9uIGNhbGxiYWNrCi0gKgkJCUBtZGV2OiBtZWRpYXRlZCBkZXZpY2Ugc3RydWN0dXJlCi0gKgkJ
CUBidWY6IHJlYWQgYnVmZmVyCi0gKgkJCUBjb3VudDogbnVtYmVyIG9mIGJ5dGVzIHRvIHJlYWQK
LSAqCQkJQHBwb3M6IGFkZHJlc3MuCi0gKgkJCVJldHVucyBudW1iZXIgb24gYnl0ZXMgcmVhZCBv
biBzdWNjZXNzIG9yIGVycm9yLgotICogQHdyaXRlOgkJV3JpdGUgZW11bGF0aW9uIGNhbGxiYWNr
Ci0gKgkJCUBtZGV2OiBtZWRpYXRlZCBkZXZpY2Ugc3RydWN0dXJlCi0gKgkJCUBidWY6IHdyaXRl
IGJ1ZmZlcgotICoJCQlAY291bnQ6IG51bWJlciBvZiBieXRlcyB0byBiZSB3cml0dGVuCi0gKgkJ
CUBwcG9zOiBhZGRyZXNzLgotICoJCQlSZXR1bnMgbnVtYmVyIG9uIGJ5dGVzIHdyaXR0ZW4gb24g
c3VjY2VzcyBvciBlcnJvci4KLSAqIEBpb2N0bDoJCUlPQ1RMIGNhbGxiYWNrCi0gKgkJCUBtZGV2
OiBtZWRpYXRlZCBkZXZpY2Ugc3RydWN0dXJlCi0gKgkJCUBjbWQ6IGlvY3RsIGNvbW1hbmQKLSAq
CQkJQGFyZzogYXJndW1lbnRzIHRvIGlvY3RsCi0gKiBAbW1hcDoJCW1tYXAgY2FsbGJhY2sKLSAq
CQkJQG1kZXY6IG1lZGlhdGVkIGRldmljZSBzdHJ1Y3R1cmUKLSAqCQkJQHZtYTogdm1hIHN0cnVj
dHVyZQorICoKICAqIFBhcmVudCBkZXZpY2UgdGhhdCBzdXBwb3J0IG1lZGlhdGVkIGRldmljZSBz
aG91bGQgYmUgcmVnaXN0ZXJlZCB3aXRoIG1kZXYKICAqIG1vZHVsZSB3aXRoIG1kZXZfcGFyZW50
X29wcyBzdHJ1Y3R1cmUuCiAgKiovCkBAIC04MywxNSArNjYsNiBAQCBzdHJ1Y3QgbWRldl9wYXJl
bnRfb3BzIHsKIAogCWludCAgICAgKCpjcmVhdGUpKHN0cnVjdCBrb2JqZWN0ICprb2JqLCBzdHJ1
Y3QgbWRldl9kZXZpY2UgKm1kZXYpOwogCWludCAgICAgKCpyZW1vdmUpKHN0cnVjdCBtZGV2X2Rl
dmljZSAqbWRldik7Ci0JaW50ICAgICAoKm9wZW4pKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldik7
Ci0Jdm9pZCAgICAoKnJlbGVhc2UpKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldik7Ci0Jc3NpemVf
dCAoKnJlYWQpKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwgY2hhciBfX3VzZXIgKmJ1ZiwKLQkJ
CXNpemVfdCBjb3VudCwgbG9mZl90ICpwcG9zKTsKLQlzc2l6ZV90ICgqd3JpdGUpKHN0cnVjdCBt
ZGV2X2RldmljZSAqbWRldiwgY29uc3QgY2hhciBfX3VzZXIgKmJ1ZiwKLQkJCSBzaXplX3QgY291
bnQsIGxvZmZfdCAqcHBvcyk7Ci0JbG9uZwkoKmlvY3RsKShzdHJ1Y3QgbWRldl9kZXZpY2UgKm1k
ZXYsIHVuc2lnbmVkIGludCBjbWQsCi0JCQkgdW5zaWduZWQgbG9uZyBhcmcpOwotCWludAkoKm1t
YXApKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwgc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEp
OwogfTsKIAogLyogaW50ZXJmYWNlIGZvciBleHBvcnRpbmcgbWRldiBzdXBwb3J0ZWQgdHlwZSBh
dHRyaWJ1dGVzICovCkBAIC0xMzUsNiArMTA5LDkgQEAgdm9pZCAqbWRldl9nZXRfZHJ2ZGF0YShz
dHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYpOwogdm9pZCBtZGV2X3NldF9kcnZkYXRhKHN0cnVjdCBt
ZGV2X2RldmljZSAqbWRldiwgdm9pZCAqZGF0YSk7CiBjb25zdCBndWlkX3QgKm1kZXZfdXVpZChz
dHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYpOwogdm9pZCBtZGV2X3NldF9jbGFzcyhzdHJ1Y3QgbWRl
dl9kZXZpY2UgKm1kZXYsIHUxNiBpZCk7Cit2b2lkIG1kZXZfc2V0X3ZmaW9fb3BzKHN0cnVjdCBt
ZGV2X2RldmljZSAqbWRldiwKKwkJICAgICAgIGNvbnN0IHN0cnVjdCB2ZmlvX21kZXZfZGV2aWNl
X29wcyAqdmZpb19vcHMpOworY29uc3Qgc3RydWN0IHZmaW9fbWRldl9kZXZpY2Vfb3BzICptZGV2
X2dldF92ZmlvX29wcyhzdHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYpOwogCiBleHRlcm4gc3RydWN0
IGJ1c190eXBlIG1kZXZfYnVzX3R5cGU7CiAKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvdmZp
b19tZGV2X29wcy5oIGIvaW5jbHVkZS9saW51eC92ZmlvX21kZXZfb3BzLmgKbmV3IGZpbGUgbW9k
ZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAwMDAwLi4zOTA3YzUzNzFjMmIKLS0tIC9kZXYvbnVsbAor
KysgYi9pbmNsdWRlL2xpbnV4L3ZmaW9fbWRldl9vcHMuaApAQCAtMCwwICsxLDUyIEBACisvKiBT
UERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMC1vbmx5ICovCisvKgorICogVkZJTyBNZWRp
YXRlZCBkZXZpY2UgZGVmaW5pdGlvbgorICovCisKKyNpZm5kZWYgVkZJT19NREVWX0gKKyNkZWZp
bmUgVkZJT19NREVWX0gKKworI2luY2x1ZGUgPGxpbnV4L21kZXYuaD4KKworLyoqCisgKiBzdHJ1
Y3QgdmZpb19tZGV2X2RldmljZV9vcHMgLSBTdHJ1Y3R1cmUgdG8gYmUgcmVnaXN0ZXJlZCBmb3Ig
ZWFjaAorICogbWRldiBkZXZpY2UgdG8gcmVnaXN0ZXIgdGhlIGRldmljZSB0byB2ZmlvLW1kZXYg
bW9kdWxlLgorICoKKyAqIEBvcGVuOgkJT3BlbiBtZWRpYXRlZCBkZXZpY2UuCisgKgkJCUBtZGV2
OiBtZWRpYXRlZCBkZXZpY2UuCisgKgkJCVJldHVybnMgaW50ZWdlcjogc3VjY2VzcyAoMCkgb3Ig
ZXJyb3IgKDwgMCkKKyAqIEByZWxlYXNlOgkJcmVsZWFzZSBtZWRpYXRlZCBkZXZpY2UKKyAqCQkJ
QG1kZXY6IG1lZGlhdGVkIGRldmljZS4KKyAqIEByZWFkOgkJUmVhZCBlbXVsYXRpb24gY2FsbGJh
Y2sKKyAqCQkJQG1kZXY6IG1lZGlhdGVkIGRldmljZSBzdHJ1Y3R1cmUKKyAqCQkJQGJ1ZjogcmVh
ZCBidWZmZXIKKyAqCQkJQGNvdW50OiBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZAorICoJCQlAcHBv
czogYWRkcmVzcy4KKyAqCQkJUmV0dW5zIG51bWJlciBvbiBieXRlcyByZWFkIG9uIHN1Y2Nlc3Mg
b3IgZXJyb3IuCisgKiBAd3JpdGU6CQlXcml0ZSBlbXVsYXRpb24gY2FsbGJhY2sKKyAqCQkJQG1k
ZXY6IG1lZGlhdGVkIGRldmljZSBzdHJ1Y3R1cmUKKyAqCQkJQGJ1Zjogd3JpdGUgYnVmZmVyCisg
KgkJCUBjb3VudDogbnVtYmVyIG9mIGJ5dGVzIHRvIGJlIHdyaXR0ZW4KKyAqCQkJQHBwb3M6IGFk
ZHJlc3MuCisgKgkJCVJldHVucyBudW1iZXIgb24gYnl0ZXMgd3JpdHRlbiBvbiBzdWNjZXNzIG9y
IGVycm9yLgorICogQGlvY3RsOgkJSU9DVEwgY2FsbGJhY2sKKyAqCQkJQG1kZXY6IG1lZGlhdGVk
IGRldmljZSBzdHJ1Y3R1cmUKKyAqCQkJQGNtZDogaW9jdGwgY29tbWFuZAorICoJCQlAYXJnOiBh
cmd1bWVudHMgdG8gaW9jdGwKKyAqIEBtbWFwOgkJbW1hcCBjYWxsYmFjaworICoJCQlAbWRldjog
bWVkaWF0ZWQgZGV2aWNlIHN0cnVjdHVyZQorICoJCQlAdm1hOiB2bWEgc3RydWN0dXJlCisgKi8K
K3N0cnVjdCB2ZmlvX21kZXZfZGV2aWNlX29wcyB7CisJaW50ICAgICAoKm9wZW4pKHN0cnVjdCBt
ZGV2X2RldmljZSAqbWRldik7CisJdm9pZCAgICAoKnJlbGVhc2UpKHN0cnVjdCBtZGV2X2Rldmlj
ZSAqbWRldik7CisJc3NpemVfdCAoKnJlYWQpKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwgY2hh
ciBfX3VzZXIgKmJ1ZiwKKwkJCXNpemVfdCBjb3VudCwgbG9mZl90ICpwcG9zKTsKKwlzc2l6ZV90
ICgqd3JpdGUpKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwgY29uc3QgY2hhciBfX3VzZXIgKmJ1
ZiwKKwkJCSBzaXplX3QgY291bnQsIGxvZmZfdCAqcHBvcyk7CisJbG9uZwkoKmlvY3RsKShzdHJ1
Y3QgbWRldl9kZXZpY2UgKm1kZXYsIHVuc2lnbmVkIGludCBjbWQsCisJCQkgdW5zaWduZWQgbG9u
ZyBhcmcpOworCWludAkoKm1tYXApKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwgc3RydWN0IHZt
X2FyZWFfc3RydWN0ICp2bWEpOworfTsKKworI2VuZGlmCmRpZmYgLS1naXQgYS9zYW1wbGVzL3Zm
aW8tbWRldi9tYm9jaHMuYyBiL3NhbXBsZXMvdmZpby1tZGV2L21ib2Nocy5jCmluZGV4IDExNWJj
NTA3NDY1Ni4uMWFmZWMyMGJmMGM1IDEwMDY0NAotLS0gYS9zYW1wbGVzL3ZmaW8tbWRldi9tYm9j
aHMuYworKysgYi9zYW1wbGVzL3ZmaW8tbWRldi9tYm9jaHMuYwpAQCAtMzAsNiArMzAsNyBAQAog
I2luY2x1ZGUgPGxpbnV4L2lvbW11Lmg+CiAjaW5jbHVkZSA8bGludXgvc3lzZnMuaD4KICNpbmNs
dWRlIDxsaW51eC9tZGV2Lmg+CisjaW5jbHVkZSA8bGludXgvdmZpb19tZGV2X29wcy5oPgogI2lu
Y2x1ZGUgPGxpbnV4L3BjaS5oPgogI2luY2x1ZGUgPGxpbnV4L2RtYS1idWYuaD4KICNpbmNsdWRl
IDxsaW51eC9oaWdobWVtLmg+CkBAIC01MTYsNiArNTE3LDggQEAgc3RhdGljIGludCBtYm9jaHNf
cmVzZXQoc3RydWN0IG1kZXZfZGV2aWNlICptZGV2KQogCXJldHVybiAwOwogfQogCitzdGF0aWMg
Y29uc3Qgc3RydWN0IHZmaW9fbWRldl9kZXZpY2Vfb3BzIHZmaW9fbWRldl9vcHM7CisKIHN0YXRp
YyBpbnQgbWJvY2hzX2NyZWF0ZShzdHJ1Y3Qga29iamVjdCAqa29iaiwgc3RydWN0IG1kZXZfZGV2
aWNlICptZGV2KQogewogCWNvbnN0IHN0cnVjdCBtYm9jaHNfdHlwZSAqdHlwZSA9IG1ib2Noc19m
aW5kX3R5cGUoa29iaik7CkBAIC01NjEsNyArNTY0LDcgQEAgc3RhdGljIGludCBtYm9jaHNfY3Jl
YXRlKHN0cnVjdCBrb2JqZWN0ICprb2JqLCBzdHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYpCiAJbWJv
Y2hzX3Jlc2V0KG1kZXYpOwogCiAJbWJvY2hzX3VzZWRfbWJ5dGVzICs9IHR5cGUtPm1ieXRlczsK
LQltZGV2X3NldF9jbGFzcyhtZGV2LCBNREVWX0NMQVNTX0lEX1ZGSU8pOworCW1kZXZfc2V0X3Zm
aW9fb3BzKG1kZXYsICZ2ZmlvX21kZXZfb3BzKTsKIAlyZXR1cm4gMDsKIAogZXJyX21lbToKQEAg
LTE0MTksMTIgKzE0MjIsNyBAQCBzdGF0aWMgc3RydWN0IGF0dHJpYnV0ZV9ncm91cCAqbWRldl90
eXBlX2dyb3Vwc1tdID0gewogCU5VTEwsCiB9OwogCi1zdGF0aWMgY29uc3Qgc3RydWN0IG1kZXZf
cGFyZW50X29wcyBtZGV2X2ZvcHMgPSB7Ci0JLm93bmVyCQkJPSBUSElTX01PRFVMRSwKLQkubWRl
dl9hdHRyX2dyb3Vwcwk9IG1kZXZfZGV2X2dyb3VwcywKLQkuc3VwcG9ydGVkX3R5cGVfZ3JvdXBz
CT0gbWRldl90eXBlX2dyb3VwcywKLQkuY3JlYXRlCQkJPSBtYm9jaHNfY3JlYXRlLAotCS5yZW1v
dmUJCQk9IG1ib2Noc19yZW1vdmUsCitzdGF0aWMgY29uc3Qgc3RydWN0IHZmaW9fbWRldl9kZXZp
Y2Vfb3BzIHZmaW9fbWRldl9vcHMgPSB7CiAJLm9wZW4JCQk9IG1ib2Noc19vcGVuLAogCS5yZWxl
YXNlCQk9IG1ib2Noc19jbG9zZSwKIAkucmVhZAkJCT0gbWJvY2hzX3JlYWQsCkBAIC0xNDMzLDYg
KzE0MzEsMTQgQEAgc3RhdGljIGNvbnN0IHN0cnVjdCBtZGV2X3BhcmVudF9vcHMgbWRldl9mb3Bz
ID0gewogCS5tbWFwCQkJPSBtYm9jaHNfbW1hcCwKIH07CiAKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qg
bWRldl9wYXJlbnRfb3BzIG1kZXZfZm9wcyA9IHsKKwkub3duZXIJCQk9IFRISVNfTU9EVUxFLAor
CS5tZGV2X2F0dHJfZ3JvdXBzCT0gbWRldl9kZXZfZ3JvdXBzLAorCS5zdXBwb3J0ZWRfdHlwZV9n
cm91cHMJPSBtZGV2X3R5cGVfZ3JvdXBzLAorCS5jcmVhdGUJCQk9IG1ib2Noc19jcmVhdGUsCisJ
LnJlbW92ZQkJCT0gbWJvY2hzX3JlbW92ZSwKK307CisKIHN0YXRpYyBjb25zdCBzdHJ1Y3QgZmls
ZV9vcGVyYXRpb25zIHZkX2ZvcHMgPSB7CiAJLm93bmVyCQk9IFRISVNfTU9EVUxFLAogfTsKZGlm
ZiAtLWdpdCBhL3NhbXBsZXMvdmZpby1tZGV2L21kcHkuYyBiL3NhbXBsZXMvdmZpby1tZGV2L21k
cHkuYwppbmRleCA2NjU2MTQ1NzRkNTAuLmQ1NzFmYjY1ZjUwZiAxMDA2NDQKLS0tIGEvc2FtcGxl
cy92ZmlvLW1kZXYvbWRweS5jCisrKyBiL3NhbXBsZXMvdmZpby1tZGV2L21kcHkuYwpAQCAtMjYs
NiArMjYsNyBAQAogI2luY2x1ZGUgPGxpbnV4L2lvbW11Lmg+CiAjaW5jbHVkZSA8bGludXgvc3lz
ZnMuaD4KICNpbmNsdWRlIDxsaW51eC9tZGV2Lmg+CisjaW5jbHVkZSA8bGludXgvdmZpb19tZGV2
X29wcy5oPgogI2luY2x1ZGUgPGxpbnV4L3BjaS5oPgogI2luY2x1ZGUgPGRybS9kcm1fZm91cmNj
Lmg+CiAjaW5jbHVkZSAibWRweS1kZWZzLmgiCkBAIC0yMjYsNiArMjI3LDggQEAgc3RhdGljIGlu
dCBtZHB5X3Jlc2V0KHN0cnVjdCBtZGV2X2RldmljZSAqbWRldikKIAlyZXR1cm4gMDsKIH0KIAor
c3RhdGljIGNvbnN0IHN0cnVjdCB2ZmlvX21kZXZfZGV2aWNlX29wcyB2ZmlvX21kZXZfb3BzOwor
CiBzdGF0aWMgaW50IG1kcHlfY3JlYXRlKHN0cnVjdCBrb2JqZWN0ICprb2JqLCBzdHJ1Y3QgbWRl
dl9kZXZpY2UgKm1kZXYpCiB7CiAJY29uc3Qgc3RydWN0IG1kcHlfdHlwZSAqdHlwZSA9IG1kcHlf
ZmluZF90eXBlKGtvYmopOwpAQCAtMjY5LDcgKzI3Miw3IEBAIHN0YXRpYyBpbnQgbWRweV9jcmVh
dGUoc3RydWN0IGtvYmplY3QgKmtvYmosIHN0cnVjdCBtZGV2X2RldmljZSAqbWRldikKIAltZHB5
X3Jlc2V0KG1kZXYpOwogCiAJbWRweV9jb3VudCsrOwotCW1kZXZfc2V0X2NsYXNzKG1kZXYsIE1E
RVZfQ0xBU1NfSURfVkZJTyk7CisJbWRldl9zZXRfdmZpb19vcHMobWRldiwgJnZmaW9fbWRldl9v
cHMpOwogCXJldHVybiAwOwogfQogCkBAIC03MjYsMTIgKzcyOSw3IEBAIHN0YXRpYyBzdHJ1Y3Qg
YXR0cmlidXRlX2dyb3VwICptZGV2X3R5cGVfZ3JvdXBzW10gPSB7CiAJTlVMTCwKIH07CiAKLXN0
YXRpYyBjb25zdCBzdHJ1Y3QgbWRldl9wYXJlbnRfb3BzIG1kZXZfZm9wcyA9IHsKLQkub3duZXIJ
CQk9IFRISVNfTU9EVUxFLAotCS5tZGV2X2F0dHJfZ3JvdXBzCT0gbWRldl9kZXZfZ3JvdXBzLAot
CS5zdXBwb3J0ZWRfdHlwZV9ncm91cHMJPSBtZGV2X3R5cGVfZ3JvdXBzLAotCS5jcmVhdGUJCQk9
IG1kcHlfY3JlYXRlLAotCS5yZW1vdmUJCQk9IG1kcHlfcmVtb3ZlLAorc3RhdGljIGNvbnN0IHN0
cnVjdCB2ZmlvX21kZXZfZGV2aWNlX29wcyB2ZmlvX21kZXZfb3BzID0gewogCS5vcGVuCQkJPSBt
ZHB5X29wZW4sCiAJLnJlbGVhc2UJCT0gbWRweV9jbG9zZSwKIAkucmVhZAkJCT0gbWRweV9yZWFk
LApAQCAtNzQwLDYgKzczOCwxNCBAQCBzdGF0aWMgY29uc3Qgc3RydWN0IG1kZXZfcGFyZW50X29w
cyBtZGV2X2ZvcHMgPSB7CiAJLm1tYXAJCQk9IG1kcHlfbW1hcCwKIH07CiAKK3N0YXRpYyBjb25z
dCBzdHJ1Y3QgbWRldl9wYXJlbnRfb3BzIG1kZXZfZm9wcyA9IHsKKwkub3duZXIJCQk9IFRISVNf
TU9EVUxFLAorCS5tZGV2X2F0dHJfZ3JvdXBzCT0gbWRldl9kZXZfZ3JvdXBzLAorCS5zdXBwb3J0
ZWRfdHlwZV9ncm91cHMJPSBtZGV2X3R5cGVfZ3JvdXBzLAorCS5jcmVhdGUJCQk9IG1kcHlfY3Jl
YXRlLAorCS5yZW1vdmUJCQk9IG1kcHlfcmVtb3ZlLAorfTsKKwogc3RhdGljIGNvbnN0IHN0cnVj
dCBmaWxlX29wZXJhdGlvbnMgdmRfZm9wcyA9IHsKIAkub3duZXIJCT0gVEhJU19NT0RVTEUsCiB9
OwpkaWZmIC0tZ2l0IGEvc2FtcGxlcy92ZmlvLW1kZXYvbXR0eS5jIGIvc2FtcGxlcy92ZmlvLW1k
ZXYvbXR0eS5jCmluZGV4IDkwZGExMmZmN2ZkOS4uNDA0OGIyNDJjNjM2IDEwMDY0NAotLS0gYS9z
YW1wbGVzL3ZmaW8tbWRldi9tdHR5LmMKKysrIGIvc2FtcGxlcy92ZmlvLW1kZXYvbXR0eS5jCkBA
IC0yNyw2ICsyNyw3IEBACiAjaW5jbHVkZSA8bGludXgvY3R5cGUuaD4KICNpbmNsdWRlIDxsaW51
eC9maWxlLmg+CiAjaW5jbHVkZSA8bGludXgvbWRldi5oPgorI2luY2x1ZGUgPGxpbnV4L3ZmaW9f
bWRldl9vcHMuaD4KICNpbmNsdWRlIDxsaW51eC9wY2kuaD4KICNpbmNsdWRlIDxsaW51eC9zZXJp
YWwuaD4KICNpbmNsdWRlIDx1YXBpL2xpbnV4L3NlcmlhbF9yZWcuaD4KQEAgLTcwOCw2ICs3MDks
OCBAQCBzdGF0aWMgc3NpemVfdCBtZGV2X2FjY2VzcyhzdHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYs
IHU4ICpidWYsIHNpemVfdCBjb3VudCwKIAlyZXR1cm4gcmV0OwogfQogCitzdGF0aWMgY29uc3Qg
c3RydWN0IHZmaW9fbWRldl9kZXZpY2Vfb3BzIHZmaW9fZGV2X29wczsKKwogc3RhdGljIGludCBt
dHR5X2NyZWF0ZShzdHJ1Y3Qga29iamVjdCAqa29iaiwgc3RydWN0IG1kZXZfZGV2aWNlICptZGV2
KQogewogCXN0cnVjdCBtZGV2X3N0YXRlICptZGV2X3N0YXRlOwpAQCAtNzU1LDcgKzc1OCw3IEBA
IHN0YXRpYyBpbnQgbXR0eV9jcmVhdGUoc3RydWN0IGtvYmplY3QgKmtvYmosIHN0cnVjdCBtZGV2
X2RldmljZSAqbWRldikKIAlsaXN0X2FkZCgmbWRldl9zdGF0ZS0+bmV4dCwgJm1kZXZfZGV2aWNl
c19saXN0KTsKIAltdXRleF91bmxvY2soJm1kZXZfbGlzdF9sb2NrKTsKIAotCW1kZXZfc2V0X2Ns
YXNzKG1kZXYsIE1ERVZfQ0xBU1NfSURfVkZJTyk7CisJbWRldl9zZXRfdmZpb19vcHMobWRldiwg
JnZmaW9fZGV2X29wcyk7CiAJcmV0dXJuIDA7CiB9CiAKQEAgLTEzODgsNiArMTM5MSwxNCBAQCBz
dGF0aWMgc3RydWN0IGF0dHJpYnV0ZV9ncm91cCAqbWRldl90eXBlX2dyb3Vwc1tdID0gewogCU5V
TEwsCiB9OwogCitzdGF0aWMgY29uc3Qgc3RydWN0IHZmaW9fbWRldl9kZXZpY2Vfb3BzIHZmaW9f
ZGV2X29wcyA9IHsKKwkub3BlbgkJPSBtdHR5X29wZW4sCisJLnJlbGVhc2UJPSBtdHR5X2Nsb3Nl
LAorCS5yZWFkCQk9IG10dHlfcmVhZCwKKwkud3JpdGUJCT0gbXR0eV93cml0ZSwKKwkuaW9jdGwJ
CT0gbXR0eV9pb2N0bCwKK307CisKIHN0YXRpYyBjb25zdCBzdHJ1Y3QgbWRldl9wYXJlbnRfb3Bz
IG1kZXZfZm9wcyA9IHsKIAkub3duZXIgICAgICAgICAgICAgICAgICA9IFRISVNfTU9EVUxFLAog
CS5kZXZfYXR0cl9ncm91cHMgICAgICAgID0gbXR0eV9kZXZfZ3JvdXBzLApAQCAtMTM5NSwxMSAr
MTQwNiw2IEBAIHN0YXRpYyBjb25zdCBzdHJ1Y3QgbWRldl9wYXJlbnRfb3BzIG1kZXZfZm9wcyA9
IHsKIAkuc3VwcG9ydGVkX3R5cGVfZ3JvdXBzICA9IG1kZXZfdHlwZV9ncm91cHMsCiAJLmNyZWF0
ZSAgICAgICAgICAgICAgICAgPSBtdHR5X2NyZWF0ZSwKIAkucmVtb3ZlCQkJPSBtdHR5X3JlbW92
ZSwKLQkub3BlbiAgICAgICAgICAgICAgICAgICA9IG10dHlfb3BlbiwKLQkucmVsZWFzZSAgICAg
ICAgICAgICAgICA9IG10dHlfY2xvc2UsCi0JLnJlYWQgICAgICAgICAgICAgICAgICAgPSBtdHR5
X3JlYWQsCi0JLndyaXRlICAgICAgICAgICAgICAgICAgPSBtdHR5X3dyaXRlLAotCS5pb2N0bAkJ
ICAgICAgICA9IG10dHlfaW9jdGwsCiB9OwogCiBzdGF0aWMgdm9pZCBtdHR5X2RldmljZV9yZWxl
YXNlKHN0cnVjdCBkZXZpY2UgKmRldikKLS0gCjIuMTkuMQoKX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX18KZHJpLWRldmVsIG1haWxpbmcgbGlzdApkcmktZGV2
ZWxAbGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3JnL21h
aWxtYW4vbGlzdGluZm8vZHJpLWRldmVs
