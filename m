Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 1FDFC10FFEC
	for <lists+dri-devel@lfdr.de>; Tue,  3 Dec 2019 15:15:52 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 9950A6E5F0;
	Tue,  3 Dec 2019 14:15:36 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from bhuna.collabora.co.uk (bhuna.collabora.co.uk
 [IPv6:2a00:1098:0:82:1000:25:2eeb:e3e3])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 2D2946E5F6
 for <dri-devel@lists.freedesktop.org>; Tue,  3 Dec 2019 14:15:32 +0000 (UTC)
Received: from localhost.localdomain (unknown
 [IPv6:2a01:e0a:2c:6930:5cf4:84a1:2763:fe0d])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested) (Authenticated sender: bbrezillon)
 by bhuna.collabora.co.uk (Postfix) with ESMTPSA id 7829929098C;
 Tue,  3 Dec 2019 14:15:30 +0000 (GMT)
From: Boris Brezillon <boris.brezillon@collabora.com>
To: dri-devel@lists.freedesktop.org
Subject: [PATCH v4 11/11] drm/bridge: Add the necessary bits to support bus
 format negotiation
Date: Tue,  3 Dec 2019 15:15:15 +0100
Message-Id: <20191203141515.3597631-12-boris.brezillon@collabora.com>
X-Mailer: git-send-email 2.23.0
In-Reply-To: <20191203141515.3597631-1-boris.brezillon@collabora.com>
References: <20191203141515.3597631-1-boris.brezillon@collabora.com>
MIME-Version: 1.0
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Mark Rutland <mark.rutland@arm.com>,
 Neil Armstrong <narmstrong@baylibre.com>,
 Thierry Reding <thierry.reding@gmail.com>,
 Laurent Pinchart <Laurent.pinchart@ideasonboard.com>, kernel@collabora.com,
 Sam Ravnborg <sam@ravnborg.org>,
 Nikita Yushchenko <nikita.yoush@cogentembedded.com>,
 Andrey Smirnov <andrew.smirnov@gmail.com>,
 Kyungmin Park <kyungmin.park@samsung.com>, Chris Healy <cphealy@gmail.com>,
 devicetree@vger.kernel.org, Jonas Karlman <jonas@kwiboo.se>,
 Rob Herring <robh+dt@kernel.org>, Jernej Skrabec <jernej.skrabec@siol.net>,
 Seung-Woo Kim <sw0312.kim@samsung.com>,
 Boris Brezillon <boris.brezillon@collabora.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

ZHJtX2JyaWRnZV9zdGF0ZSBpcyBleHRlbmRlZCB0byBkZXNjcmliZSB0aGUgaW5wdXQgYW5kIG91
dHB1dCBidXMKY29uZmlndXJhdGlvbnMuIFRoZXNlIGJ1cyBjb25maWd1cmF0aW9ucyBhcmUgZXhw
b3NlZCB0aHJvdWdoIHRoZQpkcm1fYnVzX2NmZyBzdHJ1Y3Qgd2hpY2ggZW5jb2RlcyB0aGUgY29u
ZmlndXJhdGlvbiBvZiBhIHBoeXNpY2FsCmJ1cyBiZXR3ZWVuIHR3byBjb21wb25lbnRzIGluIGFu
IG91dHB1dCBwaXBlbGluZSwgdXN1YWxseSBiZXR3ZWVuCnR3byBicmlkZ2VzLCBhbiBlbmNvZGVy
IGFuZCBhIGJyaWRnZSwgb3IgYSBicmlkZ2UgYW5kIGEgY29ubmVjdG9yLgoKVGhlIGJ1cyBjb25m
aWd1cmF0aW9uIGlzIHN0b3JlZCBpbiBkcm1fYnJpZGdlX3N0YXRlIHNlcGFyYXRlbHkgZm9yCnRo
ZSBpbnB1dCBhbmQgb3V0cHV0IGJ1c2VzLCBhcyBzZWVuIGZyb20gdGhlIHBvaW50IG9mIHZpZXcg
b2YgZWFjaApicmlkZ2UuIFRoZSBidXMgY29uZmlndXJhdGlvbiBvZiBhIGJyaWRnZSBvdXRwdXQg
aXMgdXN1YWxseSBpZGVudGljYWwKdG8gdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIG5leHQgYnJp
ZGdlJ3MgaW5wdXQsIGJ1dCBtYXkgZGlmZmVyIGlmCnRoZSBzaWduYWxzIGFyZSBtb2RpZmllZCBi
ZXR3ZWVuIHRoZSB0d28gYnJpZGdlcywgZm9yIGluc3RhbmNlIGJ5IGFuCmludmVydGVyIG9uIHRo
ZSBib2FyZC4gVGhlIGlucHV0IGFuZCBvdXRwdXQgY29uZmlndXJhdGlvbnMgb2YgYQpicmlkZ2Ug
bWF5IGRpZmZlciBpZiB0aGUgYnJpZGdlIG1vZGlmaWVzIHRoZSBzaWduYWxzIGludGVybmFsbHks
CmZvciBpbnN0YW5jZSBieSBwZXJmb3JtaW5nIGZvcm1hdCBjb252ZXJzaW9uLCBvciptb2RpZnlp
bmcgc2lnbmFscwpwb2xhcml0aWVzLgoKQnVzIGZvcm1hdCBuZWdvdGlhdGlvbiBpcyBhdXRvbWF0
ZWQgYnkgdGhlIGNvcmUsIGRyaXZlcnMganVzdCBoYXZlCnRvIGltcGxlbWVudCB0aGUgLT5hdG9t
aWNfZ2V0X3tvdXRwdXQsaW5wdXR9X2J1c19mbXRzKCkgaG9va3MgaWYgdGhleQp3YW50IHRvIHRh
a2UgcGFydCB0byB0aGlzIG5lZ290aWF0aW9uLiBOZWdvdGlhdGlvbiBoYXBwZW5zIGluIHJldmVy
c2UKb3JkZXIsIHN0YXJ0aW5nIGZyb20gdGhlIGxhc3QgZWxlbWVudCBvZiB0aGUgY2hhaW4gKHRo
ZSBvbmUgZGlyZWN0bHkKY29ubmVjdGVkIHRvIHRoZSBkaXNwbGF5KSB1cCB0byB0aGUgZmlyc3Qg
ZWxlbWVudCBvZiB0aGUgY2hhaW4gKHRoZSBvbmUKY29ubmVjdGVkIHRvIHRoZSBlbmNvZGVyKS4K
RHVyaW5nIHRoaXMgbmVnb3RpYXRpb24gYWxsIHN1cHBvcnRlZCBmb3JtYXRzIGFyZSB0ZXN0ZWQg
dW50aWwgd2UgZmluZApvbmUgdGhhdCB3b3JrcywgbWVhbmluZyB0aGF0IHRoZSBmb3JtYXRzIGFy
cmF5IHNob3VsZCBiZSBpbiBkZWNyZWFzaW5nCnByZWZlcmVuY2Ugb3JkZXIgKGFzc3VtaW5nIHRo
ZSBkcml2ZXIgaGFzIGEgcHJlZmVyZW5jZSBvcmRlcikuCgpOb3RlIHRoYXQgdGhlIGJ1cyBmb3Jt
YXQgbmVnb3RpYXRpb24gd29ya3MgZXZlbiBpZiBzb21lIGVsZW1lbnRzIGluIHRoZQpjaGFpbiBk
b24ndCBpbXBsZW1lbnQgdGhlIC0+YXRvbWljX2dldF97b3V0cHV0LGlucHV0fV9idXNfZm10cygp
IGhvb2tzLgpJbiB0aGF0IGNhc2UsIHRoZSBjb3JlIGFkdmVydGlzZXMgb25seSBNRURJQV9CVVNf
Rk1UX0ZJWEVEIGFuZCBsZXRzCnRoZSBwcmV2aW91cyBicmlkZ2UgZWxlbWVudCBkZWNpZGUgd2hh
dCB0byBkbyAobW9zdCBvZiB0aGUgdGltZSwgYnJpZGdlCmRyaXZlcnMgd2lsbCBwaWNrIGEgZGVm
YXVsdCBidXMgZm9ybWF0IG9yIGV4dHJhY3QgdGhpcyBwaWVjZSBvZgppbmZvcm1hdGlvbiBmcm9t
IHNvbWV3aGVyZSBlbHNlLCBsaWtlIGEgRlcgcHJvcGVydHkpLgoKU2lnbmVkLW9mZi1ieTogQm9y
aXMgQnJlemlsbG9uIDxib3Jpcy5icmV6aWxsb25AY29sbGFib3JhLmNvbT4KLS0tCkNoYW5nZXMg
aW4gdjQ6CiogRW5oYW5jZSB0aGUgZG9jCiogRml4IHR5cG9zCiogUmVuYW1lIHNvbWUgcGFyYW1l
dGVycy9maWVsZHMKKiBSZXdvcmQgdGhlIGNvbW1pdCBtZXNzYWdlCgpDaGFuZ2VzIGluIHYzOgoq
IEZpeCB0aGUgY29tbWl0IG1lc3NhZ2UgKFJlcG9ydGVkIGJ5IExhdXJlbnQpCiogRG9jdW1lbnQg
dGhlIGZhY3QgdGhhdCBidXMgZm9ybWF0cyBzaG91bGQgbm90IGJlIGRpcmVjdGx5IG1vZGlmaWVk
IGJ5CiAgZHJpdmVycyAoU3VnZ2VzdGVkIGJ5IExhdXJlbnQpCiogRG9jdW1lbnQgdGhlIGZhY3Qg
dGhhdCBmb3JtYXQgb3JkZXIgbWF0dGVycyAoU3VnZ2VzdGVkIGJ5IExhdXJlbnQpCiogUHJvcGFn
YXRlIGJ1cyBmbGFncyBieSBkZWZhdWx0CiogRG9jdW1lbnQgdGhlIGZhY3QgdGhhdCBkcml2ZXJz
IGNhbiB0d2VhayBidXMgZmxhZ3MgaWYgbmVlZGVkCiogTGV0IC0+YXRvbWljX2dldF97b3V0cHV0
LGlucHV0fV9idXNfZm10cygpIGFsbG9jYXRlIHRoZSBidXMgZm9ybWF0CiAgYXJyYXkgKFN1Z2dl
c3RlZCBieSBMYXVyZW50KQoqIEFkZCBhIGRybV9hdG9taWNfaGVscGVyX2JyaWRnZV9wcm9wYWdh
dGVfYnVzX2ZtdCgpCiogTWFuZGF0ZSB0aGF0IGJyaWRnZSBkcml2ZXJzIHJldHVybiBhY2N1cmF0
ZSBpbnB1dF9mbXRzIGV2ZW4gaWYgdGhleQogIGFyZSBrbm93biB0byBiZSB0aGUgZmlyc3QgZWxl
bWVudCBpbiB0aGUgYnJpZGdlIGNoYWluCgpDaGFuZ2VzIGluIHYyOgoqIFJld29yayB0aGluZ3Mg
dG8gc3VwcG9ydCBtb3JlIGNvbXBsZXggdXNlIGNhc2VzCi0tLQogZHJpdmVycy9ncHUvZHJtL2Ry
bV9icmlkZ2UuYyB8IDI2NyArKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrLQogaW5j
bHVkZS9kcm0vZHJtX2JyaWRnZS5oICAgICB8IDEyNCArKysrKysrKysrKysrKysrCiAyIGZpbGVz
IGNoYW5nZWQsIDM5MCBpbnNlcnRpb25zKCspLCAxIGRlbGV0aW9uKC0pCgpkaWZmIC0tZ2l0IGEv
ZHJpdmVycy9ncHUvZHJtL2RybV9icmlkZ2UuYyBiL2RyaXZlcnMvZ3B1L2RybS9kcm1fYnJpZGdl
LmMKaW5kZXggNTU3YzI5Y2FlNTFiLi45Zjk4N2M3MWFkZWYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMv
Z3B1L2RybS9kcm1fYnJpZGdlLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2RybV9icmlkZ2UuYwpA
QCAtNjUwLDEzICs2NTAsMjYxIEBAIHN0YXRpYyBpbnQgZHJtX2F0b21pY19icmlkZ2VfY2hlY2so
c3RydWN0IGRybV9icmlkZ2UgKmJyaWRnZSwKIAlyZXR1cm4gMDsKIH0KIAorLyoqCisgKiBkcm1f
YXRvbWljX2hlbHBlcl9icmlkZ2VfcHJvcGFnYXRlX2J1c19mbXQoKSAtIFByb3BhZ2F0ZSBvdXRw
dXQgZm9ybWF0IHRvCisgKgkJCQkJCSAgdGhlIGlucHV0IGVuZCBvZiBhIGJyaWRnZQorICogQGJy
aWRnZTogYnJpZGdlIGNvbnRyb2wgc3RydWN0dXJlCisgKiBAYnJpZGdlX3N0YXRlOiBuZXcgYnJp
ZGdlIHN0YXRlCisgKiBAY3J0Y19zdGF0ZTogbmV3IENSVEMgc3RhdGUKKyAqIEBjb25uX3N0YXRl
OiBuZXcgY29ubmVjdG9yIHN0YXRlCisgKiBAb3V0cHV0X2ZtdDogdGVzdGVkIG91dHB1dCBidXMg
Zm9ybWF0CisgKiBAbnVtX2lucHV0X2ZtdHM6IHdpbGwgY29udGFpbiB0aGUgc2l6ZSBvZiB0aGUg
cmV0dXJuZWQgYXJyYXkKKyAqCisgKiBUaGlzIGhlbHBlciBpcyBhIHBsdWdnYWJsZSBpbXBsZW1l
bnRhdGlvbiBvZiB0aGUKKyAqICZkcm1fYnJpZGdlX2Z1bmNzLmF0b21pY19nZXRfaW5wdXRfYnVz
X2ZtdHMgb3BlcmF0aW9uIGZvciBicmlkZ2VzIHRoYXQgZG9uJ3QKKyAqIG1vZGlmeSB0aGUgYnVz
IGNvbmZpZ3VyYXRpb24gYmV0d2VlbiB0aGVpciBpbnB1dCBhbmQgdGhlaXIgb3V0cHV0LiBJdAor
ICogcmV0dXJucyBhbiBhcnJheSBvZiBpbnB1dCBmb3JtYXRzIHdpdGggYSBzaW5nbGUgZWxlbWVu
dCBzZXQgdG8gQG91dHB1dF9mbXQuCisgKgorICogUkVUVVJOUzoKKyAqIGEgdmFsaWQgZm9ybWF0
IGFycmF5IG9mIHNpemUgQG51bV9pbnB1dF9mbXRzLCBvciBOVUxMIGlmIHRoZSBhbGxvY2F0aW9u
CisgKiBmYWlsZWQKKyAqLwordTMyICoKK2RybV9hdG9taWNfaGVscGVyX2JyaWRnZV9wcm9wYWdh
dGVfYnVzX2ZtdChzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJpZGdlLAorCQkJCQlzdHJ1Y3QgZHJtX2Jy
aWRnZV9zdGF0ZSAqYnJpZGdlX3N0YXRlLAorCQkJCQlzdHJ1Y3QgZHJtX2NydGNfc3RhdGUgKmNy
dGNfc3RhdGUsCisJCQkJCXN0cnVjdCBkcm1fY29ubmVjdG9yX3N0YXRlICpjb25uX3N0YXRlLAor
CQkJCQl1MzIgb3V0cHV0X2ZtdCwKKwkJCQkJdW5zaWduZWQgaW50ICpudW1faW5wdXRfZm10cykK
K3sKKwl1MzIgKmlucHV0X2ZtdHM7CisKKwlpbnB1dF9mbXRzID0ga3phbGxvYyhzaXplb2YoKmlu
cHV0X2ZtdHMpLCBHRlBfS0VSTkVMKTsKKwlpZiAoIWlucHV0X2ZtdHMpIHsKKwkJKm51bV9pbnB1
dF9mbXRzID0gMDsKKwkJcmV0dXJuIE5VTEw7CisJfQorCisJKm51bV9pbnB1dF9mbXRzID0gMTsK
KwlpbnB1dF9mbXRzWzBdID0gb3V0cHV0X2ZtdDsKKwlyZXR1cm4gaW5wdXRfZm10czsKK30KK0VY
UE9SVF9TWU1CT0woZHJtX2F0b21pY19oZWxwZXJfYnJpZGdlX3Byb3BhZ2F0ZV9idXNfZm10KTsK
Kworc3RhdGljIGludCBzZWxlY3RfYnVzX2ZtdF9yZWN1cnNpdmUoc3RydWN0IGRybV9icmlkZ2Ug
KmZpcnN0X2JyaWRnZSwKKwkJCQkgICAgc3RydWN0IGRybV9icmlkZ2UgKmN1cl9icmlkZ2UsCisJ
CQkJICAgIHN0cnVjdCBkcm1fY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSwKKwkJCQkgICAgc3RydWN0
IGRybV9jb25uZWN0b3Jfc3RhdGUgKmNvbm5fc3RhdGUsCisJCQkJICAgIHUzMiBvdXRfYnVzX2Zt
dCkKK3sKKwlzdHJ1Y3QgZHJtX2JyaWRnZV9zdGF0ZSAqY3VyX3N0YXRlOworCXVuc2lnbmVkIGlu
dCBudW1faW5fYnVzX2ZtdHMsIGk7CisJc3RydWN0IGRybV9icmlkZ2UgKnByZXZfYnJpZGdlOwor
CXUzMiAqaW5fYnVzX2ZtdHM7CisJaW50IHJldDsKKworCXByZXZfYnJpZGdlID0gZHJtX2JyaWRn
ZV9nZXRfcHJldl9icmlkZ2UoY3VyX2JyaWRnZSk7CisJY3VyX3N0YXRlID0gZHJtX2F0b21pY19n
ZXRfbmV3X2JyaWRnZV9zdGF0ZShjcnRjX3N0YXRlLT5zdGF0ZSwKKwkJCQkJCSAgICBjdXJfYnJp
ZGdlKTsKKwlpZiAoV0FSTl9PTighY3VyX3N0YXRlKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwkv
KgorCSAqIElmIGJ1cyBmb3JtYXQgbmVnb3RpYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlz
IGJyaWRnZSwgbGV0J3MKKwkgKiBwYXNzIE1FRElBX0JVU19GTVRfRklYRUQgdG8gdGhlIHByZXZp
b3VzIGJyaWRnZSBpbiB0aGUgY2hhaW4gYW5kCisJICogaG9wZSB0aGF0IGl0IGNhbiBoYW5kbGUg
dGhpcyBzaXR1YXRpb24gZ3JhY2VmdWxseSAoYnkgcHJvdmlkaW5nCisJICogYXBwcm9wcmlhdGUg
ZGVmYXVsdCB2YWx1ZXMpLgorCSAqLworCWlmICghY3VyX2JyaWRnZS0+ZnVuY3MtPmF0b21pY19n
ZXRfaW5wdXRfYnVzX2ZtdHMpIHsKKwkJaWYgKGN1cl9icmlkZ2UgIT0gZmlyc3RfYnJpZGdlKSB7
CisJCQlyZXQgPSBzZWxlY3RfYnVzX2ZtdF9yZWN1cnNpdmUoZmlyc3RfYnJpZGdlLAorCQkJCQkJ
ICAgICAgIHByZXZfYnJpZGdlLCBjcnRjX3N0YXRlLAorCQkJCQkJICAgICAgIGNvbm5fc3RhdGUs
CisJCQkJCQkgICAgICAgTUVESUFfQlVTX0ZNVF9GSVhFRCk7CisJCQlpZiAocmV0KQorCQkJCXJl
dHVybiByZXQ7CisJCX0KKworCQljdXJfc3RhdGUtPmlucHV0X2J1c19jZmcuZm9ybWF0ID0gTUVE
SUFfQlVTX0ZNVF9GSVhFRDsKKwkJY3VyX3N0YXRlLT5vdXRwdXRfYnVzX2NmZy5mb3JtYXQgPSBv
dXRfYnVzX2ZtdDsKKwkJcmV0dXJuIDA7CisJfQorCisJaW5fYnVzX2ZtdHMgPSBjdXJfYnJpZGdl
LT5mdW5jcy0+YXRvbWljX2dldF9pbnB1dF9idXNfZm10cyhjdXJfYnJpZGdlLAorCQkJCQkJCWN1
cl9zdGF0ZSwKKwkJCQkJCQljcnRjX3N0YXRlLAorCQkJCQkJCWNvbm5fc3RhdGUsCisJCQkJCQkJ
b3V0X2J1c19mbXQsCisJCQkJCQkJJm51bV9pbl9idXNfZm10cyk7CisJaWYgKCFudW1faW5fYnVz
X2ZtdHMpCisJCXJldHVybiAtRU5PVFNVUFA7CisJZWxzZSBpZiAoIWluX2J1c19mbXRzKQorCQly
ZXR1cm4gLUVOT01FTTsKKworCWlmIChmaXJzdF9icmlkZ2UgPT0gY3VyX2JyaWRnZSkgeworCQlj
dXJfc3RhdGUtPmlucHV0X2J1c19jZmcuZm9ybWF0ID0gaW5fYnVzX2ZtdHNbMF07CisJCWN1cl9z
dGF0ZS0+b3V0cHV0X2J1c19jZmcuZm9ybWF0ID0gb3V0X2J1c19mbXQ7CisJCWtmcmVlKGluX2J1
c19mbXRzKTsKKwkJcmV0dXJuIDA7CisJfQorCisJZm9yIChpID0gMDsgaSA8IG51bV9pbl9idXNf
Zm10czsgaSsrKSB7CisJCXJldCA9IHNlbGVjdF9idXNfZm10X3JlY3Vyc2l2ZShmaXJzdF9icmlk
Z2UsIHByZXZfYnJpZGdlLAorCQkJCQkgICAgICAgY3J0Y19zdGF0ZSwgY29ubl9zdGF0ZSwKKwkJ
CQkJICAgICAgIGluX2J1c19mbXRzW2ldKTsKKwkJaWYgKHJldCAhPSAtRU5PVFNVUFApCisJCQli
cmVhazsKKwl9CisKKwlpZiAoIXJldCkgeworCQljdXJfc3RhdGUtPmlucHV0X2J1c19jZmcuZm9y
bWF0ID0gaW5fYnVzX2ZtdHNbaV07CisJCWN1cl9zdGF0ZS0+b3V0cHV0X2J1c19jZmcuZm9ybWF0
ID0gb3V0X2J1c19mbXQ7CisJfQorCisJa2ZyZWUoaW5fYnVzX2ZtdHMpOworCXJldHVybiByZXQ7
Cit9CisKKy8qCisgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSAmZHJtX2F0b21pY19icmlk
Z2VfY2hhaW5fY2hlY2soKSBqdXN0IGJlZm9yZQorICogY2FsbGluZyAmZHJtX2JyaWRnZV9mdW5j
cy5hdG9taWNfY2hlY2soKSBvbiBhbGwgZWxlbWVudHMgb2YgdGhlIGNoYWluLgorICogSXQgcGVy
Zm9ybXMgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbiBiZXR3ZWVuIGJyaWRnZSBlbGVtZW50cy4gVGhl
IG5lZ290aWF0aW9uCisgKiBoYXBwZW5zIGluIHJldmVyc2Ugb3JkZXIsIHN0YXJ0aW5nIGZyb20g
dGhlIGxhc3QgZWxlbWVudCBpbiB0aGUgY2hhaW4gdXAgdG8KKyAqIEBicmlkZ2UuCisgKgorICog
TmVnb3RpYXRpb24gc3RhcnRzIGJ5IHJldHJpZXZpbmcgc3VwcG9ydGVkIG91dHB1dCBidXMgZm9y
bWF0cyBvbiB0aGUgbGFzdAorICogYnJpZGdlIGVsZW1lbnQgYW5kIHRlc3RpbmcgdGhlbSBvbmUg
Ynkgb25lLiBUaGUgdGVzdCBpcyByZWN1cnNpdmUsIG1lYW5pbmcKKyAqIHRoYXQgZm9yIGVhY2gg
dGVzdGVkIG91dHB1dCBmb3JtYXQsIHRoZSB3aG9sZSBjaGFpbiB3aWxsIGJlIHdhbGtlZCBiYWNr
d2FyZCwKKyAqIGFuZCBlYWNoIGVsZW1lbnQgd2lsbCBoYXZlIHRvIGNob29zZSBhbiBpbnB1dCBi
dXMgZm9ybWF0IHRoYXQgY2FuIGJlCisgKiB0cmFuc2NvZGVkIHRvIHRoZSByZXF1ZXN0ZWQgb3V0
cHV0IGZvcm1hdC4gV2hlbiBhIGJyaWRnZSBlbGVtZW50IGRvZXMgbm90CisgKiBzdXBwb3J0IHRy
YW5zY29kaW5nIGludG8gYSBzcGVjaWZpYyBvdXRwdXQgZm9ybWF0IC1FTk9UU1VQUCBpcyByZXR1
cm5lZCBhbmQKKyAqIHRoZSBuZXh0IGJyaWRnZSBlbGVtZW50IHdpbGwgaGF2ZSB0byB0cnkgYSBk
aWZmZXJlbnQgZm9ybWF0LiBJZiBub25lIG9mIHRoZQorICogY29tYmluYXRpb25zIHdvcmtlZCwg
LUVOT1RTVVBQIGlzIHJldHVybmVkIGFuZCB0aGUgYXRvbWljIG1vZGVzZXQgd2lsbCBmYWlsLgor
ICoKKyAqIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgcmVseWluZyBvbgorICogJmRybV9icmlkZ2Vf
ZnVuY3MuYXRvbWljX2dldF9vdXRwdXRfYnVzX2ZtdHMoKSBhbmQKKyAqICZkcm1fYnJpZGdlX2Z1
bmNzLmF0b21pY19nZXRfaW5wdXRfYnVzX2ZtdHMoKSB0byBnYXRoZXIgc3VwcG9ydGVkCisgKiBp
bnB1dC9vdXRwdXQgZm9ybWF0cy4KKyAqCisgKiBXaGVuICZkcm1fYnJpZGdlX2Z1bmNzLmF0b21p
Y19nZXRfb3V0cHV0X2J1c19mbXRzKCkgaXMgbm90IGltcGxlbWVudGVkIGJ5CisgKiB0aGUgbGFz
dCBlbGVtZW50IG9mIHRoZSBjaGFpbiwgJmRybV9hdG9taWNfYnJpZGdlX2NoYWluX3NlbGVjdF9i
dXNfZm10cygpCisgKiB0cmllcyBhIHNpbmdsZSBmb3JtYXQ6ICZkcm1fY29ubmVjdG9yLmRpc3Bs
YXlfaW5mby5idXNfZm9ybWF0c1swXSBpZgorICogYXZhaWxhYmxlLCBNRURJQV9CVVNfRk1UX0ZJ
WEVEIG90aGVyd2lzZS4KKyAqCisgKiBXaGVuICZkcm1fYnJpZGdlX2Z1bmNzLmF0b21pY19nZXRf
aW5wdXRfYnVzX2ZtdHMoKSBpcyBub3QgaW1wbGVtZW50ZWQsCisgKiAmZHJtX2F0b21pY19icmlk
Z2VfY2hhaW5fc2VsZWN0X2J1c19mbXRzKCkgc2tpcHMgdGhlIG5lZ290aWF0aW9uIG9uIHRoZQor
ICogYnJpZGdlIGVsZW1lbnQgdGhhdCBsYWNrcyB0aGlzIGhvb2sgYW5kIGFza3MgdGhlIHByZXZp
b3VzIGVsZW1lbnQgaW4gdGhlCisgKiBjaGFpbiB0byB0cnkgTUVESUFfQlVTX0ZNVF9GSVhFRC4g
SXQncyB1cCB0byBicmlkZ2UgZHJpdmVycyB0byBkZWNpZGUgd2hhdAorICogdG8gZG8gaW4gdGhh
dCBjYXNlIChmYWlsIGlmIHRoZXkgd2FudCB0byBlbmZvcmNlIGJ1cyBmb3JtYXQgbmVnb3RpYXRp
b24sIG9yCisgKiBwcm92aWRlIGEgcmVhc29uYWJsZSBkZWZhdWx0IGlmIHRoZXkgbmVlZCB0byBz
dXBwb3J0IHBpcGVsaW5lcyB3aGVyZSBub3QKKyAqIGFsbCBlbGVtZW50cyBzdXBwb3J0IGJ1cyBm
b3JtYXQgbmVnb3RpYXRpb24pLgorICovCitzdGF0aWMgaW50Citkcm1fYXRvbWljX2JyaWRnZV9j
aGFpbl9zZWxlY3RfYnVzX2ZtdHMoc3RydWN0IGRybV9icmlkZ2UgKmJyaWRnZSwKKwkJCQkJc3Ry
dWN0IGRybV9jcnRjX3N0YXRlICpjcnRjX3N0YXRlLAorCQkJCQlzdHJ1Y3QgZHJtX2Nvbm5lY3Rv
cl9zdGF0ZSAqY29ubl9zdGF0ZSkKK3sKKwlzdHJ1Y3QgZHJtX2Nvbm5lY3RvciAqY29ubiA9IGNv
bm5fc3RhdGUtPmNvbm5lY3RvcjsKKwlzdHJ1Y3QgZHJtX2VuY29kZXIgKmVuY29kZXIgPSBicmlk
Z2UtPmVuY29kZXI7CisJc3RydWN0IGRybV9icmlkZ2Vfc3RhdGUgKmxhc3RfYnJpZGdlX3N0YXRl
OworCXVuc2lnbmVkIGludCBpLCBudW1fb3V0X2J1c19mbXRzOworCXN0cnVjdCBkcm1fYnJpZGdl
ICpsYXN0X2JyaWRnZTsKKwl1MzIgKm91dF9idXNfZm10czsKKwlpbnQgcmV0ID0gMDsKKworCWxh
c3RfYnJpZGdlID0gbGlzdF9sYXN0X2VudHJ5KCZlbmNvZGVyLT5icmlkZ2VfY2hhaW4sCisJCQkJ
ICAgICAgc3RydWN0IGRybV9icmlkZ2UsIGNoYWluX25vZGUpOworCWxhc3RfYnJpZGdlX3N0YXRl
ID0gZHJtX2F0b21pY19nZXRfbmV3X2JyaWRnZV9zdGF0ZShjcnRjX3N0YXRlLT5zdGF0ZSwKKwkJ
CQkJCQkgICAgbGFzdF9icmlkZ2UpOworCWlmIChXQVJOX09OKCFsYXN0X2JyaWRnZV9zdGF0ZSkp
CisJCXJldHVybiAtRUlOVkFMOworCisJaWYgKGxhc3RfYnJpZGdlLT5mdW5jcy0+YXRvbWljX2dl
dF9vdXRwdXRfYnVzX2ZtdHMpIHsKKwkJY29uc3Qgc3RydWN0IGRybV9icmlkZ2VfZnVuY3MgKmZ1
bmNzID0gbGFzdF9icmlkZ2UtPmZ1bmNzOworCisJCW91dF9idXNfZm10cyA9IGZ1bmNzLT5hdG9t
aWNfZ2V0X291dHB1dF9idXNfZm10cyhsYXN0X2JyaWRnZSwKKwkJCQkJCQlsYXN0X2JyaWRnZV9z
dGF0ZSwKKwkJCQkJCQljcnRjX3N0YXRlLAorCQkJCQkJCWNvbm5fc3RhdGUsCisJCQkJCQkJJm51
bV9vdXRfYnVzX2ZtdHMpOworCQlpZiAoIW51bV9vdXRfYnVzX2ZtdHMpCisJCQlyZXR1cm4gLUVO
T1RTVVBQOworCQllbHNlIGlmICghb3V0X2J1c19mbXRzKQorCQkJcmV0dXJuIC1FTk9NRU07CisJ
fSBlbHNlIHsKKwkJbnVtX291dF9idXNfZm10cyA9IDE7CisJCW91dF9idXNfZm10cyA9IGttYWxs
b2Moc2l6ZW9mKCpvdXRfYnVzX2ZtdHMpLCBHRlBfS0VSTkVMKTsKKwkJaWYgKCFvdXRfYnVzX2Zt
dHMpCisJCQlyZXR1cm4gLUVOT01FTTsKKworCQlpZiAoY29ubi0+ZGlzcGxheV9pbmZvLm51bV9i
dXNfZm9ybWF0cyAmJgorCQkgICAgY29ubi0+ZGlzcGxheV9pbmZvLmJ1c19mb3JtYXRzKQorCQkJ
b3V0X2J1c19mbXRzWzBdID0gY29ubi0+ZGlzcGxheV9pbmZvLmJ1c19mb3JtYXRzWzBdOworCQll
bHNlCisJCQlvdXRfYnVzX2ZtdHNbMF0gPSBNRURJQV9CVVNfRk1UX0ZJWEVEOworCX0KKworCWZv
ciAoaSA9IDA7IGkgPCBudW1fb3V0X2J1c19mbXRzOyBpKyspIHsKKwkJcmV0ID0gc2VsZWN0X2J1
c19mbXRfcmVjdXJzaXZlKGJyaWRnZSwgbGFzdF9icmlkZ2UsIGNydGNfc3RhdGUsCisJCQkJCSAg
ICAgICBjb25uX3N0YXRlLCBvdXRfYnVzX2ZtdHNbaV0pOworCQlpZiAocmV0ICE9IC1FTk9UU1VQ
UCkKKwkJCWJyZWFrOworCX0KKworCWtmcmVlKG91dF9idXNfZm10cyk7CisKKwlyZXR1cm4gcmV0
OworfQorCitzdGF0aWMgdm9pZAorZHJtX2F0b21pY19icmlkZ2VfcHJvcGFnYXRlX2J1c19mbGFn
cyhzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJpZGdlLAorCQkJCSAgICAgIHN0cnVjdCBkcm1fY29ubmVj
dG9yICpjb25uLAorCQkJCSAgICAgIHN0cnVjdCBkcm1fYXRvbWljX3N0YXRlICpzdGF0ZSkKK3sK
KwlzdHJ1Y3QgZHJtX2JyaWRnZV9zdGF0ZSAqYnJpZGdlX3N0YXRlLCAqbmV4dF9icmlkZ2Vfc3Rh
dGU7CisJc3RydWN0IGRybV9icmlkZ2UgKm5leHRfYnJpZGdlOworCXUzMiBvdXRwdXRfZmxhZ3M7
CisKKwlicmlkZ2Vfc3RhdGUgPSBkcm1fYXRvbWljX2dldF9uZXdfYnJpZGdlX3N0YXRlKHN0YXRl
LCBicmlkZ2UpOworCW5leHRfYnJpZGdlID0gZHJtX2JyaWRnZV9nZXRfbmV4dF9icmlkZ2UoYnJp
ZGdlKTsKKworCS8qCisJICogTGV0J3MgdHJ5IHRvIGFwcGx5IHRoZSBtb3N0IGNvbW1vbiBjYXNl
IGhlcmUsIHRoYXQgaXMsIHByb3BhZ2F0ZQorCSAqIGRpc3BsYXlfaW5mbyBmbGFncyBmb3IgdGhl
IGxhc3QgYnJpZGdlLCBhbmQgcHJvcGFnYXRlIHRoZSBpbnB1dAorCSAqIGZsYWdzIG9mIHRoZSBu
ZXh0IGJyaWRnZSBlbGVtZW50IHRvIHRoZSBvdXRwdXQgZW5kIG9mIHRoZSBjdXJyZW50CisJICog
YnJpZGdlIHdoZW4gdGhlIGJyaWRnZSBpcyBub3QgdGhlIGxhc3Qgb25lLgorCSAqIFRoZXJlIGFy
ZSBleGNlcHRpb25zIHRvIHRoaXMgcnVsZSwgbGlrZSB3aGVuIHNpZ25hbCBpbnZlcnNpb24gaXMK
KwkgKiBoYXBwZW5pbmcgYXQgdGhlIGJvYXJkIGxldmVsLCBidXQgdGhhdCdzIHNvbWV0aGluZyBk
cml2ZXJzIGNhbiBkZWFsCisJICogd2l0aCBmcm9tIHRoZWlyICZkcm1fYnJpZGdlX2Z1bmNzLmF0
b21pY19jaGVjaygpIGltcGxlbWVudGF0aW9uIGJ5CisJICogc2ltcGx5IG92ZXJyaWRpbmcgdGhl
IGZsYWdzIHZhbHVlIHdlJ3ZlIHNldCBoZXJlLgorCSAqLworCWlmICghbmV4dF9icmlkZ2UpIHsK
KwkJb3V0cHV0X2ZsYWdzID0gY29ubi0+ZGlzcGxheV9pbmZvLmJ1c19mbGFnczsKKwl9IGVsc2Ug
eworCQluZXh0X2JyaWRnZV9zdGF0ZSA9IGRybV9hdG9taWNfZ2V0X25ld19icmlkZ2Vfc3RhdGUo
c3RhdGUsCisJCQkJCQkJCW5leHRfYnJpZGdlKTsKKwkJb3V0cHV0X2ZsYWdzID0gbmV4dF9icmlk
Z2Vfc3RhdGUtPmlucHV0X2J1c19jZmcuZmxhZ3M7CisJfQorCisJYnJpZGdlX3N0YXRlLT5vdXRw
dXRfYnVzX2NmZy5mbGFncyA9IG91dHB1dF9mbGFnczsKKworCS8qCisJICogUHJvcGFnZSB0aGUg
b3V0cHV0IGZsYWdzIHRvIHRoZSBpbnB1dCBlbmQgb2YgdGhlIGJyaWRnZS4gQWdhaW4sIGl0J3MK
KwkgKiBub3QgbmVjZXNzYXJpbHkgd2hhdCBhbGwgYnJpZGdlcyB3YW50LCBidXQgdGhhdCdzIHdo
YXQgbW9zdCBvZiB0aGVtCisJICogZG8sIGFuZCBieSBkb2luZyB0aGF0IGJ5IGRlZmF1bHQgd2Ug
YXZvaWQgZm9yY2luZyBkcml2ZXJzIHRvCisJICogZHVwbGljYXRlIHRoZSAiZHVtbXkgcHJvcGFn
YXRpb24iIGxvZ2ljLgorCSAqLworCWJyaWRnZV9zdGF0ZS0+aW5wdXRfYnVzX2NmZy5mbGFncyA9
IG91dHB1dF9mbGFnczsKK30KKwogLyoqCiAgKiBkcm1fYXRvbWljX2JyaWRnZV9jaGFpbl9jaGVj
aygpIC0gRG8gYW4gYXRvbWljIGNoZWNrIG9uIHRoZSBicmlkZ2UgY2hhaW4KICAqIEBicmlkZ2U6
IGJyaWRnZSBjb250cm9sIHN0cnVjdHVyZQogICogQGNydGNfc3RhdGU6IG5ldyBDUlRDIHN0YXRl
CiAgKiBAY29ubl9zdGF0ZTogbmV3IGNvbm5lY3RvciBzdGF0ZQogICoKLSAqIENhbGxzICZkcm1f
YnJpZGdlX2Z1bmNzLmF0b21pY19jaGVjaygpIChmYWxscyBiYWNrIG9uCisgKiBGaXJzdCB0cmln
Z2VyIGEgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbiBiZWZvcmUgY2FsbGluZworICogJmRybV9icmlk
Z2VfZnVuY3MuYXRvbWljX2NoZWNrKCkgKGZhbGxzIGJhY2sgb24KICAqICZkcm1fYnJpZGdlX2Z1
bmNzLm1vZGVfZml4dXAoKSkgb3AgZm9yIGFsbCB0aGUgYnJpZGdlcyBpbiB0aGUgZW5jb2RlciBj
aGFpbiwKICAqIHN0YXJ0aW5nIGZyb20gdGhlIGxhc3QgYnJpZGdlIHRvIHRoZSBmaXJzdC4gVGhl
c2UgYXJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZwogICogJmRybV9lbmNvZGVyX2hlbHBlcl9mdW5j
cy5hdG9taWNfY2hlY2soKQpAQCAtNjY4LDEyICs5MTYsMjkgQEAgaW50IGRybV9hdG9taWNfYnJp
ZGdlX2NoYWluX2NoZWNrKHN0cnVjdCBkcm1fYnJpZGdlICpicmlkZ2UsCiAJCQkJICBzdHJ1Y3Qg
ZHJtX2NydGNfc3RhdGUgKmNydGNfc3RhdGUsCiAJCQkJICBzdHJ1Y3QgZHJtX2Nvbm5lY3Rvcl9z
dGF0ZSAqY29ubl9zdGF0ZSkKIHsKKwlzdHJ1Y3QgZHJtX2Nvbm5lY3RvciAqY29ubiA9IGNvbm5f
c3RhdGUtPmNvbm5lY3RvcjsKIAlzdHJ1Y3QgZHJtX2VuY29kZXIgKmVuY29kZXIgPSBicmlkZ2Ut
PmVuY29kZXI7CiAJc3RydWN0IGRybV9icmlkZ2UgKml0ZXI7CisJaW50IHJldDsKKworCXJldCA9
IGRybV9hdG9taWNfYnJpZGdlX2NoYWluX3NlbGVjdF9idXNfZm10cyhicmlkZ2UsIGNydGNfc3Rh
dGUsCisJCQkJCQkgICAgICBjb25uX3N0YXRlKTsKKwlpZiAocmV0KQorCQlyZXR1cm4gcmV0Owog
CiAJbGlzdF9mb3JfZWFjaF9lbnRyeV9yZXZlcnNlKGl0ZXIsICZlbmNvZGVyLT5icmlkZ2VfY2hh
aW4sIGNoYWluX25vZGUpIHsKIAkJaW50IHJldDsKIAorCQkvKgorCQkgKiBCdXMgZmxhZ3MgYXJl
IHByb3BhZ2F0ZWQgYnkgZGVmYXVsdC4gSWYgYSBicmlkZ2UgbmVlZHMgdG8KKwkJICogdHdlYWsg
dGhlIGlucHV0IGJ1cyBmbGFncyBmb3IgYW55IHJlYXNvbiwgaXQgc2hvdWxkIGhhcHBlbgorCQkg
KiBpbiBpdHMgJmRybV9icmlkZ2VfZnVuY3MuYXRvbWljX2NoZWNrKCkgaW1wbGVtZW50YXRpb24g
c3VjaAorCQkgKiB0aGF0IHByZWNlZGluZyBicmlkZ2VzIGluIHRoZSBjaGFpbiBjYW4gcHJvcGFn
YXRlIHRoZSBuZXcKKwkJICogYnVzIGZsYWdzLgorCQkgKi8KKwkJZHJtX2F0b21pY19icmlkZ2Vf
cHJvcGFnYXRlX2J1c19mbGFncyhpdGVyLCBjb25uLAorCQkJCQkJICAgICAgY3J0Y19zdGF0ZS0+
c3RhdGUpOworCiAJCXJldCA9IGRybV9hdG9taWNfYnJpZGdlX2NoZWNrKGl0ZXIsIGNydGNfc3Rh
dGUsIGNvbm5fc3RhdGUpOwogCQlpZiAocmV0KQogCQkJcmV0dXJuIHJldDsKZGlmZiAtLWdpdCBh
L2luY2x1ZGUvZHJtL2RybV9icmlkZ2UuaCBiL2luY2x1ZGUvZHJtL2RybV9icmlkZ2UuaAppbmRl
eCA4MjA2YWQ5MGFkMmQuLjYyMTdhMzFhZjhkOCAxMDA2NDQKLS0tIGEvaW5jbHVkZS9kcm0vZHJt
X2JyaWRnZS5oCisrKyBiL2luY2x1ZGUvZHJtL2RybV9icmlkZ2UuaApAQCAtMzUsNiArMzUsMzgg
QEAgc3RydWN0IGRybV9icmlkZ2U7CiBzdHJ1Y3QgZHJtX2JyaWRnZV90aW1pbmdzOwogc3RydWN0
IGRybV9wYW5lbDsKIAorLyoqCisgKiBzdHJ1Y3QgZHJtX2J1c19jZmcgLSBidXMgY29uZmlndXJh
dGlvbgorICoKKyAqIFRoaXMgc3RydWN0dXJlIHN0b3JlcyB0aGUgY29uZmlndXJhdGlvbiBvZiBh
IHBoeXNpY2FsIGJ1cyBiZXR3ZWVuIHR3bworICogY29tcG9uZW50cyBpbiBhbiBvdXRwdXQgcGlw
ZWxpbmUsIHVzdWFsbHkgYmV0d2VlbiB0d28gYnJpZGdlcywgYW4gZW5jb2RlcgorICogYW5kIGEg
YnJpZGdlLCBvciBhIGJyaWRnZSBhbmQgYSBjb25uZWN0b3IuCisgKgorICogVGhlIGJ1cyBjb25m
aWd1cmF0aW9uIGlzIHN0b3JlZCBpbiAmZHJtX2JyaWRnZV9zdGF0ZSBzZXBhcmF0ZWx5IGZvciB0
aGUKKyAqIGlucHV0IGFuZCBvdXRwdXQgYnVzZXMsIGFzIHNlZW4gZnJvbSB0aGUgcG9pbnQgb2Yg
dmlldyBvZiBlYWNoIGJyaWRnZS4gVGhlCisgKiBidXMgY29uZmlndXJhdGlvbiBvZiBhIGJyaWRn
ZSBvdXRwdXQgaXMgdXN1YWxseSBpZGVudGljYWwgdG8gdGhlCisgKiBjb25maWd1cmF0aW9uIG9m
IHRoZSBuZXh0IGJyaWRnZSdzIGlucHV0LCBidXQgbWF5IGRpZmZlciBpZiB0aGUgc2lnbmFscyBh
cmUKKyAqIG1vZGlmaWVkIGJldHdlZW4gdGhlIHR3byBicmlkZ2VzLCBmb3IgaW5zdGFuY2UgYnkg
YW4gaW52ZXJ0ZXIgb24gdGhlIGJvYXJkLgorICogVGhlIGlucHV0IGFuZCBvdXRwdXQgY29uZmln
dXJhdGlvbnMgb2YgYSBicmlkZ2UgbWF5IGRpZmZlciBpZiB0aGUgYnJpZGdlCisgKiBtb2RpZmll
cyB0aGUgc2lnbmFscyBpbnRlcm5hbGx5LCBmb3IgaW5zdGFuY2UgYnkgcGVyZm9ybWluZyBmb3Jt
YXQKKyAqIGNvbnZlcnNpb24sIG9yIG1vZGlmeWluZyBzaWduYWxzIHBvbGFyaXRpZXMuCisgKi8K
K3N0cnVjdCBkcm1fYnVzX2NmZyB7CisJLyoqCisJICogQGZtdDogZm9ybWF0IHVzZWQgb24gdGhp
cyBidXMgKG9uZSBvZiB0aGUgTUVESUFfQlVTX0ZNVF8qIGZvcm1hdCkKKwkgKgorCSAqIFRoaXMg
ZmllbGQgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBtb2RpZmllZCBieSBkcml2ZXJzCisJICogKCZk
cm1fYXRvbWljX2JyaWRnZV9jaGFpbl9zZWxlY3RfYnVzX2ZtdHMoKSB0YWtlcyBjYXJlIG9mIHRo
ZSBidXMKKwkgKiBmb3JtYXQgbmVnb3RpYXRpb24pLgorCSAqLworCXUzMiBmb3JtYXQ7CisKKwkv
KioKKwkgKiBAZmxhZ3M6IERSTV9CVVNfKiBmbGFncyB1c2VkIG9uIHRoaXMgYnVzCisJICovCisJ
dTMyIGZsYWdzOworfTsKKwogLyoqCiAgKiBzdHJ1Y3QgZHJtX2JyaWRnZV9zdGF0ZSAtIEF0b21p
YyBicmlkZ2Ugc3RhdGUgb2JqZWN0CiAgKiBAYmFzZTogaW5oZXJpdCBmcm9tICZkcm1fcHJpdmF0
ZV9zdGF0ZQpAQCAtNDQsNiArNzYsMTYgQEAgc3RydWN0IGRybV9icmlkZ2Vfc3RhdGUgewogCXN0
cnVjdCBkcm1fcHJpdmF0ZV9zdGF0ZSBiYXNlOwogCiAJc3RydWN0IGRybV9icmlkZ2UgKmJyaWRn
ZTsKKworCS8qKgorCSAqIEBpbnB1dF9idXNfY2ZnOiBpbnB1dCBidXMgY29uZmlndXJhdGlvbgor
CSAqLworCXN0cnVjdCBkcm1fYnVzX2NmZyBpbnB1dF9idXNfY2ZnOworCisJLyoqCisJICogQG91
dHB1dF9idXNfY2ZnOiBpbnB1dCBidXMgY29uZmlndXJhdGlvbgorCSAqLworCXN0cnVjdCBkcm1f
YnVzX2NmZyBvdXRwdXRfYnVzX2NmZzsKIH07CiAKIHN0YXRpYyBpbmxpbmUgc3RydWN0IGRybV9i
cmlkZ2Vfc3RhdGUgKgpAQCAtMzg3LDYgKzQyOSw3MiBAQCBzdHJ1Y3QgZHJtX2JyaWRnZV9mdW5j
cyB7CiAJdm9pZCAoKmF0b21pY19kZXN0cm95X3N0YXRlKShzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJp
ZGdlLAogCQkJCSAgICAgc3RydWN0IGRybV9icmlkZ2Vfc3RhdGUgKnN0YXRlKTsKIAorCS8qKgor
CSAqIEBhdG9taWNfZ2V0X291dHB1dF9idXNfZm10czoKKwkgKgorCSAqIFJldHVybiB0aGUgc3Vw
cG9ydGVkIGJ1cyBmb3JtYXRzIG9uIHRoZSBvdXRwdXQgZW5kIG9mIGEgYnJpZGdlLgorCSAqIFRo
ZSByZXR1cm5lZCBhcnJheSBtdXN0IGJlIGFsbG9jYXRlZCB3aXRoIGttYWxsb2MoKSBhbmQgd2ls
bCBiZQorCSAqIGZyZWVkIGJ5IHRoZSBjYWxsZXIuIElmIHRoZSBhbGxvY2F0aW9uIGZhaWxzLCBO
VUxMIHNob3VsZCBiZQorCSAqIHJldHVybmVkLiBudW1fb3V0cHV0X2ZtdHMgbXVzdCBiZSBzZXQg
dG8gdGhlIHJldHVybmVkIGFycmF5IHNpemUuCisJICogRm9ybWF0cyBsaXN0ZWQgaW4gdGhlIHJl
dHVybmVkIGFycmF5IHNob3VsZCBiZSBsaXN0ZWQgaW4gZGVjcmVhc2luZworCSAqIHByZWZlcmVu
Y2Ugb3JkZXIgKHRoZSBjb3JlIHdpbGwgdHJ5IGFsbCBmb3JtYXRzIHVudGlsIGl0IGZpbmRzIG9u
ZQorCSAqIHRoYXQgd29ya3MpLgorCSAqCisJICogVGhpcyBtZXRob2QgaXMgb25seSBjYWxsZWQg
b24gdGhlIGxhc3QgZWxlbWVudCBvZiB0aGUgYnJpZGdlIGNoYWluCisJICogYXMgcGFydCBvZiB0
aGUgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbiBwcm9jZXNzIHRoYXQgaGFwcGVucyBpbgorCSAqICZk
cm1fYXRvbWljX2JyaWRnZV9jaGFpbl9zZWxlY3RfYnVzX2ZtdHMoKS4KKwkgKiBUaGlzIG1ldGhv
ZCBpcyBvcHRpb25hbC4gV2hlbiBub3QgaW1wbGVtZW50ZWQsIHRoZSBjb3JlIHdpbGwKKwkgKiBm
YWxsIGJhY2sgdG8gJmRybV9jb25uZWN0b3IuZGlzcGxheV9pbmZvLmJ1c19mb3JtYXRzWzBdIGlm
CisJICogJmRybV9jb25uZWN0b3IuZGlzcGxheV9pbmZvLm51bV9idXNfZm9ybWF0cyA+IDAsCisJ
ICogb3IgdG8gTUVESUFfQlVTX0ZNVF9GSVhFRCBvdGhlcndpc2UuCisJICovCisJdTMyICooKmF0
b21pY19nZXRfb3V0cHV0X2J1c19mbXRzKShzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJpZGdlLAorCQkJ
CQkgICBzdHJ1Y3QgZHJtX2JyaWRnZV9zdGF0ZSAqYnJpZGdlX3N0YXRlLAorCQkJCQkgICBzdHJ1
Y3QgZHJtX2NydGNfc3RhdGUgKmNydGNfc3RhdGUsCisJCQkJCSAgIHN0cnVjdCBkcm1fY29ubmVj
dG9yX3N0YXRlICpjb25uX3N0YXRlLAorCQkJCQkgICB1bnNpZ25lZCBpbnQgKm51bV9vdXRwdXRf
Zm10cyk7CisKKwkvKioKKwkgKiBAYXRvbWljX2dldF9pbnB1dF9idXNfZm10czoKKwkgKgorCSAq
IFJldHVybiB0aGUgc3VwcG9ydGVkIGJ1cyBmb3JtYXRzIG9uIHRoZSBpbnB1dCBlbmQgb2YgYSBi
cmlkZ2UgZm9yCisJICogYSBzcGVjaWZpYyBvdXRwdXQgYnVzIGZvcm1hdC4KKwkgKgorCSAqIFRo
ZSByZXR1cm5lZCBhcnJheSBtdXN0IGJlIGFsbG9jYXRlZCB3aXRoIGttYWxsb2MoKSBhbmQgd2ls
bCBiZQorCSAqIGZyZWVkIGJ5IHRoZSBjYWxsZXIuIElmIHRoZSBhbGxvY2F0aW9uIGZhaWxzLCBO
VUxMIHNob3VsZCBiZQorCSAqIHJldHVybmVkLiBudW1fb3V0cHV0X2ZtdHMgbXVzdCBiZSBzZXQg
dG8gdGhlIHJldHVybmVkIGFycmF5IHNpemUuCisJICogRm9ybWF0cyBsaXN0ZWQgaW4gdGhlIHJl
dHVybmVkIGFycmF5IHNob3VsZCBiZSBsaXN0ZWQgaW4gZGVjcmVhc2luZworCSAqIHByZWZlcmVu
Y2Ugb3JkZXIgKHRoZSBjb3JlIHdpbGwgdHJ5IGFsbCBmb3JtYXRzIHVudGlsIGl0IGZpbmRzIG9u
ZQorCSAqIHRoYXQgd29ya3MpLiBXaGVuIHRoZSBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZCBOVUxM
IHNob3VsZCBiZQorCSAqIHJldHVybmVkIGFuZCAqbnVtX291dHB1dF9mbXRzIHNob3VsZCBiZSBz
ZXQgdG8gMC4KKwkgKgorCSAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbiBhbGwgZWxlbWVudHMg
b2YgdGhlIGJyaWRnZSBjaGFpbiBhcyBwYXJ0IG9mCisJICogdGhlIGJ1cyBmb3JtYXQgbmVnb3Rp
YXRpb24gcHJvY2VzcyB0aGF0IGhhcHBlbnMgaW4KKwkgKiAmZHJtX2F0b21pY19icmlkZ2VfY2hh
aW5fc2VsZWN0X2J1c19mbXRzKCkuCisJICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuIFdoZW4g
bm90IGltcGxlbWVudGVkLCB0aGUgY29yZSB3aWxsIGJ5cGFzcworCSAqIGJ1cyBmb3JtYXQgbmVn
b3RpYXRpb24gb24gdGhpcyBlbGVtZW50IG9mIHRoZSBicmlkZ2Ugd2l0aG91dAorCSAqIGZhaWxp
bmcsIGFuZCB0aGUgcHJldmlvdXMgZWxlbWVudCBpbiB0aGUgY2hhaW4gd2lsbCBiZSBwYXNzZWQK
KwkgKiBNRURJQV9CVVNfRk1UX0ZJWEVEIGFzIGl0cyBvdXRwdXQgYnVzIGZvcm1hdC4KKwkgKgor
CSAqIEJyaWRnZSBkcml2ZXJzIHRoYXQgbmVlZCB0byBzdXBwb3J0IGJlaW5nIGxpbmtlZCB0byBi
cmlkZ2VzIHRoYXQgYXJlCisJICogbm90IHN1cHBvcnRpbmcgYnVzIGZvcm1hdCBuZWdvdGlhdGlv
biBzaG91bGQgaGFuZGxlIHRoZQorCSAqIG91dHB1dF9mbXQgPT0gTUVESUFfQlVTX0ZNVF9GSVhF
RCBjYXNlIGFwcHJvcHJpYXRlbHksIGJ5IHNlbGVjdGluZyBhCisJICogc2Vuc2libGUgZGVmYXVs
dCB2YWx1ZSBvciBleHRyYWN0aW5nIHRoaXMgaW5mb3JtYXRpb24gZnJvbSBzb21ld2hlcmUKKwkg
KiBlbHNlIChGVyBwcm9wZXJ0eSwgJmRybV9kaXNwbGF5X21vZGUsICZkcm1fZGlzcGxheV9pbmZv
LCAuLi4pCisJICoKKwkgKiBOb3RlOiBFdmVuIGlmIGlucHV0IGZvcm1hdCBzZWxlY3Rpb24gb24g
dGhlIGZpcnN0IGJyaWRnZSBoYXMgbm8KKwkgKiBpbXBhY3Qgb24gdGhlIG5lZ290aWF0aW9uIHBy
b2Nlc3MgKGJ1cyBmb3JtYXQgbmVnb3RpYXRpb24gc3RvcHMgb25jZQorCSAqIHdlIHJlYWNoIHRo
ZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBjaGFpbiksIGRyaXZlcnMgYXJlIGV4cGVjdGVkIHRvCisJ
ICogcmV0dXJuIGFjY3VyYXRlIGlucHV0IGZvcm1hdHMgYXMgdGhlIGlucHV0IGZvcm1hdCBtYXkg
YmUgdXNlZCB0bworCSAqIGNvbmZpZ3VyZSB0aGUgQ1JUQyBvdXRwdXQgYXBwcm9wcmlhdGVseS4K
KwkgKi8KKwl1MzIgKigqYXRvbWljX2dldF9pbnB1dF9idXNfZm10cykoc3RydWN0IGRybV9icmlk
Z2UgKmJyaWRnZSwKKwkJCQkJICBzdHJ1Y3QgZHJtX2JyaWRnZV9zdGF0ZSAqYnJpZGdlX3N0YXRl
LAorCQkJCQkgIHN0cnVjdCBkcm1fY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSwKKwkJCQkJICBzdHJ1
Y3QgZHJtX2Nvbm5lY3Rvcl9zdGF0ZSAqY29ubl9zdGF0ZSwKKwkJCQkJICB1MzIgb3V0cHV0X2Zt
dCwKKwkJCQkJICB1bnNpZ25lZCBpbnQgKm51bV9pbnB1dF9mbXRzKTsKKwogCS8qKgogCSAqIEBh
dG9taWNfY2hlY2s6CiAJICoKQEAgLTQwMSw2ICs1MDksMTQgQEAgc3RydWN0IGRybV9icmlkZ2Vf
ZnVuY3MgewogCSAqIGNhbGxlZCB3aGVuICZkcm1fYnJpZGdlX2Z1bmNzLmF0b21pY19jaGVjaygp
IGlzIGltcGxlbWVudGVkLCBzbyBvbmx5CiAJICogb25lIG9mIHRoZW0gc2hvdWxkIGJlIHByb3Zp
ZGVkLgogCSAqCisJICogSWYgZHJpdmVycyBuZWVkIHRvIHR3ZWFrICZkcm1fYnJpZGdlX3N0YXRl
LmlucHV0X2J1c19jZmcuZmxhZ3Mgb3IKKwkgKiAmZHJtX2JyaWRnZV9zdGF0ZS5vdXRwdXRfYnVz
X2NmZy5mbGFncyBpdCBzaG91bGQgc2hvdWxkIGhhcHBlbiBpbgorCSAqIHRoaXMgZnVuY3Rpb24u
IEJ5IGRlZmF1bHQgdGhlICZkcm1fYnJpZGdlX3N0YXRlLm91dHB1dF9idXNfY2ZnLmZsYWdzCisJ
ICogZmllbGQgaXMgc2V0IHRvIHRoZSBuZXh0IGJyaWRnZQorCSAqICZkcm1fYnJpZGdlX3N0YXRl
LmlucHV0X2J1c19jZmcuZmxhZ3MgdmFsdWUgb3IKKwkgKiAmZHJtX2Nvbm5lY3Rvci5kaXNwbGF5
X2luZm8uYnVzX2ZsYWdzIGlmIHRoZSBicmlkZ2UgaXMgdGhlIGxhc3QKKwkgKiBlbGVtZW50IGlu
IHRoZSBjaGFpbi4KKwkgKgogCSAqIFJFVFVSTlM6CiAJICogemVybyBpZiB0aGUgY2hlY2sgcGFz
c2VkLCBhIG5lZ2F0aXZlIGVycm9yIGNvZGUgb3RoZXJ3aXNlLgogCSAqLwpAQCAtNTg4LDYgKzcw
NCwxNCBAQCB2b2lkIGRybV9hdG9taWNfYnJpZGdlX2NoYWluX3ByZV9lbmFibGUoc3RydWN0IGRy
bV9icmlkZ2UgKmJyaWRnZSwKIHZvaWQgZHJtX2F0b21pY19icmlkZ2VfY2hhaW5fZW5hYmxlKHN0
cnVjdCBkcm1fYnJpZGdlICpicmlkZ2UsCiAJCQkJICAgIHN0cnVjdCBkcm1fYXRvbWljX3N0YXRl
ICpzdGF0ZSk7CiAKK3UzMiAqCitkcm1fYXRvbWljX2hlbHBlcl9icmlkZ2VfcHJvcGFnYXRlX2J1
c19mbXQoc3RydWN0IGRybV9icmlkZ2UgKmJyaWRnZSwKKwkJCQkJc3RydWN0IGRybV9icmlkZ2Vf
c3RhdGUgKmJyaWRnZV9zdGF0ZSwKKwkJCQkJc3RydWN0IGRybV9jcnRjX3N0YXRlICpjcnRjX3N0
YXRlLAorCQkJCQlzdHJ1Y3QgZHJtX2Nvbm5lY3Rvcl9zdGF0ZSAqY29ubl9zdGF0ZSwKKwkJCQkJ
dTMyIG91dHB1dF9mbXQsCisJCQkJCXVuc2lnbmVkIGludCAqbnVtX2lucHV0X2ZtdHMpOworCiB2
b2lkIF9fZHJtX2F0b21pY19oZWxwZXJfYnJpZGdlX3Jlc2V0KHN0cnVjdCBkcm1fYnJpZGdlICpi
cmlkZ2UsCiAJCQkJICAgICAgc3RydWN0IGRybV9icmlkZ2Vfc3RhdGUgKnN0YXRlKTsKIHN0cnVj
dCBkcm1fYnJpZGdlX3N0YXRlICoKLS0gCjIuMjMuMAoKX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX18KZHJpLWRldmVsIG1haWxpbmcgbGlzdApkcmktZGV2ZWxA
bGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3JnL21haWxt
YW4vbGlzdGluZm8vZHJpLWRldmVs
