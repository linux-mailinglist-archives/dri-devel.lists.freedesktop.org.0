Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id A24EEB1AD4
	for <lists+dri-devel@lfdr.de>; Fri, 13 Sep 2019 11:32:50 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 5CA106EEF2;
	Fri, 13 Sep 2019 09:32:46 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from pio-pvt-msa2.bahnhof.se (pio-pvt-msa2.bahnhof.se [79.136.2.41])
 by gabe.freedesktop.org (Postfix) with ESMTPS id D99186EEF2
 for <dri-devel@lists.freedesktop.org>; Fri, 13 Sep 2019 09:32:41 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by pio-pvt-msa2.bahnhof.se (Postfix) with ESMTP id 45F933F744;
 Fri, 13 Sep 2019 11:32:35 +0200 (CEST)
X-Virus-Scanned: Debian amavisd-new at bahnhof.se
X-Spam-Flag: NO
X-Spam-Score: -2.099
X-Spam-Level: 
X-Spam-Status: No, score=-2.099 tagged_above=-999 required=6.31
 tests=[BAYES_00=-1.9, DKIM_SIGNED=0.1, DKIM_VALID=-0.1,
 DKIM_VALID_AU=-0.1, DKIM_VALID_EF=-0.1, URIBL_BLOCKED=0.001]
 autolearn=ham autolearn_force=no
Received: from pio-pvt-msa2.bahnhof.se ([127.0.0.1])
 by localhost (pio-pvt-msa2.bahnhof.se [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id vvsHMmpKj9hi; Fri, 13 Sep 2019 11:32:30 +0200 (CEST)
Received: from mail1.shipmail.org (h-205-35.A357.priv.bahnhof.se
 [155.4.205.35]) (Authenticated sender: mb878879)
 by pio-pvt-msa2.bahnhof.se (Postfix) with ESMTPA id 624723F698;
 Fri, 13 Sep 2019 11:32:29 +0200 (CEST)
Received: from localhost.localdomain.localdomain
 (h-205-35.A357.priv.bahnhof.se [155.4.205.35])
 by mail1.shipmail.org (Postfix) with ESMTPSA id 9D68B36034C;
 Fri, 13 Sep 2019 11:32:28 +0200 (CEST)
From: =?UTF-8?q?Thomas=20Hellstr=C3=B6m=20=28VMware=29?=
 <thomas_os@shipmail.org>
To: linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 linux-mm@kvack.org
Subject: [RFC PATCH 7/7] drm/vmwgfx: Add surface dirty-tracking callbacks
Date: Fri, 13 Sep 2019 11:32:13 +0200
Message-Id: <20190913093213.27254-8-thomas_os@shipmail.org>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190913093213.27254-1-thomas_os@shipmail.org>
References: <20190913093213.27254-1-thomas_os@shipmail.org>
MIME-Version: 1.0
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
 d=shipmail.org; s=mail; 
 t=1568367148; bh=2qkyA+pdkoRZgFPXl8EnRk2GmpHgyuB+iqmwOx3oaI0=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=q9/ZXGwdEB6amG+IZFRaA+afp/bU//Q428145hjXEsBas0DAcgUlw0sOgnmrH9ihk
 ikV+GvKIntxFTXzBiSyT9iWEoFMoOohQgoOHdFO0NfYAXuxyMlun+T4QLJWiiZEHsQ
 2+l/nmwC3Hp02ldFgDq9H4BIctyIAoj+UuwsU5rc=
X-Mailman-Original-Authentication-Results: pio-pvt-msa2.bahnhof.se;
 dkim=pass (1024-bit key;
 unprotected) header.d=shipmail.org header.i=@shipmail.org header.b=q9/ZXGwd; 
 dkim-atps=neutral
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Thomas Hellstrom <thellstrom@vmware.com>, Michal Hocko <mhocko@suse.com>,
 Rik van Riel <riel@surriel.com>, pv-drivers@vmware.com,
 Minchan Kim <minchan@kernel.org>, Will Deacon <will.deacon@arm.com>,
 Matthew Wilcox <willy@infradead.org>, Christoph Hellwig <hch@infradead.org>,
 Peter Zijlstra <peterz@infradead.org>,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 linux-graphics-maintainer@vmware.com, Souptick Joarder <jrdr.linux@gmail.com>,
 Huang Ying <ying.huang@intel.com>, Andrew Morton <akpm@linux-foundation.org>,
 Deepak Rawat <drawat@vmware.com>,
 =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

RnJvbTogVGhvbWFzIEhlbGxzdHJvbSA8dGhlbGxzdHJvbUB2bXdhcmUuY29tPgoKQWRkIHRoZSBj
YWxsYmFja3MgbmVjZXNzYXJ5IHRvIGltcGxlbWVudCBlbXVsYXRlZCBjb2hlcmVudCBtZW1vcnkg
Zm9yCnN1cmZhY2VzLiBBZGQgYSBmbGFnIHRvIHRoZSBnYl9zdXJmYWNlX2NyZWF0ZSBpb2N0bCB0
byBpbmRpY2F0ZSB0aGF0CnN1cmZhY2UgbWVtb3J5IHNob3VsZCBiZSBjb2hlcmVudC4KQWxzbyBi
dW1wIHRoZSBkcm0gbWlub3IgdmVyc2lvbiB0byBzaWduYWwgdGhlIGF2YWlsYWJpbGl0eSBvZiBj
b2hlcmVudApzdXJmYWNlcy4KCkNjOiBBbmRyZXcgTW9ydG9uIDxha3BtQGxpbnV4LWZvdW5kYXRp
b24ub3JnPgpDYzogTWF0dGhldyBXaWxjb3ggPHdpbGx5QGluZnJhZGVhZC5vcmc+CkNjOiBXaWxs
IERlYWNvbiA8d2lsbC5kZWFjb25AYXJtLmNvbT4KQ2M6IFBldGVyIFppamxzdHJhIDxwZXRlcnpA
aW5mcmFkZWFkLm9yZz4KQ2M6IFJpayB2YW4gUmllbCA8cmllbEBzdXJyaWVsLmNvbT4KQ2M6IE1p
bmNoYW4gS2ltIDxtaW5jaGFuQGtlcm5lbC5vcmc+CkNjOiBNaWNoYWwgSG9ja28gPG1ob2Nrb0Bz
dXNlLmNvbT4KQ2M6IEh1YW5nIFlpbmcgPHlpbmcuaHVhbmdAaW50ZWwuY29tPgpDYzogU291cHRp
Y2sgSm9hcmRlciA8anJkci5saW51eEBnbWFpbC5jb20+CkNjOiAiSsOpcsO0bWUgR2xpc3NlIiA8
amdsaXNzZUByZWRoYXQuY29tPgpDYzogIkNocmlzdGlhbiBLw7ZuaWciIDxjaHJpc3RpYW4ua29l
bmlnQGFtZC5jb20+CkNjOiBDaHJpc3RvcGggSGVsbHdpZyA8aGNoQGluZnJhZGVhZC5vcmc+ClNp
Z25lZC1vZmYtYnk6IFRob21hcyBIZWxsc3Ryb20gPHRoZWxsc3Ryb21Adm13YXJlLmNvbT4KUmV2
aWV3ZWQtYnk6IERlZXBhayBSYXdhdCA8ZHJhd2F0QHZtd2FyZS5jb20+Ci0tLQogLi4uL2Rldmlj
ZV9pbmNsdWRlL3N2Z2EzZF9zdXJmYWNlZGVmcy5oICAgICAgIHwgMjMzICsrKysrKysrKystCiBk
cml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9kcnYuaCAgICAgICAgICAgfCAgIDQgKy0KIGRy
aXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3N1cmZhY2UuYyAgICAgICB8IDM5NSArKysrKysr
KysrKysrKysrKy0KIGluY2x1ZGUvdWFwaS9kcm0vdm13Z2Z4X2RybS5oICAgICAgICAgICAgICAg
ICB8ICAgNCArLQogNCBmaWxlcyBjaGFuZ2VkLCA2MjkgaW5zZXJ0aW9ucygrKSwgNyBkZWxldGlv
bnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L2RldmljZV9pbmNsdWRl
L3N2Z2EzZF9zdXJmYWNlZGVmcy5oIGIvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC9kZXZpY2VfaW5j
bHVkZS9zdmdhM2Rfc3VyZmFjZWRlZnMuaAppbmRleCBmMmJmZDNkODA1OTguLjYxNDE0ZjEwNWM2
NyAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC9kZXZpY2VfaW5jbHVkZS9zdmdh
M2Rfc3VyZmFjZWRlZnMuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L2RldmljZV9pbmNs
dWRlL3N2Z2EzZF9zdXJmYWNlZGVmcy5oCkBAIC0xMjgwLDcgKzEyODAsNiBAQCBzdmdhM2RzdXJm
YWNlX2dldF9waXhlbF9vZmZzZXQoU1ZHQTNkU3VyZmFjZUZvcm1hdCBmb3JtYXQsCiAJcmV0dXJu
IG9mZnNldDsKIH0KIAotCiBzdGF0aWMgaW5saW5lIHUzMgogc3ZnYTNkc3VyZmFjZV9nZXRfaW1h
Z2Vfb2Zmc2V0KFNWR0EzZFN1cmZhY2VGb3JtYXQgZm9ybWF0LAogCQkJICAgICAgIHN1cmZfc2l6
ZV9zdHJ1Y3QgYmFzZUxldmVsU2l6ZSwKQEAgLTEzNzUsNCArMTM3NCwyMzYgQEAgc3ZnYTNkc3Vy
ZmFjZV9pc19zY3JlZW5fdGFyZ2V0X2Zvcm1hdChTVkdBM2RTdXJmYWNlRm9ybWF0IGZvcm1hdCkK
IAlyZXR1cm4gc3ZnYTNkc3VyZmFjZV9pc19keF9zY3JlZW5fdGFyZ2V0X2Zvcm1hdChmb3JtYXQp
OwogfQogCisvKioKKyAqIHN0cnVjdCBzdmdhM2RzdXJmYWNlX21pcCAtIE1pbXBtYXAgbGV2ZWwg
aW5mb3JtYXRpb24KKyAqIEBieXRlczogQnl0ZXMgcmVxdWlyZWQgaW4gdGhlIGJhY2tpbmcgc3Rv
cmUgb2YgdGhpcyBtaXBtYXAgbGV2ZWwuCisgKiBAaW1nX3N0cmlkZTogQnl0ZSBzdHJpZGUgcGVy
IGltYWdlLgorICogQHJvd19zdHJpZGU6IEJ5dGUgc3RyaWRlIHBlciBibG9jayByb3cuCisgKiBA
c2l6ZTogVGhlIHNpemUgb2YgdGhlIG1pcG1hcC4KKyAqLworc3RydWN0IHN2Z2EzZHN1cmZhY2Vf
bWlwIHsKKwlzaXplX3QgYnl0ZXM7CisJc2l6ZV90IGltZ19zdHJpZGU7CisJc2l6ZV90IHJvd19z
dHJpZGU7CisJc3RydWN0IGRybV92bXdfc2l6ZSBzaXplOworCit9OworCisvKioKKyAqIHN0cnVj
dCBzdmdhM2RzdXJmYWNlX2NhY2hlIC0gQ2FjaGVkIHN1cmZhY2UgaW5mb3JtYXRpb24KKyAqIEBk
ZXNjOiBQb2ludGVyIHRvIHRoZSBzdXJmYWNlIGRlc2NyaXB0b3IKKyAqIEBtaXA6IEFycmF5IG9m
IG1pcG1hcCBsZXZlbCBpbmZvcm1hdGlvbi4gVmFsaWQgc2l6ZSBpcyBAbnVtX21pcF9sZXZlbHMu
CisgKiBAbWlwX2NoYWluX2J5dGVzOiBCeXRlcyByZXF1aXJlZCBpbiB0aGUgYmFja2luZyBzdG9y
ZSBmb3IgdGhlIHdob2xlIGNoYWluCisgKiBvZiBtaXAgbGV2ZWxzLgorICogQHNoZWV0X2J5dGVz
OiBCeXRlcyByZXF1aXJlZCBpbiB0aGUgYmFja2luZyBzdG9yZSBmb3IgYSBzaGVldAorICogcmVw
cmVzZW50aW5nIGEgc2luZ2xlIHNhbXBsZS4KKyAqIEBudW1fbWlwX2xldmVsczogVmFsaWQgc2l6
ZSBvZiB0aGUgQG1pcCBhcnJheS4gTnVtYmVyIG9mIG1pcG1hcCBsZXZlbHMgaW4KKyAqIGEgY2hh
aW4uCisgKiBAbnVtX2xheWVyczogTnVtYmVyIG9mIHNsaWNlcyBpbiBhbiBhcnJheSB0ZXh0dXJl
IG9yIG51bWJlciBvZiBmYWNlcyBpbgorICogYSBjdWJlbWFwIHRleHR1cmUuCisgKi8KK3N0cnVj
dCBzdmdhM2RzdXJmYWNlX2NhY2hlIHsKKwljb25zdCBzdHJ1Y3Qgc3ZnYTNkX3N1cmZhY2VfZGVz
YyAqZGVzYzsKKwlzdHJ1Y3Qgc3ZnYTNkc3VyZmFjZV9taXAgbWlwW0RSTV9WTVdfTUFYX01JUF9M
RVZFTFNdOworCXNpemVfdCBtaXBfY2hhaW5fYnl0ZXM7CisJc2l6ZV90IHNoZWV0X2J5dGVzOwor
CXUzMiBudW1fbWlwX2xldmVsczsKKwl1MzIgbnVtX2xheWVyczsKK307CisKKy8qKgorICogc3Ry
dWN0IHN2Z2EzZHN1cmZhY2VfbG9jIC0gU3VyZmFjZSBsb2NhdGlvbgorICogQHN1Yl9yZXNvdXJj
ZTogU3VyZmFjZSBzdWJyZXNvdXJjZS4gRGVmaW5lZCBhcyBsYXllciAqIG51bV9taXBfbGV2ZWxz
ICsKKyAqIG1pcF9sZXZlbC4KKyAqIEB4OiBYIGNvb3JkaW5hdGUuCisgKiBAeTogWSBjb29yZGlu
YXRlLgorICogQHo6IFogY29vcmRpbmF0ZS4KKyAqLworc3RydWN0IHN2Z2EzZHN1cmZhY2VfbG9j
IHsKKwl1MzIgc3ViX3Jlc291cmNlOworCXUzMiB4LCB5LCB6OworfTsKKworLyoqCisgKiBzdmdh
M2RzdXJmYWNlX3N1YnJlcyAtIENvbXB1dGUgdGhlIHN1YnJlc291cmNlIGZyb20gbGF5ZXIgYW5k
IG1pcG1hcC4KKyAqIEBjYWNoZTogU3VyZmFjZSBsYXlvdXQgZGF0YS4KKyAqIEBtaXBfbGV2ZWw6
IFRoZSBtaXBtYXAgbGV2ZWwuCisgKiBAbGF5ZXI6IFRoZSBzdXJmYWNlIGxheWVyIChmYWNlIG9y
IGFycmF5IHNsaWNlKS4KKyAqCisgKiBSZXR1cm46IFRoZSBzdWJyZXNvdXJjZS4KKyAqLworc3Rh
dGljIGlubGluZSB1MzIgc3ZnYTNkc3VyZmFjZV9zdWJyZXMoY29uc3Qgc3RydWN0IHN2Z2EzZHN1
cmZhY2VfY2FjaGUgKmNhY2hlLAorCQkJCSAgICAgICB1MzIgbWlwX2xldmVsLCB1MzIgbGF5ZXIp
Cit7CisJcmV0dXJuIGNhY2hlLT5udW1fbWlwX2xldmVscyAqIGxheWVyICsgbWlwX2xldmVsOwor
fQorCisvKioKKyAqIHN2Z2EzZHN1cmZhY2Vfc2V0dXBfY2FjaGUgLSBCdWlsZCBhIHN1cmZhY2Ug
Y2FjaGUgZW50cnkKKyAqIEBzaXplOiBUaGUgc3VyZmFjZSBiYXNlIGxldmVsIGRpbWVuc2lvbnMu
CisgKiBAZm9ybWF0OiBUaGUgc3VyZmFjZSBmb3JtYXQuCisgKiBAbnVtX21pcF9sZXZlbHM6IE51
bWJlciBvZiBtaXBtYXAgbGV2ZWxzLgorICogQG51bV9sYXllcnM6IE51bWJlciBvZiBsYXllcnMu
CisgKiBAY2FjaGU6IFBvaW50ZXIgdG8gYSBzdHJ1Y3Qgc3ZnYTNkc3VyZmFjZV9jYWNoIG9iamVj
dCB0byBiZSBmaWxsZWQgaW4uCisgKgorICogUmV0dXJuOiBaZXJvIG9uIHN1Y2Nlc3MsIC1FSU5W
QUwgb24gaW52YWxpZCBzdXJmYWNlIGxheW91dC4KKyAqLworc3RhdGljIGlubGluZSBpbnQgc3Zn
YTNkc3VyZmFjZV9zZXR1cF9jYWNoZShjb25zdCBzdHJ1Y3QgZHJtX3Ztd19zaXplICpzaXplLAor
CQkJCQkgICAgU1ZHQTNkU3VyZmFjZUZvcm1hdCBmb3JtYXQsCisJCQkJCSAgICB1MzIgbnVtX21p
cF9sZXZlbHMsCisJCQkJCSAgICB1MzIgbnVtX2xheWVycywKKwkJCQkJICAgIHUzMiBudW1fc2Ft
cGxlcywKKwkJCQkJICAgIHN0cnVjdCBzdmdhM2RzdXJmYWNlX2NhY2hlICpjYWNoZSkKK3sKKwlj
b25zdCBzdHJ1Y3Qgc3ZnYTNkX3N1cmZhY2VfZGVzYyAqZGVzYzsKKwl1MzIgaTsKKworCW1lbXNl
dChjYWNoZSwgMCwgc2l6ZW9mKCpjYWNoZSkpOworCWNhY2hlLT5kZXNjID0gZGVzYyA9IHN2Z2Ez
ZHN1cmZhY2VfZ2V0X2Rlc2MoZm9ybWF0KTsKKwljYWNoZS0+bnVtX21pcF9sZXZlbHMgPSBudW1f
bWlwX2xldmVsczsKKwljYWNoZS0+bnVtX2xheWVycyA9IG51bV9sYXllcnM7CisJZm9yIChpID0g
MDsgaSA8IGNhY2hlLT5udW1fbWlwX2xldmVsczsgaSsrKSB7CisJCXN0cnVjdCBzdmdhM2RzdXJm
YWNlX21pcCAqbWlwID0gJmNhY2hlLT5taXBbaV07CisKKwkJbWlwLT5zaXplID0gc3ZnYTNkc3Vy
ZmFjZV9nZXRfbWlwX3NpemUoKnNpemUsIGkpOworCQltaXAtPmJ5dGVzID0gc3ZnYTNkc3VyZmFj
ZV9nZXRfaW1hZ2VfYnVmZmVyX3NpemUKKwkJCShkZXNjLCAmbWlwLT5zaXplLCAwKTsKKwkJbWlw
LT5yb3dfc3RyaWRlID0KKwkJCV9fS0VSTkVMX0RJVl9ST1VORF9VUChtaXAtPnNpemUud2lkdGgs
CisJCQkJCSAgICAgIGRlc2MtPmJsb2NrX3NpemUud2lkdGgpICoKKwkJCWRlc2MtPmJ5dGVzX3Bl
cl9ibG9jayAqIG51bV9zYW1wbGVzOworCQlpZiAoIW1pcC0+cm93X3N0cmlkZSkKKwkJCWdvdG8g
aW52YWxpZF9kaW07CisKKwkJbWlwLT5pbWdfc3RyaWRlID0KKwkJCV9fS0VSTkVMX0RJVl9ST1VO
RF9VUChtaXAtPnNpemUuaGVpZ2h0LAorCQkJCQkgICAgICBkZXNjLT5ibG9ja19zaXplLmhlaWdo
dCkgKgorCQkJbWlwLT5yb3dfc3RyaWRlOworCQlpZiAoIW1pcC0+aW1nX3N0cmlkZSkKKwkJCWdv
dG8gaW52YWxpZF9kaW07CisKKwkJY2FjaGUtPm1pcF9jaGFpbl9ieXRlcyArPSBtaXAtPmJ5dGVz
OworCX0KKwljYWNoZS0+c2hlZXRfYnl0ZXMgPSBjYWNoZS0+bWlwX2NoYWluX2J5dGVzICogbnVt
X2xheWVyczsKKwlpZiAoIWNhY2hlLT5zaGVldF9ieXRlcykKKwkJZ290byBpbnZhbGlkX2RpbTsK
KworCXJldHVybiAwOworCitpbnZhbGlkX2RpbToKKwlWTVdfREVCVUdfVVNFUigiSW52YWxpZCBz
dXJmYWNlIGxheW91dCBmb3IgZGlydHkgdHJhY2tpbmcuXG4iKTsKKwlyZXR1cm4gLUVJTlZBTDsK
K30KKworLyoqCisgKiBzdmdhM2RzdXJmYWNlX2dldF9sb2MgLSBHZXQgYSBzdXJmYWNlIGxvY2F0
aW9uIGZyb20gYW4gb2Zmc2V0IGludG8gdGhlCisgKiBiYWNraW5nIHN0b3JlCisgKiBAY2FjaGU6
IFN1cmZhY2UgbGF5b3V0IGRhdGEuCisgKiBAbG9jOiBQb2ludGVyIHRvIGEgc3RydWN0IHN2Z2Ez
ZHN1cmZhY2VfbG9jIHRvIGJlIGZpbGxlZCBpbi4KKyAqIEBvZmZzZXQ6IE9mZnNldCBpbnRvIHRo
ZSBzdXJmYWNlIGJhY2tpbmcgc3RvcmUuCisgKi8KK3N0YXRpYyBpbmxpbmUgdm9pZAorc3ZnYTNk
c3VyZmFjZV9nZXRfbG9jKGNvbnN0IHN0cnVjdCBzdmdhM2RzdXJmYWNlX2NhY2hlICpjYWNoZSwK
KwkJICAgICAgc3RydWN0IHN2Z2EzZHN1cmZhY2VfbG9jICpsb2MsCisJCSAgICAgIHNpemVfdCBv
ZmZzZXQpCit7CisJY29uc3Qgc3RydWN0IHN2Z2EzZHN1cmZhY2VfbWlwICptaXAgPSAmY2FjaGUt
Pm1pcFswXTsKKwljb25zdCBzdHJ1Y3Qgc3ZnYTNkX3N1cmZhY2VfZGVzYyAqZGVzYyA9IGNhY2hl
LT5kZXNjOworCXUzMiBsYXllcjsKKwlpbnQgaTsKKworCWlmIChvZmZzZXQgPj0gY2FjaGUtPnNo
ZWV0X2J5dGVzKQorCQlvZmZzZXQgJT0gY2FjaGUtPnNoZWV0X2J5dGVzOworCisJbGF5ZXIgPSBv
ZmZzZXQgLyBjYWNoZS0+bWlwX2NoYWluX2J5dGVzOworCW9mZnNldCAtPSBsYXllciAqIGNhY2hl
LT5taXBfY2hhaW5fYnl0ZXM7CisJZm9yIChpID0gMDsgaSA8IGNhY2hlLT5udW1fbWlwX2xldmVs
czsgKytpLCArK21pcCkgeworCQlpZiAobWlwLT5ieXRlcyA+IG9mZnNldCkKKwkJCWJyZWFrOwor
CQlvZmZzZXQgLT0gbWlwLT5ieXRlczsKKwl9CisKKwlsb2MtPnN1Yl9yZXNvdXJjZSA9IHN2Z2Ez
ZHN1cmZhY2Vfc3VicmVzKGNhY2hlLCBpLCBsYXllcik7CisJbG9jLT56ID0gb2Zmc2V0IC8gbWlw
LT5pbWdfc3RyaWRlOworCW9mZnNldCAtPSBsb2MtPnogKiBtaXAtPmltZ19zdHJpZGU7CisJbG9j
LT56ICo9IGRlc2MtPmJsb2NrX3NpemUuZGVwdGg7CisJbG9jLT55ID0gb2Zmc2V0IC8gbWlwLT5y
b3dfc3RyaWRlOworCW9mZnNldCAtPSBsb2MtPnkgKiBtaXAtPnJvd19zdHJpZGU7CisJbG9jLT55
ICo9IGRlc2MtPmJsb2NrX3NpemUuaGVpZ2h0OworCWxvYy0+eCA9IG9mZnNldCAvIGRlc2MtPmJ5
dGVzX3Blcl9ibG9jazsKKwlsb2MtPnggKj0gZGVzYy0+YmxvY2tfc2l6ZS53aWR0aDsKK30KKwor
LyoqCisgKiBzdmdhM2RzdXJmYWNlX2luY19sb2MgLSBDbGFtcCBpbmNyZW1lbnQgYSBzdXJmYWNl
IGxvY2F0aW9uIHdpdGggb25lIGJsb2NrCisgKiBzaXplCisgKiBpbiBlYWNoIGRpbWVuc2lvbi4K
KyAqIEBsb2M6IFBvaW50ZXIgdG8gYSBzdHJ1Y3Qgc3ZnYTNkc3VyZmFjZV9sb2MgdG8gYmUgaW5j
cmVtZW50ZWQuCisgKgorICogV2hlbiBjb21wdXRpbmcgdGhlIHNpemUgb2YgYSByYW5nZSBhcyBz
aXplID0gZW5kIC0gc3RhcnQsIHRoZSByYW5nZSBkb2VzIG5vdAorICogaW5jbHVkZSB0aGUgZW5k
IGVsZW1lbnQuIEhvd2V2ZXIgYSBsb2NhdGlvbiByZXByZXNlbnRpbmcgdGhlIGxhc3QgYnl0ZQor
ICogb2YgYSB0b3VjaGVkIHJlZ2lvbiBpbiB0aGUgYmFja2luZyBzdG9yZSAqaXMqIGluY2x1ZGVk
IGluIHRoZSByYW5nZS4KKyAqIFRoaXMgZnVuY3Rpb24gbW9kaWZpZXMgc3VjaCBhIGxvY2F0aW9u
IHRvIG1hdGNoIHRoZSBlbmQgZGVmaW5pdGlvbgorICogZ2l2ZW4gYXMgc3RhcnQgKyBzaXplIHdo
aWNoIGlzIHRoZSBvbmUgdXNlZCBpbiBhIFNWR0EzZEJveC4KKyAqLworc3RhdGljIGlubGluZSB2
b2lkCitzdmdhM2RzdXJmYWNlX2luY19sb2MoY29uc3Qgc3RydWN0IHN2Z2EzZHN1cmZhY2VfY2Fj
aGUgKmNhY2hlLAorCQkgICAgICBzdHJ1Y3Qgc3ZnYTNkc3VyZmFjZV9sb2MgKmxvYykKK3sKKwlj
b25zdCBzdHJ1Y3Qgc3ZnYTNkX3N1cmZhY2VfZGVzYyAqZGVzYyA9IGNhY2hlLT5kZXNjOworCXUz
MiBtaXAgPSBsb2MtPnN1Yl9yZXNvdXJjZSAlIGNhY2hlLT5udW1fbWlwX2xldmVsczsKKwljb25z
dCBzdHJ1Y3QgZHJtX3Ztd19zaXplICpzaXplID0gJmNhY2hlLT5taXBbbWlwXS5zaXplOworCisJ
bG9jLT5zdWJfcmVzb3VyY2UrKzsKKwlsb2MtPnggKz0gZGVzYy0+YmxvY2tfc2l6ZS53aWR0aDsK
KwlpZiAobG9jLT54ID4gc2l6ZS0+d2lkdGgpCisJCWxvYy0+eCA9IHNpemUtPndpZHRoOworCWxv
Yy0+eSArPSBkZXNjLT5ibG9ja19zaXplLmhlaWdodDsKKwlpZiAobG9jLT55ID4gc2l6ZS0+aGVp
Z2h0KQorCQlsb2MtPnkgPSBzaXplLT5oZWlnaHQ7CisJbG9jLT56ICs9IGRlc2MtPmJsb2NrX3Np
emUuZGVwdGg7CisJaWYgKGxvYy0+eiA+IHNpemUtPmRlcHRoKQorCQlsb2MtPnogPSBzaXplLT5k
ZXB0aDsKK30KKworLyoqCisgKiBzdmdhM2RzdXJmYWNlX21pbl9sb2MgLSBUaGUgc3RhcnQgbG9j
YXRpb24gaW4gYSBzdWJyZXNvdXJjZQorICogQGNhY2hlOiBTdXJmYWNlIGxheW91dCBkYXRhLgor
ICogQHN1Yl9yZXNvdXJjZTogVGhlIHN1YnJlc291cmNlLgorICogQGxvYzogUG9pbnRlciB0byBh
IHN0cnVjdCBzdmdhM2RzdXJmYWNlX2xvYyB0byBiZSBmaWxsZWQgaW4uCisgKi8KK3N0YXRpYyBp
bmxpbmUgdm9pZAorc3ZnYTNkc3VyZmFjZV9taW5fbG9jKGNvbnN0IHN0cnVjdCBzdmdhM2RzdXJm
YWNlX2NhY2hlICpjYWNoZSwKKwkJICAgICAgdTMyIHN1Yl9yZXNvdXJjZSwKKwkJICAgICAgc3Ry
dWN0IHN2Z2EzZHN1cmZhY2VfbG9jICpsb2MpCit7CisJbG9jLT5zdWJfcmVzb3VyY2UgPSBzdWJf
cmVzb3VyY2U7CisJbG9jLT54ID0gbG9jLT55ID0gbG9jLT56ID0gMDsKK30KKworLyoqCisgKiBz
dmdhM2RzdXJmYWNlX21pbl9sb2MgLSBUaGUgZW5kIGxvY2F0aW9uIGluIGEgc3VicmVzb3VyY2UK
KyAqIEBjYWNoZTogU3VyZmFjZSBsYXlvdXQgZGF0YS4KKyAqIEBzdWJfcmVzb3VyY2U6IFRoZSBz
dWJyZXNvdXJjZS4KKyAqIEBsb2M6IFBvaW50ZXIgdG8gYSBzdHJ1Y3Qgc3ZnYTNkc3VyZmFjZV9s
b2MgdG8gYmUgZmlsbGVkIGluLgorICoKKyAqIEZvbGxvd2luZyB0aGUgZW5kIGRlZmluaXRpb24g
Z2l2ZW4gaW4gc3ZnYTNkc3VyZmFjZV9pbmNfbG9jKCksCisgKiBDb21wdXRlIHRoZSBlbmQgbG9j
YXRpb24gb2YgYSBzdXJmYWNlIHN1YnJlc291cmNlLgorICovCitzdGF0aWMgaW5saW5lIHZvaWQK
K3N2Z2EzZHN1cmZhY2VfbWF4X2xvYyhjb25zdCBzdHJ1Y3Qgc3ZnYTNkc3VyZmFjZV9jYWNoZSAq
Y2FjaGUsCisJCSAgICAgIHUzMiBzdWJfcmVzb3VyY2UsCisJCSAgICAgIHN0cnVjdCBzdmdhM2Rz
dXJmYWNlX2xvYyAqbG9jKQoreworCWNvbnN0IHN0cnVjdCBkcm1fdm13X3NpemUgKnNpemU7CisJ
dTMyIG1pcDsKKworCWxvYy0+c3ViX3Jlc291cmNlID0gc3ViX3Jlc291cmNlICsgMTsKKwltaXAg
PSBzdWJfcmVzb3VyY2UgJSBjYWNoZS0+bnVtX21pcF9sZXZlbHM7CisJc2l6ZSA9ICZjYWNoZS0+
bWlwW21pcF0uc2l6ZTsKKwlsb2MtPnggPSBzaXplLT53aWR0aDsKKwlsb2MtPnkgPSBzaXplLT5o
ZWlnaHQ7CisJbG9jLT56ID0gc2l6ZS0+ZGVwdGg7Cit9CisKICNlbmRpZiAvKiBfU1ZHQTNEX1NV
UkZBQ0VERUZTX0hfICovCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dm
eF9kcnYuaCBiL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X2Rydi5oCmluZGV4IDNkNjhi
NzVjN2EzZS4uMzAzNGVhMTc2ZWEzIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4
L3Ztd2dmeF9kcnYuaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9kcnYuaApA
QCAtNTYsOSArNTYsOSBAQAogCiAKICNkZWZpbmUgVk1XR0ZYX0RSSVZFUl9OQU1FICJ2bXdnZngi
Ci0jZGVmaW5lIFZNV0dGWF9EUklWRVJfREFURSAiMjAxODA3MDQiCisjZGVmaW5lIFZNV0dGWF9E
UklWRVJfREFURSAiMjAxOTAzMjgiCiAjZGVmaW5lIFZNV0dGWF9EUklWRVJfTUFKT1IgMgotI2Rl
ZmluZSBWTVdHRlhfRFJJVkVSX01JTk9SIDE1CisjZGVmaW5lIFZNV0dGWF9EUklWRVJfTUlOT1Ig
MTYKICNkZWZpbmUgVk1XR0ZYX0RSSVZFUl9QQVRDSExFVkVMIDAKICNkZWZpbmUgVk1XR0ZYX0ZJ
Rk9fU1RBVElDX1NJWkUgKDEwMjQqMTAyNCkKICNkZWZpbmUgVk1XR0ZYX01BWF9SRUxPQ0FUSU9O
UyAyMDQ4CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9zdXJmYWNl
LmMgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9zdXJmYWNlLmMKaW5kZXggMjlkODc5
NGYwNDIxLi44NzZiYWRhNWIzNWUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngv
dm13Z2Z4X3N1cmZhY2UuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9zdXJm
YWNlLmMKQEAgLTY4LDYgKzY4LDIwIEBAIHN0cnVjdCB2bXdfc3VyZmFjZV9vZmZzZXQgewogCXVp
bnQzMl90IGJvX29mZnNldDsKIH07CiAKKy8qKgorICogdm13X3N1cmZhY2VfZGlydHkgLSBTdXJm
YWNlIGRpcnR5LXRyYWNrZXIKKyAqIEBjYWNoZTogQ2FjaGVkIGxheW91dCBpbmZvcm1hdGlvbiBv
ZiB0aGUgc3VyZmFjZS4KKyAqIEBzaXplOiBBY2NvdW50aW5nIHNpemUgZm9yIHRoZSBzdHJ1Y3Qg
dm13X3N1cmZhY2VfZGlydHkuCisgKiBAbnVtX3N1YnJlczogTnVtYmVyIG9mIHN1YnJlc291cmNl
cy4KKyAqIEBib3hlczogQXJyYXkgb2YgU1ZHQTNkQm94ZXMgaW5kaWNhdGluZyBkaXJ0eSByZWdp
b25zLiBPbmUgcGVyIHN1YnJlc291cmNlLgorICovCitzdHJ1Y3Qgdm13X3N1cmZhY2VfZGlydHkg
eworCXN0cnVjdCBzdmdhM2RzdXJmYWNlX2NhY2hlIGNhY2hlOworCXNpemVfdCBzaXplOworCXUz
MiBudW1fc3VicmVzOworCVNWR0EzZEJveCBib3hlc1swXTsKK307CisKIHN0YXRpYyB2b2lkIHZt
d191c2VyX3N1cmZhY2VfZnJlZShzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMpOwogc3RhdGljIHN0
cnVjdCB2bXdfcmVzb3VyY2UgKgogdm13X3VzZXJfc3VyZmFjZV9iYXNlX3RvX3JlcyhzdHJ1Y3Qg
dHRtX2Jhc2Vfb2JqZWN0ICpiYXNlKTsKQEAgLTk2LDYgKzExMCwxMyBAQCB2bXdfZ2Jfc3VyZmFj
ZV9yZWZlcmVuY2VfaW50ZXJuYWwoc3RydWN0IGRybV9kZXZpY2UgKmRldiwKIAkJCQkgIHN0cnVj
dCBkcm1fdm13X2diX3N1cmZhY2VfcmVmX2V4dF9yZXAgKnJlcCwKIAkJCQkgIHN0cnVjdCBkcm1f
ZmlsZSAqZmlsZV9wcml2KTsKIAorc3RhdGljIHZvaWQgdm13X3N1cmZhY2VfZGlydHlfZnJlZShz
dHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMpOworc3RhdGljIGludCB2bXdfc3VyZmFjZV9kaXJ0eV9h
bGxvYyhzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMpOworc3RhdGljIGludCB2bXdfc3VyZmFjZV9k
aXJ0eV9zeW5jKHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcyk7CitzdGF0aWMgdm9pZCB2bXdfc3Vy
ZmFjZV9kaXJ0eV9yYW5nZV9hZGQoc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzLCBzaXplX3Qgc3Rh
cnQsCisJCQkJCXNpemVfdCBlbmQpOworc3RhdGljIGludCB2bXdfc3VyZmFjZV9jbGVhbihzdHJ1
Y3Qgdm13X3Jlc291cmNlICpyZXMpOworCiBzdGF0aWMgY29uc3Qgc3RydWN0IHZtd191c2VyX3Jl
c291cmNlX2NvbnYgdXNlcl9zdXJmYWNlX2NvbnYgPSB7CiAJLm9iamVjdF90eXBlID0gVk1XX1JF
U19TVVJGQUNFLAogCS5iYXNlX29ial90b19yZXMgPSB2bXdfdXNlcl9zdXJmYWNlX2Jhc2VfdG9f
cmVzLApAQCAtMTMzLDcgKzE1NCwxMiBAQCBzdGF0aWMgY29uc3Qgc3RydWN0IHZtd19yZXNfZnVu
YyB2bXdfZ2Jfc3VyZmFjZV9mdW5jID0gewogCS5jcmVhdGUgPSB2bXdfZ2Jfc3VyZmFjZV9jcmVh
dGUsCiAJLmRlc3Ryb3kgPSB2bXdfZ2Jfc3VyZmFjZV9kZXN0cm95LAogCS5iaW5kID0gdm13X2di
X3N1cmZhY2VfYmluZCwKLQkudW5iaW5kID0gdm13X2diX3N1cmZhY2VfdW5iaW5kCisJLnVuYmlu
ZCA9IHZtd19nYl9zdXJmYWNlX3VuYmluZCwKKwkuZGlydHlfYWxsb2MgPSB2bXdfc3VyZmFjZV9k
aXJ0eV9hbGxvYywKKwkuZGlydHlfZnJlZSA9IHZtd19zdXJmYWNlX2RpcnR5X2ZyZWUsCisJLmRp
cnR5X3N5bmMgPSB2bXdfc3VyZmFjZV9kaXJ0eV9zeW5jLAorCS5kaXJ0eV9yYW5nZV9hZGQgPSB2
bXdfc3VyZmFjZV9kaXJ0eV9yYW5nZV9hZGQsCisJLmNsZWFuID0gdm13X3N1cmZhY2VfY2xlYW4s
CiB9OwogCiAvKioKQEAgLTY0MSw2ICs2NjcsNyBAQCBzdGF0aWMgdm9pZCB2bXdfdXNlcl9zdXJm
YWNlX2ZyZWUoc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzKQogCXN0cnVjdCB2bXdfcHJpdmF0ZSAq
ZGV2X3ByaXYgPSBzcmYtPnJlcy5kZXZfcHJpdjsKIAl1aW50MzJfdCBzaXplID0gdXNlcl9zcmYt
PnNpemU7CiAKKwlXQVJOX09OX09OQ0UocmVzLT5kaXJ0eSk7CiAJaWYgKHVzZXJfc3JmLT5tYXN0
ZXIpCiAJCWRybV9tYXN0ZXJfcHV0KCZ1c2VyX3NyZi0+bWFzdGVyKTsKIAlrZnJlZShzcmYtPm9m
ZnNldHMpOwpAQCAtMTE2OCwxMCArMTE5NSwxNiBAQCBzdGF0aWMgaW50IHZtd19nYl9zdXJmYWNl
X2JpbmQoc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzLAogCQljbWQyLT5oZWFkZXIuaWQgPSBTVkdB
XzNEX0NNRF9VUERBVEVfR0JfU1VSRkFDRTsKIAkJY21kMi0+aGVhZGVyLnNpemUgPSBzaXplb2Yo
Y21kMi0+Ym9keSk7CiAJCWNtZDItPmJvZHkuc2lkID0gcmVzLT5pZDsKLQkJcmVzLT5iYWNrdXBf
ZGlydHkgPSBmYWxzZTsKIAl9CiAJdm13X2ZpZm9fY29tbWl0KGRldl9wcml2LCBzdWJtaXRfc2l6
ZSk7CiAKKwlpZiAocmVzLT5iYWNrdXAtPmRpcnR5ICYmIHJlcy0+YmFja3VwX2RpcnR5KSB7CisJ
CS8qIFdlJ3ZlIGp1c3QgbWFkZSBhIGZ1bGwgdXBsb2FkLiBDZWFyIGRpcnR5IHJlZ2lvbnMuICov
CisJCXZtd19ib19kaXJ0eV9jbGVhcl9yZXMocmVzKTsKKwl9CisKKwlyZXMtPmJhY2t1cF9kaXJ0
eSA9IGZhbHNlOworCiAJcmV0dXJuIDA7CiB9CiAKQEAgLTE2MzYsNyArMTY2OSw4IEBAIHZtd19n
Yl9zdXJmYWNlX2RlZmluZV9pbnRlcm5hbChzdHJ1Y3QgZHJtX2RldmljZSAqZGV2LAogCQkJfQog
CQl9CiAJfSBlbHNlIGlmIChyZXEtPmJhc2UuZHJtX3N1cmZhY2VfZmxhZ3MgJgotCQkgICBkcm1f
dm13X3N1cmZhY2VfZmxhZ19jcmVhdGVfYnVmZmVyKQorCQkgICAoZHJtX3Ztd19zdXJmYWNlX2Zs
YWdfY3JlYXRlX2J1ZmZlciB8CisJCSAgICBkcm1fdm13X3N1cmZhY2VfZmxhZ19jb2hlcmVudCkp
CiAJCXJldCA9IHZtd191c2VyX2JvX2FsbG9jKGRldl9wcml2LCB0ZmlsZSwKIAkJCQkJcmVzLT5i
YWNrdXBfc2l6ZSwKIAkJCQkJcmVxLT5iYXNlLmRybV9zdXJmYWNlX2ZsYWdzICYKQEAgLTE2NTAs
NiArMTY4NCwyNiBAQCB2bXdfZ2Jfc3VyZmFjZV9kZWZpbmVfaW50ZXJuYWwoc3RydWN0IGRybV9k
ZXZpY2UgKmRldiwKIAkJZ290byBvdXRfdW5sb2NrOwogCX0KIAorCWlmIChyZXEtPmJhc2UuZHJt
X3N1cmZhY2VfZmxhZ3MgJiBkcm1fdm13X3N1cmZhY2VfZmxhZ19jb2hlcmVudCkgeworCQlzdHJ1
Y3Qgdm13X2J1ZmZlcl9vYmplY3QgKmJhY2t1cCA9IHJlcy0+YmFja3VwOworCisJCXR0bV9ib19y
ZXNlcnZlKCZiYWNrdXAtPmJhc2UsIGZhbHNlLCBmYWxzZSwgTlVMTCk7CisJCWlmICghcmVzLT5m
dW5jLT5kaXJ0eV9hbGxvYykKKwkJCXJldCA9IC1FSU5WQUw7CisJCWlmICghcmV0KQorCQkJcmV0
ID0gdm13X2JvX2RpcnR5X2FkZChiYWNrdXApOworCQlpZiAoIXJldCkgeworCQkJcmVzLT5jb2hl
cmVudCA9IHRydWU7CisJCQlyZXQgPSByZXMtPmZ1bmMtPmRpcnR5X2FsbG9jKHJlcyk7CisJCX0K
KwkJdHRtX2JvX3VucmVzZXJ2ZSgmYmFja3VwLT5iYXNlKTsKKwkJaWYgKHJldCkgeworCQkJdm13
X3Jlc291cmNlX3VucmVmZXJlbmNlKCZyZXMpOworCQkJZ290byBvdXRfdW5sb2NrOworCQl9CisK
Kwl9CisKIAl0bXAgPSB2bXdfcmVzb3VyY2VfcmVmZXJlbmNlKHJlcyk7CiAJcmV0ID0gdHRtX3By
aW1lX29iamVjdF9pbml0KHRmaWxlLCByZXMtPmJhY2t1cF9zaXplLCAmdXNlcl9zcmYtPnByaW1l
LAogCQkJCSAgICByZXEtPmJhc2UuZHJtX3N1cmZhY2VfZmxhZ3MgJgpAQCAtMTc1OCwzICsxODEy
LDMzOCBAQCB2bXdfZ2Jfc3VyZmFjZV9yZWZlcmVuY2VfaW50ZXJuYWwoc3RydWN0IGRybV9kZXZp
Y2UgKmRldiwKIAogCXJldHVybiByZXQ7CiB9CisKKy8qKgorICogdm13X3N1YnJlc19kaXJ0eV9h
ZGQgLSBBZGQgYSBkaXJ0eSByZWdpb24gdG8gYSBzdWJyZXNvdXJjZQorICogQGRpcnR5OiBUaGUg
c3VyZmFjZXMncyBkaXJ0eSB0cmFja2VyLgorICogQGxvY19zdGFydDogVGhlIGxvY2F0aW9uIGNv
cnJlc3BvbmRpbmcgdG8gdGhlIHN0YXJ0IG9mIHRoZSByZWdpb24uCisgKiBAbG9jX2VuZDogVGhl
IGxvY2F0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGVuZCBvZiB0aGUgcmVnaW9uLgorICoKKyAq
IEFzIHdlIGFyZSBhc3N1bWluZyB0aGF0IEBsb2Nfc3RhcnQgYW5kIEBsb2NfZW5kIHJlcHJlc2Vu
dCBhIHNlcXVlbnRpYWwKKyAqIHJhbmdlIG9mIGJhY2tpbmcgc3RvcmUgbWVtb3J5LCBpZiB0aGUg
cmVnaW9uIHNwYW5zIG11bHRpcGxlIGxpbmVzIHRoZW4KKyAqIHJlZ2FyZGxlc3Mgb2YgdGhlIHgg
Y29vcmRpbmF0ZSwgdGhlIGZ1bGwgbGluZXMgYXJlIGRpcnRpZWQuCisgKiBDb3JyZXNwb25kaW5n
bHkgaWYgdGhlIHJlZ2lvbiBzcGFucyBtdWx0aXBsZSB6IHNsaWNlcywgdGhlbiBmdWxsIHJhdGhl
cgorICogdGhhbiBwYXJ0aWFsIHogc2xpY2VzIGFyZSBkaXJ0aWVkLgorICovCitzdGF0aWMgdm9p
ZCB2bXdfc3VicmVzX2RpcnR5X2FkZChzdHJ1Y3Qgdm13X3N1cmZhY2VfZGlydHkgKmRpcnR5LAor
CQkJCSBjb25zdCBzdHJ1Y3Qgc3ZnYTNkc3VyZmFjZV9sb2MgKmxvY19zdGFydCwKKwkJCQkgY29u
c3Qgc3RydWN0IHN2Z2EzZHN1cmZhY2VfbG9jICpsb2NfZW5kKQoreworCWNvbnN0IHN0cnVjdCBz
dmdhM2RzdXJmYWNlX2NhY2hlICpjYWNoZSA9ICZkaXJ0eS0+Y2FjaGU7CisJU1ZHQTNkQm94ICpi
b3ggPSAmZGlydHktPmJveGVzW2xvY19zdGFydC0+c3ViX3Jlc291cmNlXTsKKwl1MzIgbWlwID0g
bG9jX3N0YXJ0LT5zdWJfcmVzb3VyY2UgJSBjYWNoZS0+bnVtX21pcF9sZXZlbHM7CisJY29uc3Qg
c3RydWN0IGRybV92bXdfc2l6ZSAqc2l6ZSA9ICZjYWNoZS0+bWlwW21pcF0uc2l6ZTsKKwl1MzIg
Ym94X2MyID0gYm94LT56ICsgYm94LT5kOworCisJaWYgKFdBUk5fT04obG9jX3N0YXJ0LT5zdWJf
cmVzb3VyY2UgPj0gZGlydHktPm51bV9zdWJyZXMpKQorCQlyZXR1cm47CisKKwlpZiAoYm94LT5k
ID09IDAgfHwgYm94LT56ID4gbG9jX3N0YXJ0LT56KQorCQlib3gtPnogPSBsb2Nfc3RhcnQtPno7
CisJaWYgKGJveF9jMiA8IGxvY19lbmQtPnopCisJCWJveC0+ZCA9IGxvY19lbmQtPnogLSBib3gt
Pno7CisKKwlpZiAobG9jX3N0YXJ0LT56ICsgMSA9PSBsb2NfZW5kLT56KSB7CisJCWJveF9jMiA9
IGJveC0+eSArIGJveC0+aDsKKwkJaWYgKGJveC0+aCA9PSAwIHx8IGJveC0+eSA+IGxvY19zdGFy
dC0+eSkKKwkJCWJveC0+eSA9IGxvY19zdGFydC0+eTsKKwkJaWYgKGJveF9jMiA8IGxvY19lbmQt
PnkpCisJCQlib3gtPmggPSBsb2NfZW5kLT55IC0gYm94LT55OworCisJCWlmIChsb2Nfc3RhcnQt
PnkgKyAxID09IGxvY19lbmQtPnkpIHsKKwkJCWJveF9jMiA9IGJveC0+eCArIGJveC0+dzsKKwkJ
CWlmIChib3gtPncgPT0gMCB8fCBib3gtPnggPiBsb2Nfc3RhcnQtPngpCisJCQkJYm94LT54ID0g
bG9jX3N0YXJ0LT54OworCQkJaWYgKGJveF9jMiA8IGxvY19lbmQtPngpCisJCQkJYm94LT53ID0g
bG9jX2VuZC0+eCAtIGJveC0+eDsKKwkJfSBlbHNlIHsKKwkJCWJveC0+eCA9IDA7CisJCQlib3gt
PncgPSBzaXplLT53aWR0aDsKKwkJfQorCX0gZWxzZSB7CisJCWJveC0+eSA9IDA7CisJCWJveC0+
aCA9IHNpemUtPmhlaWdodDsKKwkJYm94LT54ID0gMDsKKwkJYm94LT53ID0gc2l6ZS0+d2lkdGg7
CisJfQorfQorCisvKioKKyAqIHZtd19zdWJyZXNfZGlydHlfZnVsbCAtIE1hcmsgYSBmdWxsIHN1
YnJlc291cmNlIGFzIGRpcnR5CisgKiBAZGlydHk6IFRoZSBzdXJmYWNlJ3MgZGlydHkgdHJhY2tl
ci4KKyAqIEBzdWJyZXM6IFRoZSBzdWJyZXNvdXJjZQorICovCitzdGF0aWMgdm9pZCB2bXdfc3Vi
cmVzX2RpcnR5X2Z1bGwoc3RydWN0IHZtd19zdXJmYWNlX2RpcnR5ICpkaXJ0eSwgdTMyIHN1YnJl
cykKK3sKKwljb25zdCBzdHJ1Y3Qgc3ZnYTNkc3VyZmFjZV9jYWNoZSAqY2FjaGUgPSAmZGlydHkt
PmNhY2hlOworCXUzMiBtaXAgPSBzdWJyZXMgJSBjYWNoZS0+bnVtX21pcF9sZXZlbHM7CisJY29u
c3Qgc3RydWN0IGRybV92bXdfc2l6ZSAqc2l6ZSA9ICZjYWNoZS0+bWlwW21pcF0uc2l6ZTsKKwlT
VkdBM2RCb3ggKmJveCA9ICZkaXJ0eS0+Ym94ZXNbc3VicmVzXTsKKworCWJveC0+eCA9IDA7CisJ
Ym94LT55ID0gMDsKKwlib3gtPnogPSAwOworCWJveC0+dyA9IHNpemUtPndpZHRoOworCWJveC0+
aCA9IHNpemUtPmhlaWdodDsKKwlib3gtPmQgPSBzaXplLT5kZXB0aDsKK30KKworLyoKKyAqIHZt
d19zdXJmYWNlX3RleF9kaXJ0eV9hZGRfcmFuZ2UgLSBUaGUgZGlydHlfYWRkX3JhbmdlIGNhbGxi
YWNrIGZvciB0ZXh0dXJlCisgKiBzdXJmYWNlcy4KKyAqLworc3RhdGljIHZvaWQgdm13X3N1cmZh
Y2VfdGV4X2RpcnR5X3JhbmdlX2FkZChzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMsCisJCQkJCSAg
ICBzaXplX3Qgc3RhcnQsIHNpemVfdCBlbmQpCit7CisJc3RydWN0IHZtd19zdXJmYWNlX2RpcnR5
ICpkaXJ0eSA9CisJCShzdHJ1Y3Qgdm13X3N1cmZhY2VfZGlydHkgKikgcmVzLT5kaXJ0eTsKKwlz
aXplX3QgYmFja3VwX2VuZCA9IHJlcy0+YmFja3VwX29mZnNldCArIHJlcy0+YmFja3VwX3NpemU7
CisJc3RydWN0IHN2Z2EzZHN1cmZhY2VfbG9jIGxvYzEsIGxvYzI7CisJY29uc3Qgc3RydWN0IHN2
Z2EzZHN1cmZhY2VfY2FjaGUgKmNhY2hlOworCisJc3RhcnQgPSBtYXhfdChzaXplX3QsIHN0YXJ0
LCByZXMtPmJhY2t1cF9vZmZzZXQpIC0gcmVzLT5iYWNrdXBfb2Zmc2V0OworCWVuZCA9IG1pbihl
bmQsIGJhY2t1cF9lbmQpIC0gcmVzLT5iYWNrdXBfb2Zmc2V0OworCWNhY2hlID0gJmRpcnR5LT5j
YWNoZTsKKwlzdmdhM2RzdXJmYWNlX2dldF9sb2MoY2FjaGUsICZsb2MxLCBzdGFydCk7CisJc3Zn
YTNkc3VyZmFjZV9nZXRfbG9jKGNhY2hlLCAmbG9jMiwgZW5kIC0gMSk7CisJc3ZnYTNkc3VyZmFj
ZV9pbmNfbG9jKGNhY2hlLCAmbG9jMik7CisKKwlpZiAobG9jMS5zdWJfcmVzb3VyY2UgKyAxID09
IGxvYzIuc3ViX3Jlc291cmNlKSB7CisJCS8qIERpcnR5IHJhbmdlIGNvdmVycyBhIHNpbmdsZSBz
dWItcmVzb3VyY2UgKi8KKwkJdm13X3N1YnJlc19kaXJ0eV9hZGQoZGlydHksICZsb2MxLCAmbG9j
Mik7CisJfSBlbHNlIHsKKwkJLyogRGlydHkgcmFuZ2UgY292ZXJzIG11bHRpcGxlIHN1Yi1yZXNv
dXJjZXMgKi8KKwkJc3RydWN0IHN2Z2EzZHN1cmZhY2VfbG9jIGxvY19taW4sIGxvY19tYXg7CisJ
CXUzMiBzdWJfcmVzID0gbG9jMS5zdWJfcmVzb3VyY2U7CisKKwkJc3ZnYTNkc3VyZmFjZV9tYXhf
bG9jKGNhY2hlLCBsb2MxLnN1Yl9yZXNvdXJjZSwgJmxvY19tYXgpOworCQl2bXdfc3VicmVzX2Rp
cnR5X2FkZChkaXJ0eSwgJmxvYzEsICZsb2NfbWF4KTsKKwkJc3ZnYTNkc3VyZmFjZV9taW5fbG9j
KGNhY2hlLCBsb2MyLnN1Yl9yZXNvdXJjZSAtIDEsICZsb2NfbWluKTsKKwkJdm13X3N1YnJlc19k
aXJ0eV9hZGQoZGlydHksICZsb2NfbWluLCAmbG9jMik7CisJCWZvciAoc3ViX3JlcyA9IGxvYzEu
c3ViX3Jlc291cmNlICsgMTsKKwkJICAgICBzdWJfcmVzIDwgbG9jMi5zdWJfcmVzb3VyY2UgLSAx
OyArK3N1Yl9yZXMpCisJCQl2bXdfc3VicmVzX2RpcnR5X2Z1bGwoZGlydHksIHN1Yl9yZXMpOwor
CX0KK30KKworLyoKKyAqIHZtd19zdXJmYWNlX3RleF9kaXJ0eV9hZGRfcmFuZ2UgLSBUaGUgZGly
dHlfYWRkX3JhbmdlIGNhbGxiYWNrIGZvciBidWZmZXIKKyAqIHN1cmZhY2VzLgorICovCitzdGF0
aWMgdm9pZCB2bXdfc3VyZmFjZV9idWZfZGlydHlfcmFuZ2VfYWRkKHN0cnVjdCB2bXdfcmVzb3Vy
Y2UgKnJlcywKKwkJCQkJICAgIHNpemVfdCBzdGFydCwgc2l6ZV90IGVuZCkKK3sKKwlzdHJ1Y3Qg
dm13X3N1cmZhY2VfZGlydHkgKmRpcnR5ID0KKwkJKHN0cnVjdCB2bXdfc3VyZmFjZV9kaXJ0eSAq
KSByZXMtPmRpcnR5OworCWNvbnN0IHN0cnVjdCBzdmdhM2RzdXJmYWNlX2NhY2hlICpjYWNoZSA9
ICZkaXJ0eS0+Y2FjaGU7CisJc2l6ZV90IGJhY2t1cF9lbmQgPSByZXMtPmJhY2t1cF9vZmZzZXQg
KyBjYWNoZS0+bWlwX2NoYWluX2J5dGVzOworCVNWR0EzZEJveCAqYm94ID0gJmRpcnR5LT5ib3hl
c1swXTsKKwl1MzIgYm94X2MyOworCisJYm94LT5oID0gYm94LT5kID0gMTsKKwlzdGFydCA9IG1h
eF90KHNpemVfdCwgc3RhcnQsIHJlcy0+YmFja3VwX29mZnNldCkgLSByZXMtPmJhY2t1cF9vZmZz
ZXQ7CisJZW5kID0gbWluKGVuZCwgYmFja3VwX2VuZCkgLSByZXMtPmJhY2t1cF9vZmZzZXQ7CisJ
Ym94X2MyID0gYm94LT54ICsgYm94LT53OworCWlmIChib3gtPncgPT0gMCB8fCBib3gtPnggPiBz
dGFydCkKKwkJYm94LT54ID0gc3RhcnQ7CisJaWYgKGJveF9jMiA8IGVuZCkKKwkJYm94LT53ID0g
ZW5kIC0gYm94LT54OworfQorCisvKgorICogdm13X3N1cmZhY2VfdGV4X2RpcnR5X2FkZF9yYW5n
ZSAtIFRoZSBkaXJ0eV9hZGRfcmFuZ2UgY2FsbGJhY2sgZm9yIHN1cmZhY2VzCisgKi8KK3N0YXRp
YyB2b2lkIHZtd19zdXJmYWNlX2RpcnR5X3JhbmdlX2FkZChzdHJ1Y3Qgdm13X3Jlc291cmNlICpy
ZXMsIHNpemVfdCBzdGFydCwKKwkJCQkJc2l6ZV90IGVuZCkKK3sKKwlzdHJ1Y3Qgdm13X3N1cmZh
Y2UgKnNyZiA9IHZtd19yZXNfdG9fc3JmKHJlcyk7CisKKwlpZiAoV0FSTl9PTihlbmQgPD0gcmVz
LT5iYWNrdXBfb2Zmc2V0IHx8CisJCSAgICBzdGFydCA+PSByZXMtPmJhY2t1cF9vZmZzZXQgKyBy
ZXMtPmJhY2t1cF9zaXplKSkKKwkJcmV0dXJuOworCisJaWYgKHNyZi0+Zm9ybWF0ID09IFNWR0Ez
RF9CVUZGRVIpCisJCXZtd19zdXJmYWNlX2J1Zl9kaXJ0eV9yYW5nZV9hZGQocmVzLCBzdGFydCwg
ZW5kKTsKKwllbHNlCisJCXZtd19zdXJmYWNlX3RleF9kaXJ0eV9yYW5nZV9hZGQocmVzLCBzdGFy
dCwgZW5kKTsKK30KKworLyoKKyAqIHZtd19zdXJmYWNlX2RpcnR5X3N5bmMgLSBUaGUgc3VyZmFj
ZSdzIGRpcnR5X3N5bmMgY2FsbGJhY2suCisgKi8KK3N0YXRpYyBpbnQgdm13X3N1cmZhY2VfZGly
dHlfc3luYyhzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMpCit7CisJc3RydWN0IHZtd19wcml2YXRl
ICpkZXZfcHJpdiA9IHJlcy0+ZGV2X3ByaXY7CisJYm9vbCBoYXNfZHggPSAwOworCXUzMiBpLCBu
dW1fZGlydHk7CisJc3RydWN0IHZtd19zdXJmYWNlX2RpcnR5ICpkaXJ0eSA9CisJCShzdHJ1Y3Qg
dm13X3N1cmZhY2VfZGlydHkgKikgcmVzLT5kaXJ0eTsKKwlzaXplX3QgYWxsb2Nfc2l6ZTsKKwlj
b25zdCBzdHJ1Y3Qgc3ZnYTNkc3VyZmFjZV9jYWNoZSAqY2FjaGUgPSAmZGlydHktPmNhY2hlOwor
CXN0cnVjdCB7CisJCVNWR0EzZENtZEhlYWRlciBoZWFkZXI7CisJCVNWR0EzZENtZERYVXBkYXRl
U3ViUmVzb3VyY2UgYm9keTsKKwl9ICpjbWQxOworCXN0cnVjdCB7CisJCVNWR0EzZENtZEhlYWRl
ciBoZWFkZXI7CisJCVNWR0EzZENtZFVwZGF0ZUdCSW1hZ2UgYm9keTsKKwl9ICpjbWQyOworCXZv
aWQgKmNtZDsKKworCW51bV9kaXJ0eSA9IDA7CisJZm9yIChpID0gMDsgaSA8IGRpcnR5LT5udW1f
c3VicmVzOyArK2kpIHsKKwkJY29uc3QgU1ZHQTNkQm94ICpib3ggPSAmZGlydHktPmJveGVzW2ld
OworCisJCWlmIChib3gtPmQpCisJCQludW1fZGlydHkrKzsKKwl9CisKKwlpZiAoIW51bV9kaXJ0
eSkKKwkJZ290byBvdXQ7CisKKwlhbGxvY19zaXplID0gbnVtX2RpcnR5ICogKChoYXNfZHgpID8g
c2l6ZW9mKCpjbWQxKSA6IHNpemVvZigqY21kMikpOworCWNtZCA9IFZNV19GSUZPX1JFU0VSVkUo
ZGV2X3ByaXYsIGFsbG9jX3NpemUpOworCWlmICghY21kKQorCQlyZXR1cm4gLUVOT01FTTsKKwor
CWNtZDEgPSBjbWQ7CisJY21kMiA9IGNtZDsKKworCWZvciAoaSA9IDA7IGkgPCBkaXJ0eS0+bnVt
X3N1YnJlczsgKytpKSB7CisJCWNvbnN0IFNWR0EzZEJveCAqYm94ID0gJmRpcnR5LT5ib3hlc1tp
XTsKKworCQlpZiAoIWJveC0+ZCkKKwkJCWNvbnRpbnVlOworCisJCS8qCisJCSAqIERYX1VQREFU
RV9TVUJSRVNPVVJDRSBpcyBhd2FyZSBvZiBhcnJheSBzdXJmYWNlcy4KKwkJICogVVBEQVRFX0dC
X0lNQUdFIGlzIG5vdC4KKwkJICovCisJCWlmIChoYXNfZHgpIHsKKwkJCWNtZDEtPmhlYWRlci5p
ZCA9IFNWR0FfM0RfQ01EX0RYX1VQREFURV9TVUJSRVNPVVJDRTsKKwkJCWNtZDEtPmhlYWRlci5z
aXplID0gc2l6ZW9mKGNtZDEtPmJvZHkpOworCQkJY21kMS0+Ym9keS5zaWQgPSByZXMtPmlkOwor
CQkJY21kMS0+Ym9keS5zdWJSZXNvdXJjZSA9IGk7CisJCQljbWQxLT5ib2R5LmJveCA9ICpib3g7
CisJCQljbWQxKys7CisJCX0gZWxzZSB7CisJCQljbWQyLT5oZWFkZXIuaWQgPSBTVkdBXzNEX0NN
RF9VUERBVEVfR0JfSU1BR0U7CisJCQljbWQyLT5oZWFkZXIuc2l6ZSA9IHNpemVvZihjbWQyLT5i
b2R5KTsKKwkJCWNtZDItPmJvZHkuaW1hZ2Uuc2lkID0gcmVzLT5pZDsKKwkJCWNtZDItPmJvZHku
aW1hZ2UuZmFjZSA9IGkgLyBjYWNoZS0+bnVtX21pcF9sZXZlbHM7CisJCQljbWQyLT5ib2R5Lmlt
YWdlLm1pcG1hcCA9IGkgLQorCQkJCShjYWNoZS0+bnVtX21pcF9sZXZlbHMgKiBjbWQyLT5ib2R5
LmltYWdlLmZhY2UpOworCQkJY21kMi0+Ym9keS5ib3ggPSAqYm94OworCQkJY21kMisrOworCQl9
CisKKwl9CisJdm13X2ZpZm9fY29tbWl0KGRldl9wcml2LCBhbGxvY19zaXplKTsKKyBvdXQ6CisJ
bWVtc2V0KCZkaXJ0eS0+Ym94ZXNbMF0sIDAsIHNpemVvZihkaXJ0eS0+Ym94ZXNbMF0pICoKKwkg
ICAgICAgZGlydHktPm51bV9zdWJyZXMpOworCisJcmV0dXJuIDA7Cit9CisKKy8qCisgKiB2bXdf
c3VyZmFjZV9kaXJ0eV9hbGxvYyAtIFRoZSBzdXJmYWNlJ3MgZGlydHlfYWxsb2MgY2FsbGJhY2su
CisgKi8KK3N0YXRpYyBpbnQgdm13X3N1cmZhY2VfZGlydHlfYWxsb2Moc3RydWN0IHZtd19yZXNv
dXJjZSAqcmVzKQoreworCXN0cnVjdCB2bXdfc3VyZmFjZSAqc3JmID0gdm13X3Jlc190b19zcmYo
cmVzKTsKKwlzdHJ1Y3Qgdm13X3N1cmZhY2VfZGlydHkgKmRpcnR5OworCXUzMiBudW1fbGF5ZXJz
ID0gMTsKKwl1MzIgbnVtX21pcDsKKwl1MzIgbnVtX3N1YnJlczsKKwl1MzIgbnVtX3NhbXBsZXM7
CisJc2l6ZV90IGRpcnR5X3NpemUsIGFjY19zaXplOworCXN0YXRpYyBzdHJ1Y3QgdHRtX29wZXJh
dGlvbl9jdHggY3R4ID0geworCQkuaW50ZXJydXB0aWJsZSA9IGZhbHNlLAorCQkubm9fd2FpdF9n
cHUgPSBmYWxzZQorCX07CisJaW50IHJldDsKKworCWlmIChzcmYtPmFycmF5X3NpemUpCisJCW51
bV9sYXllcnMgPSBzcmYtPmFycmF5X3NpemU7CisJZWxzZSBpZiAoc3JmLT5mbGFncyAmIFNWR0Ez
RF9TVVJGQUNFX0NVQkVNQVApCisJCW51bV9sYXllcnMgKj0gU1ZHQTNEX01BWF9TVVJGQUNFX0ZB
Q0VTOworCisJbnVtX21pcCA9IHNyZi0+bWlwX2xldmVsc1swXTsKKwlpZiAoIW51bV9taXApCisJ
CW51bV9taXAgPSAxOworCisJbnVtX3N1YnJlcyA9IG51bV9sYXllcnMgKiBudW1fbWlwOworCWRp
cnR5X3NpemUgPSBzaXplb2YoKmRpcnR5KSArIG51bV9zdWJyZXMgKiBzaXplb2YoZGlydHktPmJv
eGVzWzBdKTsKKwlhY2Nfc2l6ZSA9IHR0bV9yb3VuZF9wb3QoZGlydHlfc2l6ZSk7CisJcmV0ID0g
dHRtX21lbV9nbG9iYWxfYWxsb2Modm13X21lbV9nbG9iKHJlcy0+ZGV2X3ByaXYpLAorCQkJCSAg
IGFjY19zaXplLCAmY3R4KTsKKwlpZiAocmV0KSB7CisJCVZNV19ERUJVR19VU0VSKCJPdXQgb2Yg
Z3JhcGhpY3MgbWVtb3J5IGZvciBzdXJmYWNlICIKKwkJCSAgICAgICAiZGlydHkgdHJhY2tlci5c
biIpOworCQlyZXR1cm4gcmV0OworCX0KKworCWRpcnR5ID0ga3Z6YWxsb2MoZGlydHlfc2l6ZSwg
R0ZQX0tFUk5FTCk7CisJaWYgKCFkaXJ0eSkgeworCQlyZXQgPSAtRU5PTUVNOworCQlnb3RvIG91
dF9ub19kaXJ0eTsKKwl9CisKKwludW1fc2FtcGxlcyA9IG1heF90KHUzMiwgMSwgc3JmLT5tdWx0
aXNhbXBsZV9jb3VudCk7CisJcmV0ID0gc3ZnYTNkc3VyZmFjZV9zZXR1cF9jYWNoZSgmc3JmLT5i
YXNlX3NpemUsIHNyZi0+Zm9ybWF0LCBudW1fbWlwLAorCQkJCQludW1fbGF5ZXJzLCBudW1fc2Ft
cGxlcywgJmRpcnR5LT5jYWNoZSk7CisJaWYgKHJldCkKKwkJZ290byBvdXRfbm9fY2FjaGU7CisK
KwlkaXJ0eS0+bnVtX3N1YnJlcyA9IG51bV9zdWJyZXM7CisJZGlydHktPnNpemUgPSBhY2Nfc2l6
ZTsKKwlyZXMtPmRpcnR5ID0gKHN0cnVjdCB2bXdfcmVzb3VyY2VfZGlydHkgKikgZGlydHk7CisK
KwlyZXR1cm4gMDsKKworb3V0X25vX2NhY2hlOgorCWt2ZnJlZShkaXJ0eSk7CitvdXRfbm9fZGly
dHk6CisJdHRtX21lbV9nbG9iYWxfZnJlZSh2bXdfbWVtX2dsb2IocmVzLT5kZXZfcHJpdiksIGFj
Y19zaXplKTsKKwlyZXR1cm4gcmV0OworfQorCisvKgorICogdm13X3N1cmZhY2VfZGlydHlfZnJl
ZSAtIFRoZSBzdXJmYWNlJ3MgZGlydHlfZnJlZSBjYWxsYmFjaworICovCitzdGF0aWMgdm9pZCB2
bXdfc3VyZmFjZV9kaXJ0eV9mcmVlKHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcykKK3sKKwlzdHJ1
Y3Qgdm13X3N1cmZhY2VfZGlydHkgKmRpcnR5ID0KKwkJKHN0cnVjdCB2bXdfc3VyZmFjZV9kaXJ0
eSAqKSByZXMtPmRpcnR5OworCXNpemVfdCBhY2Nfc2l6ZSA9IGRpcnR5LT5zaXplOworCisJa3Zm
cmVlKGRpcnR5KTsKKwl0dG1fbWVtX2dsb2JhbF9mcmVlKHZtd19tZW1fZ2xvYihyZXMtPmRldl9w
cml2KSwgYWNjX3NpemUpOworCXJlcy0+ZGlydHkgPSBOVUxMOworfQorCisvKgorICogdm13X3N1
cmZhY2VfY2xlYW4gLSBUaGUgc3VyZmFjZSdzIGNsZWFuIGNhbGxiYWNrCisgKi8KK3N0YXRpYyBp
bnQgdm13X3N1cmZhY2VfY2xlYW4oc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzKQoreworCXN0cnVj
dCB2bXdfcHJpdmF0ZSAqZGV2X3ByaXYgPSByZXMtPmRldl9wcml2OworCXNpemVfdCBhbGxvY19z
aXplOworCXN0cnVjdCB7CisJCVNWR0EzZENtZEhlYWRlciBoZWFkZXI7CisJCVNWR0EzZENtZFJl
YWRiYWNrR0JTdXJmYWNlIGJvZHk7CisJfSAqY21kOworCisJYWxsb2Nfc2l6ZSA9IHNpemVvZigq
Y21kKTsKKwljbWQgPSBWTVdfRklGT19SRVNFUlZFKGRldl9wcml2LCBhbGxvY19zaXplKTsKKwlp
ZiAoIWNtZCkKKwkJcmV0dXJuIC1FTk9NRU07CisKKwljbWQtPmhlYWRlci5pZCA9IFNWR0FfM0Rf
Q01EX1JFQURCQUNLX0dCX1NVUkZBQ0U7CisJY21kLT5oZWFkZXIuc2l6ZSA9IHNpemVvZihjbWQt
PmJvZHkpOworCWNtZC0+Ym9keS5zaWQgPSByZXMtPmlkOworCXZtd19maWZvX2NvbW1pdChkZXZf
cHJpdiwgYWxsb2Nfc2l6ZSk7CisKKwlyZXR1cm4gMDsKK30KZGlmZiAtLWdpdCBhL2luY2x1ZGUv
dWFwaS9kcm0vdm13Z2Z4X2RybS5oIGIvaW5jbHVkZS91YXBpL2RybS92bXdnZnhfZHJtLmgKaW5k
ZXggMzk5ZjU4MzE3Y2ZmLi4wMmNhYjMzZjJmMjUgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvdWFwaS9k
cm0vdm13Z2Z4X2RybS5oCisrKyBiL2luY2x1ZGUvdWFwaS9kcm0vdm13Z2Z4X2RybS5oCkBAIC04
OTEsMTEgKzg5MSwxMyBAQCBzdHJ1Y3QgZHJtX3Ztd19zaGFkZXJfYXJnIHsKICAqICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXJmYWNlLgogICogQGRybV92bXdfc3VyZmFj
ZV9mbGFnX2NyZWF0ZV9idWZmZXI6IENyZWF0ZSBhIGJhY2t1cCBidWZmZXIgaWYgbm9uZSBpcwog
ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuLgorICogQGRybV92
bXdfc3VyZmFjZV9mbGFnX2NvaGVyZW50OiAgICAgIEJhY2sgc3VyZmFjZSB3aXRoIGNvaGVyZW50
IG1lbW9yeS4KICAqLwogZW51bSBkcm1fdm13X3N1cmZhY2VfZmxhZ3MgewogCWRybV92bXdfc3Vy
ZmFjZV9mbGFnX3NoYXJlYWJsZSA9ICgxIDw8IDApLAogCWRybV92bXdfc3VyZmFjZV9mbGFnX3Nj
YW5vdXQgPSAoMSA8PCAxKSwKLQlkcm1fdm13X3N1cmZhY2VfZmxhZ19jcmVhdGVfYnVmZmVyID0g
KDEgPDwgMikKKwlkcm1fdm13X3N1cmZhY2VfZmxhZ19jcmVhdGVfYnVmZmVyID0gKDEgPDwgMiks
CisJZHJtX3Ztd19zdXJmYWNlX2ZsYWdfY29oZXJlbnQgPSAoMSA8PCAzKSwKIH07CiAKIC8qKgot
LSAKMi4yMC4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
XwpkcmktZGV2ZWwgbWFpbGluZyBsaXN0CmRyaS1kZXZlbEBsaXN0cy5mcmVlZGVza3RvcC5vcmcK
aHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9kcmktZGV2ZWw=
