Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id B145DEAC25
	for <lists+dri-devel@lfdr.de>; Thu, 31 Oct 2019 10:04:47 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 1FB5F6EDD1;
	Thu, 31 Oct 2019 09:04:23 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from hqemgate16.nvidia.com (hqemgate16.nvidia.com [216.228.121.65])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 8CDAD6EBB5
 for <dri-devel@lists.freedesktop.org>; Wed, 30 Oct 2019 22:49:50 +0000 (UTC)
Received: from hqpgpgate101.nvidia.com (Not Verified[216.228.121.13]) by
 hqemgate16.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
 id <B5dba13930000>; Wed, 30 Oct 2019 15:49:55 -0700
Received: from hqmail.nvidia.com ([172.20.161.6])
 by hqpgpgate101.nvidia.com (PGP Universal service);
 Wed, 30 Oct 2019 15:49:50 -0700
X-PGP-Universal: processed;
 by hqpgpgate101.nvidia.com on Wed, 30 Oct 2019 15:49:50 -0700
Received: from HQMAIL109.nvidia.com (172.20.187.15) by HQMAIL111.nvidia.com
 (172.20.187.18) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Wed, 30 Oct
 2019 22:49:49 +0000
Received: from HQMAIL111.nvidia.com (172.20.187.18) by HQMAIL109.nvidia.com
 (172.20.187.15) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Wed, 30 Oct
 2019 22:49:49 +0000
Received: from rnnvemgw01.nvidia.com (10.128.109.123) by HQMAIL111.nvidia.com
 (172.20.187.18) with Microsoft SMTP Server (TLS) id 15.0.1473.3 via
 Frontend Transport; Wed, 30 Oct 2019 22:49:48 +0000
Received: from blueforge.nvidia.com (Not Verified[10.110.48.28]) by
 rnnvemgw01.nvidia.com with Trustwave SEG (v7, 5, 8, 10121)
 id <B5dba138b0001>; Wed, 30 Oct 2019 15:49:48 -0700
From: John Hubbard <jhubbard@nvidia.com>
To: Andrew Morton <akpm@linux-foundation.org>
Subject: [PATCH 12/19] mm/gup: track FOLL_PIN pages
Date: Wed, 30 Oct 2019 15:49:23 -0700
Message-ID: <20191030224930.3990755-13-jhubbard@nvidia.com>
X-Mailer: git-send-email 2.23.0
In-Reply-To: <20191030224930.3990755-1-jhubbard@nvidia.com>
References: <20191030224930.3990755-1-jhubbard@nvidia.com>
MIME-Version: 1.0
X-NVConfidentiality: public
X-Mailman-Approved-At: Thu, 31 Oct 2019 09:04:21 +0000
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=nvidia.com; s=n1; 
 t=1572475795; bh=QB4piIeYSHaPr0lrpZOxR61169WQMbaj1LD/Isgokvk=;
 h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
 In-Reply-To:References:MIME-Version:X-NVConfidentiality:
 Content-Type:Content-Transfer-Encoding;
 b=hKlTHK/NVuiQus97TKJyqcTj1f6CAJWw1pFJrMnif42P4H7Mf0kfc2jVBSSt5cF0G
 I0fx8nn/hj3tMygwTBzda0fwGJpK1NdsJAaYGHjjmuux7fMTo2gpp0ULcs95R2EwqM
 9cEfJnNeNiHbw0SIeDP5XeVqtzy3AUxVJVFFO5gWFYGvKZMXaic1UFr0YrJiaagjKp
 lSX/YIZSjaYKisC9jZTQ4dksmQoTgGGMmW5FRmAoEfxkPpmswokRi483/0aT6EIQlZ
 Exd+DWfHU8arMp6cX+Nrcd7EGmrU/AN3KT2HcEhKd4StqwUpFrPdLTtkypuaBOJ8ZX
 ZWEIANvWEZT/g==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Michal Hocko <mhocko@suse.com>, Jan Kara <jack@suse.cz>,
 kvm@vger.kernel.org, linux-doc@vger.kernel.org,
 David Airlie <airlied@linux.ie>, Dave Chinner <david@fromorbit.com>,
 dri-devel@lists.freedesktop.org, LKML <linux-kernel@vger.kernel.org>,
 linux-mm@kvack.org, Paul
 Mackerras <paulus@samba.org>, linux-kselftest@vger.kernel.org,
 Ira Weiny <ira.weiny@intel.com>, Jonathan Corbet <corbet@lwn.net>,
 linux-rdma@vger.kernel.org, Michael Ellerman <mpe@ellerman.id.au>,
 Christoph Hellwig <hch@infradead.org>, Jason Gunthorpe <jgg@ziepe.ca>,
 Vlastimil Babka <vbabka@suse.cz>,
 =?UTF-8?q?Bj=C3=B6rn=20T=C3=B6pel?= <bjorn.topel@intel.com>,
 linux-media@vger.kernel.org, Shuah Khan <shuah@kernel.org>,
 John Hubbard <jhubbard@nvidia.com>, linux-block@vger.kernel.org,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Al Viro <viro@zeniv.linux.org.uk>, Dan Williams <dan.j.williams@intel.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Magnus Karlsson <magnus.karlsson@intel.com>, Jens Axboe <axboe@kernel.dk>,
 netdev@vger.kernel.org, Alex Williamson <alex.williamson@redhat.com>,
 linux-fsdevel@vger.kernel.org, bpf@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org, "David S . Miller" <davem@davemloft.net>,
 Mike Kravetz <mike.kravetz@oracle.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

QWRkIHRyYWNraW5nIG9mIHBhZ2VzIHRoYXQgd2VyZSBwaW5uZWQgdmlhIEZPTExfUElOLgoKQXMg
bWVudGlvbmVkIGluIHRoZSBGT0xMX1BJTiBkb2N1bWVudGF0aW9uLCBjYWxsZXJzIHdobyBlZmZl
Y3RpdmVseSBzZXQKRk9MTF9QSU4gYXJlIHJlcXVpcmVkIHRvIHVsdGltYXRlbHkgZnJlZSBzdWNo
IHBhZ2VzIHZpYSBwdXRfdXNlcl9wYWdlKCkuClRoZSBlZmZlY3QgaXMgc2ltaWxhciB0byBGT0xM
X0dFVCwgYW5kIG1heSBiZSB0aG91Z2h0IG9mIGFzICJGT0xMX0dFVApmb3IgRElPIGFuZC9vciBS
RE1BIHVzZSIuCgpQYWdlcyB0aGF0IGhhdmUgYmVlbiBwaW5uZWQgdmlhIEZPTExfUElOIGFyZSBp
ZGVudGlmaWFibGUgdmlhIGEKbmV3IGZ1bmN0aW9uIGNhbGw6CgogICBib29sIHBhZ2VfZG1hX3Bp
bm5lZChzdHJ1Y3QgcGFnZSAqcGFnZSk7CgpXaGF0IHRvIGRvIGluIHJlc3BvbnNlIHRvIGVuY291
bnRlcmluZyBzdWNoIGEgcGFnZSwgaXMgbGVmdCB0byBsYXRlcgpwYXRjaHNldHMuIFRoZXJlIGlz
IGRpc2N1c3Npb24gYWJvdXQgdGhpcyBpbiBbMV0uCgpUaGlzIGFsc28gY2hhbmdlcyBhIEJVR19P
TigpLCB0byBhIFdBUk5fT04oKSwgaW4gZm9sbG93X3BhZ2VfbWFzaygpLgoKVGhpcyBhbHNvIGhh
cyBhIGNvdXBsZSBvZiB0cml2aWFsLCBub24tZnVuY3Rpb25hbCBjaGFuZ2UgZml4ZXMgdG8KdHJ5
X2dldF9jb21wb3VuZF9oZWFkKCkuIFRoYXQgZnVuY3Rpb24gZ290IG1vdmVkIHRvIHRoZSB0b3Ag
b2YgdGhlCmZpbGUuCgpUaGlzIGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZml4IGZyb20gSXJhIFdl
aW55OgoKREFYIHJlcXVpcmVzIGRldGVjdGlvbiBvZiBhIHBhZ2UgY3Jvc3NpbmcgdG8gYSByZWYg
Y291bnQgb2YgMS4gIEZpeCB0aGlzCmZvciBHVVAgcGFnZXMgYnkgaW50cm9kdWNpbmcgcHV0X2Rl
dm1hcF9tYW5hZ2VkX3VzZXJfcGFnZSgpIHdoaWNoCmFjY291bnRzIGZvciBHVVBfUElOX0NPVU5U
SU5HX0JJQVMgbm93IHVzZWQgYnkgR1VQLgoKWzFdIGh0dHBzOi8vbHduLm5ldC9BcnRpY2xlcy83
ODQ1NzQvICJTb21lIHNsb3cgcHJvZ3Jlc3Mgb24KZ2V0X3VzZXJfcGFnZXMoKSIKClN1Z2dlc3Rl
ZC1ieTogSmFuIEthcmEgPGphY2tAc3VzZS5jej4KU3VnZ2VzdGVkLWJ5OiBKw6lyw7RtZSBHbGlz
c2UgPGpnbGlzc2VAcmVkaGF0LmNvbT4KU2lnbmVkLW9mZi1ieTogSXJhIFdlaW55IDxpcmEud2Vp
bnlAaW50ZWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBKb2huIEh1YmJhcmQgPGpodWJiYXJkQG52aWRp
YS5jb20+Ci0tLQogaW5jbHVkZS9saW51eC9tbS5oICAgICAgIHwgIDgwICsrKysrKysrKysrLS0t
LQogaW5jbHVkZS9saW51eC9tbXpvbmUuaCAgIHwgICAyICsKIGluY2x1ZGUvbGludXgvcGFnZV9y
ZWYuaCB8ICAxMCArKwogbW0vZ3VwLmMgICAgICAgICAgICAgICAgIHwgMjEzICsrKysrKysrKysr
KysrKysrKysrKysrKysrKysrKystLS0tLS0tLQogbW0vaHVnZV9tZW1vcnkuYyAgICAgICAgIHwg
IDMyICsrKysrLQogbW0vaHVnZXRsYi5jICAgICAgICAgICAgIHwgIDI4ICsrKystCiBtbS9tZW1y
ZW1hcC5jICAgICAgICAgICAgfCAgIDQgKy0KIG1tL3Ztc3RhdC5jICAgICAgICAgICAgICB8ICAg
MiArCiA4IGZpbGVzIGNoYW5nZWQsIDMwMCBpbnNlcnRpb25zKCspLCA3MSBkZWxldGlvbnMoLSkK
CmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L21tLmggYi9pbmNsdWRlL2xpbnV4L21tLmgKaW5k
ZXggNjJjODM4YTNlNmM3Li44ODJmZGE5MTljODEgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgv
bW0uaAorKysgYi9pbmNsdWRlL2xpbnV4L21tLmgKQEAgLTk3Miw5ICs5NzIsMTAgQEAgc3RhdGlj
IGlubGluZSBib29sIGlzX3pvbmVfZGV2aWNlX3BhZ2UoY29uc3Qgc3RydWN0IHBhZ2UgKnBhZ2Up
CiAjZW5kaWYKIAogI2lmZGVmIENPTkZJR19ERVZfUEFHRU1BUF9PUFMKLXZvaWQgX19wdXRfZGV2
bWFwX21hbmFnZWRfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSk7Cit2b2lkIF9fcHV0X2Rldm1hcF9t
YW5hZ2VkX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UsIGludCBjb3VudCk7CiBERUNMQVJFX1NUQVRJ
Q19LRVlfRkFMU0UoZGV2bWFwX21hbmFnZWRfa2V5KTsKLXN0YXRpYyBpbmxpbmUgYm9vbCBwdXRf
ZGV2bWFwX21hbmFnZWRfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKKworc3RhdGljIGlubGluZSBi
b29sIHBhZ2VfaXNfZGV2bWFwX21hbmFnZWQoc3RydWN0IHBhZ2UgKnBhZ2UpCiB7CiAJaWYgKCFz
dGF0aWNfYnJhbmNoX3VubGlrZWx5KCZkZXZtYXBfbWFuYWdlZF9rZXkpKQogCQlyZXR1cm4gZmFs
c2U7CkBAIC05ODMsNyArOTg0LDYgQEAgc3RhdGljIGlubGluZSBib29sIHB1dF9kZXZtYXBfbWFu
YWdlZF9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQogCXN3aXRjaCAocGFnZS0+cGdtYXAtPnR5cGUp
IHsKIAljYXNlIE1FTU9SWV9ERVZJQ0VfUFJJVkFURToKIAljYXNlIE1FTU9SWV9ERVZJQ0VfRlNf
REFYOgotCQlfX3B1dF9kZXZtYXBfbWFuYWdlZF9wYWdlKHBhZ2UpOwogCQlyZXR1cm4gdHJ1ZTsK
IAlkZWZhdWx0OgogCQlicmVhazsKQEAgLTk5MSw2ICs5OTEsMTkgQEAgc3RhdGljIGlubGluZSBi
b29sIHB1dF9kZXZtYXBfbWFuYWdlZF9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQogCXJldHVybiBm
YWxzZTsKIH0KIAorc3RhdGljIGlubGluZSBib29sIHB1dF9kZXZtYXBfbWFuYWdlZF9wYWdlKHN0
cnVjdCBwYWdlICpwYWdlKQoreworCWJvb2wgaXNfZGV2bWFwID0gcGFnZV9pc19kZXZtYXBfbWFu
YWdlZChwYWdlKTsKKworCWlmIChpc19kZXZtYXApIHsKKwkJaW50IGNvdW50ID0gcGFnZV9yZWZf
ZGVjX3JldHVybihwYWdlKTsKKworCQlfX3B1dF9kZXZtYXBfbWFuYWdlZF9wYWdlKHBhZ2UsIGNv
dW50KTsKKwl9CisKKwlyZXR1cm4gaXNfZGV2bWFwOworfQorCiAjZWxzZSAvKiBDT05GSUdfREVW
X1BBR0VNQVBfT1BTICovCiBzdGF0aWMgaW5saW5lIGJvb2wgcHV0X2Rldm1hcF9tYW5hZ2VkX3Bh
Z2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCiB7CkBAIC0xMDM4LDYgKzEwNTEsOCBAQCBzdGF0aWMgaW5s
aW5lIF9fbXVzdF9jaGVjayBib29sIHRyeV9nZXRfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKIAly
ZXR1cm4gdHJ1ZTsKIH0KIAorX19tdXN0X2NoZWNrIGJvb2wgdXNlcl9wYWdlX3JlZl9pbmMoc3Ry
dWN0IHBhZ2UgKnBhZ2UpOworCiBzdGF0aWMgaW5saW5lIHZvaWQgcHV0X3BhZ2Uoc3RydWN0IHBh
Z2UgKnBhZ2UpCiB7CiAJcGFnZSA9IGNvbXBvdW5kX2hlYWQocGFnZSk7CkBAIC0xMDU1LDMxICsx
MDcwLDU2IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBwdXRfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkK
IAkJX19wdXRfcGFnZShwYWdlKTsKIH0KIAotLyoqCi0gKiBwdXRfdXNlcl9wYWdlKCkgLSByZWxl
YXNlIGEgZ3VwLXBpbm5lZCBwYWdlCi0gKiBAcGFnZTogICAgICAgICAgICBwb2ludGVyIHRvIHBh
Z2UgdG8gYmUgcmVsZWFzZWQKKy8qCisgKiBHVVBfUElOX0NPVU5USU5HX0JJQVMsIGFuZCB0aGUg
YXNzb2NpYXRlZCBmdW5jdGlvbnMgdGhhdCB1c2UgaXQsIG92ZXJsb2FkCisgKiB0aGUgcGFnZSdz
IHJlZmNvdW50IHNvIHRoYXQgdHdvIHNlcGFyYXRlIGl0ZW1zIGFyZSB0cmFja2VkOiB0aGUgb3Jp
Z2luYWwgcGFnZQorICogcmVmZXJlbmNlIGNvdW50LCBhbmQgYWxzbyBhIG5ldyBjb3VudCBvZiBo
b3cgbWFueSBnZXRfdXNlcl9wYWdlcygpIGNhbGxzIHdlcmUKKyAqIG1hZGUgYWdhaW5zdCB0aGUg
cGFnZS4gKCJndXAtcGlubmVkIiBpcyBhbm90aGVyIHRlcm0gZm9yIHRoZSBsYXR0ZXIpLgorICoK
KyAqIFdpdGggdGhpcyBzY2hlbWUsIGdldF91c2VyX3BhZ2VzKCkgYmVjb21lcyBzcGVjaWFsOiBz
dWNoIHBhZ2VzIGFyZSBtYXJrZWQKKyAqIGFzIGRpc3RpbmN0IGZyb20gbm9ybWFsIHBhZ2VzLiBB
cyBzdWNoLCB0aGUgbmV3IHB1dF91c2VyX3BhZ2UoKSBjYWxsIChhbmQKKyAqIGl0cyB2YXJpYW50
cykgbXVzdCBiZSB1c2VkIGluIG9yZGVyIHRvIHJlbGVhc2UgZ3VwLXBpbm5lZCBwYWdlcy4KKyAq
CisgKiBDaG9pY2Ugb2YgdmFsdWU6CiAgKgotICogUGFnZXMgdGhhdCB3ZXJlIHBpbm5lZCB2aWEg
Z2V0X3VzZXJfcGFnZXMqKCkgbXVzdCBiZSByZWxlYXNlZCB2aWEKLSAqIGVpdGhlciBwdXRfdXNl
cl9wYWdlKCksIG9yIG9uZSBvZiB0aGUgcHV0X3VzZXJfcGFnZXMqKCkgcm91dGluZXMKLSAqIGJl
bG93LiBUaGlzIGlzIHNvIHRoYXQgZXZlbnR1YWxseSwgcGFnZXMgdGhhdCBhcmUgcGlubmVkIHZp
YQotICogZ2V0X3VzZXJfcGFnZXMqKCkgY2FuIGJlIHNlcGFyYXRlbHkgdHJhY2tlZCBhbmQgdW5p
cXVlbHkgaGFuZGxlZC4gSW4KLSAqIHBhcnRpY3VsYXIsIGludGVyYWN0aW9ucyB3aXRoIFJETUEg
YW5kIGZpbGVzeXN0ZW1zIG5lZWQgc3BlY2lhbAotICogaGFuZGxpbmcuCisgKiBCeSBtYWtpbmcg
R1VQX1BJTl9DT1VOVElOR19CSUFTIGEgcG93ZXIgb2YgdHdvLCBkZWJ1Z2dpbmcgb2YgcGFnZSBy
ZWZlcmVuY2UKKyAqIGNvdW50cyB3aXRoIHJlc3BlY3QgdG8gZ2V0X3VzZXJfcGFnZXMoKSBhbmQg
cHV0X3VzZXJfcGFnZSgpIGJlY29tZXMgc2ltcGxlciwKKyAqIGR1ZSB0byB0aGUgZmFjdCB0aGF0
IGFkZGluZyBhbiBldmVuIHBvd2VyIG9mIHR3byB0byB0aGUgcGFnZSByZWZjb3VudCBoYXMKKyAq
IHRoZSBlZmZlY3Qgb2YgdXNpbmcgb25seSB0aGUgdXBwZXIgTiBiaXRzLCBmb3IgdGhlIGNvZGUg
dGhhdCBjb3VudHMgdXAgdXNpbmcKKyAqIHRoZSBiaWFzIHZhbHVlLiBUaGlzIG1lYW5zIHRoYXQg
dGhlIGxvd2VyIGJpdHMgYXJlIGxlZnQgZm9yIHRoZSBleGNsdXNpdmUKKyAqIHVzZSBvZiB0aGUg
b3JpZ2luYWwgY29kZSB0aGF0IGluY3JlbWVudHMgYW5kIGRlY3JlbWVudHMgYnkgb25lIChvciBh
dCBsZWFzdCwKKyAqIGJ5IG11Y2ggc21hbGxlciB2YWx1ZXMgdGhhbiB0aGUgYmlhcyB2YWx1ZSku
CiAgKgotICogcHV0X3VzZXJfcGFnZSgpIGFuZCBwdXRfcGFnZSgpIGFyZSBub3QgaW50ZXJjaGFu
Z2VhYmxlLCBkZXNwaXRlIHRoaXMgZWFybHkKLSAqIGltcGxlbWVudGF0aW9uIHRoYXQgbWFrZXMg
dGhlbSBsb29rIHRoZSBzYW1lLiBwdXRfdXNlcl9wYWdlKCkgY2FsbHMgbXVzdAotICogYmUgcGVy
ZmVjdGx5IG1hdGNoZWQgdXAgd2l0aCBnZXRfdXNlcl9wYWdlKCkgY2FsbHMuCisgKiBPZiBjb3Vy
c2UsIG9uY2UgdGhlIGxvd2VyIGJpdHMgb3ZlcmZsb3cgaW50byB0aGUgdXBwZXIgYml0cyAoYW5k
IHRoaXMgaXMKKyAqIE9LLCBiZWNhdXNlIHN1YnRyYWN0aW9uIHJlY292ZXJzIHRoZSBvcmlnaW5h
bCB2YWx1ZXMpLCB0aGVuIHZpc3VhbCBpbnNwZWN0aW9uCisgKiBubyBsb25nZXIgc3VmZmljZXMg
dG8gZGlyZWN0bHkgdmlldyB0aGUgc2VwYXJhdGUgY291bnRzLiBIb3dldmVyLCBmb3Igbm9ybWFs
CisgKiBhcHBsaWNhdGlvbnMgdGhhdCBkb24ndCBoYXZlIGh1Z2UgcGFnZSByZWZlcmVuY2UgY291
bnRzLCB0aGlzIHdvbid0IGJlIGFuCisgKiBpc3N1ZS4KKyAqCisgKiBMb2NraW5nOiB0aGUgbG9j
a2xlc3MgYWxnb3JpdGhtIGRlc2NyaWJlZCBpbiBwYWdlX2NhY2hlX2dldF9zcGVjdWxhdGl2ZSgp
CisgKiBhbmQgcGFnZV9jYWNoZV9ndXBfcGluX3NwZWN1bGF0aXZlKCkgcHJvdmlkZXMgc2FmZSBv
cGVyYXRpb24gZm9yCisgKiBnZXRfdXNlcl9wYWdlcyBhbmQgcGFnZV9ta2NsZWFuIGFuZCBvdGhl
ciBjYWxscyB0aGF0IHJhY2UgdG8gc2V0IHVwIHBhZ2UKKyAqIHRhYmxlIGVudHJpZXMuCiAgKi8K
LXN0YXRpYyBpbmxpbmUgdm9pZCBwdXRfdXNlcl9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQotewot
CXB1dF9wYWdlKHBhZ2UpOwotfQorI2RlZmluZSBHVVBfUElOX0NPVU5USU5HX0JJQVMgKDFVTCA8
PCAxMCkKIAordm9pZCBwdXRfdXNlcl9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKTsKIHZvaWQgcHV0
X3VzZXJfcGFnZXNfZGlydHlfbG9jayhzdHJ1Y3QgcGFnZSAqKnBhZ2VzLCB1bnNpZ25lZCBsb25n
IG5wYWdlcywKIAkJCSAgICAgICBib29sIG1ha2VfZGlydHkpOwotCiB2b2lkIHB1dF91c2VyX3Bh
Z2VzKHN0cnVjdCBwYWdlICoqcGFnZXMsIHVuc2lnbmVkIGxvbmcgbnBhZ2VzKTsKIAorLyoqCisg
KiBwYWdlX2RtYV9waW5uZWQoKSAtIHJlcG9ydCBpZiBhIHBhZ2UgaXMgcGlubmVkIGJ5IGEgY2Fs
bCB0byBwaW5fdXNlcl9wYWdlcyooKQorICogb3IgcGluX2xvbmd0ZXJtX3BhZ2VzKigpCisgKiBA
cGFnZToJcG9pbnRlciB0byBwYWdlIHRvIGJlIHF1ZXJpZWQuCisgKiBAUmV0dXJuOglUcnVlLCBp
ZiBpdCBpcyBsaWtlbHkgdGhhdCB0aGUgcGFnZSBoYXMgYmVlbiAiZG1hLXBpbm5lZCIuCisgKgkJ
RmFsc2UsIGlmIHRoZSBwYWdlIGlzIGRlZmluaXRlbHkgbm90IGRtYS1waW5uZWQuCisgKi8KK3N0
YXRpYyBpbmxpbmUgYm9vbCBwYWdlX2RtYV9waW5uZWQoc3RydWN0IHBhZ2UgKnBhZ2UpCit7CisJ
cmV0dXJuIChwYWdlX3JlZl9jb3VudChjb21wb3VuZF9oZWFkKHBhZ2UpKSkgPj0gR1VQX1BJTl9D
T1VOVElOR19CSUFTOworfQorCiAjaWYgZGVmaW5lZChDT05GSUdfU1BBUlNFTUVNKSAmJiAhZGVm
aW5lZChDT05GSUdfU1BBUlNFTUVNX1ZNRU1NQVApCiAjZGVmaW5lIFNFQ1RJT05fSU5fUEFHRV9G
TEFHUwogI2VuZGlmCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L21tem9uZS5oIGIvaW5jbHVk
ZS9saW51eC9tbXpvbmUuaAppbmRleCBiZGEyMDI4Mjc0NmIuLjA0ODVjYmEzOGQyMyAxMDA2NDQK
LS0tIGEvaW5jbHVkZS9saW51eC9tbXpvbmUuaAorKysgYi9pbmNsdWRlL2xpbnV4L21tem9uZS5o
CkBAIC0yNDQsNiArMjQ0LDggQEAgZW51bSBub2RlX3N0YXRfaXRlbSB7CiAJTlJfRElSVElFRCwJ
CS8qIHBhZ2UgZGlydHlpbmdzIHNpbmNlIGJvb3R1cCAqLwogCU5SX1dSSVRURU4sCQkvKiBwYWdl
IHdyaXRpbmdzIHNpbmNlIGJvb3R1cCAqLwogCU5SX0tFUk5FTF9NSVNDX1JFQ0xBSU1BQkxFLAkv
KiByZWNsYWltYWJsZSBub24tc2xhYiBrZXJuZWwgcGFnZXMgKi8KKwlOUl9GT0xMX1BJTl9SRVFV
RVNURUQsCS8qIHZpYTogcGluX3VzZXJfcGFnZSgpLCBndXAgZmxhZzogRk9MTF9QSU4gKi8KKwlO
Ul9GT0xMX1BJTl9SRVRVUk5FRCwJLyogcGFnZXMgcmV0dXJuZWQgdmlhIHB1dF91c2VyX3BhZ2Uo
KSAqLwogCU5SX1ZNX05PREVfU1RBVF9JVEVNUwogfTsKIApkaWZmIC0tZ2l0IGEvaW5jbHVkZS9s
aW51eC9wYWdlX3JlZi5oIGIvaW5jbHVkZS9saW51eC9wYWdlX3JlZi5oCmluZGV4IDE0ZDE0YmVi
MWY3Zi4uYjljYmU1NTNkMWU3IDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4L3BhZ2VfcmVmLmgK
KysrIGIvaW5jbHVkZS9saW51eC9wYWdlX3JlZi5oCkBAIC0xMDIsNiArMTAyLDE2IEBAIHN0YXRp
YyBpbmxpbmUgdm9pZCBwYWdlX3JlZl9zdWIoc3RydWN0IHBhZ2UgKnBhZ2UsIGludCBucikKIAkJ
X19wYWdlX3JlZl9tb2QocGFnZSwgLW5yKTsKIH0KIAorc3RhdGljIGlubGluZSBpbnQgcGFnZV9y
ZWZfc3ViX3JldHVybihzdHJ1Y3QgcGFnZSAqcGFnZSwgaW50IG5yKQoreworCWludCByZXQgPSBh
dG9taWNfc3ViX3JldHVybihuciwgJnBhZ2UtPl9yZWZjb3VudCk7CisKKwlpZiAocGFnZV9yZWZf
dHJhY2Vwb2ludF9hY3RpdmUoX190cmFjZXBvaW50X3BhZ2VfcmVmX21vZCkpCisJCV9fcGFnZV9y
ZWZfbW9kKHBhZ2UsIC1ucik7CisKKwlyZXR1cm4gcmV0OworfQorCiBzdGF0aWMgaW5saW5lIHZv
aWQgcGFnZV9yZWZfaW5jKHN0cnVjdCBwYWdlICpwYWdlKQogewogCWF0b21pY19pbmMoJnBhZ2Ut
Pl9yZWZjb3VudCk7CmRpZmYgLS1naXQgYS9tbS9ndXAuYyBiL21tL2d1cC5jCmluZGV4IDg2OTRi
YzdiM2RmMy4uZTUxYjM4MjBhOTk1IDEwMDY0NAotLS0gYS9tbS9ndXAuYworKysgYi9tbS9ndXAu
YwpAQCAtMjksNiArMjksMTAyIEBAIHN0cnVjdCBmb2xsb3dfcGFnZV9jb250ZXh0IHsKIAl1bnNp
Z25lZCBpbnQgcGFnZV9tYXNrOwogfTsKIAorLyoKKyAqIFJldHVybiB0aGUgY29tcG91bmQgaGVh
ZCBwYWdlIHdpdGggcmVmIGFwcHJvcHJpYXRlbHkgaW5jcmVtZW50ZWQsCisgKiBvciBOVUxMIGlm
IHRoYXQgZmFpbGVkLgorICovCitzdGF0aWMgaW5saW5lIHN0cnVjdCBwYWdlICp0cnlfZ2V0X2Nv
bXBvdW5kX2hlYWQoc3RydWN0IHBhZ2UgKnBhZ2UsIGludCByZWZzKQoreworCXN0cnVjdCBwYWdl
ICpoZWFkID0gY29tcG91bmRfaGVhZChwYWdlKTsKKworCWlmIChXQVJOX09OX09OQ0UocGFnZV9y
ZWZfY291bnQoaGVhZCkgPCAwKSkKKwkJcmV0dXJuIE5VTEw7CisJaWYgKHVubGlrZWx5KCFwYWdl
X2NhY2hlX2FkZF9zcGVjdWxhdGl2ZShoZWFkLCByZWZzKSkpCisJCXJldHVybiBOVUxMOworCXJl
dHVybiBoZWFkOworfQorCisjaWZkZWYgQ09ORklHX0RFQlVHX1ZNCitzdGF0aWMgaW5saW5lIHZv
aWQgX191cGRhdGVfcHJvY192bXN0YXQoc3RydWN0IHBhZ2UgKnBhZ2UsCisJCQkJCWVudW0gbm9k
ZV9zdGF0X2l0ZW0gaXRlbSwgaW50IGNvdW50KQoreworCW1vZF9ub2RlX3BhZ2Vfc3RhdGUocGFn
ZV9wZ2RhdChwYWdlKSwgaXRlbSwgY291bnQpOworfQorI2Vsc2UKK3N0YXRpYyBpbmxpbmUgdm9p
ZCBfX3VwZGF0ZV9wcm9jX3Ztc3RhdChzdHJ1Y3QgcGFnZSAqcGFnZSwKKwkJCQkJZW51bSBub2Rl
X3N0YXRfaXRlbSBpdGVtLCBpbnQgY291bnQpCit7Cit9CisjZW5kaWYKKworLyoqCisgKiB1c2Vy
X3BhZ2VfcmVmX2luYygpIC0gbWFyayBhIHBhZ2UgYXMgYmVpbmcgdXNlZCBieSBnZXRfdXNlcl9w
YWdlcyhGT0xMX1BJTikuCisgKgorICogQHBhZ2U6CXBvaW50ZXIgdG8gcGFnZSB0byBiZSBtYXJr
ZWQKKyAqIEBSZXR1cm46CXRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNlIGZvciBmYWlsdXJlCisgKi8K
K19fbXVzdF9jaGVjayBib29sIHVzZXJfcGFnZV9yZWZfaW5jKHN0cnVjdCBwYWdlICpwYWdlKQor
eworCXBhZ2UgPSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQocGFnZSwgR1VQX1BJTl9DT1VOVElOR19C
SUFTKTsKKwlpZiAoIXBhZ2UpCisJCXJldHVybiBmYWxzZTsKKworCV9fdXBkYXRlX3Byb2Nfdm1z
dGF0KHBhZ2UsIE5SX0ZPTExfUElOX1JFUVVFU1RFRCwgMSk7CisJcmV0dXJuIHRydWU7Cit9CisK
KyNpZmRlZiBDT05GSUdfREVWX1BBR0VNQVBfT1BTCitzdGF0aWMgYm9vbCBfX3B1dF9kZXZtYXBf
bWFuYWdlZF91c2VyX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCit7CisJYm9vbCBpc19kZXZtYXAg
PSBwYWdlX2lzX2Rldm1hcF9tYW5hZ2VkKHBhZ2UpOworCisJaWYgKGlzX2Rldm1hcCkgeworCQlp
bnQgY291bnQgPSBwYWdlX3JlZl9zdWJfcmV0dXJuKHBhZ2UsIEdVUF9QSU5fQ09VTlRJTkdfQklB
Uyk7CisKKwkJX191cGRhdGVfcHJvY192bXN0YXQocGFnZSwgTlJfRk9MTF9QSU5fUkVUVVJORUQs
IDEpOworCQlfX3B1dF9kZXZtYXBfbWFuYWdlZF9wYWdlKHBhZ2UsIGNvdW50KTsKKwl9CisKKwly
ZXR1cm4gaXNfZGV2bWFwOworfQorI2Vsc2UKK3N0YXRpYyBib29sIF9fcHV0X2Rldm1hcF9tYW5h
Z2VkX3VzZXJfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKK3sKKwlyZXR1cm4gZmFsc2U7Cit9Cisj
ZW5kaWYgLyogQ09ORklHX0RFVl9QQUdFTUFQX09QUyAqLworCisvKioKKyAqIHB1dF91c2VyX3Bh
Z2UoKSAtIHJlbGVhc2UgYSBndXAtcGlubmVkIHBhZ2UKKyAqIEBwYWdlOiAgICAgICAgICAgIHBv
aW50ZXIgdG8gcGFnZSB0byBiZSByZWxlYXNlZAorICoKKyAqIFBhZ2VzIHRoYXQgd2VyZSBwaW5u
ZWQgdmlhIGdldF91c2VyX3BhZ2VzKigpIG11c3QgYmUgcmVsZWFzZWQgdmlhCisgKiBlaXRoZXIg
cHV0X3VzZXJfcGFnZSgpLCBvciBvbmUgb2YgdGhlIHB1dF91c2VyX3BhZ2VzKigpIHJvdXRpbmVz
CisgKiBiZWxvdy4gVGhpcyBpcyBzbyB0aGF0IGV2ZW50dWFsbHksIHBhZ2VzIHRoYXQgYXJlIHBp
bm5lZCB2aWEKKyAqIGdldF91c2VyX3BhZ2VzKigpIGNhbiBiZSBzZXBhcmF0ZWx5IHRyYWNrZWQg
YW5kIHVuaXF1ZWx5IGhhbmRsZWQuIEluCisgKiBwYXJ0aWN1bGFyLCBpbnRlcmFjdGlvbnMgd2l0
aCBSRE1BIGFuZCBmaWxlc3lzdGVtcyBuZWVkIHNwZWNpYWwKKyAqIGhhbmRsaW5nLgorICovCit2
b2lkIHB1dF91c2VyX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCit7CisJcGFnZSA9IGNvbXBvdW5k
X2hlYWQocGFnZSk7CisKKwkvKgorCSAqIEZvciBkZXZtYXAgbWFuYWdlZCBwYWdlcyB3ZSBuZWVk
IHRvIGNhdGNoIHJlZmNvdW50IHRyYW5zaXRpb24gZnJvbQorCSAqIEdVUF9QSU5fQ09VTlRJTkdf
QklBUyB0byAxLCB3aGVuIHJlZmNvdW50IHJlYWNoIG9uZSBpdCBtZWFucyB0aGUKKwkgKiBwYWdl
IGlzIGZyZWUgYW5kIHdlIG5lZWQgdG8gaW5mb3JtIHRoZSBkZXZpY2UgZHJpdmVyIHRocm91Z2gK
KwkgKiBjYWxsYmFjay4gU2VlIGluY2x1ZGUvbGludXgvbWVtcmVtYXAuaCBhbmQgSE1NIGZvciBk
ZXRhaWxzLgorCSAqLworCWlmIChfX3B1dF9kZXZtYXBfbWFuYWdlZF91c2VyX3BhZ2UocGFnZSkp
CisJCXJldHVybjsKKworCWlmIChwYWdlX3JlZl9zdWJfYW5kX3Rlc3QocGFnZSwgR1VQX1BJTl9D
T1VOVElOR19CSUFTKSkKKwkJX19wdXRfcGFnZShwYWdlKTsKKworCV9fdXBkYXRlX3Byb2Nfdm1z
dGF0KHBhZ2UsIE5SX0ZPTExfUElOX1JFVFVSTkVELCAxKTsKK30KK0VYUE9SVF9TWU1CT0wocHV0
X3VzZXJfcGFnZSk7CisKIC8qKgogICogcHV0X3VzZXJfcGFnZXNfZGlydHlfbG9jaygpIC0gcmVs
ZWFzZSBhbmQgb3B0aW9uYWxseSBkaXJ0eSBndXAtcGlubmVkIHBhZ2VzCiAgKiBAcGFnZXM6ICBh
cnJheSBvZiBwYWdlcyB0byBiZSBtYXliZSBtYXJrZWQgZGlydHksIGFuZCBkZWZpbml0ZWx5IHJl
bGVhc2VkLgpAQCAtMjE1LDEwICszMTEsMTEgQEAgc3RhdGljIHN0cnVjdCBwYWdlICpmb2xsb3df
cGFnZV9wdGUoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiAJfQogCiAJcGFnZSA9IHZtX25v
cm1hbF9wYWdlKHZtYSwgYWRkcmVzcywgcHRlKTsKLQlpZiAoIXBhZ2UgJiYgcHRlX2Rldm1hcChw
dGUpICYmIChmbGFncyAmIEZPTExfR0VUKSkgeworCWlmICghcGFnZSAmJiBwdGVfZGV2bWFwKHB0
ZSkgJiYgKGZsYWdzICYgKEZPTExfR0VUIHwgRk9MTF9QSU4pKSkgewogCQkvKgotCQkgKiBPbmx5
IHJldHVybiBkZXZpY2UgbWFwcGluZyBwYWdlcyBpbiB0aGUgRk9MTF9HRVQgY2FzZSBzaW5jZQot
CQkgKiB0aGV5IGFyZSBvbmx5IHZhbGlkIHdoaWxlIGhvbGRpbmcgdGhlIHBnbWFwIHJlZmVyZW5j
ZS4KKwkJICogT25seSByZXR1cm4gZGV2aWNlIG1hcHBpbmcgcGFnZXMgaW4gdGhlIEZPTExfR0VU
IG9yIEZPTExfUElOCisJCSAqIGNhc2Ugc2luY2UgdGhleSBhcmUgb25seSB2YWxpZCB3aGlsZSBo
b2xkaW5nIHRoZSBwZ21hcAorCQkgKiByZWZlcmVuY2UuCiAJCSAqLwogCQkqcGdtYXAgPSBnZXRf
ZGV2X3BhZ2VtYXAocHRlX3BmbihwdGUpLCAqcGdtYXApOwogCQlpZiAoKnBnbWFwKQpAQCAtMjYx
LDYgKzM1OCwxMSBAQCBzdGF0aWMgc3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlX3B0ZShzdHJ1Y3Qg
dm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIAkJCXBhZ2UgPSBFUlJfUFRSKC1FTk9NRU0pOwogCQkJZ290
byBvdXQ7CiAJCX0KKwl9IGVsc2UgaWYgKGZsYWdzICYgRk9MTF9QSU4pIHsKKwkJaWYgKHVubGlr
ZWx5KCF1c2VyX3BhZ2VfcmVmX2luYyhwYWdlKSkpIHsKKwkJCXBhZ2UgPSBFUlJfUFRSKC1FTk9N
RU0pOworCQkJZ290byBvdXQ7CisJCX0KIAl9CiAJaWYgKGZsYWdzICYgRk9MTF9UT1VDSCkgewog
CQlpZiAoKGZsYWdzICYgRk9MTF9XUklURSkgJiYKQEAgLTUyMiw4ICs2MjQsOCBAQCBzdGF0aWMg
c3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlX21hc2soc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEs
CiAJLyogbWFrZSB0aGlzIGhhbmRsZSBodWdlcGQgKi8KIAlwYWdlID0gZm9sbG93X2h1Z2VfYWRk
cihtbSwgYWRkcmVzcywgZmxhZ3MgJiBGT0xMX1dSSVRFKTsKIAlpZiAoIUlTX0VSUihwYWdlKSkg
ewotCQlCVUdfT04oZmxhZ3MgJiBGT0xMX0dFVCk7Ci0JCXJldHVybiBwYWdlOworCQlXQVJOX09O
X09OQ0UoZmxhZ3MgJiAoRk9MTF9HRVQgfCBGT0xMX1BJTikpOworCQlyZXR1cm4gTlVMTDsKIAl9
CiAKIAlwZ2QgPSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyZXNzKTsKQEAgLTE4MjQsMzAgKzE5MjYsMjAg
QEAgc3RhdGljIGlubGluZSBwdGVfdCBndXBfZ2V0X3B0ZShwdGVfdCAqcHRlcCkKICNlbmRpZiAv
KiBDT05GSUdfR1VQX0dFVF9QVEVfTE9XX0hJR0ggKi8KIAogc3RhdGljIHZvaWQgX19tYXliZV91
bnVzZWQgdW5kb19kZXZfcGFnZW1hcChpbnQgKm5yLCBpbnQgbnJfc3RhcnQsCisJCQkJCSAgICB1
bnNpZ25lZCBpbnQgZmxhZ3MsCiAJCQkJCSAgICBzdHJ1Y3QgcGFnZSAqKnBhZ2VzKQogewogCXdo
aWxlICgoKm5yKSAtIG5yX3N0YXJ0KSB7CiAJCXN0cnVjdCBwYWdlICpwYWdlID0gcGFnZXNbLS0o
Km5yKV07CiAKIAkJQ2xlYXJQYWdlUmVmZXJlbmNlZChwYWdlKTsKLQkJcHV0X3BhZ2UocGFnZSk7
CisJCWlmIChmbGFncyAmIEZPTExfUElOKQorCQkJcHV0X3VzZXJfcGFnZShwYWdlKTsKKwkJZWxz
ZQorCQkJcHV0X3BhZ2UocGFnZSk7CiAJfQogfQogCi0vKgotICogUmV0dXJuIHRoZSBjb21wdW5k
IGhlYWQgcGFnZSB3aXRoIHJlZiBhcHByb3ByaWF0ZWx5IGluY3JlbWVudGVkLAotICogb3IgTlVM
TCBpZiB0aGF0IGZhaWxlZC4KLSAqLwotc3RhdGljIGlubGluZSBzdHJ1Y3QgcGFnZSAqdHJ5X2dl
dF9jb21wb3VuZF9oZWFkKHN0cnVjdCBwYWdlICpwYWdlLCBpbnQgcmVmcykKLXsKLQlzdHJ1Y3Qg
cGFnZSAqaGVhZCA9IGNvbXBvdW5kX2hlYWQocGFnZSk7Ci0JaWYgKFdBUk5fT05fT05DRShwYWdl
X3JlZl9jb3VudChoZWFkKSA8IDApKQotCQlyZXR1cm4gTlVMTDsKLQlpZiAodW5saWtlbHkoIXBh
Z2VfY2FjaGVfYWRkX3NwZWN1bGF0aXZlKGhlYWQsIHJlZnMpKSkKLQkJcmV0dXJuIE5VTEw7Ci0J
cmV0dXJuIGhlYWQ7Ci19Ci0KICNpZmRlZiBDT05GSUdfQVJDSF9IQVNfUFRFX1NQRUNJQUwKIHN0
YXRpYyBpbnQgZ3VwX3B0ZV9yYW5nZShwbWRfdCBwbWQsIHVuc2lnbmVkIGxvbmcgYWRkciwgdW5z
aWduZWQgbG9uZyBlbmQsCiAJCQkgdW5zaWduZWQgaW50IGZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBh
Z2VzLCBpbnQgKm5yKQpAQCAtMTg3Nyw3ICsxOTY5LDcgQEAgc3RhdGljIGludCBndXBfcHRlX3Jh
bmdlKHBtZF90IHBtZCwgdW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIGVuZCwKIAog
CQkJcGdtYXAgPSBnZXRfZGV2X3BhZ2VtYXAocHRlX3BmbihwdGUpLCBwZ21hcCk7CiAJCQlpZiAo
dW5saWtlbHkoIXBnbWFwKSkgewotCQkJCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5yX3N0YXJ0LCBw
YWdlcyk7CisJCQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIGZsYWdzLCBwYWdlcyk7
CiAJCQkJZ290byBwdGVfdW5tYXA7CiAJCQl9CiAJCX0gZWxzZSBpZiAocHRlX3NwZWNpYWwocHRl
KSkKQEAgLTE4ODYsOSArMTk3OCwxNSBAQCBzdGF0aWMgaW50IGd1cF9wdGVfcmFuZ2UocG1kX3Qg
cG1kLCB1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAogCQlWTV9CVUdfT04o
IXBmbl92YWxpZChwdGVfcGZuKHB0ZSkpKTsKIAkJcGFnZSA9IHB0ZV9wYWdlKHB0ZSk7CiAKLQkJ
aGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwYWdlLCAxKTsKLQkJaWYgKCFoZWFkKQotCQkJ
Z290byBwdGVfdW5tYXA7CisJCWlmIChmbGFncyAmIEZPTExfUElOKSB7CisJCQloZWFkID0gcGFn
ZTsKKwkJCWlmICh1bmxpa2VseSghdXNlcl9wYWdlX3JlZl9pbmMoaGVhZCkpKQorCQkJCWdvdG8g
cHRlX3VubWFwOworCQl9IGVsc2UgeworCQkJaGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChw
YWdlLCAxKTsKKwkJCWlmICghaGVhZCkKKwkJCQlnb3RvIHB0ZV91bm1hcDsKKwkJfQogCiAJCWlm
ICh1bmxpa2VseShwdGVfdmFsKHB0ZSkgIT0gcHRlX3ZhbCgqcHRlcCkpKSB7CiAJCQlwdXRfcGFn
ZShoZWFkKTsKQEAgLTE5NDIsMTIgKzIwNDAsMjAgQEAgc3RhdGljIGludCBfX2d1cF9kZXZpY2Vf
aHVnZSh1bnNpZ25lZCBsb25nIHBmbiwgdW5zaWduZWQgbG9uZyBhZGRyLAogCiAJCXBnbWFwID0g
Z2V0X2Rldl9wYWdlbWFwKHBmbiwgcGdtYXApOwogCQlpZiAodW5saWtlbHkoIXBnbWFwKSkgewot
CQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIHBhZ2VzKTsKKwkJCXVuZG9fZGV2X3Bh
Z2VtYXAobnIsIG5yX3N0YXJ0LCBmbGFncywgcGFnZXMpOwogCQkJcmV0dXJuIDA7CiAJCX0KIAkJ
U2V0UGFnZVJlZmVyZW5jZWQocGFnZSk7CiAJCXBhZ2VzWypucl0gPSBwYWdlOwotCQlnZXRfcGFn
ZShwYWdlKTsKKworCQlpZiAoZmxhZ3MgJiBGT0xMX1BJTikgeworCQkJaWYgKHVubGlrZWx5KCF1
c2VyX3BhZ2VfcmVmX2luYyhwYWdlKSkpIHsKKwkJCQl1bmRvX2Rldl9wYWdlbWFwKG5yLCBucl9z
dGFydCwgZmxhZ3MsIHBhZ2VzKTsKKwkJCQlyZXR1cm4gMDsKKwkJCX0KKwkJfSBlbHNlCisJCQln
ZXRfcGFnZShwYWdlKTsKKwogCQkoKm5yKSsrOwogCQlwZm4rKzsKIAl9IHdoaWxlIChhZGRyICs9
IFBBR0VfU0laRSwgYWRkciAhPSBlbmQpOwpAQCAtMTk2OSw3ICsyMDc1LDcgQEAgc3RhdGljIGlu
dCBfX2d1cF9kZXZpY2VfaHVnZV9wbWQocG1kX3Qgb3JpZywgcG1kX3QgKnBtZHAsIHVuc2lnbmVk
IGxvbmcgYWRkciwKIAkJcmV0dXJuIDA7CiAKIAlpZiAodW5saWtlbHkocG1kX3ZhbChvcmlnKSAh
PSBwbWRfdmFsKCpwbWRwKSkpIHsKLQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIHBh
Z2VzKTsKKwkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIGZsYWdzLCBwYWdlcyk7CiAJ
CXJldHVybiAwOwogCX0KIAlyZXR1cm4gMTsKQEAgLTE5ODcsNyArMjA5Myw3IEBAIHN0YXRpYyBp
bnQgX19ndXBfZGV2aWNlX2h1Z2VfcHVkKHB1ZF90IG9yaWcsIHB1ZF90ICpwdWRwLCB1bnNpZ25l
ZCBsb25nIGFkZHIsCiAJCXJldHVybiAwOwogCiAJaWYgKHVubGlrZWx5KHB1ZF92YWwob3JpZykg
IT0gcHVkX3ZhbCgqcHVkcCkpKSB7Ci0JCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5yX3N0YXJ0LCBw
YWdlcyk7CisJCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5yX3N0YXJ0LCBmbGFncywgcGFnZXMpOwog
CQlyZXR1cm4gMDsKIAl9CiAJcmV0dXJuIDE7CkBAIC0yMDcyLDkgKzIxNzgsMTYgQEAgc3RhdGlj
IGludCBndXBfaHVnZXB0ZShwdGVfdCAqcHRlcCwgdW5zaWduZWQgbG9uZyBzeiwgdW5zaWduZWQg
bG9uZyBhZGRyLAogCXBhZ2UgPSBoZWFkICsgKChhZGRyICYgKHN6LTEpKSA+PiBQQUdFX1NISUZU
KTsKIAlyZWZzID0gX19yZWNvcmRfc3VicGFnZXMocGFnZSwgYWRkciwgZW5kLCBwYWdlcywgKm5y
KTsKIAotCWhlYWQgPSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQoaGVhZCwgcmVmcyk7Ci0JaWYgKCFo
ZWFkKQotCQlyZXR1cm4gMDsKKwlpZiAoZmxhZ3MgJiBGT0xMX1BJTikgeworCQloZWFkID0gcGFn
ZTsKKwkJaWYgKHVubGlrZWx5KCF1c2VyX3BhZ2VfcmVmX2luYyhoZWFkKSkpCisJCQlyZXR1cm4g
MDsKKwkJaGVhZCA9IHBhZ2U7CisJfSBlbHNlIHsKKwkJaGVhZCA9IHRyeV9nZXRfY29tcG91bmRf
aGVhZChoZWFkLCByZWZzKTsKKwkJaWYgKCFoZWFkKQorCQkJcmV0dXJuIDA7CisJfQogCiAJaWYg
KHVubGlrZWx5KHB0ZV92YWwocHRlKSAhPSBwdGVfdmFsKCpwdGVwKSkpIHsKIAkJX19yZW1vdmVf
cmVmc19mcm9tX2hlYWQoaGVhZCwgcmVmcyk7CkBAIC0yMTI5LDkgKzIyNDIsMTUgQEAgc3RhdGlj
IGludCBndXBfaHVnZV9wbWQocG1kX3Qgb3JpZywgcG1kX3QgKnBtZHAsIHVuc2lnbmVkIGxvbmcg
YWRkciwKIAlwYWdlID0gcG1kX3BhZ2Uob3JpZykgKyAoKGFkZHIgJiB+UE1EX01BU0spID4+IFBB
R0VfU0hJRlQpOwogCXJlZnMgPSBfX3JlY29yZF9zdWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBh
Z2VzLCAqbnIpOwogCi0JaGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwbWRfcGFnZShvcmln
KSwgcmVmcyk7Ci0JaWYgKCFoZWFkKQotCQlyZXR1cm4gMDsKKwlpZiAoZmxhZ3MgJiBGT0xMX1BJ
TikgeworCQloZWFkID0gcGFnZTsKKwkJaWYgKHVubGlrZWx5KCF1c2VyX3BhZ2VfcmVmX2luYyho
ZWFkKSkpCisJCQlyZXR1cm4gMDsKKwl9IGVsc2UgeworCQloZWFkID0gdHJ5X2dldF9jb21wb3Vu
ZF9oZWFkKHBtZF9wYWdlKG9yaWcpLCByZWZzKTsKKwkJaWYgKCFoZWFkKQorCQkJcmV0dXJuIDA7
CisJfQogCiAJaWYgKHVubGlrZWx5KHBtZF92YWwob3JpZykgIT0gcG1kX3ZhbCgqcG1kcCkpKSB7
CiAJCV9fcmVtb3ZlX3JlZnNfZnJvbV9oZWFkKGhlYWQsIHJlZnMpOwpAQCAtMjE2MCw5ICsyMjc5
LDE1IEBAIHN0YXRpYyBpbnQgZ3VwX2h1Z2VfcHVkKHB1ZF90IG9yaWcsIHB1ZF90ICpwdWRwLCB1
bnNpZ25lZCBsb25nIGFkZHIsCiAJcGFnZSA9IHB1ZF9wYWdlKG9yaWcpICsgKChhZGRyICYgflBV
RF9NQVNLKSA+PiBQQUdFX1NISUZUKTsKIAlyZWZzID0gX19yZWNvcmRfc3VicGFnZXMocGFnZSwg
YWRkciwgZW5kLCBwYWdlcywgKm5yKTsKIAotCWhlYWQgPSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQo
cHVkX3BhZ2Uob3JpZyksIHJlZnMpOwotCWlmICghaGVhZCkKLQkJcmV0dXJuIDA7CisJaWYgKGZs
YWdzICYgRk9MTF9QSU4pIHsKKwkJaGVhZCA9IHBhZ2U7CisJCWlmICh1bmxpa2VseSghdXNlcl9w
YWdlX3JlZl9pbmMoaGVhZCkpKQorCQkJcmV0dXJuIDA7CisJfSBlbHNlIHsKKwkJaGVhZCA9IHRy
eV9nZXRfY29tcG91bmRfaGVhZChwdWRfcGFnZShvcmlnKSwgcmVmcyk7CisJCWlmICghaGVhZCkK
KwkJCXJldHVybiAwOworCX0KIAogCWlmICh1bmxpa2VseShwdWRfdmFsKG9yaWcpICE9IHB1ZF92
YWwoKnB1ZHApKSkgewogCQlfX3JlbW92ZV9yZWZzX2Zyb21faGVhZChoZWFkLCByZWZzKTsKQEAg
LTIxODYsOSArMjMxMSwxNSBAQCBzdGF0aWMgaW50IGd1cF9odWdlX3BnZChwZ2RfdCBvcmlnLCBw
Z2RfdCAqcGdkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCXBhZ2UgPSBwZ2RfcGFnZShvcmlnKSAr
ICgoYWRkciAmIH5QR0RJUl9NQVNLKSA+PiBQQUdFX1NISUZUKTsKIAlyZWZzID0gX19yZWNvcmRf
c3VicGFnZXMocGFnZSwgYWRkciwgZW5kLCBwYWdlcywgKm5yKTsKIAotCWhlYWQgPSB0cnlfZ2V0
X2NvbXBvdW5kX2hlYWQocGdkX3BhZ2Uob3JpZyksIHJlZnMpOwotCWlmICghaGVhZCkKLQkJcmV0
dXJuIDA7CisJaWYgKGZsYWdzICYgRk9MTF9QSU4pIHsKKwkJaGVhZCA9IHBhZ2U7CisJCWlmICh1
bmxpa2VseSghdXNlcl9wYWdlX3JlZl9pbmMoaGVhZCkpKQorCQkJcmV0dXJuIDA7CisJfSBlbHNl
IHsKKwkJaGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwZ2RfcGFnZShvcmlnKSwgcmVmcyk7
CisJCWlmICghaGVhZCkKKwkJCXJldHVybiAwOworCX0KIAogCWlmICh1bmxpa2VseShwZ2RfdmFs
KG9yaWcpICE9IHBnZF92YWwoKnBnZHApKSkgewogCQlfX3JlbW92ZV9yZWZzX2Zyb21faGVhZCho
ZWFkLCByZWZzKTsKQEAgLTI0MTQsNyArMjU0NSw3IEBAIHN0YXRpYyBpbnQgaW50ZXJuYWxfZ2V0
X3VzZXJfcGFnZXNfZmFzdCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCiAJdW5z
aWduZWQgbG9uZyBhZGRyLCBsZW4sIGVuZDsKIAlpbnQgbnIgPSAwLCByZXQgPSAwOwogCi0JaWYg
KFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiB+KEZPTExfV1JJVEUgfCBGT0xMX0xPTkdURVJNKSkp
CisJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiB+KEZPTExfV1JJVEUgfCBGT0xMX0xPTkdU
RVJNIHwgRk9MTF9QSU4pKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKIAlzdGFydCA9IHVudGFnZ2Vk
X2FkZHIoc3RhcnQpICYgUEFHRV9NQVNLOwpkaWZmIC0tZ2l0IGEvbW0vaHVnZV9tZW1vcnkuYyBi
L21tL2h1Z2VfbWVtb3J5LmMKaW5kZXggMTNjYzkzNzg1MDA2Li42NmJmNGM4Yjg4ZjEgMTAwNjQ0
Ci0tLSBhL21tL2h1Z2VfbWVtb3J5LmMKKysrIGIvbW0vaHVnZV9tZW1vcnkuYwpAQCAtOTQ1LDYg
Kzk0NSwxMSBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X2Rldm1hcF9wbWQoc3RydWN0IHZtX2FyZWFf
c3RydWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkgKi8KIAlXQVJOX09OQ0UoZmxhZ3Mg
JiBGT0xMX0NPVywgIm1tOiBJbiBmb2xsb3dfZGV2bWFwX3BtZCB3aXRoIEZPTExfQ09XIHNldCIp
OwogCisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuICov
CisJaWYgKFdBUk5fT05fT05DRSgoZmxhZ3MgJiAoRk9MTF9QSU4gfCBGT0xMX0dFVCkpID09CisJ
CQkgKEZPTExfUElOIHwgRk9MTF9HRVQpKSkKKwkJcmV0dXJuIE5VTEw7CisKIAlpZiAoZmxhZ3Mg
JiBGT0xMX1dSSVRFICYmICFwbWRfd3JpdGUoKnBtZCkpCiAJCXJldHVybiBOVUxMOwogCkBAIC05
NjAsNyArOTY1LDcgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19kZXZtYXBfcG1kKHN0cnVjdCB2bV9h
cmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJICogZGV2aWNlIG1hcHBlZCBw
YWdlcyBjYW4gb25seSBiZSByZXR1cm5lZCBpZiB0aGUKIAkgKiBjYWxsZXIgd2lsbCBtYW5hZ2Ug
dGhlIHBhZ2UgcmVmZXJlbmNlIGNvdW50LgogCSAqLwotCWlmICghKGZsYWdzICYgRk9MTF9HRVQp
KQorCWlmICghKGZsYWdzICYgKEZPTExfR0VUIHwgRk9MTF9QSU4pKSkKIAkJcmV0dXJuIEVSUl9Q
VFIoLUVFWElTVCk7CiAKIAlwZm4gKz0gKGFkZHIgJiB+UE1EX01BU0spID4+IFBBR0VfU0hJRlQ7
CkBAIC05NjgsNyArOTczLDEyIEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFwX3BtZChzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCWlmICghKnBnbWFw
KQogCQlyZXR1cm4gRVJSX1BUUigtRUZBVUxUKTsKIAlwYWdlID0gcGZuX3RvX3BhZ2UocGZuKTsK
LQlnZXRfcGFnZShwYWdlKTsKKworCWlmIChmbGFncyAmIEZPTExfR0VUKQorCQlnZXRfcGFnZShw
YWdlKTsKKwllbHNlIGlmIChmbGFncyAmIEZPTExfUElOKQorCQlpZiAodW5saWtlbHkoIXVzZXJf
cGFnZV9yZWZfaW5jKHBhZ2UpKSkKKwkJCXBhZ2UgPSBFUlJfUFRSKC1FTk9NRU0pOwogCiAJcmV0
dXJuIHBhZ2U7CiB9CkBAIC0xMDg4LDYgKzEwOTgsMTEgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19k
ZXZtYXBfcHVkKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIs
CiAJaWYgKGZsYWdzICYgRk9MTF9XUklURSAmJiAhcHVkX3dyaXRlKCpwdWQpKQogCQlyZXR1cm4g
TlVMTDsKIAorCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZl
LiAqLworCWlmIChXQVJOX09OX09OQ0UoKGZsYWdzICYgKEZPTExfUElOIHwgRk9MTF9HRVQpKSA9
PQorCQkJIChGT0xMX1BJTiB8IEZPTExfR0VUKSkpCisJCXJldHVybiBOVUxMOworCiAJaWYgKHB1
ZF9wcmVzZW50KCpwdWQpICYmIHB1ZF9kZXZtYXAoKnB1ZCkpCiAJCS8qIHBhc3MgKi87CiAJZWxz
ZQpAQCAtMTEwMCw3ICsxMTE1LDcgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19kZXZtYXBfcHVkKHN0
cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJICogZGV2aWNl
IG1hcHBlZCBwYWdlcyBjYW4gb25seSBiZSByZXR1cm5lZCBpZiB0aGUKIAkgKiBjYWxsZXIgd2ls
bCBtYW5hZ2UgdGhlIHBhZ2UgcmVmZXJlbmNlIGNvdW50LgogCSAqLwotCWlmICghKGZsYWdzICYg
Rk9MTF9HRVQpKQorCWlmICghKGZsYWdzICYgKEZPTExfR0VUIHwgRk9MTF9QSU4pKSkKIAkJcmV0
dXJuIEVSUl9QVFIoLUVFWElTVCk7CiAKIAlwZm4gKz0gKGFkZHIgJiB+UFVEX01BU0spID4+IFBB
R0VfU0hJRlQ7CkBAIC0xMTA4LDcgKzExMjMsMTIgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19kZXZt
YXBfcHVkKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJ
aWYgKCEqcGdtYXApCiAJCXJldHVybiBFUlJfUFRSKC1FRkFVTFQpOwogCXBhZ2UgPSBwZm5fdG9f
cGFnZShwZm4pOwotCWdldF9wYWdlKHBhZ2UpOworCisJaWYgKGZsYWdzICYgRk9MTF9HRVQpCisJ
CWdldF9wYWdlKHBhZ2UpOworCWVsc2UgaWYgKGZsYWdzICYgRk9MTF9QSU4pCisJCWlmICh1bmxp
a2VseSghdXNlcl9wYWdlX3JlZl9pbmMocGFnZSkpKQorCQkJcGFnZSA9IEVSUl9QVFIoLUVOT01F
TSk7CiAKIAlyZXR1cm4gcGFnZTsKIH0KQEAgLTE1MjIsOCArMTU0MiwxMiBAQCBzdHJ1Y3QgcGFn
ZSAqZm9sbG93X3RyYW5zX2h1Z2VfcG1kKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogc2tp
cF9tbG9jazoKIAlwYWdlICs9IChhZGRyICYgfkhQQUdFX1BNRF9NQVNLKSA+PiBQQUdFX1NISUZU
OwogCVZNX0JVR19PTl9QQUdFKCFQYWdlQ29tcG91bmQocGFnZSkgJiYgIWlzX3pvbmVfZGV2aWNl
X3BhZ2UocGFnZSksIHBhZ2UpOworCiAJaWYgKGZsYWdzICYgRk9MTF9HRVQpCiAJCWdldF9wYWdl
KHBhZ2UpOworCWVsc2UgaWYgKGZsYWdzICYgRk9MTF9QSU4pCisJCWlmICh1bmxpa2VseSghdXNl
cl9wYWdlX3JlZl9pbmMocGFnZSkpKQorCQkJcGFnZSA9IE5VTEw7CiAKIG91dDoKIAlyZXR1cm4g
cGFnZTsKZGlmZiAtLWdpdCBhL21tL2h1Z2V0bGIuYyBiL21tL2h1Z2V0bGIuYwppbmRleCBiNDVh
OTUzNjNhODQuLmRhMzM1YjFjZDc5OCAxMDA2NDQKLS0tIGEvbW0vaHVnZXRsYi5jCisrKyBiL21t
L2h1Z2V0bGIuYwpAQCAtNDQ2Miw3ICs0NDYyLDE3IEBAIGxvbmcgZm9sbG93X2h1Z2V0bGJfcGFn
ZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiBzYW1l
X3BhZ2U6CiAJCWlmIChwYWdlcykgewogCQkJcGFnZXNbaV0gPSBtZW1fbWFwX29mZnNldChwYWdl
LCBwZm5fb2Zmc2V0KTsKLQkJCWdldF9wYWdlKHBhZ2VzW2ldKTsKKworCQkJaWYgKGZsYWdzICYg
Rk9MTF9HRVQpCisJCQkJZ2V0X3BhZ2UocGFnZXNbaV0pOworCQkJZWxzZSBpZiAoZmxhZ3MgJiBG
T0xMX1BJTikKKwkJCQlpZiAodW5saWtlbHkoIXVzZXJfcGFnZV9yZWZfaW5jKHBhZ2VzW2ldKSkp
IHsKKwkJCQkJc3Bpbl91bmxvY2socHRsKTsKKwkJCQkJcmVtYWluZGVyID0gMDsKKwkJCQkJZXJy
ID0gLUVOT01FTTsKKwkJCQkJV0FSTl9PTl9PTkNFKDEpOworCQkJCQlicmVhazsKKwkJCQl9CiAJ
CX0KIAogCQlpZiAodm1hcykKQEAgLTUwMjIsNiArNTAzMiwxMiBAQCBmb2xsb3dfaHVnZV9wbWQo
c3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKIAlzdHJ1Y3QgcGFn
ZSAqcGFnZSA9IE5VTEw7CiAJc3BpbmxvY2tfdCAqcHRsOwogCXB0ZV90IHB0ZTsKKworCS8qIEZP
TExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJO
X09OX09OQ0UoKGZsYWdzICYgKEZPTExfUElOIHwgRk9MTF9HRVQpKSA9PQorCQkJIChGT0xMX1BJ
TiB8IEZPTExfR0VUKSkpCisJCXJldHVybiBOVUxMOworCiByZXRyeToKIAlwdGwgPSBwbWRfbG9j
a3B0cihtbSwgcG1kKTsKIAlzcGluX2xvY2socHRsKTsKQEAgLTUwMzQsOCArNTA1MCwxNCBAQCBm
b2xsb3dfaHVnZV9wbWQoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVz
cywKIAlwdGUgPSBodWdlX3B0ZXBfZ2V0KChwdGVfdCAqKXBtZCk7CiAJaWYgKHB0ZV9wcmVzZW50
KHB0ZSkpIHsKIAkJcGFnZSA9IHBtZF9wYWdlKCpwbWQpICsgKChhZGRyZXNzICYgflBNRF9NQVNL
KSA+PiBQQUdFX1NISUZUKTsKKwogCQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKIAkJCWdldF9wYWdl
KHBhZ2UpOworCQllbHNlIGlmIChmbGFncyAmIEZPTExfUElOKQorCQkJaWYgKHVubGlrZWx5KCF1
c2VyX3BhZ2VfcmVmX2luYyhwYWdlKSkpIHsKKwkJCQlwYWdlID0gTlVMTDsKKwkJCQlnb3RvIG91
dDsKKwkJCX0KIAl9IGVsc2UgewogCQlpZiAoaXNfaHVnZXRsYl9lbnRyeV9taWdyYXRpb24ocHRl
KSkgewogCQkJc3Bpbl91bmxvY2socHRsKTsKQEAgLTUwNTYsNyArNTA3OCw3IEBAIHN0cnVjdCBw
YWdlICogX193ZWFrCiBmb2xsb3dfaHVnZV9wdWQoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2ln
bmVkIGxvbmcgYWRkcmVzcywKIAkJcHVkX3QgKnB1ZCwgaW50IGZsYWdzKQogewotCWlmIChmbGFn
cyAmIEZPTExfR0VUKQorCWlmIChmbGFncyAmIChGT0xMX0dFVCB8IEZPTExfUElOKSkKIAkJcmV0
dXJuIE5VTEw7CiAKIAlyZXR1cm4gcHRlX3BhZ2UoKihwdGVfdCAqKXB1ZCkgKyAoKGFkZHJlc3Mg
JiB+UFVEX01BU0spID4+IFBBR0VfU0hJRlQpOwpAQCAtNTA2NSw3ICs1MDg3LDcgQEAgZm9sbG93
X2h1Z2VfcHVkKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsCiBz
dHJ1Y3QgcGFnZSAqIF9fd2VhawogZm9sbG93X2h1Z2VfcGdkKHN0cnVjdCBtbV9zdHJ1Y3QgKm1t
LCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsIHBnZF90ICpwZ2QsIGludCBmbGFncykKIHsKLQlpZiAo
ZmxhZ3MgJiBGT0xMX0dFVCkKKwlpZiAoZmxhZ3MgJiAoRk9MTF9HRVQgfCBGT0xMX1BJTikpCiAJ
CXJldHVybiBOVUxMOwogCiAJcmV0dXJuIHB0ZV9wYWdlKCoocHRlX3QgKilwZ2QpICsgKChhZGRy
ZXNzICYgflBHRElSX01BU0spID4+IFBBR0VfU0hJRlQpOwpkaWZmIC0tZ2l0IGEvbW0vbWVtcmVt
YXAuYyBiL21tL21lbXJlbWFwLmMKaW5kZXggMDNjY2JkZmViNjk3Li4zYjFjNjlkZjFkMmEgMTAw
NjQ0Ci0tLSBhL21tL21lbXJlbWFwLmMKKysrIGIvbW0vbWVtcmVtYXAuYwpAQCAtNDEwLDEwICs0
MTAsOCBAQCBzdHJ1Y3QgZGV2X3BhZ2VtYXAgKmdldF9kZXZfcGFnZW1hcCh1bnNpZ25lZCBsb25n
IHBmbiwKIEVYUE9SVF9TWU1CT0xfR1BMKGdldF9kZXZfcGFnZW1hcCk7CiAKICNpZmRlZiBDT05G
SUdfREVWX1BBR0VNQVBfT1BTCi12b2lkIF9fcHV0X2Rldm1hcF9tYW5hZ2VkX3BhZ2Uoc3RydWN0
IHBhZ2UgKnBhZ2UpCit2b2lkIF9fcHV0X2Rldm1hcF9tYW5hZ2VkX3BhZ2Uoc3RydWN0IHBhZ2Ug
KnBhZ2UsIGludCBjb3VudCkKIHsKLQlpbnQgY291bnQgPSBwYWdlX3JlZl9kZWNfcmV0dXJuKHBh
Z2UpOwotCiAJLyoKIAkgKiBJZiByZWZjb3VudCBpcyAxIHRoZW4gcGFnZSBpcyBmcmVlZCBhbmQg
cmVmY291bnQgaXMgc3RhYmxlIGFzIG5vYm9keQogCSAqIGhvbGRzIGEgcmVmZXJlbmNlIG9uIHRo
ZSBwYWdlLgpkaWZmIC0tZ2l0IGEvbW0vdm1zdGF0LmMgYi9tbS92bXN0YXQuYwppbmRleCA2YWZj
ODkyYTE0OGEuLjY1YzAyN2Q5YjYzNyAxMDA2NDQKLS0tIGEvbW0vdm1zdGF0LmMKKysrIGIvbW0v
dm1zdGF0LmMKQEAgLTExNjcsNiArMTE2Nyw4IEBAIGNvbnN0IGNoYXIgKiBjb25zdCB2bXN0YXRf
dGV4dFtdID0gewogCSJucl9kaXJ0aWVkIiwKIAkibnJfd3JpdHRlbiIsCiAJIm5yX2tlcm5lbF9t
aXNjX3JlY2xhaW1hYmxlIiwKKwkibnJfZm9sbF9waW5fcmVxdWVzdGVkIiwKKwkibnJfZm9sbF9w
aW5fcmV0dXJuZWQiLAogCiAJLyogZW51bSB3cml0ZWJhY2tfc3RhdF9pdGVtIGNvdW50ZXJzICov
CiAJIm5yX2RpcnR5X3RocmVzaG9sZCIsCi0tIAoyLjIzLjAKCl9fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fCmRyaS1kZXZlbCBtYWlsaW5nIGxpc3QKZHJpLWRl
dmVsQGxpc3RzLmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9t
YWlsbWFuL2xpc3RpbmZvL2RyaS1kZXZlbA==
