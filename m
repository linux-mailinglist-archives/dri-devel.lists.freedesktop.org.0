Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 63768AFB1E
	for <lists+dri-devel@lfdr.de>; Wed, 11 Sep 2019 13:09:25 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 8F19D6E239;
	Wed, 11 Sep 2019 11:09:21 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from mx1.suse.de (mx2.suse.de [195.135.220.15])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 86E716E239
 for <dri-devel@lists.freedesktop.org>; Wed, 11 Sep 2019 11:09:20 +0000 (UTC)
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx1.suse.de (Postfix) with ESMTP id C4493AF70;
 Wed, 11 Sep 2019 11:09:18 +0000 (UTC)
From: Thomas Zimmermann <tzimmermann@suse.de>
To: daniel@ffwll.ch, kraxel@redhat.com, airlied@linux.ie, corbet@lwn.net,
 z.liuxinliang@hisilicon.com, zourongrong@gmail.com,
 kong.kongxinwei@hisilicon.com, puck.chen@hisilicon.com,
 hdegoede@redhat.com, sam@ravnborg.org, yc_chen@aspeedtech.com
Subject: [PATCH v2 2/4] drm/vram: Have VRAM MM call GEM VRAM functions directly
Date: Wed, 11 Sep 2019 13:09:08 +0200
Message-Id: <20190911110910.30698-3-tzimmermann@suse.de>
X-Mailer: git-send-email 2.23.0
In-Reply-To: <20190911110910.30698-1-tzimmermann@suse.de>
References: <20190911110910.30698-1-tzimmermann@suse.de>
MIME-Version: 1.0
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: virtualization@lists.linux-foundation.org,
 Thomas Zimmermann <tzimmermann@suse.de>, dri-devel@lists.freedesktop.org,
 linux-doc@vger.kernel.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

VlJBTSBNTSBhbmQgR0VNIFZSQU0gYnVmZmVyIG9iamVjdHMgYXJlIG9ubHkgdXNlZCB3aXRoIGVh
Y2ggb3RoZXI7CmNvbm5lY3RlZCB2aWEgMyBmdW5jdGlvbiBwb2ludGVycy4gU2ltcGxpZnkgdGhp
cyBjb2RlIGJ5IG1ha2luZyB0aGUKbWVtb3J5IG1hbmFnZXIgY2FsbCB0aGUgcnNwLiBmdW5jdGlv
bnMgb2YgdGhlIEJPcyBkaXJlY3RseTsgYW5kCnJlbW92ZSB0aGUgZnVuY3Rpb25zIGZyb20gdGhl
IEJPJ3MgcHVibGljIGludGVyZmFjZS4KCnYyOgoJKiB0eXBvcyBpbiBjb21taXQgbWVzc2FnZQoK
U2lnbmVkLW9mZi1ieTogVGhvbWFzIFppbW1lcm1hbm4gPHR6aW1tZXJtYW5uQHN1c2UuZGU+CkFj
a2VkLWJ5OiBHZXJkIEhvZmZtYW5uIDxrcmF4ZWxAcmVkaGF0LmNvbT4KLS0tCiBkcml2ZXJzL2dw
dS9kcm0vYXN0L2FzdF90dG0uYyAgICAgICAgICAgICAgIHwgICAyICstCiBkcml2ZXJzL2dwdS9k
cm0vYm9jaHMvYm9jaHNfbW0uYyAgICAgICAgICAgIHwgICAzICstCiBkcml2ZXJzL2dwdS9kcm0v
ZHJtX2dlbV92cmFtX2hlbHBlci5jICAgICAgIHwgMTE5ICsrKysrKy0tLS0tLS0tLS0tLS0tCiBk
cml2ZXJzL2dwdS9kcm0vZHJtX3ZyYW1faGVscGVyX2NvbW1vbi5jICAgIHwgICA4ICstCiBkcml2
ZXJzL2dwdS9kcm0vaGlzaWxpY29uL2hpYm1jL2hpYm1jX3R0bS5jIHwgICAyICstCiBkcml2ZXJz
L2dwdS9kcm0vbWdhZzIwMC9tZ2FnMjAwX3R0bS5jICAgICAgIHwgICAzICstCiBkcml2ZXJzL2dw
dS9kcm0vdmJveHZpZGVvL3Zib3hfdHRtLmMgICAgICAgIHwgICAzICstCiBpbmNsdWRlL2RybS9k
cm1fZ2VtX3ZyYW1faGVscGVyLmggICAgICAgICAgIHwgIDI0ICstLS0KIGluY2x1ZGUvZHJtL2Ry
bV92cmFtX21tX2hlbHBlci5oICAgICAgICAgICAgfCAgMzIgLS0tLS0tCiA5IGZpbGVzIGNoYW5n
ZWQsIDQ0IGluc2VydGlvbnMoKyksIDE1MiBkZWxldGlvbnMoLSkKIGRlbGV0ZSBtb2RlIDEwMDY0
NCBpbmNsdWRlL2RybS9kcm1fdnJhbV9tbV9oZWxwZXIuaAoKZGlmZiAtLWdpdCBhL2RyaXZlcnMv
Z3B1L2RybS9hc3QvYXN0X3R0bS5jIGIvZHJpdmVycy9ncHUvZHJtL2FzdC9hc3RfdHRtLmMKaW5k
ZXggMDhiYTBhOTE3NTkzLi5mYWQzNDEwNjA4M2EgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2Ry
bS9hc3QvYXN0X3R0bS5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hc3QvYXN0X3R0bS5jCkBAIC00
MSw3ICs0MSw3IEBAIGludCBhc3RfbW1faW5pdChzdHJ1Y3QgYXN0X3ByaXZhdGUgKmFzdCkKIAog
CXZtbSA9IGRybV92cmFtX2hlbHBlcl9hbGxvY19tbSgKIAkJZGV2LCBwY2lfcmVzb3VyY2Vfc3Rh
cnQoZGV2LT5wZGV2LCAwKSwKLQkJYXN0LT52cmFtX3NpemUsICZkcm1fZ2VtX3ZyYW1fbW1fZnVu
Y3MpOworCQlhc3QtPnZyYW1fc2l6ZSk7CiAJaWYgKElTX0VSUih2bW0pKSB7CiAJCXJldCA9IFBU
Ul9FUlIodm1tKTsKIAkJRFJNX0VSUk9SKCJFcnJvciBpbml0aWFsaXppbmcgVlJBTSBNTTsgJWRc
biIsIHJldCk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vYm9jaHMvYm9jaHNfbW0uYyBi
L2RyaXZlcnMvZ3B1L2RybS9ib2Nocy9ib2Noc19tbS5jCmluZGV4IDhmOWJiODg2ZjdhZC4uMWI3
NGY1MzBiMDdjIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vYm9jaHMvYm9jaHNfbW0uYwor
KysgYi9kcml2ZXJzL2dwdS9kcm0vYm9jaHMvYm9jaHNfbW0uYwpAQCAtMTEsOCArMTEsNyBAQCBp
bnQgYm9jaHNfbW1faW5pdChzdHJ1Y3QgYm9jaHNfZGV2aWNlICpib2NocykKIAlzdHJ1Y3QgZHJt
X3ZyYW1fbW0gKnZtbTsKIAogCXZtbSA9IGRybV92cmFtX2hlbHBlcl9hbGxvY19tbShib2Nocy0+
ZGV2LCBib2Nocy0+ZmJfYmFzZSwKLQkJCQkgICAgICAgYm9jaHMtPmZiX3NpemUsCi0JCQkJICAg
ICAgICZkcm1fZ2VtX3ZyYW1fbW1fZnVuY3MpOworCQkJCSAgICAgICBib2Nocy0+ZmJfc2l6ZSk7
CiAJcmV0dXJuIFBUUl9FUlJfT1JfWkVSTyh2bW0pOwogfQogCmRpZmYgLS1naXQgYS9kcml2ZXJz
L2dwdS9kcm0vZHJtX2dlbV92cmFtX2hlbHBlci5jIGIvZHJpdmVycy9ncHUvZHJtL2RybV9nZW1f
dnJhbV9oZWxwZXIuYwppbmRleCAzNTNmOTgwNzU1NzkuLmM4N2ZlZDYwOGZmYSAxMDA2NDQKLS0t
IGEvZHJpdmVycy9ncHUvZHJtL2RybV9nZW1fdnJhbV9oZWxwZXIuYworKysgYi9kcml2ZXJzL2dw
dS9kcm0vZHJtX2dlbV92cmFtX2hlbHBlci5jCkBAIC03LDcgKzcsNiBAQAogI2luY2x1ZGUgPGRy
bS9kcm1fZ2VtX3ZyYW1faGVscGVyLmg+CiAjaW5jbHVkZSA8ZHJtL2RybV9tb2RlLmg+CiAjaW5j
bHVkZSA8ZHJtL2RybV9wcmltZS5oPgotI2luY2x1ZGUgPGRybS9kcm1fdnJhbV9tbV9oZWxwZXIu
aD4KICNpbmNsdWRlIDxkcm0vdHRtL3R0bV9wYWdlX2FsbG9jLmg+CiAKIHN0YXRpYyBjb25zdCBz
dHJ1Y3QgZHJtX2dlbV9vYmplY3RfZnVuY3MgZHJtX2dlbV92cmFtX29iamVjdF9mdW5jczsKQEAg
LTQ2NCw2OCArNDYzLDI1IEBAIHN0YXRpYyBib29sIGRybV9pc19nZW1fdnJhbShzdHJ1Y3QgdHRt
X2J1ZmZlcl9vYmplY3QgKmJvKQogCXJldHVybiAoYm8tPmRlc3Ryb3kgPT0gdHRtX2J1ZmZlcl9v
YmplY3RfZGVzdHJveSk7CiB9CiAKLS8qKgotICogZHJtX2dlbV92cmFtX2JvX2RyaXZlcl9ldmlj
dF9mbGFncygpIC0gXAotCUltcGxlbWVudHMgJnN0cnVjdCB0dG1fYm9fZHJpdmVyLmV2aWN0X2Zs
YWdzCi0gKiBAYm86CVRUTSBidWZmZXIgb2JqZWN0LiBSZWZlcnMgdG8gJnN0cnVjdCBkcm1fZ2Vt
X3ZyYW1fb2JqZWN0LmJvCi0gKiBAcGw6CVRUTSBwbGFjZW1lbnQgaW5mb3JtYXRpb24uCi0gKi8K
LXZvaWQgZHJtX2dlbV92cmFtX2JvX2RyaXZlcl9ldmljdF9mbGFncyhzdHJ1Y3QgdHRtX2J1ZmZl
cl9vYmplY3QgKmJvLAotCQkJCQlzdHJ1Y3QgdHRtX3BsYWNlbWVudCAqcGwpCitzdGF0aWMgdm9p
ZCBkcm1fZ2VtX3ZyYW1fYm9fZHJpdmVyX2V2aWN0X2ZsYWdzKHN0cnVjdCBkcm1fZ2VtX3ZyYW1f
b2JqZWN0ICpnYm8sCisJCQkJCSAgICAgICBzdHJ1Y3QgdHRtX3BsYWNlbWVudCAqcGwpCiB7Ci0J
c3RydWN0IGRybV9nZW1fdnJhbV9vYmplY3QgKmdibzsKLQotCS8qIFRUTSBtYXkgcGFzcyBCT3Mg
dGhhdCBhcmUgbm90IEdFTSBWUkFNIEJPcy4gKi8KLQlpZiAoIWRybV9pc19nZW1fdnJhbShibykp
Ci0JCXJldHVybjsKLQotCWdibyA9IGRybV9nZW1fdnJhbV9vZl9ibyhibyk7CiAJZHJtX2dlbV92
cmFtX3BsYWNlbWVudChnYm8sIFRUTV9QTF9GTEFHX1NZU1RFTSk7CiAJKnBsID0gZ2JvLT5wbGFj
ZW1lbnQ7CiB9Ci1FWFBPUlRfU1lNQk9MKGRybV9nZW1fdnJhbV9ib19kcml2ZXJfZXZpY3RfZmxh
Z3MpOwogCi0vKioKLSAqIGRybV9nZW1fdnJhbV9ib19kcml2ZXJfdmVyaWZ5X2FjY2VzcygpIC0g
XAotCUltcGxlbWVudHMgJnN0cnVjdCB0dG1fYm9fZHJpdmVyLnZlcmlmeV9hY2Nlc3MKLSAqIEBi
bzoJCVRUTSBidWZmZXIgb2JqZWN0LiBSZWZlcnMgdG8gJnN0cnVjdCBkcm1fZ2VtX3ZyYW1fb2Jq
ZWN0LmJvCi0gKiBAZmlscDoJRmlsZSBwb2ludGVyLgotICoKLSAqIFJldHVybnM6Ci0gKiAwIG9u
IHN1Y2Nlc3MsIG9yCi0gKiBhIG5lZ2F0aXZlIGVycm5vIGNvZGUgb3RoZXJ3aXNlLgotICovCi1p
bnQgZHJtX2dlbV92cmFtX2JvX2RyaXZlcl92ZXJpZnlfYWNjZXNzKHN0cnVjdCB0dG1fYnVmZmVy
X29iamVjdCAqYm8sCi0JCQkJCSBzdHJ1Y3QgZmlsZSAqZmlscCkKK3N0YXRpYyBpbnQgZHJtX2dl
bV92cmFtX2JvX2RyaXZlcl92ZXJpZnlfYWNjZXNzKHN0cnVjdCBkcm1fZ2VtX3ZyYW1fb2JqZWN0
ICpnYm8sCisJCQkJCQlzdHJ1Y3QgZmlsZSAqZmlscCkKIHsKLQlzdHJ1Y3QgZHJtX2dlbV92cmFt
X29iamVjdCAqZ2JvID0gZHJtX2dlbV92cmFtX29mX2JvKGJvKTsKLQogCXJldHVybiBkcm1fdm1h
X25vZGVfdmVyaWZ5X2FjY2VzcygmZ2JvLT5iby5iYXNlLnZtYV9ub2RlLAogCQkJCQkgIGZpbHAt
PnByaXZhdGVfZGF0YSk7CiB9Ci1FWFBPUlRfU1lNQk9MKGRybV9nZW1fdnJhbV9ib19kcml2ZXJf
dmVyaWZ5X2FjY2Vzcyk7CiAKLS8qKgotICogZHJtX2dlbV92cmFtX2JvX2RyaXZlcl9tb3ZlX25v
dGlmeSgpIC0KLSAqCUltcGxlbWVudHMgJnN0cnVjdCB0dG1fYm9fZHJpdmVyLm1vdmVfbm90aWZ5
Ci0gKiBAYm86CQlUVE0gYnVmZmVyIG9iamVjdC4gUmVmZXJzIHRvICZzdHJ1Y3QgZHJtX2dlbV92
cmFtX29iamVjdC5ibwotICogQGV2aWN0OglUcnVlLCBpZiB0aGUgQk8gaXMgYmVpbmcgZXZpY3Rl
ZCBmcm9tIGdyYXBoaWNzIG1lbW9yeTsKLSAqCQlmYWxzZSBvdGhlcndpc2UuCi0gKiBAbmV3X21l
bToJTmV3IG1lbW9yeSByZWdpb24sIG9yIE5VTEwgb24gZGVzdHJ1Y3Rpb24KLSAqLwotdm9pZCBk
cm1fZ2VtX3ZyYW1fYm9fZHJpdmVyX21vdmVfbm90aWZ5KHN0cnVjdCB0dG1fYnVmZmVyX29iamVj
dCAqYm8sCi0JCQkJCWJvb2wgZXZpY3QsCi0JCQkJCXN0cnVjdCB0dG1fbWVtX3JlZyAqbmV3X21l
bSkKK3N0YXRpYyB2b2lkIGRybV9nZW1fdnJhbV9ib19kcml2ZXJfbW92ZV9ub3RpZnkoc3RydWN0
IGRybV9nZW1fdnJhbV9vYmplY3QgKmdibywKKwkJCQkJICAgICAgIGJvb2wgZXZpY3QsCisJCQkJ
CSAgICAgICBzdHJ1Y3QgdHRtX21lbV9yZWcgKm5ld19tZW0pCiB7Ci0Jc3RydWN0IGRybV9nZW1f
dnJhbV9vYmplY3QgKmdibzsKLQlzdHJ1Y3QgdHRtX2JvX2ttYXBfb2JqICprbWFwOwotCi0JLyog
VFRNIG1heSBwYXNzIEJPcyB0aGF0IGFyZSBub3QgR0VNIFZSQU0gQk9zLiAqLwotCWlmICghZHJt
X2lzX2dlbV92cmFtKGJvKSkKLQkJcmV0dXJuOwotCi0JZ2JvID0gZHJtX2dlbV92cmFtX29mX2Jv
KGJvKTsKLQlrbWFwID0gJmdiby0+a21hcDsKKwlzdHJ1Y3QgdHRtX2JvX2ttYXBfb2JqICprbWFw
ID0gJmdiby0+a21hcDsKIAogCWlmIChXQVJOX09OX09OQ0UoZ2JvLT5rbWFwX3VzZV9jb3VudCkp
CiAJCXJldHVybjsKQEAgLTUzNSwyMSArNDkxLDYgQEAgdm9pZCBkcm1fZ2VtX3ZyYW1fYm9fZHJp
dmVyX21vdmVfbm90aWZ5KHN0cnVjdCB0dG1fYnVmZmVyX29iamVjdCAqYm8sCiAJdHRtX2JvX2t1
bm1hcChrbWFwKTsKIAlrbWFwLT52aXJ0dWFsID0gTlVMTDsKIH0KLUVYUE9SVF9TWU1CT0woZHJt
X2dlbV92cmFtX2JvX2RyaXZlcl9tb3ZlX25vdGlmeSk7Ci0KLS8qCi0gKiBkcm1fZ2VtX3ZyYW1f
bW1fZnVuY3MgLSBGdW5jdGlvbnMgZm9yICZzdHJ1Y3QgZHJtX3ZyYW1fbW0KLSAqCi0gKiBNb3N0
IHVzZXJzIG9mIEBzdHJ1Y3QgZHJtX2dlbV92cmFtX29iamVjdCB3aWxsIGFsc28gdXNlCi0gKiBA
c3RydWN0IGRybV92cmFtX21tLiBUaGlzIGluc3RhbmNlIG9mICZzdHJ1Y3QgZHJtX3ZyYW1fbW1f
ZnVuY3MKLSAqIGNhbiBiZSB1c2VkIHRvIGNvbm5lY3QgYm90aC4KLSAqLwotY29uc3Qgc3RydWN0
IGRybV92cmFtX21tX2Z1bmNzIGRybV9nZW1fdnJhbV9tbV9mdW5jcyA9IHsKLQkuZXZpY3RfZmxh
Z3MgPSBkcm1fZ2VtX3ZyYW1fYm9fZHJpdmVyX2V2aWN0X2ZsYWdzLAotCS52ZXJpZnlfYWNjZXNz
ID0gZHJtX2dlbV92cmFtX2JvX2RyaXZlcl92ZXJpZnlfYWNjZXNzLAotCS5tb3ZlX25vdGlmeSA9
IGRybV9nZW1fdnJhbV9ib19kcml2ZXJfbW92ZV9ub3RpZnksCi19OwotRVhQT1JUX1NZTUJPTChk
cm1fZ2VtX3ZyYW1fbW1fZnVuY3MpOwogCiAvKgogICogSGVscGVycyBmb3Igc3RydWN0IGRybV9n
ZW1fb2JqZWN0X2Z1bmNzCkBAIC04MTUsMzEgKzc1Niw0NCBAQCBzdGF0aWMgaW50IGJvX2RyaXZl
cl9pbml0X21lbV90eXBlKHN0cnVjdCB0dG1fYm9fZGV2aWNlICpiZGV2LCB1aW50MzJfdCB0eXBl
LAogc3RhdGljIHZvaWQgYm9fZHJpdmVyX2V2aWN0X2ZsYWdzKHN0cnVjdCB0dG1fYnVmZmVyX29i
amVjdCAqYm8sCiAJCQkJICBzdHJ1Y3QgdHRtX3BsYWNlbWVudCAqcGxhY2VtZW50KQogewotCXN0
cnVjdCBkcm1fdnJhbV9tbSAqdm1tID0gZHJtX3ZyYW1fbW1fb2ZfYmRldihiby0+YmRldik7CisJ
c3RydWN0IGRybV9nZW1fdnJhbV9vYmplY3QgKmdibzsKIAotCWlmICh2bW0tPmZ1bmNzICYmIHZt
bS0+ZnVuY3MtPmV2aWN0X2ZsYWdzKQotCQl2bW0tPmZ1bmNzLT5ldmljdF9mbGFncyhibywgcGxh
Y2VtZW50KTsKKwkvKiBUVE0gbWF5IHBhc3MgQk9zIHRoYXQgYXJlIG5vdCBHRU0gVlJBTSBCT3Mu
ICovCisJaWYgKCFkcm1faXNfZ2VtX3ZyYW0oYm8pKQorCQlyZXR1cm47CisKKwlnYm8gPSBkcm1f
Z2VtX3ZyYW1fb2ZfYm8oYm8pOworCisJZHJtX2dlbV92cmFtX2JvX2RyaXZlcl9ldmljdF9mbGFn
cyhnYm8sIHBsYWNlbWVudCk7CiB9CiAKIHN0YXRpYyBpbnQgYm9fZHJpdmVyX3ZlcmlmeV9hY2Nl
c3Moc3RydWN0IHR0bV9idWZmZXJfb2JqZWN0ICpibywKIAkJCQkgICBzdHJ1Y3QgZmlsZSAqZmls
cCkKIHsKLQlzdHJ1Y3QgZHJtX3ZyYW1fbW0gKnZtbSA9IGRybV92cmFtX21tX29mX2JkZXYoYm8t
PmJkZXYpOworCXN0cnVjdCBkcm1fZ2VtX3ZyYW1fb2JqZWN0ICpnYm87CiAKLQlpZiAoIXZtbS0+
ZnVuY3MgfHwgIXZtbS0+ZnVuY3MtPnZlcmlmeV9hY2Nlc3MpCi0JCXJldHVybiAwOwotCXJldHVy
biB2bW0tPmZ1bmNzLT52ZXJpZnlfYWNjZXNzKGJvLCBmaWxwKTsKKwkvKiBUVE0gbWF5IHBhc3Mg
Qk9zIHRoYXQgYXJlIG5vdCBHRU0gVlJBTSBCT3MuICovCisJaWYgKCFkcm1faXNfZ2VtX3ZyYW0o
Ym8pKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCWdibyA9IGRybV9nZW1fdnJhbV9vZl9ibyhibyk7
CisKKwlyZXR1cm4gZHJtX2dlbV92cmFtX2JvX2RyaXZlcl92ZXJpZnlfYWNjZXNzKGdibywgZmls
cCk7CiB9CiAKIHN0YXRpYyB2b2lkIGJvX2RyaXZlcl9tb3ZlX25vdGlmeShzdHJ1Y3QgdHRtX2J1
ZmZlcl9vYmplY3QgKmJvLAogCQkJCSAgYm9vbCBldmljdCwKIAkJCQkgIHN0cnVjdCB0dG1fbWVt
X3JlZyAqbmV3X21lbSkKIHsKLQlzdHJ1Y3QgZHJtX3ZyYW1fbW0gKnZtbSA9IGRybV92cmFtX21t
X29mX2JkZXYoYm8tPmJkZXYpOworCXN0cnVjdCBkcm1fZ2VtX3ZyYW1fb2JqZWN0ICpnYm87CiAK
LQlpZiAoIXZtbS0+ZnVuY3MgfHwgIXZtbS0+ZnVuY3MtPm1vdmVfbm90aWZ5KQorCS8qIFRUTSBt
YXkgcGFzcyBCT3MgdGhhdCBhcmUgbm90IEdFTSBWUkFNIEJPcy4gKi8KKwlpZiAoIWRybV9pc19n
ZW1fdnJhbShibykpCiAJCXJldHVybjsKLQl2bW0tPmZ1bmNzLT5tb3ZlX25vdGlmeShibywgZXZp
Y3QsIG5ld19tZW0pOworCisJZ2JvID0gZHJtX2dlbV92cmFtX29mX2JvKGJvKTsKKworCWRybV9n
ZW1fdnJhbV9ib19kcml2ZXJfbW92ZV9ub3RpZnkoZ2JvLCBldmljdCwgbmV3X21lbSk7CiB9CiAK
IHN0YXRpYyBpbnQgYm9fZHJpdmVyX2lvX21lbV9yZXNlcnZlKHN0cnVjdCB0dG1fYm9fZGV2aWNl
ICpiZGV2LApAQCAtOTQxLDIxICs4OTUsMTggQEAgRVhQT1JUX1NZTUJPTChkcm1fdnJhbV9tbV9k
ZWJ1Z2ZzX2luaXQpOwogICogQGRldjoJdGhlIERSTSBkZXZpY2UKICAqIEB2cmFtX2Jhc2U6CXRo
ZSBiYXNlIGFkZHJlc3Mgb2YgdGhlIHZpZGVvIG1lbW9yeQogICogQHZyYW1fc2l6ZToJdGhlIHNp
emUgb2YgdGhlIHZpZGVvIG1lbW9yeSBpbiBieXRlcwotICogQGZ1bmNzOgljYWxsYmFjayBmdW5j
dGlvbnMgZm9yIGJ1ZmZlciBvYmplY3RzCiAgKgogICogUmV0dXJuczoKICAqIDAgb24gc3VjY2Vz
cywgb3IKICAqIGEgbmVnYXRpdmUgZXJyb3IgY29kZSBvdGhlcndpc2UuCiAgKi8KIGludCBkcm1f
dnJhbV9tbV9pbml0KHN0cnVjdCBkcm1fdnJhbV9tbSAqdm1tLCBzdHJ1Y3QgZHJtX2RldmljZSAq
ZGV2LAotCQkgICAgIHVpbnQ2NF90IHZyYW1fYmFzZSwgc2l6ZV90IHZyYW1fc2l6ZSwKLQkJICAg
ICBjb25zdCBzdHJ1Y3QgZHJtX3ZyYW1fbW1fZnVuY3MgKmZ1bmNzKQorCQkgICAgIHVpbnQ2NF90
IHZyYW1fYmFzZSwgc2l6ZV90IHZyYW1fc2l6ZSkKIHsKIAlpbnQgcmV0OwogCiAJdm1tLT52cmFt
X2Jhc2UgPSB2cmFtX2Jhc2U7CiAJdm1tLT52cmFtX3NpemUgPSB2cmFtX3NpemU7Ci0Jdm1tLT5m
dW5jcyA9IGZ1bmNzOwogCiAJcmV0ID0gdHRtX2JvX2RldmljZV9pbml0KCZ2bW0tPmJkZXYsICZi
b19kcml2ZXIsCiAJCQkJIGRldi0+YW5vbl9pbm9kZS0+aV9tYXBwaW5nLApAQCAtMTAwOCwxNSAr
OTU5LDEzIEBAIEVYUE9SVF9TWU1CT0woZHJtX3ZyYW1fbW1fbW1hcCk7CiAgKiBAZGV2Ogl0aGUg
RFJNIGRldmljZQogICogQHZyYW1fYmFzZToJdGhlIGJhc2UgYWRkcmVzcyBvZiB0aGUgdmlkZW8g
bWVtb3J5CiAgKiBAdnJhbV9zaXplOgl0aGUgc2l6ZSBvZiB0aGUgdmlkZW8gbWVtb3J5IGluIGJ5
dGVzCi0gKiBAZnVuY3M6CWNhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgYnVmZmVyIG9iamVjdHMKICAq
CiAgKiBSZXR1cm5zOgogICogVGhlIG5ldyBpbnN0YW5jZSBvZiAmc3RydWN0IGRybV92cmFtX21t
IG9uIHN1Y2Nlc3MsIG9yCiAgKiBhbiBFUlJfUFRSKCktZW5jb2RlZCBlcnJubyBjb2RlIG90aGVy
d2lzZS4KICAqLwogc3RydWN0IGRybV92cmFtX21tICpkcm1fdnJhbV9oZWxwZXJfYWxsb2NfbW0o
Ci0Jc3RydWN0IGRybV9kZXZpY2UgKmRldiwgdWludDY0X3QgdnJhbV9iYXNlLCBzaXplX3QgdnJh
bV9zaXplLAotCWNvbnN0IHN0cnVjdCBkcm1fdnJhbV9tbV9mdW5jcyAqZnVuY3MpCisJc3RydWN0
IGRybV9kZXZpY2UgKmRldiwgdWludDY0X3QgdnJhbV9iYXNlLCBzaXplX3QgdnJhbV9zaXplKQog
ewogCWludCByZXQ7CiAKQEAgLTEwMjcsNyArOTc2LDcgQEAgc3RydWN0IGRybV92cmFtX21tICpk
cm1fdnJhbV9oZWxwZXJfYWxsb2NfbW0oCiAJaWYgKCFkZXYtPnZyYW1fbW0pCiAJCXJldHVybiBF
UlJfUFRSKC1FTk9NRU0pOwogCi0JcmV0ID0gZHJtX3ZyYW1fbW1faW5pdChkZXYtPnZyYW1fbW0s
IGRldiwgdnJhbV9iYXNlLCB2cmFtX3NpemUsIGZ1bmNzKTsKKwlyZXQgPSBkcm1fdnJhbV9tbV9p
bml0KGRldi0+dnJhbV9tbSwgZGV2LCB2cmFtX2Jhc2UsIHZyYW1fc2l6ZSk7CiAJaWYgKHJldCkK
IAkJZ290byBlcnJfa2ZyZWU7CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9kcm1fdnJh
bV9oZWxwZXJfY29tbW9uLmMgYi9kcml2ZXJzL2dwdS9kcm0vZHJtX3ZyYW1faGVscGVyX2NvbW1v
bi5jCmluZGV4IGU5YzlmOWE4MGJhMy4uMjAwMGQ5YjMzZmQ1IDEwMDY0NAotLS0gYS9kcml2ZXJz
L2dwdS9kcm0vZHJtX3ZyYW1faGVscGVyX2NvbW1vbi5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9k
cm1fdnJhbV9oZWxwZXJfY29tbW9uLmMKQEAgLTcsOSArNyw4IEBACiAgKgogICogVGhpcyBsaWJy
YXJ5IHByb3ZpZGVzICZzdHJ1Y3QgZHJtX2dlbV92cmFtX29iamVjdCAoR0VNIFZSQU0pLCBhIEdF
TQogICogYnVmZmVyIG9iamVjdCB0aGF0IGlzIGJhY2tlZCBieSB2aWRlbyBSQU0uIEl0IGNhbiBi
ZSB1c2VkIGZvcgotICogZnJhbWVidWZmZXIgZGV2aWNlcyB3aXRoIGRlZGljYXRlZCBtZW1vcnku
IFRoZSB2aWRlbyBSQU0gY2FuIGJlCi0gKiBtYW5hZ2VkIHdpdGggJnN0cnVjdCBkcm1fdnJhbV9t
bSAoVlJBTSBNTSkuIEJvdGggZGF0YSBzdHJ1Y3R1cmVzIGFyZQotICogc3VwcG9zZWQgdG8gYmUg
dXNlZCB0b2dldGhlciwgYnV0IGNhbiBhbHNvIGJlIHVzZWQgaW5kaXZpZHVhbGx5LgorICogZnJh
bWVidWZmZXIgZGV2aWNlcyB3aXRoIGRlZGljYXRlZCBtZW1vcnkuIFRoZSB2aWRlbyBSQU0gaXMg
bWFuYWdlZAorICogYnkgJnN0cnVjdCBkcm1fdnJhbV9tbSAoVlJBTSBNTSkuCiAgKgogICogV2l0
aCB0aGUgR0VNIGludGVyZmFjZSB1c2Vyc3BhY2UgYXBwbGljYXRpb25zIGNyZWF0ZSwgbWFuYWdl
IGFuZCBkZXN0cm95CiAgKiBncmFwaGljcyBidWZmZXJzLCBzdWNoIGFzIGFuIG9uLXNjcmVlbiBm
cmFtZWJ1ZmZlci4gR0VNIGRvZXMgbm90IHByb3ZpZGUKQEAgLTUwLDggKzQ5LDcgQEAKICAqCQkv
LyBzZXR1cCBkZXZpY2UsIHZyYW0gYmFzZSBhbmQgc2l6ZQogICoJCS8vIC4uLgogICoKLSAqCQly
ZXQgPSBkcm1fdnJhbV9oZWxwZXJfYWxsb2NfbW0oZGV2LCB2cmFtX2Jhc2UsIHZyYW1fc2l6ZSwK
LSAqCQkJCQkgICAgICAgJmRybV9nZW1fdnJhbV9tbV9mdW5jcyk7CisgKgkJcmV0ID0gZHJtX3Zy
YW1faGVscGVyX2FsbG9jX21tKGRldiwgdnJhbV9iYXNlLCB2cmFtX3NpemUpOwogICoJCWlmIChy
ZXQpCiAgKgkJCXJldHVybiByZXQ7CiAgKgkJcmV0dXJuIDA7CmRpZmYgLS1naXQgYS9kcml2ZXJz
L2dwdS9kcm0vaGlzaWxpY29uL2hpYm1jL2hpYm1jX3R0bS5jIGIvZHJpdmVycy9ncHUvZHJtL2hp
c2lsaWNvbi9oaWJtYy9oaWJtY190dG0uYwppbmRleCA1ZDUyY2Q3NDg2MDMuLjIxYjY4NGVhYjVj
OSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2hpc2lsaWNvbi9oaWJtYy9oaWJtY190dG0u
YworKysgYi9kcml2ZXJzL2dwdS9kcm0vaGlzaWxpY29uL2hpYm1jL2hpYm1jX3R0bS5jCkBAIC0y
OCw3ICsyOCw3IEBAIGludCBoaWJtY19tbV9pbml0KHN0cnVjdCBoaWJtY19kcm1fcHJpdmF0ZSAq
aGlibWMpCiAKIAl2bW0gPSBkcm1fdnJhbV9oZWxwZXJfYWxsb2NfbW0oZGV2LAogCQkJCSAgICAg
ICBwY2lfcmVzb3VyY2Vfc3RhcnQoZGV2LT5wZGV2LCAwKSwKLQkJCQkgICAgICAgaGlibWMtPmZi
X3NpemUsICZkcm1fZ2VtX3ZyYW1fbW1fZnVuY3MpOworCQkJCSAgICAgICBoaWJtYy0+ZmJfc2l6
ZSk7CiAJaWYgKElTX0VSUih2bW0pKSB7CiAJCXJldCA9IFBUUl9FUlIodm1tKTsKIAkJRFJNX0VS
Uk9SKCJFcnJvciBpbml0aWFsaXppbmcgVlJBTSBNTTsgJWRcbiIsIHJldCk7CmRpZmYgLS1naXQg
YS9kcml2ZXJzL2dwdS9kcm0vbWdhZzIwMC9tZ2FnMjAwX3R0bS5jIGIvZHJpdmVycy9ncHUvZHJt
L21nYWcyMDAvbWdhZzIwMF90dG0uYwppbmRleCA3M2E2Yjg0ODYwMWMuLjY5YzgxZWJmMzc0NSAx
MDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL21nYWcyMDAvbWdhZzIwMF90dG0uYworKysgYi9k
cml2ZXJzL2dwdS9kcm0vbWdhZzIwMC9tZ2FnMjAwX3R0bS5jCkBAIC0zNyw4ICszNyw3IEBAIGlu
dCBtZ2FnMjAwX21tX2luaXQoc3RydWN0IG1nYV9kZXZpY2UgKm1kZXYpCiAJc3RydWN0IGRybV9k
ZXZpY2UgKmRldiA9IG1kZXYtPmRldjsKIAogCXZtbSA9IGRybV92cmFtX2hlbHBlcl9hbGxvY19t
bShkZXYsIHBjaV9yZXNvdXJjZV9zdGFydChkZXYtPnBkZXYsIDApLAotCQkJCSAgICAgICBtZGV2
LT5tYy52cmFtX3NpemUsCi0JCQkJICAgICAgICZkcm1fZ2VtX3ZyYW1fbW1fZnVuY3MpOworCQkJ
CSAgICAgICBtZGV2LT5tYy52cmFtX3NpemUpOwogCWlmIChJU19FUlIodm1tKSkgewogCQlyZXQg
PSBQVFJfRVJSKHZtbSk7CiAJCURSTV9FUlJPUigiRXJyb3IgaW5pdGlhbGl6aW5nIFZSQU0gTU07
ICVkXG4iLCByZXQpOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL3Zib3h2aWRlby92Ym94
X3R0bS5jIGIvZHJpdmVycy9ncHUvZHJtL3Zib3h2aWRlby92Ym94X3R0bS5jCmluZGV4IGI4MjU5
NWE5ZWQwZi4uOTc2NDIzZDBjM2NjIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vdmJveHZp
ZGVvL3Zib3hfdHRtLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL3Zib3h2aWRlby92Ym94X3R0bS5j
CkBAIC0xNyw4ICsxNyw3IEBAIGludCB2Ym94X21tX2luaXQoc3RydWN0IHZib3hfcHJpdmF0ZSAq
dmJveCkKIAlzdHJ1Y3QgZHJtX2RldmljZSAqZGV2ID0gJnZib3gtPmRkZXY7CiAKIAl2bW0gPSBk
cm1fdnJhbV9oZWxwZXJfYWxsb2NfbW0oZGV2LCBwY2lfcmVzb3VyY2Vfc3RhcnQoZGV2LT5wZGV2
LCAwKSwKLQkJCQkgICAgICAgdmJveC0+YXZhaWxhYmxlX3ZyYW1fc2l6ZSwKLQkJCQkgICAgICAg
JmRybV9nZW1fdnJhbV9tbV9mdW5jcyk7CisJCQkJICAgICAgIHZib3gtPmF2YWlsYWJsZV92cmFt
X3NpemUpOwogCWlmIChJU19FUlIodm1tKSkgewogCQlyZXQgPSBQVFJfRVJSKHZtbSk7CiAJCURS
TV9FUlJPUigiRXJyb3IgaW5pdGlhbGl6aW5nIFZSQU0gTU07ICVkXG4iLCByZXQpOwpkaWZmIC0t
Z2l0IGEvaW5jbHVkZS9kcm0vZHJtX2dlbV92cmFtX2hlbHBlci5oIGIvaW5jbHVkZS9kcm0vZHJt
X2dlbV92cmFtX2hlbHBlci5oCmluZGV4IDE1MTMzNDlhMjdiMS4uZmQ5NzhlMGM5NTQyIDEwMDY0
NAotLS0gYS9pbmNsdWRlL2RybS9kcm1fZ2VtX3ZyYW1faGVscGVyLmgKKysrIGIvaW5jbHVkZS9k
cm0vZHJtX2dlbV92cmFtX2hlbHBlci5oCkBAIC0xMDksMjIgKzEwOSw2IEBAIGludCBkcm1fZ2Vt
X3ZyYW1fZmlsbF9jcmVhdGVfZHVtYihzdHJ1Y3QgZHJtX2ZpbGUgKmZpbGUsCiAJCQkJICBib29s
IGludGVycnVwdGlibGUsCiAJCQkJICBzdHJ1Y3QgZHJtX21vZGVfY3JlYXRlX2R1bWIgKmFyZ3Mp
OwogCi0vKgotICogSGVscGVycyBmb3Igc3RydWN0IHR0bV9ib19kcml2ZXIKLSAqLwotCi12b2lk
IGRybV9nZW1fdnJhbV9ib19kcml2ZXJfZXZpY3RfZmxhZ3Moc3RydWN0IHR0bV9idWZmZXJfb2Jq
ZWN0ICpibywKLQkJCQkJc3RydWN0IHR0bV9wbGFjZW1lbnQgKnBsKTsKLQotdm9pZCBkcm1fZ2Vt
X3ZyYW1fYm9fZHJpdmVyX21vdmVfbm90aWZ5KHN0cnVjdCB0dG1fYnVmZmVyX29iamVjdCAqYm8s
Ci0JCQkJCWJvb2wgZXZpY3QsCi0JCQkJCXN0cnVjdCB0dG1fbWVtX3JlZyAqbmV3X21lbSk7Ci0K
LWludCBkcm1fZ2VtX3ZyYW1fYm9fZHJpdmVyX3ZlcmlmeV9hY2Nlc3Moc3RydWN0IHR0bV9idWZm
ZXJfb2JqZWN0ICpibywKLQkJCQkJIHN0cnVjdCBmaWxlICpmaWxwKTsKLQotZXh0ZXJuIGNvbnN0
IHN0cnVjdCBkcm1fdnJhbV9tbV9mdW5jcyBkcm1fZ2VtX3ZyYW1fbW1fZnVuY3M7Ci0KIC8qCiAg
KiBIZWxwZXJzIGZvciBzdHJ1Y3QgZHJtX2RyaXZlcgogICovCkBAIC0xNzAsOCArMTU0LDYgQEAg
c3RydWN0IGRybV92cmFtX21tIHsKIAlzaXplX3QgdnJhbV9zaXplOwogCiAJc3RydWN0IHR0bV9i
b19kZXZpY2UgYmRldjsKLQotCWNvbnN0IHN0cnVjdCBkcm1fdnJhbV9tbV9mdW5jcyAqZnVuY3M7
CiB9OwogCiAvKioKQEAgLTE5MCw4ICsxNzIsNyBAQCBzdGF0aWMgaW5saW5lIHN0cnVjdCBkcm1f
dnJhbV9tbSAqZHJtX3ZyYW1fbW1fb2ZfYmRldigKIAogaW50IGRybV92cmFtX21tX2RlYnVnZnNf
aW5pdChzdHJ1Y3QgZHJtX21pbm9yICptaW5vcik7CiBpbnQgZHJtX3ZyYW1fbW1faW5pdChzdHJ1
Y3QgZHJtX3ZyYW1fbW0gKnZtbSwgc3RydWN0IGRybV9kZXZpY2UgKmRldiwKLQkJICAgICB1aW50
NjRfdCB2cmFtX2Jhc2UsIHNpemVfdCB2cmFtX3NpemUsCi0JCSAgICAgY29uc3Qgc3RydWN0IGRy
bV92cmFtX21tX2Z1bmNzICpmdW5jcyk7CisJCSAgICAgdWludDY0X3QgdnJhbV9iYXNlLCBzaXpl
X3QgdnJhbV9zaXplKTsKIHZvaWQgZHJtX3ZyYW1fbW1fY2xlYW51cChzdHJ1Y3QgZHJtX3ZyYW1f
bW0gKnZtbSk7CiAKIGludCBkcm1fdnJhbV9tbV9tbWFwKHN0cnVjdCBmaWxlICpmaWxwLCBzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKQEAgLTIwMiw4ICsxODMsNyBAQCBpbnQgZHJtX3ZyYW1f
bW1fbW1hcChzdHJ1Y3QgZmlsZSAqZmlscCwgc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiAg
Ki8KIAogc3RydWN0IGRybV92cmFtX21tICpkcm1fdnJhbV9oZWxwZXJfYWxsb2NfbW0oCi0Jc3Ry
dWN0IGRybV9kZXZpY2UgKmRldiwgdWludDY0X3QgdnJhbV9iYXNlLCBzaXplX3QgdnJhbV9zaXpl
LAotCWNvbnN0IHN0cnVjdCBkcm1fdnJhbV9tbV9mdW5jcyAqZnVuY3MpOworCXN0cnVjdCBkcm1f
ZGV2aWNlICpkZXYsIHVpbnQ2NF90IHZyYW1fYmFzZSwgc2l6ZV90IHZyYW1fc2l6ZSk7CiB2b2lk
IGRybV92cmFtX2hlbHBlcl9yZWxlYXNlX21tKHN0cnVjdCBkcm1fZGV2aWNlICpkZXYpOwogCiAv
KgpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9kcm0vZHJtX3ZyYW1fbW1faGVscGVyLmggYi9pbmNsdWRl
L2RybS9kcm1fdnJhbV9tbV9oZWxwZXIuaApkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXgg
ZTNiNzllMTNlMTA2Li4wMDAwMDAwMDAwMDAKLS0tIGEvaW5jbHVkZS9kcm0vZHJtX3ZyYW1fbW1f
aGVscGVyLmgKKysrIC9kZXYvbnVsbApAQCAtMSwzMiArMCwwIEBACi0vKiBTUERYLUxpY2Vuc2Ut
SWRlbnRpZmllcjogR1BMLTIuMC1vci1sYXRlciAqLwotCi0jaWZuZGVmIERSTV9WUkFNX01NX0hF
TFBFUl9ICi0jZGVmaW5lIERSTV9WUkFNX01NX0hFTFBFUl9ICi0KLSNpbmNsdWRlIDxkcm0vZHJt
X2ZpbGUuaD4KLSNpbmNsdWRlIDxkcm0vZHJtX2lvY3RsLmg+Ci0jaW5jbHVkZSA8ZHJtL3R0bS90
dG1fYm9fZHJpdmVyLmg+Ci0KLXN0cnVjdCBkcm1fZGV2aWNlOwotCi0vKioKLSAqIHN0cnVjdCBk
cm1fdnJhbV9tbV9mdW5jcyAtIENhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgJnN0cnVjdCBkcm1fdnJh
bV9tbQotICogQGV2aWN0X2ZsYWdzOglQcm92aWRlcyBhbiBpbXBsZW1lbnRhdGlvbiBmb3Igc3Ry
dWN0IFwKLQkmdHRtX2JvX2RyaXZlci5ldmljdF9mbGFncwotICogQHZlcmlmeV9hY2Nlc3M6CVBy
b3ZpZGVzIGFuIGltcGxlbWVudGF0aW9uIGZvciBcCi0Jc3RydWN0ICZ0dG1fYm9fZHJpdmVyLnZl
cmlmeV9hY2Nlc3MKLSAqIEBtb3ZlX25vdGlmeToJUHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24g
Zm9yCi0gKgkJCXN0cnVjdCAmdHRtX2JvX2RyaXZlci5tb3ZlX25vdGlmeQotICoKLSAqIFRoZXNl
IGNhbGxiYWNrIGZ1bmN0aW9uIGludGVncmF0ZSBWUkFNIE1NIHdpdGggVFRNIGJ1ZmZlciBvYmpl
Y3RzLiBOZXcKLSAqIGZ1bmN0aW9ucyBjYW4gYmUgYWRkZWQgaWYgbmVjZXNzYXJ5LgotICovCi1z
dHJ1Y3QgZHJtX3ZyYW1fbW1fZnVuY3MgewotCXZvaWQgKCpldmljdF9mbGFncykoc3RydWN0IHR0
bV9idWZmZXJfb2JqZWN0ICpibywKLQkJCSAgICBzdHJ1Y3QgdHRtX3BsYWNlbWVudCAqcGxhY2Vt
ZW50KTsKLQlpbnQgKCp2ZXJpZnlfYWNjZXNzKShzdHJ1Y3QgdHRtX2J1ZmZlcl9vYmplY3QgKmJv
LCBzdHJ1Y3QgZmlsZSAqZmlscCk7Ci0Jdm9pZCAoKm1vdmVfbm90aWZ5KShzdHJ1Y3QgdHRtX2J1
ZmZlcl9vYmplY3QgKmJvLCBib29sIGV2aWN0LAotCQkJICAgIHN0cnVjdCB0dG1fbWVtX3JlZyAq
bmV3X21lbSk7Ci19OwotCi0jZW5kaWYKLS0gCjIuMjMuMAoKX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX18KZHJpLWRldmVsIG1haWxpbmcgbGlzdApkcmktZGV2
ZWxAbGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3JnL21h
aWxtYW4vbGlzdGluZm8vZHJpLWRldmVs
