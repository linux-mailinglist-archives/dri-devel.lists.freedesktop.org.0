Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 455CE15E08
	for <lists+dri-devel@lfdr.de>; Tue,  7 May 2019 09:20:27 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 25B4D89DAB;
	Tue,  7 May 2019 07:20:15 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from mail-qt1-x849.google.com (mail-qt1-x849.google.com
 [IPv6:2607:f8b0:4864:20::849])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 7D51C89A5E
 for <dri-devel@lists.freedesktop.org>; Mon,  6 May 2019 16:31:20 +0000 (UTC)
Received: by mail-qt1-x849.google.com with SMTP id y13so13831643qtc.7
 for <dri-devel@lists.freedesktop.org>; Mon, 06 May 2019 09:31:20 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:date:in-reply-to:message-id:mime-version
 :references:subject:from:to:cc;
 bh=Sr7h/i5NUs830xdi49brXpX8Xgw0zOZ/j8t+7szlSas=;
 b=n2sk33PWBTntabndJ9Vw+Klu3ziRqTUICy2oZ62mQ59sPDtQJ9TuPRLkaAKpNrfw39
 pO/q9WFeFXBAgnU26nlX3BA/147CJ6igELQxk47E8VU0d28d8ikEAz+d70eIo1Ee6yde
 TH2c5ahvKhFdZciOnEmyrG2iDpw7qRE0xuQxIIyz2S8b/NmTSzuMC5F4wl+M5OwHBlSM
 JlNf22gKsUfDdo1bKKueMv3PLvSGRqAz9JOcCzoJ1gPVPMxabLhtf522ZyM26FMbS6Vv
 EDhn6ir6bIjeOguct+kwmkDGkdUZkrASGcwxRv7RSCM9ZGUCGkKo5t1Mf9XHREeYkZhd
 mXiw==
X-Gm-Message-State: APjAAAWhyAJr7JXuO/jNi1v7qGjtMC7c/LhrImu+0f4ek4kg/U7NlGHQ
 J2pV5lfypeKRfc8u/eR6VZvxJzjw2i64ZiQy
X-Google-Smtp-Source: APXvYqyaWQ/h+7sj687R+mj1QFxVIEtzzPUk+MQp1scC/FCB729CtR4M/2QotRWtcYpbZ35YmOmSTMTfxcN37OLC
X-Received: by 2002:ac8:930:: with SMTP id t45mr5432058qth.357.1557160279586; 
 Mon, 06 May 2019 09:31:19 -0700 (PDT)
Date: Mon,  6 May 2019 18:30:50 +0200
In-Reply-To: <cover.1557160186.git.andreyknvl@google.com>
Message-Id: <55496bc72542ec14c4c8de23a4df235644013911.1557160186.git.andreyknvl@google.com>
Mime-Version: 1.0
References: <cover.1557160186.git.andreyknvl@google.com>
X-Mailer: git-send-email 2.21.0.1020.gf2820cf01a-goog
Subject: [PATCH v15 04/17] mm: add ksys_ wrappers to memory syscalls
From: Andrey Konovalov <andreyknvl@google.com>
To: linux-arm-kernel@lists.infradead.org, linux-mm@kvack.org, 
 linux-kernel@vger.kernel.org, amd-gfx@lists.freedesktop.org, 
 dri-devel@lists.freedesktop.org, linux-rdma@vger.kernel.org, 
 linux-media@vger.kernel.org, kvm@vger.kernel.org, 
 linux-kselftest@vger.kernel.org
X-Mailman-Approved-At: Tue, 07 May 2019 07:20:13 +0000
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=google.com; s=20161025;
 h=date:in-reply-to:message-id:mime-version:references:subject:from:to
 :cc;
 bh=Sr7h/i5NUs830xdi49brXpX8Xgw0zOZ/j8t+7szlSas=;
 b=QtsvoV7Po8irxE95A4IUTt073AlSokSt5f4jeGs4J/vpwmlE8X7RX7QaS8TwwKINpl
 TYcWXr9HFIcM42Ycd53FSk54sTBSqAMHSAhMt0EZG0AAmalLsHR3vNmr8Kbaizl/g+E6
 8qaMKdsm6n/yHXXFV3NheiioJSmzpsY1Wy3R0lq3UIo4BBuPF4/kJK/8mOY90T2xvxsA
 bMKpuJXvoZdi1mFhAMHBjIFf431SlOAUzSTpe0BtJBdAjyR5vJIwOnaxG5WHyE4Pv3Ci
 fvIOy7ndXSyTTgu1eLM4neGHGs/MtdmojiyjvM2WCtRX/wJLos+VufLd/KEpp1n9c6L9
 hixw==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Mark Rutland <mark.rutland@arm.com>, Szabolcs Nagy <Szabolcs.Nagy@arm.com>,
 Catalin Marinas <catalin.marinas@arm.com>, Will Deacon <will.deacon@arm.com>,
 Kostya Serebryany <kcc@google.com>, Felix Kuehling <Felix.Kuehling@amd.com>,
 Vincenzo Frascino <vincenzo.frascino@arm.com>,
 Jacob Bramley <Jacob.Bramley@arm.com>, Leon Romanovsky <leon@kernel.org>,
 Dave Martin <Dave.Martin@arm.com>, Evgeniy Stepanov <eugenis@google.com>,
 Kevin Brodsky <kevin.brodsky@arm.com>, Kees Cook <keescook@chromium.org>,
 Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
 Andrey Konovalov <andreyknvl@google.com>, Lee Smith <Lee.Smith@arm.com>,
 Alex Williamson <alex.williamson@redhat.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>, Dmitry Vyukov <dvyukov@google.com>,
 Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
 Yishai Hadas <yishaih@mellanox.com>,
 Jens Wiklander <jens.wiklander@linaro.org>,
 Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
 Alexander Deucher <Alexander.Deucher@amd.com>,
 Andrew Morton <akpm@linux-foundation.org>, Robin Murphy <robin.murphy@arm.com>,
 Christian Koenig <Christian.Koenig@amd.com>,
 Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

VGhpcyBwYXRjaCBpcyBhIHBhcnQgb2YgYSBzZXJpZXMgdGhhdCBleHRlbmRzIGFybTY0IGtlcm5l
bCBBQkkgdG8gYWxsb3cgdG8KcGFzcyB0YWdnZWQgdXNlciBwb2ludGVycyAod2l0aCB0aGUgdG9w
IGJ5dGUgc2V0IHRvIHNvbWV0aGluZyBlbHNlIG90aGVyCnRoYW4gMHgwMCkgYXMgc3lzY2FsbCBh
cmd1bWVudHMuCgpUaGlzIHBhdGNoIGFkZHMga3N5c18gd3JhcHBlcnMgdG8gdGhlIGZvbGxvd2lu
ZyBtZW1vcnkgc3lzY2FsbHM6CgpicmssIGdldF9tZW1wb2xpY3kgKHJlbmFtZWQga2VybmVsX2dl
dF9tZW1wb2xpY3kgLT4ga3N5c19nZXRfbWVtcG9saWN5KSwKbWFkdmlzZSwgbWJpbmQgKHJlbmFt
ZWQga2VybmVsX21iaW5kIC0+IGtzeXNfbWJpbmQpLCBtaW5jb3JlLAptbG9jayAocmVuYW1lZCBk
b19tbG9jayAtPiBrc3lzX21sb2NrKSwgbWxvY2syLCBtbWFwX3Bnb2ZmLAptcHJvdGVjdCAocmVu
YW1lZCBkb19tcHJvdGVjdF9wa2V5IC0+IGtzeXNfbXByb3RlY3RfcGtleSksIG1yZW1hcCwgbXN5
bmMsCm11bmxvY2ssIG11bm1hcCwgcmVtYXBfZmlsZV9wYWdlcywgc2htYXQsIHNobWR0LgoKVGhl
IG5leHQgcGF0Y2ggaW4gdGhpcyBzZXJpZXMgd2lsbCBhZGQgYSBjdXN0b20gaW1wbGVtZW50YXRp
b24gZm9yIHRoZXNlCnN5c2NhbGxzIHRoYXQgbWFrZXMgdGhlbSBhY2NlcHQgdGFnZ2VkIHBvaW50
ZXJzIG9uIGFybTY0LgoKU2lnbmVkLW9mZi1ieTogQW5kcmV5IEtvbm92YWxvdiA8YW5kcmV5a252
bEBnb29nbGUuY29tPgotLS0KIGluY2x1ZGUvbGludXgvc3lzY2FsbHMuaCB8ICAyMiArKysrKysr
CiBpcGMvc2htLmMgICAgICAgICAgICAgICAgfCAgIDcgKystCiBtbS9tYWR2aXNlLmMgICAgICAg
ICAgICAgfCAxMjkgKysrKysrKysrKysrKysrKysrKystLS0tLS0tLS0tLS0tLS0tLS0tCiBtbS9t
ZW1wb2xpY3kuYyAgICAgICAgICAgfCAgMjEgKysrLS0tLQogbW0vbWluY29yZS5jICAgICAgICAg
ICAgIHwgIDU3ICsrKysrKysrKy0tLS0tLS0tCiBtbS9tbG9jay5jICAgICAgICAgICAgICAgfCAg
MjAgKysrKy0tCiBtbS9tbWFwLmMgICAgICAgICAgICAgICAgfCAgMzAgKysrKysrLS0tCiBtbS9t
cHJvdGVjdC5jICAgICAgICAgICAgfCAgIDYgKy0KIG1tL21yZW1hcC5jICAgICAgICAgICAgICB8
ICAyNyArKysrKy0tLQogbW0vbXN5bmMuYyAgICAgICAgICAgICAgIHwgIDM1ICsrKysrKy0tLS0t
CiAxMCBmaWxlcyBjaGFuZ2VkLCAyMTMgaW5zZXJ0aW9ucygrKSwgMTQxIGRlbGV0aW9ucygtKQoK
ZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvc3lzY2FsbHMuaCBiL2luY2x1ZGUvbGludXgvc3lz
Y2FsbHMuaAppbmRleCBlNDQ2ODA2YTU2MWYuLjcwMDA4ZjVlZDg0ZiAxMDA2NDQKLS0tIGEvaW5j
bHVkZS9saW51eC9zeXNjYWxscy5oCisrKyBiL2luY2x1ZGUvbGludXgvc3lzY2FsbHMuaApAQCAt
MTI2MCw2ICsxMjYwLDI4IEBAIGludCBrc3lzX2lwYyh1bnNpZ25lZCBpbnQgY2FsbCwgaW50IGZp
cnN0LCB1bnNpZ25lZCBsb25nIHNlY29uZCwKIAl1bnNpZ25lZCBsb25nIHRoaXJkLCB2b2lkIF9f
dXNlciAqIHB0ciwgbG9uZyBmaWZ0aCk7CiBpbnQgY29tcGF0X2tzeXNfaXBjKHUzMiBjYWxsLCBp
bnQgZmlyc3QsIGludCBzZWNvbmQsCiAJdTMyIHRoaXJkLCB1MzIgcHRyLCB1MzIgZmlmdGgpOwor
dW5zaWduZWQgbG9uZyBrc3lzX21yZW1hcCh1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxv
bmcgb2xkX2xlbiwKKwkJCXVuc2lnbmVkIGxvbmcgbmV3X2xlbiwgdW5zaWduZWQgbG9uZyBmbGFn
cywKKwkJCXVuc2lnbmVkIGxvbmcgbmV3X2FkZHIpOworaW50IGtzeXNfbXVubWFwKHVuc2lnbmVk
IGxvbmcgYWRkciwgc2l6ZV90IGxlbik7Cit1bnNpZ25lZCBsb25nIGtzeXNfYnJrKHVuc2lnbmVk
IGxvbmcgYnJrKTsKK2ludCBrc3lzX2dldF9tZW1wb2xpY3koaW50IF9fdXNlciAqcG9saWN5LCB1
bnNpZ25lZCBsb25nIF9fdXNlciAqbm1hc2ssCisJCXVuc2lnbmVkIGxvbmcgbWF4bm9kZSwgdW5z
aWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIGZsYWdzKTsKK2ludCBrc3lzX21hZHZpc2Uo
dW5zaWduZWQgbG9uZyBzdGFydCwgc2l6ZV90IGxlbl9pbiwgaW50IGJlaGF2aW9yKTsKK2xvbmcg
a3N5c19tYmluZCh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGxlbiwKKwkJdW5z
aWduZWQgbG9uZyBtb2RlLCBjb25zdCB1bnNpZ25lZCBsb25nIF9fdXNlciAqbm1hc2ssCisJCXVu
c2lnbmVkIGxvbmcgbWF4bm9kZSwgdW5zaWduZWQgaW50IGZsYWdzKTsKK19fbXVzdF9jaGVjayBp
bnQga3N5c19tbG9jayh1bnNpZ25lZCBsb25nIHN0YXJ0LCBzaXplX3QgbGVuLCB2bV9mbGFnc190
IGZsYWdzKTsKK19fbXVzdF9jaGVjayBpbnQga3N5c19tbG9jazIodW5zaWduZWQgbG9uZyBzdGFy
dCwgc2l6ZV90IGxlbiwgdm1fZmxhZ3NfdCBmbGFncyk7CitpbnQga3N5c19tdW5sb2NrKHVuc2ln
bmVkIGxvbmcgc3RhcnQsIHNpemVfdCBsZW4pOworaW50IGtzeXNfbXByb3RlY3RfcGtleSh1bnNp
Z25lZCBsb25nIHN0YXJ0LCBzaXplX3QgbGVuLAorCQl1bnNpZ25lZCBsb25nIHByb3QsIGludCBw
a2V5KTsKK2ludCBrc3lzX21zeW5jKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHNpemVfdCBsZW4sIGlu
dCBmbGFncyk7Citsb25nIGtzeXNfbWluY29yZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCBzaXplX3Qg
bGVuLCB1bnNpZ25lZCBjaGFyIF9fdXNlciAqdmVjKTsKK3Vuc2lnbmVkIGxvbmcga3N5c19yZW1h
cF9maWxlX3BhZ2VzKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgc2l6ZSwKKwkJ
dW5zaWduZWQgbG9uZyBwcm90LCB1bnNpZ25lZCBsb25nIHBnb2ZmLCB1bnNpZ25lZCBsb25nIGZs
YWdzKTsKK2xvbmcga3N5c19zaG1hdChpbnQgc2htaWQsIGNoYXIgX191c2VyICpzaG1hZGRyLCBp
bnQgc2htZmxnKTsKK2xvbmcga3N5c19zaG1kdChjaGFyIF9fdXNlciAqc2htYWRkcik7CiAKIC8q
CiAgKiBUaGUgZm9sbG93aW5nIGtlcm5lbCBzeXNjYWxsIGVxdWl2YWxlbnRzIGFyZSBqdXN0IHdy
YXBwZXJzIHRvIGZzLWludGVybmFsCmRpZmYgLS1naXQgYS9pcGMvc2htLmMgYi9pcGMvc2htLmMK
aW5kZXggY2UxY2E5ZjdjNmU5Li41NTdiNDM5NjhjMGUgMTAwNjQ0Ci0tLSBhL2lwYy9zaG0uYwor
KysgYi9pcGMvc2htLmMKQEAgLTE1ODgsNyArMTU4OCw3IEBAIGxvbmcgZG9fc2htYXQoaW50IHNo
bWlkLCBjaGFyIF9fdXNlciAqc2htYWRkciwgaW50IHNobWZsZywKIAlyZXR1cm4gZXJyOwogfQog
Ci1TWVNDQUxMX0RFRklORTMoc2htYXQsIGludCwgc2htaWQsIGNoYXIgX191c2VyICosIHNobWFk
ZHIsIGludCwgc2htZmxnKQorbG9uZyBrc3lzX3NobWF0KGludCBzaG1pZCwgY2hhciBfX3VzZXIg
KnNobWFkZHIsIGludCBzaG1mbGcpCiB7CiAJdW5zaWduZWQgbG9uZyByZXQ7CiAJbG9uZyBlcnI7
CkBAIC0xNjAwLDYgKzE2MDAsMTEgQEAgU1lTQ0FMTF9ERUZJTkUzKHNobWF0LCBpbnQsIHNobWlk
LCBjaGFyIF9fdXNlciAqLCBzaG1hZGRyLCBpbnQsIHNobWZsZykKIAlyZXR1cm4gKGxvbmcpcmV0
OwogfQogCitTWVNDQUxMX0RFRklORTMoc2htYXQsIGludCwgc2htaWQsIGNoYXIgX191c2VyICos
IHNobWFkZHIsIGludCwgc2htZmxnKQoreworCXJldHVybiBrc3lzX3NobWF0KHNobWlkLCBzaG1h
ZGRyLCBzaG1mbGcpOworfQorCiAjaWZkZWYgQ09ORklHX0NPTVBBVAogCiAjaWZuZGVmIENPTVBB
VF9TSE1MQkEKZGlmZiAtLWdpdCBhL21tL21hZHZpc2UuYyBiL21tL21hZHZpc2UuYwppbmRleCAy
MWE3ODgxYTJkYjQuLmMyN2Y1ZjE0ZTJlZSAxMDA2NDQKLS0tIGEvbW0vbWFkdmlzZS5jCisrKyBi
L21tL21hZHZpc2UuYwpAQCAtNzM4LDY4ICs3MzgsNyBAQCBtYWR2aXNlX2JlaGF2aW9yX3ZhbGlk
KGludCBiZWhhdmlvcikKIAl9CiB9CiAKLS8qCi0gKiBUaGUgbWFkdmlzZSgyKSBzeXN0ZW0gY2Fs
bC4KLSAqCi0gKiBBcHBsaWNhdGlvbnMgY2FuIHVzZSBtYWR2aXNlKCkgdG8gYWR2aXNlIHRoZSBr
ZXJuZWwgaG93IGl0IHNob3VsZAotICogaGFuZGxlIHBhZ2luZyBJL08gaW4gdGhpcyBWTSBhcmVh
LiAgVGhlIGlkZWEgaXMgdG8gaGVscCB0aGUga2VybmVsCi0gKiB1c2UgYXBwcm9wcmlhdGUgcmVh
ZC1haGVhZCBhbmQgY2FjaGluZyB0ZWNobmlxdWVzLiAgVGhlIGluZm9ybWF0aW9uCi0gKiBwcm92
aWRlZCBpcyBhZHZpc29yeSBvbmx5LCBhbmQgY2FuIGJlIHNhZmVseSBkaXNyZWdhcmRlZCBieSB0
aGUKLSAqIGtlcm5lbCB3aXRob3V0IGFmZmVjdGluZyB0aGUgY29ycmVjdCBvcGVyYXRpb24gb2Yg
dGhlIGFwcGxpY2F0aW9uLgotICoKLSAqIGJlaGF2aW9yIHZhbHVlczoKLSAqICBNQURWX05PUk1B
TCAtIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHJlYWQgY2x1c3RlcnMuICBUaGlzCi0gKgkJ
cmVzdWx0cyBpbiBzb21lIHJlYWQtYWhlYWQgYW5kIHJlYWQtYmVoaW5kLgotICogIE1BRFZfUkFO
RE9NIC0gdGhlIHN5c3RlbSBzaG91bGQgcmVhZCB0aGUgbWluaW11bSBhbW91bnQgb2YgZGF0YQot
ICoJCW9uIGFueSBhY2Nlc3MsIHNpbmNlIGl0IGlzIHVubGlrZWx5IHRoYXQgdGhlIGFwcGxpLQot
ICoJCWNhdGlvbiB3aWxsIG5lZWQgbW9yZSB0aGFuIHdoYXQgaXQgYXNrcyBmb3IuCi0gKiAgTUFE
Vl9TRVFVRU5USUFMIC0gcGFnZXMgaW4gdGhlIGdpdmVuIHJhbmdlIHdpbGwgcHJvYmFibHkgYmUg
YWNjZXNzZWQKLSAqCQlvbmNlLCBzbyB0aGV5IGNhbiBiZSBhZ2dyZXNzaXZlbHkgcmVhZCBhaGVh
ZCwgYW5kCi0gKgkJY2FuIGJlIGZyZWVkIHNvb24gYWZ0ZXIgdGhleSBhcmUgYWNjZXNzZWQuCi0g
KiAgTUFEVl9XSUxMTkVFRCAtIHRoZSBhcHBsaWNhdGlvbiBpcyBub3RpZnlpbmcgdGhlIHN5c3Rl
bSB0byByZWFkCi0gKgkJc29tZSBwYWdlcyBhaGVhZC4KLSAqICBNQURWX0RPTlRORUVEIC0gdGhl
IGFwcGxpY2F0aW9uIGlzIGZpbmlzaGVkIHdpdGggdGhlIGdpdmVuIHJhbmdlLAotICoJCXNvIHRo
ZSBrZXJuZWwgY2FuIGZyZWUgcmVzb3VyY2VzIGFzc29jaWF0ZWQgd2l0aCBpdC4KLSAqICBNQURW
X0ZSRUUgLSB0aGUgYXBwbGljYXRpb24gbWFya3MgcGFnZXMgaW4gdGhlIGdpdmVuIHJhbmdlIGFz
IGxhenkgZnJlZSwKLSAqCQl3aGVyZSBhY3R1YWwgcHVyZ2VzIGFyZSBwb3N0cG9uZWQgdW50aWwg
bWVtb3J5IHByZXNzdXJlIGhhcHBlbnMuCi0gKiAgTUFEVl9SRU1PVkUgLSB0aGUgYXBwbGljYXRp
b24gd2FudHMgdG8gZnJlZSB1cCB0aGUgZ2l2ZW4gcmFuZ2Ugb2YKLSAqCQlwYWdlcyBhbmQgYXNz
b2NpYXRlZCBiYWNraW5nIHN0b3JlLgotICogIE1BRFZfRE9OVEZPUksgLSBvbWl0IHRoaXMgYXJl
YSBmcm9tIGNoaWxkJ3MgYWRkcmVzcyBzcGFjZSB3aGVuIGZvcmtpbmc6Ci0gKgkJdHlwaWNhbGx5
LCB0byBhdm9pZCBDT1dpbmcgcGFnZXMgcGlubmVkIGJ5IGdldF91c2VyX3BhZ2VzKCkuCi0gKiAg
TUFEVl9ET0ZPUksgLSBjYW5jZWwgTUFEVl9ET05URk9SSzogbm8gbG9uZ2VyIG9taXQgdGhpcyBh
cmVhIHdoZW4gZm9ya2luZy4KLSAqICBNQURWX1dJUEVPTkZPUksgLSBwcmVzZW50IHRoZSBjaGls
ZCBwcm9jZXNzIHdpdGggemVyby1maWxsZWQgbWVtb3J5IGluIHRoaXMKLSAqICAgICAgICAgICAg
ICByYW5nZSBhZnRlciBhIGZvcmsuCi0gKiAgTUFEVl9LRUVQT05GT1JLIC0gdW5kbyB0aGUgZWZm
ZWN0IG9mIE1BRFZfV0lQRU9ORk9SSwotICogIE1BRFZfSFdQT0lTT04gLSB0cmlnZ2VyIG1lbW9y
eSBlcnJvciBoYW5kbGVyIGFzIGlmIHRoZSBnaXZlbiBtZW1vcnkgcmFuZ2UKLSAqCQl3ZXJlIGNv
cnJ1cHRlZCBieSB1bnJlY292ZXJhYmxlIGhhcmR3YXJlIG1lbW9yeSBmYWlsdXJlLgotICogIE1B
RFZfU09GVF9PRkZMSU5FIC0gdHJ5IHRvIHNvZnQtb2ZmbGluZSB0aGUgZ2l2ZW4gcmFuZ2Ugb2Yg
bWVtb3J5LgotICogIE1BRFZfTUVSR0VBQkxFIC0gdGhlIGFwcGxpY2F0aW9uIHJlY29tbWVuZHMg
dGhhdCBLU00gdHJ5IHRvIG1lcmdlIHBhZ2VzIGluCi0gKgkJdGhpcyBhcmVhIHdpdGggcGFnZXMg
b2YgaWRlbnRpY2FsIGNvbnRlbnQgZnJvbSBvdGhlciBzdWNoIGFyZWFzLgotICogIE1BRFZfVU5N
RVJHRUFCTEUtIGNhbmNlbCBNQURWX01FUkdFQUJMRTogbm8gbG9uZ2VyIG1lcmdlIHBhZ2VzIHdp
dGggb3RoZXJzLgotICogIE1BRFZfSFVHRVBBR0UgLSB0aGUgYXBwbGljYXRpb24gd2FudHMgdG8g
YmFjayB0aGUgZ2l2ZW4gcmFuZ2UgYnkgdHJhbnNwYXJlbnQKLSAqCQlodWdlIHBhZ2VzIGluIHRo
ZSBmdXR1cmUuIEV4aXN0aW5nIHBhZ2VzIG1pZ2h0IGJlIGNvYWxlc2NlZCBhbmQKLSAqCQluZXcg
cGFnZXMgbWlnaHQgYmUgYWxsb2NhdGVkIGFzIFRIUC4KLSAqICBNQURWX05PSFVHRVBBR0UgLSBt
YXJrIHRoZSBnaXZlbiByYW5nZSBhcyBub3Qgd29ydGggYmVpbmcgYmFja2VkIGJ5Ci0gKgkJdHJh
bnNwYXJlbnQgaHVnZSBwYWdlcyBzbyB0aGUgZXhpc3RpbmcgcGFnZXMgd2lsbCBub3QgYmUKLSAq
CQljb2FsZXNjZWQgaW50byBUSFAgYW5kIG5ldyBwYWdlcyB3aWxsIG5vdCBiZSBhbGxvY2F0ZWQg
YXMgVEhQLgotICogIE1BRFZfRE9OVERVTVAgLSB0aGUgYXBwbGljYXRpb24gd2FudHMgdG8gcHJl
dmVudCBwYWdlcyBpbiB0aGUgZ2l2ZW4gcmFuZ2UKLSAqCQlmcm9tIGJlaW5nIGluY2x1ZGVkIGlu
IGl0cyBjb3JlIGR1bXAuCi0gKiAgTUFEVl9ET0RVTVAgLSBjYW5jZWwgTUFEVl9ET05URFVNUDog
bm8gbG9uZ2VyIGV4Y2x1ZGUgZnJvbSBjb3JlIGR1bXAuCi0gKgotICogcmV0dXJuIHZhbHVlczoK
LSAqICB6ZXJvICAgIC0gc3VjY2VzcwotICogIC1FSU5WQUwgLSBzdGFydCArIGxlbiA8IDAsIHN0
YXJ0IGlzIG5vdCBwYWdlLWFsaWduZWQsCi0gKgkJImJlaGF2aW9yIiBpcyBub3QgYSB2YWxpZCB2
YWx1ZSwgb3IgYXBwbGljYXRpb24KLSAqCQlpcyBhdHRlbXB0aW5nIHRvIHJlbGVhc2UgbG9ja2Vk
IG9yIHNoYXJlZCBwYWdlcywKLSAqCQlvciB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgcmFuZ2UgaW5j
bHVkZXMgZmlsZSwgSHVnZSBUTEIsCi0gKgkJTUFQX1NIQVJFRCBvciBWTVBGTk1BUCByYW5nZS4K
LSAqICAtRU5PTUVNIC0gYWRkcmVzc2VzIGluIHRoZSBzcGVjaWZpZWQgcmFuZ2UgYXJlIG5vdCBj
dXJyZW50bHkKLSAqCQltYXBwZWQsIG9yIGFyZSBvdXRzaWRlIHRoZSBBUyBvZiB0aGUgcHJvY2Vz
cy4KLSAqICAtRUlPICAgIC0gYW4gSS9PIGVycm9yIG9jY3VycmVkIHdoaWxlIHBhZ2luZyBpbiBk
YXRhLgotICogIC1FQkFERiAgLSBtYXAgZXhpc3RzLCBidXQgYXJlYSBtYXBzIHNvbWV0aGluZyB0
aGF0IGlzbid0IGEgZmlsZS4KLSAqICAtRUFHQUlOIC0gYSBrZXJuZWwgcmVzb3VyY2Ugd2FzIHRl
bXBvcmFyaWx5IHVuYXZhaWxhYmxlLgotICovCi1TWVNDQUxMX0RFRklORTMobWFkdmlzZSwgdW5z
aWduZWQgbG9uZywgc3RhcnQsIHNpemVfdCwgbGVuX2luLCBpbnQsIGJlaGF2aW9yKQoraW50IGtz
eXNfbWFkdmlzZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCBzaXplX3QgbGVuX2luLCBpbnQgYmVoYXZp
b3IpCiB7CiAJdW5zaWduZWQgbG9uZyBlbmQsIHRtcDsKIAlzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3Qg
KnZtYSwgKnByZXY7CkBAIC04OTQsMyArODMzLDY5IEBAIFNZU0NBTExfREVGSU5FMyhtYWR2aXNl
LCB1bnNpZ25lZCBsb25nLCBzdGFydCwgc2l6ZV90LCBsZW5faW4sIGludCwgYmVoYXZpb3IpCiAK
IAlyZXR1cm4gZXJyb3I7CiB9CisKKy8qCisgKiBUaGUgbWFkdmlzZSgyKSBzeXN0ZW0gY2FsbC4K
KyAqCisgKiBBcHBsaWNhdGlvbnMgY2FuIHVzZSBtYWR2aXNlKCkgdG8gYWR2aXNlIHRoZSBrZXJu
ZWwgaG93IGl0IHNob3VsZAorICogaGFuZGxlIHBhZ2luZyBJL08gaW4gdGhpcyBWTSBhcmVhLiAg
VGhlIGlkZWEgaXMgdG8gaGVscCB0aGUga2VybmVsCisgKiB1c2UgYXBwcm9wcmlhdGUgcmVhZC1h
aGVhZCBhbmQgY2FjaGluZyB0ZWNobmlxdWVzLiAgVGhlIGluZm9ybWF0aW9uCisgKiBwcm92aWRl
ZCBpcyBhZHZpc29yeSBvbmx5LCBhbmQgY2FuIGJlIHNhZmVseSBkaXNyZWdhcmRlZCBieSB0aGUK
KyAqIGtlcm5lbCB3aXRob3V0IGFmZmVjdGluZyB0aGUgY29ycmVjdCBvcGVyYXRpb24gb2YgdGhl
IGFwcGxpY2F0aW9uLgorICoKKyAqIGJlaGF2aW9yIHZhbHVlczoKKyAqICBNQURWX05PUk1BTCAt
IHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHJlYWQgY2x1c3RlcnMuICBUaGlzCisgKgkJcmVz
dWx0cyBpbiBzb21lIHJlYWQtYWhlYWQgYW5kIHJlYWQtYmVoaW5kLgorICogIE1BRFZfUkFORE9N
IC0gdGhlIHN5c3RlbSBzaG91bGQgcmVhZCB0aGUgbWluaW11bSBhbW91bnQgb2YgZGF0YQorICoJ
CW9uIGFueSBhY2Nlc3MsIHNpbmNlIGl0IGlzIHVubGlrZWx5IHRoYXQgdGhlIGFwcGxpLQorICoJ
CWNhdGlvbiB3aWxsIG5lZWQgbW9yZSB0aGFuIHdoYXQgaXQgYXNrcyBmb3IuCisgKiAgTUFEVl9T
RVFVRU5USUFMIC0gcGFnZXMgaW4gdGhlIGdpdmVuIHJhbmdlIHdpbGwgcHJvYmFibHkgYmUgYWNj
ZXNzZWQKKyAqCQlvbmNlLCBzbyB0aGV5IGNhbiBiZSBhZ2dyZXNzaXZlbHkgcmVhZCBhaGVhZCwg
YW5kCisgKgkJY2FuIGJlIGZyZWVkIHNvb24gYWZ0ZXIgdGhleSBhcmUgYWNjZXNzZWQuCisgKiAg
TUFEVl9XSUxMTkVFRCAtIHRoZSBhcHBsaWNhdGlvbiBpcyBub3RpZnlpbmcgdGhlIHN5c3RlbSB0
byByZWFkCisgKgkJc29tZSBwYWdlcyBhaGVhZC4KKyAqICBNQURWX0RPTlRORUVEIC0gdGhlIGFw
cGxpY2F0aW9uIGlzIGZpbmlzaGVkIHdpdGggdGhlIGdpdmVuIHJhbmdlLAorICoJCXNvIHRoZSBr
ZXJuZWwgY2FuIGZyZWUgcmVzb3VyY2VzIGFzc29jaWF0ZWQgd2l0aCBpdC4KKyAqICBNQURWX0ZS
RUUgLSB0aGUgYXBwbGljYXRpb24gbWFya3MgcGFnZXMgaW4gdGhlIGdpdmVuIHJhbmdlIGFzIGxh
enkgZnJlZSwKKyAqCQl3aGVyZSBhY3R1YWwgcHVyZ2VzIGFyZSBwb3N0cG9uZWQgdW50aWwgbWVt
b3J5IHByZXNzdXJlIGhhcHBlbnMuCisgKiAgTUFEVl9SRU1PVkUgLSB0aGUgYXBwbGljYXRpb24g
d2FudHMgdG8gZnJlZSB1cCB0aGUgZ2l2ZW4gcmFuZ2Ugb2YKKyAqCQlwYWdlcyBhbmQgYXNzb2Np
YXRlZCBiYWNraW5nIHN0b3JlLgorICogIE1BRFZfRE9OVEZPUksgLSBvbWl0IHRoaXMgYXJlYSBm
cm9tIGNoaWxkJ3MgYWRkcmVzcyBzcGFjZSB3aGVuIGZvcmtpbmc6CisgKgkJdHlwaWNhbGx5LCB0
byBhdm9pZCBDT1dpbmcgcGFnZXMgcGlubmVkIGJ5IGdldF91c2VyX3BhZ2VzKCkuCisgKiAgTUFE
Vl9ET0ZPUksgLSBjYW5jZWwgTUFEVl9ET05URk9SSzogbm8gbG9uZ2VyIG9taXQgdGhpcyBhcmVh
IHdoZW4gZm9ya2luZy4KKyAqICBNQURWX1dJUEVPTkZPUksgLSBwcmVzZW50IHRoZSBjaGlsZCBw
cm9jZXNzIHdpdGggemVyby1maWxsZWQgbWVtb3J5IGluIHRoaXMKKyAqICAgICAgICAgICAgICBy
YW5nZSBhZnRlciBhIGZvcmsuCisgKiAgTUFEVl9LRUVQT05GT1JLIC0gdW5kbyB0aGUgZWZmZWN0
IG9mIE1BRFZfV0lQRU9ORk9SSworICogIE1BRFZfSFdQT0lTT04gLSB0cmlnZ2VyIG1lbW9yeSBl
cnJvciBoYW5kbGVyIGFzIGlmIHRoZSBnaXZlbiBtZW1vcnkgcmFuZ2UKKyAqCQl3ZXJlIGNvcnJ1
cHRlZCBieSB1bnJlY292ZXJhYmxlIGhhcmR3YXJlIG1lbW9yeSBmYWlsdXJlLgorICogIE1BRFZf
U09GVF9PRkZMSU5FIC0gdHJ5IHRvIHNvZnQtb2ZmbGluZSB0aGUgZ2l2ZW4gcmFuZ2Ugb2YgbWVt
b3J5LgorICogIE1BRFZfTUVSR0VBQkxFIC0gdGhlIGFwcGxpY2F0aW9uIHJlY29tbWVuZHMgdGhh
dCBLU00gdHJ5IHRvIG1lcmdlIHBhZ2VzIGluCisgKgkJdGhpcyBhcmVhIHdpdGggcGFnZXMgb2Yg
aWRlbnRpY2FsIGNvbnRlbnQgZnJvbSBvdGhlciBzdWNoIGFyZWFzLgorICogIE1BRFZfVU5NRVJH
RUFCTEUtIGNhbmNlbCBNQURWX01FUkdFQUJMRTogbm8gbG9uZ2VyIG1lcmdlIHBhZ2VzIHdpdGgg
b3RoZXJzLgorICogIE1BRFZfSFVHRVBBR0UgLSB0aGUgYXBwbGljYXRpb24gd2FudHMgdG8gYmFj
ayB0aGUgZ2l2ZW4gcmFuZ2UgYnkgdHJhbnNwYXJlbnQKKyAqCQlodWdlIHBhZ2VzIGluIHRoZSBm
dXR1cmUuIEV4aXN0aW5nIHBhZ2VzIG1pZ2h0IGJlIGNvYWxlc2NlZCBhbmQKKyAqCQluZXcgcGFn
ZXMgbWlnaHQgYmUgYWxsb2NhdGVkIGFzIFRIUC4KKyAqICBNQURWX05PSFVHRVBBR0UgLSBtYXJr
IHRoZSBnaXZlbiByYW5nZSBhcyBub3Qgd29ydGggYmVpbmcgYmFja2VkIGJ5CisgKgkJdHJhbnNw
YXJlbnQgaHVnZSBwYWdlcyBzbyB0aGUgZXhpc3RpbmcgcGFnZXMgd2lsbCBub3QgYmUKKyAqCQlj
b2FsZXNjZWQgaW50byBUSFAgYW5kIG5ldyBwYWdlcyB3aWxsIG5vdCBiZSBhbGxvY2F0ZWQgYXMg
VEhQLgorICogIE1BRFZfRE9OVERVTVAgLSB0aGUgYXBwbGljYXRpb24gd2FudHMgdG8gcHJldmVu
dCBwYWdlcyBpbiB0aGUgZ2l2ZW4gcmFuZ2UKKyAqCQlmcm9tIGJlaW5nIGluY2x1ZGVkIGluIGl0
cyBjb3JlIGR1bXAuCisgKiAgTUFEVl9ET0RVTVAgLSBjYW5jZWwgTUFEVl9ET05URFVNUDogbm8g
bG9uZ2VyIGV4Y2x1ZGUgZnJvbSBjb3JlIGR1bXAuCisgKgorICogcmV0dXJuIHZhbHVlczoKKyAq
ICB6ZXJvICAgIC0gc3VjY2VzcworICogIC1FSU5WQUwgLSBzdGFydCArIGxlbiA8IDAsIHN0YXJ0
IGlzIG5vdCBwYWdlLWFsaWduZWQsCisgKgkJImJlaGF2aW9yIiBpcyBub3QgYSB2YWxpZCB2YWx1
ZSwgb3IgYXBwbGljYXRpb24KKyAqCQlpcyBhdHRlbXB0aW5nIHRvIHJlbGVhc2UgbG9ja2VkIG9y
IHNoYXJlZCBwYWdlcywKKyAqCQlvciB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgcmFuZ2UgaW5jbHVk
ZXMgZmlsZSwgSHVnZSBUTEIsCisgKgkJTUFQX1NIQVJFRCBvciBWTVBGTk1BUCByYW5nZS4KKyAq
ICAtRU5PTUVNIC0gYWRkcmVzc2VzIGluIHRoZSBzcGVjaWZpZWQgcmFuZ2UgYXJlIG5vdCBjdXJy
ZW50bHkKKyAqCQltYXBwZWQsIG9yIGFyZSBvdXRzaWRlIHRoZSBBUyBvZiB0aGUgcHJvY2Vzcy4K
KyAqICAtRUlPICAgIC0gYW4gSS9PIGVycm9yIG9jY3VycmVkIHdoaWxlIHBhZ2luZyBpbiBkYXRh
LgorICogIC1FQkFERiAgLSBtYXAgZXhpc3RzLCBidXQgYXJlYSBtYXBzIHNvbWV0aGluZyB0aGF0
IGlzbid0IGEgZmlsZS4KKyAqICAtRUFHQUlOIC0gYSBrZXJuZWwgcmVzb3VyY2Ugd2FzIHRlbXBv
cmFyaWx5IHVuYXZhaWxhYmxlLgorICovCitTWVNDQUxMX0RFRklORTMobWFkdmlzZSwgdW5zaWdu
ZWQgbG9uZywgc3RhcnQsIHNpemVfdCwgbGVuX2luLCBpbnQsIGJlaGF2aW9yKQoreworCXJldHVy
biBrc3lzX21hZHZpc2Uoc3RhcnQsIGxlbl9pbiwgYmVoYXZpb3IpOworfQpkaWZmIC0tZ2l0IGEv
bW0vbWVtcG9saWN5LmMgYi9tbS9tZW1wb2xpY3kuYwppbmRleCAyMjE5ZTc0N2RmNDkuLmMyZjgy
YTA0NWNlYiAxMDA2NDQKLS0tIGEvbW0vbWVtcG9saWN5LmMKKysrIGIvbW0vbWVtcG9saWN5LmMK
QEAgLTEzNTIsOSArMTM1Miw5IEBAIHN0YXRpYyBpbnQgY29weV9ub2Rlc190b191c2VyKHVuc2ln
bmVkIGxvbmcgX191c2VyICptYXNrLCB1bnNpZ25lZCBsb25nIG1heG5vZGUsCiAJcmV0dXJuIGNv
cHlfdG9fdXNlcihtYXNrLCBub2Rlc19hZGRyKCpub2RlcyksIGNvcHkpID8gLUVGQVVMVCA6IDA7
CiB9CiAKLXN0YXRpYyBsb25nIGtlcm5lbF9tYmluZCh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNp
Z25lZCBsb25nIGxlbiwKLQkJCSB1bnNpZ25lZCBsb25nIG1vZGUsIGNvbnN0IHVuc2lnbmVkIGxv
bmcgX191c2VyICpubWFzaywKLQkJCSB1bnNpZ25lZCBsb25nIG1heG5vZGUsIHVuc2lnbmVkIGlu
dCBmbGFncykKK2xvbmcga3N5c19tYmluZCh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBs
b25nIGxlbiwKKwkJdW5zaWduZWQgbG9uZyBtb2RlLCBjb25zdCB1bnNpZ25lZCBsb25nIF9fdXNl
ciAqbm1hc2ssCisJCXVuc2lnbmVkIGxvbmcgbWF4bm9kZSwgdW5zaWduZWQgaW50IGZsYWdzKQog
ewogCW5vZGVtYXNrX3Qgbm9kZXM7CiAJaW50IGVycjsKQEAgLTEzNzcsNyArMTM3Nyw3IEBAIFNZ
U0NBTExfREVGSU5FNihtYmluZCwgdW5zaWduZWQgbG9uZywgc3RhcnQsIHVuc2lnbmVkIGxvbmcs
IGxlbiwKIAkJdW5zaWduZWQgbG9uZywgbW9kZSwgY29uc3QgdW5zaWduZWQgbG9uZyBfX3VzZXIg
Kiwgbm1hc2ssCiAJCXVuc2lnbmVkIGxvbmcsIG1heG5vZGUsIHVuc2lnbmVkIGludCwgZmxhZ3Mp
CiB7Ci0JcmV0dXJuIGtlcm5lbF9tYmluZChzdGFydCwgbGVuLCBtb2RlLCBubWFzaywgbWF4bm9k
ZSwgZmxhZ3MpOworCXJldHVybiBrc3lzX21iaW5kKHN0YXJ0LCBsZW4sIG1vZGUsIG5tYXNrLCBt
YXhub2RlLCBmbGFncyk7CiB9CiAKIC8qIFNldCB0aGUgcHJvY2VzcyBtZW1vcnkgcG9saWN5ICov
CkBAIC0xNTA3LDExICsxNTA3LDggQEAgU1lTQ0FMTF9ERUZJTkU0KG1pZ3JhdGVfcGFnZXMsIHBp
ZF90LCBwaWQsIHVuc2lnbmVkIGxvbmcsIG1heG5vZGUsCiAKIAogLyogUmV0cmlldmUgTlVNQSBw
b2xpY3kgKi8KLXN0YXRpYyBpbnQga2VybmVsX2dldF9tZW1wb2xpY3koaW50IF9fdXNlciAqcG9s
aWN5LAotCQkJCXVuc2lnbmVkIGxvbmcgX191c2VyICpubWFzaywKLQkJCQl1bnNpZ25lZCBsb25n
IG1heG5vZGUsCi0JCQkJdW5zaWduZWQgbG9uZyBhZGRyLAotCQkJCXVuc2lnbmVkIGxvbmcgZmxh
Z3MpCitpbnQga3N5c19nZXRfbWVtcG9saWN5KGludCBfX3VzZXIgKnBvbGljeSwgdW5zaWduZWQg
bG9uZyBfX3VzZXIgKm5tYXNrLAorCQl1bnNpZ25lZCBsb25nIG1heG5vZGUsIHVuc2lnbmVkIGxv
bmcgYWRkciwgdW5zaWduZWQgbG9uZyBmbGFncykKIHsKIAlpbnQgZXJyOwogCWludCB1bmluaXRp
YWxpemVkX3ZhcihwdmFsKTsKQEAgLTE1MzgsNyArMTUzNSw3IEBAIFNZU0NBTExfREVGSU5FNShn
ZXRfbWVtcG9saWN5LCBpbnQgX191c2VyICosIHBvbGljeSwKIAkJdW5zaWduZWQgbG9uZyBfX3Vz
ZXIgKiwgbm1hc2ssIHVuc2lnbmVkIGxvbmcsIG1heG5vZGUsCiAJCXVuc2lnbmVkIGxvbmcsIGFk
ZHIsIHVuc2lnbmVkIGxvbmcsIGZsYWdzKQogewotCXJldHVybiBrZXJuZWxfZ2V0X21lbXBvbGlj
eShwb2xpY3ksIG5tYXNrLCBtYXhub2RlLCBhZGRyLCBmbGFncyk7CisJcmV0dXJuIGtzeXNfZ2V0
X21lbXBvbGljeShwb2xpY3ksIG5tYXNrLCBtYXhub2RlLCBhZGRyLCBmbGFncyk7CiB9CiAKICNp
ZmRlZiBDT05GSUdfQ09NUEFUCkBAIC0xNTU5LDcgKzE1NTYsNyBAQCBDT01QQVRfU1lTQ0FMTF9E
RUZJTkU1KGdldF9tZW1wb2xpY3ksIGludCBfX3VzZXIgKiwgcG9saWN5LAogCWlmIChubWFzaykK
IAkJbm0gPSBjb21wYXRfYWxsb2NfdXNlcl9zcGFjZShhbGxvY19zaXplKTsKIAotCWVyciA9IGtl
cm5lbF9nZXRfbWVtcG9saWN5KHBvbGljeSwgbm0sIG5yX2JpdHMrMSwgYWRkciwgZmxhZ3MpOwor
CWVyciA9IGtzeXNfZ2V0X21lbXBvbGljeShwb2xpY3ksIG5tLCBucl9iaXRzKzEsIGFkZHIsIGZs
YWdzKTsKIAogCWlmICghZXJyICYmIG5tYXNrKSB7CiAJCXVuc2lnbmVkIGxvbmcgY29weV9zaXpl
OwpAQCAtMTYxMyw3ICsxNjEwLDcgQEAgQ09NUEFUX1NZU0NBTExfREVGSU5FNihtYmluZCwgY29t
cGF0X3Vsb25nX3QsIHN0YXJ0LCBjb21wYXRfdWxvbmdfdCwgbGVuLAogCQkJcmV0dXJuIC1FRkFV
TFQ7CiAJfQogCi0JcmV0dXJuIGtlcm5lbF9tYmluZChzdGFydCwgbGVuLCBtb2RlLCBubSwgbnJf
Yml0cysxLCBmbGFncyk7CisJcmV0dXJuIGtzeXNfbWJpbmQoc3RhcnQsIGxlbiwgbW9kZSwgbm0s
IG5yX2JpdHMrMSwgZmxhZ3MpOwogfQogCiBDT01QQVRfU1lTQ0FMTF9ERUZJTkU0KG1pZ3JhdGVf
cGFnZXMsIGNvbXBhdF9waWRfdCwgcGlkLApkaWZmIC0tZ2l0IGEvbW0vbWluY29yZS5jIGIvbW0v
bWluY29yZS5jCmluZGV4IDIxODA5OWI1ZWQzMS4uYTYwOWJkODEyOGRhIDEwMDY0NAotLS0gYS9t
bS9taW5jb3JlLmMKKysrIGIvbW0vbWluY29yZS5jCkBAIC0xOTcsMzIgKzE5Nyw3IEBAIHN0YXRp
YyBsb25nIGRvX21pbmNvcmUodW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHBhZ2Vz
LCB1bnNpZ25lZCBjaGFyICp2CiAJcmV0dXJuIChlbmQgLSBhZGRyKSA+PiBQQUdFX1NISUZUOwog
fQogCi0vKgotICogVGhlIG1pbmNvcmUoMikgc3lzdGVtIGNhbGwuCi0gKgotICogbWluY29yZSgp
IHJldHVybnMgdGhlIG1lbW9yeSByZXNpZGVuY3kgc3RhdHVzIG9mIHRoZSBwYWdlcyBpbiB0aGUK
LSAqIGN1cnJlbnQgcHJvY2VzcydzIGFkZHJlc3Mgc3BhY2Ugc3BlY2lmaWVkIGJ5IFthZGRyLCBh
ZGRyICsgbGVuKS4KLSAqIFRoZSBzdGF0dXMgaXMgcmV0dXJuZWQgaW4gYSB2ZWN0b3Igb2YgYnl0
ZXMuICBUaGUgbGVhc3Qgc2lnbmlmaWNhbnQKLSAqIGJpdCBvZiBlYWNoIGJ5dGUgaXMgMSBpZiB0
aGUgcmVmZXJlbmNlZCBwYWdlIGlzIGluIG1lbW9yeSwgb3RoZXJ3aXNlCi0gKiBpdCBpcyB6ZXJv
LgotICoKLSAqIEJlY2F1c2UgdGhlIHN0YXR1cyBvZiBhIHBhZ2UgY2FuIGNoYW5nZSBhZnRlciBt
aW5jb3JlKCkgY2hlY2tzIGl0Ci0gKiBidXQgYmVmb3JlIGl0IHJldHVybnMgdG8gdGhlIGFwcGxp
Y2F0aW9uLCB0aGUgcmV0dXJuZWQgdmVjdG9yIG1heQotICogY29udGFpbiBzdGFsZSBpbmZvcm1h
dGlvbi4gIE9ubHkgbG9ja2VkIHBhZ2VzIGFyZSBndWFyYW50ZWVkIHRvCi0gKiByZW1haW4gaW4g
bWVtb3J5LgotICoKLSAqIHJldHVybiB2YWx1ZXM6Ci0gKiAgemVybyAgICAtIHN1Y2Nlc3MKLSAq
ICAtRUZBVUxUIC0gdmVjIHBvaW50cyB0byBhbiBpbGxlZ2FsIGFkZHJlc3MKLSAqICAtRUlOVkFM
IC0gYWRkciBpcyBub3QgYSBtdWx0aXBsZSBvZiBQQUdFX1NJWkUKLSAqICAtRU5PTUVNIC0gQWRk
cmVzc2VzIGluIHRoZSByYW5nZSBbYWRkciwgYWRkciArIGxlbl0gYXJlCi0gKgkJaW52YWxpZCBm
b3IgdGhlIGFkZHJlc3Mgc3BhY2Ugb2YgdGhpcyBwcm9jZXNzLCBvcgotICoJCXNwZWNpZnkgb25l
IG9yIG1vcmUgcGFnZXMgd2hpY2ggYXJlIG5vdCBjdXJyZW50bHkKLSAqCQltYXBwZWQKLSAqICAt
RUFHQUlOIC0gQSBrZXJuZWwgcmVzb3VyY2Ugd2FzIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlLgot
ICovCi1TWVNDQUxMX0RFRklORTMobWluY29yZSwgdW5zaWduZWQgbG9uZywgc3RhcnQsIHNpemVf
dCwgbGVuLAotCQl1bnNpZ25lZCBjaGFyIF9fdXNlciAqLCB2ZWMpCitsb25nIGtzeXNfbWluY29y
ZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCBzaXplX3QgbGVuLCB1bnNpZ25lZCBjaGFyIF9fdXNlciAq
dmVjKQogewogCWxvbmcgcmV0dmFsOwogCXVuc2lnbmVkIGxvbmcgcGFnZXM7CkBAIC0yNzEsMyAr
MjQ2LDMzIEBAIFNZU0NBTExfREVGSU5FMyhtaW5jb3JlLCB1bnNpZ25lZCBsb25nLCBzdGFydCwg
c2l6ZV90LCBsZW4sCiAJZnJlZV9wYWdlKCh1bnNpZ25lZCBsb25nKSB0bXApOwogCXJldHVybiBy
ZXR2YWw7CiB9CisKKy8qCisgKiBUaGUgbWluY29yZSgyKSBzeXN0ZW0gY2FsbC4KKyAqCisgKiBt
aW5jb3JlKCkgcmV0dXJucyB0aGUgbWVtb3J5IHJlc2lkZW5jeSBzdGF0dXMgb2YgdGhlIHBhZ2Vz
IGluIHRoZQorICogY3VycmVudCBwcm9jZXNzJ3MgYWRkcmVzcyBzcGFjZSBzcGVjaWZpZWQgYnkg
W2FkZHIsIGFkZHIgKyBsZW4pLgorICogVGhlIHN0YXR1cyBpcyByZXR1cm5lZCBpbiBhIHZlY3Rv
ciBvZiBieXRlcy4gIFRoZSBsZWFzdCBzaWduaWZpY2FudAorICogYml0IG9mIGVhY2ggYnl0ZSBp
cyAxIGlmIHRoZSByZWZlcmVuY2VkIHBhZ2UgaXMgaW4gbWVtb3J5LCBvdGhlcndpc2UKKyAqIGl0
IGlzIHplcm8uCisgKgorICogQmVjYXVzZSB0aGUgc3RhdHVzIG9mIGEgcGFnZSBjYW4gY2hhbmdl
IGFmdGVyIG1pbmNvcmUoKSBjaGVja3MgaXQKKyAqIGJ1dCBiZWZvcmUgaXQgcmV0dXJucyB0byB0
aGUgYXBwbGljYXRpb24sIHRoZSByZXR1cm5lZCB2ZWN0b3IgbWF5CisgKiBjb250YWluIHN0YWxl
IGluZm9ybWF0aW9uLiAgT25seSBsb2NrZWQgcGFnZXMgYXJlIGd1YXJhbnRlZWQgdG8KKyAqIHJl
bWFpbiBpbiBtZW1vcnkuCisgKgorICogcmV0dXJuIHZhbHVlczoKKyAqICB6ZXJvICAgIC0gc3Vj
Y2VzcworICogIC1FRkFVTFQgLSB2ZWMgcG9pbnRzIHRvIGFuIGlsbGVnYWwgYWRkcmVzcworICog
IC1FSU5WQUwgLSBhZGRyIGlzIG5vdCBhIG11bHRpcGxlIG9mIFBBR0VfU0laRQorICogIC1FTk9N
RU0gLSBBZGRyZXNzZXMgaW4gdGhlIHJhbmdlIFthZGRyLCBhZGRyICsgbGVuXSBhcmUKKyAqCQlp
bnZhbGlkIGZvciB0aGUgYWRkcmVzcyBzcGFjZSBvZiB0aGlzIHByb2Nlc3MsIG9yCisgKgkJc3Bl
Y2lmeSBvbmUgb3IgbW9yZSBwYWdlcyB3aGljaCBhcmUgbm90IGN1cnJlbnRseQorICoJCW1hcHBl
ZAorICogIC1FQUdBSU4gLSBBIGtlcm5lbCByZXNvdXJjZSB3YXMgdGVtcG9yYXJpbHkgdW5hdmFp
bGFibGUuCisgKi8KK1NZU0NBTExfREVGSU5FMyhtaW5jb3JlLCB1bnNpZ25lZCBsb25nLCBzdGFy
dCwgc2l6ZV90LCBsZW4sCisJCXVuc2lnbmVkIGNoYXIgX191c2VyICosIHZlYykKK3sKKwlyZXR1
cm4ga3N5c19taW5jb3JlKHN0YXJ0LCBsZW4sIHZlYyk7Cit9CmRpZmYgLS1naXQgYS9tbS9tbG9j
ay5jIGIvbW0vbWxvY2suYwppbmRleCAwODBmM2IzNjQxNWIuLjA5ZTQ0OTQ0NzUzOSAxMDA2NDQK
LS0tIGEvbW0vbWxvY2suYworKysgYi9tbS9tbG9jay5jCkBAIC02NjgsNyArNjY4LDcgQEAgc3Rh
dGljIGludCBjb3VudF9tbV9tbG9ja2VkX3BhZ2VfbnIoc3RydWN0IG1tX3N0cnVjdCAqbW0sCiAJ
cmV0dXJuIGNvdW50ID4+IFBBR0VfU0hJRlQ7CiB9CiAKLXN0YXRpYyBfX211c3RfY2hlY2sgaW50
IGRvX21sb2NrKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHNpemVfdCBsZW4sIHZtX2ZsYWdzX3QgZmxh
Z3MpCitfX211c3RfY2hlY2sgaW50IGtzeXNfbWxvY2sodW5zaWduZWQgbG9uZyBzdGFydCwgc2l6
ZV90IGxlbiwgdm1fZmxhZ3NfdCBmbGFncykKIHsKIAl1bnNpZ25lZCBsb25nIGxvY2tlZDsKIAl1
bnNpZ25lZCBsb25nIGxvY2tfbGltaXQ7CkBAIC03MTUsMTAgKzcxNSwxMCBAQCBzdGF0aWMgX19t
dXN0X2NoZWNrIGludCBkb19tbG9jayh1bnNpZ25lZCBsb25nIHN0YXJ0LCBzaXplX3QgbGVuLCB2
bV9mbGFnc190IGZsYQogCiBTWVNDQUxMX0RFRklORTIobWxvY2ssIHVuc2lnbmVkIGxvbmcsIHN0
YXJ0LCBzaXplX3QsIGxlbikKIHsKLQlyZXR1cm4gZG9fbWxvY2soc3RhcnQsIGxlbiwgVk1fTE9D
S0VEKTsKKwlyZXR1cm4ga3N5c19tbG9jayhzdGFydCwgbGVuLCBWTV9MT0NLRUQpOwogfQogCi1T
WVNDQUxMX0RFRklORTMobWxvY2syLCB1bnNpZ25lZCBsb25nLCBzdGFydCwgc2l6ZV90LCBsZW4s
IGludCwgZmxhZ3MpCitfX211c3RfY2hlY2sgaW50IGtzeXNfbWxvY2syKHVuc2lnbmVkIGxvbmcg
c3RhcnQsIHNpemVfdCBsZW4sIHZtX2ZsYWdzX3QgZmxhZ3MpCiB7CiAJdm1fZmxhZ3NfdCB2bV9m
bGFncyA9IFZNX0xPQ0tFRDsKIApAQCAtNzI4LDEwICs3MjgsMTUgQEAgU1lTQ0FMTF9ERUZJTkUz
KG1sb2NrMiwgdW5zaWduZWQgbG9uZywgc3RhcnQsIHNpemVfdCwgbGVuLCBpbnQsIGZsYWdzKQog
CWlmIChmbGFncyAmIE1MT0NLX09ORkFVTFQpCiAJCXZtX2ZsYWdzIHw9IFZNX0xPQ0tPTkZBVUxU
OwogCi0JcmV0dXJuIGRvX21sb2NrKHN0YXJ0LCBsZW4sIHZtX2ZsYWdzKTsKKwlyZXR1cm4ga3N5
c19tbG9jayhzdGFydCwgbGVuLCB2bV9mbGFncyk7CiB9CiAKLVNZU0NBTExfREVGSU5FMihtdW5s
b2NrLCB1bnNpZ25lZCBsb25nLCBzdGFydCwgc2l6ZV90LCBsZW4pCitTWVNDQUxMX0RFRklORTMo
bWxvY2syLCB1bnNpZ25lZCBsb25nLCBzdGFydCwgc2l6ZV90LCBsZW4sIGludCwgZmxhZ3MpCit7
CisJcmV0dXJuIGtzeXNfbWxvY2syKHN0YXJ0LCBsZW4sIGZsYWdzKTsKK30KKworaW50IGtzeXNf
bXVubG9jayh1bnNpZ25lZCBsb25nIHN0YXJ0LCBzaXplX3QgbGVuKQogewogCWludCByZXQ7CiAK
QEAgLTc0Niw2ICs3NTEsMTEgQEAgU1lTQ0FMTF9ERUZJTkUyKG11bmxvY2ssIHVuc2lnbmVkIGxv
bmcsIHN0YXJ0LCBzaXplX3QsIGxlbikKIAlyZXR1cm4gcmV0OwogfQogCitTWVNDQUxMX0RFRklO
RTIobXVubG9jaywgdW5zaWduZWQgbG9uZywgc3RhcnQsIHNpemVfdCwgbGVuKQoreworCXJldHVy
biBrc3lzX211bmxvY2soc3RhcnQsIGxlbik7Cit9CisKIC8qCiAgKiBUYWtlIHRoZSBNQ0xfKiBm
bGFncyBwYXNzZWQgaW50byBtbG9ja2FsbCAob3IgMCBpZiBjYWxsZWQgZnJvbSBtdW5sb2NrYWxs
KQogICogYW5kIHRyYW5zbGF0ZSBpbnRvIHRoZSBhcHByb3ByaWF0ZSBtb2RpZmljYXRpb25zIHRv
IG1tLT5kZWZfZmxhZ3MgYW5kL29yIHRoZQpkaWZmIC0tZ2l0IGEvbW0vbW1hcC5jIGIvbW0vbW1h
cC5jCmluZGV4IGJkN2I5ZjI5M2IzOS4uMDliZmFmMzZiOTYxIDEwMDY0NAotLS0gYS9tbS9tbWFw
LmMKKysrIGIvbW0vbW1hcC5jCkBAIC0xODksNyArMTg5LDggQEAgc3RhdGljIHN0cnVjdCB2bV9h
cmVhX3N0cnVjdCAqcmVtb3ZlX3ZtYShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSkKIAogc3Rh
dGljIGludCBkb19icmtfZmxhZ3ModW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIHJl
cXVlc3QsIHVuc2lnbmVkIGxvbmcgZmxhZ3MsCiAJCXN0cnVjdCBsaXN0X2hlYWQgKnVmKTsKLVNZ
U0NBTExfREVGSU5FMShicmssIHVuc2lnbmVkIGxvbmcsIGJyaykKKwordW5zaWduZWQgbG9uZyBr
c3lzX2Jyayh1bnNpZ25lZCBsb25nIGJyaykKIHsKIAl1bnNpZ25lZCBsb25nIHJldHZhbDsKIAl1
bnNpZ25lZCBsb25nIG5ld2Jyaywgb2xkYnJrLCBvcmlnYnJrOwpAQCAtMjg4LDYgKzI4OSwxMSBA
QCBTWVNDQUxMX0RFRklORTEoYnJrLCB1bnNpZ25lZCBsb25nLCBicmspCiAJcmV0dXJuIHJldHZh
bDsKIH0KIAorU1lTQ0FMTF9ERUZJTkUxKGJyaywgdW5zaWduZWQgbG9uZywgYnJrKQoreworCXJl
dHVybiBrc3lzX2JyayhicmspOworfQorCiBzdGF0aWMgbG9uZyB2bWFfY29tcHV0ZV9zdWJ0cmVl
X2dhcChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSkKIHsKIAl1bnNpZ25lZCBsb25nIG1heCwg
cHJldl9lbmQsIHN1YnRyZWVfZ2FwOwpAQCAtMjg3MCwxOCArMjg3NiwxOSBAQCBpbnQgdm1fbXVu
bWFwKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHNpemVfdCBsZW4pCiB9CiBFWFBPUlRfU1lNQk9MKHZt
X211bm1hcCk7CiAKLVNZU0NBTExfREVGSU5FMihtdW5tYXAsIHVuc2lnbmVkIGxvbmcsIGFkZHIs
IHNpemVfdCwgbGVuKQoraW50IGtzeXNfbXVubWFwKHVuc2lnbmVkIGxvbmcgYWRkciwgc2l6ZV90
IGxlbikKIHsKIAlwcm9maWxlX211bm1hcChhZGRyKTsKIAlyZXR1cm4gX192bV9tdW5tYXAoYWRk
ciwgbGVuLCB0cnVlKTsKIH0KIAorU1lTQ0FMTF9ERUZJTkUyKG11bm1hcCwgdW5zaWduZWQgbG9u
ZywgYWRkciwgc2l6ZV90LCBsZW4pCit7CisJcmV0dXJuIGtzeXNfbXVubWFwKGFkZHIsIGxlbik7
Cit9CiAKLS8qCi0gKiBFbXVsYXRpb24gb2YgZGVwcmVjYXRlZCByZW1hcF9maWxlX3BhZ2VzKCkg
c3lzY2FsbC4KLSAqLwotU1lTQ0FMTF9ERUZJTkU1KHJlbWFwX2ZpbGVfcGFnZXMsIHVuc2lnbmVk
IGxvbmcsIHN0YXJ0LCB1bnNpZ25lZCBsb25nLCBzaXplLAotCQl1bnNpZ25lZCBsb25nLCBwcm90
LCB1bnNpZ25lZCBsb25nLCBwZ29mZiwgdW5zaWduZWQgbG9uZywgZmxhZ3MpCit1bnNpZ25lZCBs
b25nIGtzeXNfcmVtYXBfZmlsZV9wYWdlcyh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBs
b25nIHNpemUsCisJCXVuc2lnbmVkIGxvbmcgcHJvdCwgdW5zaWduZWQgbG9uZyBwZ29mZiwgdW5z
aWduZWQgbG9uZyBmbGFncykKIHsKIAogCXN0cnVjdCBtbV9zdHJ1Y3QgKm1tID0gY3VycmVudC0+
bW07CkBAIC0yOTc2LDYgKzI5ODMsMTUgQEAgU1lTQ0FMTF9ERUZJTkU1KHJlbWFwX2ZpbGVfcGFn
ZXMsIHVuc2lnbmVkIGxvbmcsIHN0YXJ0LCB1bnNpZ25lZCBsb25nLCBzaXplLAogCXJldHVybiBy
ZXQ7CiB9CiAKKy8qCisgKiBFbXVsYXRpb24gb2YgZGVwcmVjYXRlZCByZW1hcF9maWxlX3BhZ2Vz
KCkgc3lzY2FsbC4KKyAqLworU1lTQ0FMTF9ERUZJTkU1KHJlbWFwX2ZpbGVfcGFnZXMsIHVuc2ln
bmVkIGxvbmcsIHN0YXJ0LCB1bnNpZ25lZCBsb25nLCBzaXplLAorCQl1bnNpZ25lZCBsb25nLCBw
cm90LCB1bnNpZ25lZCBsb25nLCBwZ29mZiwgdW5zaWduZWQgbG9uZywgZmxhZ3MpCit7CisJcmV0
dXJuIGtzeXNfcmVtYXBfZmlsZV9wYWdlcyhzdGFydCwgc2l6ZSwgcHJvdCwgcGdvZmYsIGZsYWdz
KTsKK30KKwogLyoKICAqICB0aGlzIGlzIHJlYWxseSBhIHNpbXBsaWZpZWQgImRvX21tYXAiLiAg
aXQgb25seSBoYW5kbGVzCiAgKiAgYW5vbnltb3VzIG1hcHMuICBldmVudHVhbGx5IHdlIG1heSBi
ZSBhYmxlIHRvIGRvIHNvbWUKZGlmZiAtLWdpdCBhL21tL21wcm90ZWN0LmMgYi9tbS9tcHJvdGVj
dC5jCmluZGV4IDAyOGM3MjRkY2IxYS4uMDczNDRiZGQ3YTA0IDEwMDY0NAotLS0gYS9tbS9tcHJv
dGVjdC5jCisrKyBiL21tL21wcm90ZWN0LmMKQEAgLTQ1NCw3ICs0NTQsNyBAQCBtcHJvdGVjdF9m
aXh1cChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoq
cHByZXYsCiAvKgogICogcGtleT09LTEgd2hlbiBkb2luZyBhIGxlZ2FjeSBtcHJvdGVjdCgpCiAg
Ki8KLXN0YXRpYyBpbnQgZG9fbXByb3RlY3RfcGtleSh1bnNpZ25lZCBsb25nIHN0YXJ0LCBzaXpl
X3QgbGVuLAoraW50IGtzeXNfbXByb3RlY3RfcGtleSh1bnNpZ25lZCBsb25nIHN0YXJ0LCBzaXpl
X3QgbGVuLAogCQl1bnNpZ25lZCBsb25nIHByb3QsIGludCBwa2V5KQogewogCXVuc2lnbmVkIGxv
bmcgbnN0YXJ0LCBlbmQsIHRtcCwgcmVxcHJvdDsKQEAgLTU3OCw3ICs1NzgsNyBAQCBzdGF0aWMg
aW50IGRvX21wcm90ZWN0X3BrZXkodW5zaWduZWQgbG9uZyBzdGFydCwgc2l6ZV90IGxlbiwKIFNZ
U0NBTExfREVGSU5FMyhtcHJvdGVjdCwgdW5zaWduZWQgbG9uZywgc3RhcnQsIHNpemVfdCwgbGVu
LAogCQl1bnNpZ25lZCBsb25nLCBwcm90KQogewotCXJldHVybiBkb19tcHJvdGVjdF9wa2V5KHN0
YXJ0LCBsZW4sIHByb3QsIC0xKTsKKwlyZXR1cm4ga3N5c19tcHJvdGVjdF9wa2V5KHN0YXJ0LCBs
ZW4sIHByb3QsIC0xKTsKIH0KIAogI2lmZGVmIENPTkZJR19BUkNIX0hBU19QS0VZUwpAQCAtNTg2
LDcgKzU4Niw3IEBAIFNZU0NBTExfREVGSU5FMyhtcHJvdGVjdCwgdW5zaWduZWQgbG9uZywgc3Rh
cnQsIHNpemVfdCwgbGVuLAogU1lTQ0FMTF9ERUZJTkU0KHBrZXlfbXByb3RlY3QsIHVuc2lnbmVk
IGxvbmcsIHN0YXJ0LCBzaXplX3QsIGxlbiwKIAkJdW5zaWduZWQgbG9uZywgcHJvdCwgaW50LCBw
a2V5KQogewotCXJldHVybiBkb19tcHJvdGVjdF9wa2V5KHN0YXJ0LCBsZW4sIHByb3QsIHBrZXkp
OworCXJldHVybiBrc3lzX21wcm90ZWN0X3BrZXkoc3RhcnQsIGxlbiwgcHJvdCwgcGtleSk7CiB9
CiAKIFNZU0NBTExfREVGSU5FMihwa2V5X2FsbG9jLCB1bnNpZ25lZCBsb25nLCBmbGFncywgdW5z
aWduZWQgbG9uZywgaW5pdF92YWwpCmRpZmYgLS1naXQgYS9tbS9tcmVtYXAuYyBiL21tL21yZW1h
cC5jCmluZGV4IGUzZWRlZjZiN2ExMi4uZmVjMWY5OTExMzg4IDEwMDY0NAotLS0gYS9tbS9tcmVt
YXAuYworKysgYi9tbS9tcmVtYXAuYwpAQCAtNTg0LDE2ICs1ODQsOSBAQCBzdGF0aWMgaW50IHZt
YV9leHBhbmRhYmxlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGRl
bHRhKQogCXJldHVybiAxOwogfQogCi0vKgotICogRXhwYW5kIChvciBzaHJpbmspIGFuIGV4aXN0
aW5nIG1hcHBpbmcsIHBvdGVudGlhbGx5IG1vdmluZyBpdCBhdCB0aGUKLSAqIHNhbWUgdGltZSAo
Y29udHJvbGxlZCBieSB0aGUgTVJFTUFQX01BWU1PVkUgZmxhZyBhbmQgYXZhaWxhYmxlIFZNIHNw
YWNlKQotICoKLSAqIE1SRU1BUF9GSVhFRCBvcHRpb24gYWRkZWQgNS1EZWMtMTk5OSBieSBCZW5q
YW1pbiBMYUhhaXNlCi0gKiBUaGlzIG9wdGlvbiBpbXBsaWVzIE1SRU1BUF9NQVlNT1ZFLgotICov
Ci1TWVNDQUxMX0RFRklORTUobXJlbWFwLCB1bnNpZ25lZCBsb25nLCBhZGRyLCB1bnNpZ25lZCBs
b25nLCBvbGRfbGVuLAotCQl1bnNpZ25lZCBsb25nLCBuZXdfbGVuLCB1bnNpZ25lZCBsb25nLCBm
bGFncywKLQkJdW5zaWduZWQgbG9uZywgbmV3X2FkZHIpCit1bnNpZ25lZCBsb25nIGtzeXNfbXJl
bWFwKHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBvbGRfbGVuLAorCQkJdW5zaWdu
ZWQgbG9uZyBuZXdfbGVuLCB1bnNpZ25lZCBsb25nIGZsYWdzLAorCQkJdW5zaWduZWQgbG9uZyBu
ZXdfYWRkcikKIHsKIAlzdHJ1Y3QgbW1fc3RydWN0ICptbSA9IGN1cnJlbnQtPm1tOwogCXN0cnVj
dCB2bV9hcmVhX3N0cnVjdCAqdm1hOwpAQCAtNzI2LDMgKzcxOSwxNyBAQCBTWVNDQUxMX0RFRklO
RTUobXJlbWFwLCB1bnNpZ25lZCBsb25nLCBhZGRyLCB1bnNpZ25lZCBsb25nLCBvbGRfbGVuLAog
CXVzZXJmYXVsdGZkX3VubWFwX2NvbXBsZXRlKG1tLCAmdWZfdW5tYXApOwogCXJldHVybiByZXQ7
CiB9CisKKy8qCisgKiBFeHBhbmQgKG9yIHNocmluaykgYW4gZXhpc3RpbmcgbWFwcGluZywgcG90
ZW50aWFsbHkgbW92aW5nIGl0IGF0IHRoZQorICogc2FtZSB0aW1lIChjb250cm9sbGVkIGJ5IHRo
ZSBNUkVNQVBfTUFZTU9WRSBmbGFnIGFuZCBhdmFpbGFibGUgVk0gc3BhY2UpCisgKgorICogTVJF
TUFQX0ZJWEVEIG9wdGlvbiBhZGRlZCA1LURlYy0xOTk5IGJ5IEJlbmphbWluIExhSGFpc2UKKyAq
IFRoaXMgb3B0aW9uIGltcGxpZXMgTVJFTUFQX01BWU1PVkUuCisgKi8KK1NZU0NBTExfREVGSU5F
NShtcmVtYXAsIHVuc2lnbmVkIGxvbmcsIGFkZHIsIHVuc2lnbmVkIGxvbmcsIG9sZF9sZW4sCisJ
CXVuc2lnbmVkIGxvbmcsIG5ld19sZW4sIHVuc2lnbmVkIGxvbmcsIGZsYWdzLAorCQl1bnNpZ25l
ZCBsb25nLCBuZXdfYWRkcikKK3sKKwlyZXR1cm4ga3N5c19tcmVtYXAoYWRkciwgb2xkX2xlbiwg
bmV3X2xlbiwgZmxhZ3MsIG5ld19hZGRyKTsKK30KZGlmZiAtLWdpdCBhL21tL21zeW5jLmMgYi9t
bS9tc3luYy5jCmluZGV4IGVmMzBhNDI5NjIzYS4uYjVhMDEzNTQ5NjI2IDEwMDY0NAotLS0gYS9t
bS9tc3luYy5jCisrKyBiL21tL21zeW5jLmMKQEAgLTE1LDIxICsxNSw3IEBACiAjaW5jbHVkZSA8
bGludXgvc3lzY2FsbHMuaD4KICNpbmNsdWRlIDxsaW51eC9zY2hlZC5oPgogCi0vKgotICogTVNf
U1lOQyBzeW5jcyB0aGUgZW50aXJlIGZpbGUgLSBpbmNsdWRpbmcgbWFwcGluZ3MuCi0gKgotICog
TVNfQVNZTkMgZG9lcyBub3Qgc3RhcnQgSS9PIChpdCB1c2VkIHRvLCB1cCB0byAyLjUuNjcpLgot
ICogTm9yIGRvZXMgaXQgbWFya3MgdGhlIHJlbGV2YW50IHBhZ2VzIGRpcnR5IChpdCB1c2VkIHRv
IHVwIHRvIDIuNi4xNykuCi0gKiBOb3cgaXQgZG9lc24ndCBkbyBhbnl0aGluZywgc2luY2UgZGly
dHkgcGFnZXMgYXJlIHByb3Blcmx5IHRyYWNrZWQuCi0gKgotICogVGhlIGFwcGxpY2F0aW9uIG1h
eSBub3cgcnVuIGZzeW5jKCkgdG8KLSAqIHdyaXRlIG91dCB0aGUgZGlydHkgcGFnZXMgYW5kIHdh
aXQgb24gdGhlIHdyaXRlb3V0IGFuZCBjaGVjayB0aGUgcmVzdWx0LgotICogT3IgdGhlIGFwcGxp
Y2F0aW9uIG1heSBydW4gZmFkdmlzZShGQURWX0RPTlRORUVEKSBhZ2FpbnN0IHRoZSBmZCB0byBz
dGFydAotICogYXN5bmMgd3JpdGVvdXQgaW1tZWRpYXRlbHkuCi0gKiBTbyBieSBfbm90XyBzdGFy
dGluZyBJL08gaW4gTVNfQVNZTkMgd2UgcHJvdmlkZSBjb21wbGV0ZSBmbGV4aWJpbGl0eSB0bwot
ICogYXBwbGljYXRpb25zLgotICovCi1TWVNDQUxMX0RFRklORTMobXN5bmMsIHVuc2lnbmVkIGxv
bmcsIHN0YXJ0LCBzaXplX3QsIGxlbiwgaW50LCBmbGFncykKK2ludCBrc3lzX21zeW5jKHVuc2ln
bmVkIGxvbmcgc3RhcnQsIHNpemVfdCBsZW4sIGludCBmbGFncykKIHsKIAl1bnNpZ25lZCBsb25n
IGVuZDsKIAlzdHJ1Y3QgbW1fc3RydWN0ICptbSA9IGN1cnJlbnQtPm1tOwpAQCAtMTA2LDMgKzky
LDIyIEBAIFNZU0NBTExfREVGSU5FMyhtc3luYywgdW5zaWduZWQgbG9uZywgc3RhcnQsIHNpemVf
dCwgbGVuLCBpbnQsIGZsYWdzKQogb3V0OgogCXJldHVybiBlcnJvciA/IDogdW5tYXBwZWRfZXJy
b3I7CiB9CisKKy8qCisgKiBNU19TWU5DIHN5bmNzIHRoZSBlbnRpcmUgZmlsZSAtIGluY2x1ZGlu
ZyBtYXBwaW5ncy4KKyAqCisgKiBNU19BU1lOQyBkb2VzIG5vdCBzdGFydCBJL08gKGl0IHVzZWQg
dG8sIHVwIHRvIDIuNS42NykuCisgKiBOb3IgZG9lcyBpdCBtYXJrcyB0aGUgcmVsZXZhbnQgcGFn
ZXMgZGlydHkgKGl0IHVzZWQgdG8gdXAgdG8gMi42LjE3KS4KKyAqIE5vdyBpdCBkb2Vzbid0IGRv
IGFueXRoaW5nLCBzaW5jZSBkaXJ0eSBwYWdlcyBhcmUgcHJvcGVybHkgdHJhY2tlZC4KKyAqCisg
KiBUaGUgYXBwbGljYXRpb24gbWF5IG5vdyBydW4gZnN5bmMoKSB0bworICogd3JpdGUgb3V0IHRo
ZSBkaXJ0eSBwYWdlcyBhbmQgd2FpdCBvbiB0aGUgd3JpdGVvdXQgYW5kIGNoZWNrIHRoZSByZXN1
bHQuCisgKiBPciB0aGUgYXBwbGljYXRpb24gbWF5IHJ1biBmYWR2aXNlKEZBRFZfRE9OVE5FRUQp
IGFnYWluc3QgdGhlIGZkIHRvIHN0YXJ0CisgKiBhc3luYyB3cml0ZW91dCBpbW1lZGlhdGVseS4K
KyAqIFNvIGJ5IF9ub3RfIHN0YXJ0aW5nIEkvTyBpbiBNU19BU1lOQyB3ZSBwcm92aWRlIGNvbXBs
ZXRlIGZsZXhpYmlsaXR5IHRvCisgKiBhcHBsaWNhdGlvbnMuCisgKi8KK1NZU0NBTExfREVGSU5F
Myhtc3luYywgdW5zaWduZWQgbG9uZywgc3RhcnQsIHNpemVfdCwgbGVuLCBpbnQsIGZsYWdzKQor
eworCXJldHVybiBrc3lzX21zeW5jKHN0YXJ0LCBsZW4sIGZsYWdzKTsKK30KLS0gCjIuMjEuMC4x
MDIwLmdmMjgyMGNmMDFhLWdvb2cKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fCmRyaS1kZXZlbCBtYWlsaW5nIGxpc3QKZHJpLWRldmVsQGxpc3RzLmZyZWVk
ZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xpc3RpbmZv
L2RyaS1kZXZlbA==
