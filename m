Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 493ED498D8
	for <lists+dri-devel@lfdr.de>; Tue, 18 Jun 2019 08:25:19 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 4E1016E0E1;
	Tue, 18 Jun 2019 06:25:15 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from ste-pvt-msa1.bahnhof.se (ste-pvt-msa1.bahnhof.se
 [213.80.101.70])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 3FFCC6E0DA
 for <dri-devel@lists.freedesktop.org>; Tue, 18 Jun 2019 06:25:11 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by ste-pvt-msa1.bahnhof.se (Postfix) with ESMTP id A69713F970;
 Tue, 18 Jun 2019 08:25:09 +0200 (CEST)
X-Virus-Scanned: Debian amavisd-new at bahnhof.se
X-Spam-Flag: NO
X-Spam-Score: -3.099
X-Spam-Level: 
X-Spam-Status: No, score=-3.099 tagged_above=-999 required=6.31
 tests=[ALL_TRUSTED=-1, BAYES_00=-1.9, DKIM_SIGNED=0.1,
 DKIM_VALID=-0.1, DKIM_VALID_AU=-0.1, DKIM_VALID_EF=-0.1,
 URIBL_BLOCKED=0.001] autolearn=ham autolearn_force=no
Received: from ste-pvt-msa1.bahnhof.se ([127.0.0.1])
 by localhost (ste-pvt-msa1.bahnhof.se [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id rPM8Y_ziSsD5; Tue, 18 Jun 2019 08:24:57 +0200 (CEST)
Received: from mail1.shipmail.org (h-205-35.A357.priv.bahnhof.se
 [155.4.205.35]) (Authenticated sender: mb878879)
 by ste-pvt-msa1.bahnhof.se (Postfix) with ESMTPA id 763093F462;
 Tue, 18 Jun 2019 08:24:57 +0200 (CEST)
Received: from localhost.localdomain.localdomain
 (h-205-35.A357.priv.bahnhof.se [155.4.205.35])
 by mail1.shipmail.org (Postfix) with ESMTPSA id 3CA9B36197E;
 Tue, 18 Jun 2019 08:24:57 +0200 (CEST)
From: =?UTF-8?q?Thomas=20Hellstr=C3=B6m=20=28VMware=29?= <thomas@shipmail.org>
To: dri-devel@lists.freedesktop.org
Subject: [PATCH 4/4] drm/vmwgfx: Kill unneeded legacy security features
Date: Tue, 18 Jun 2019 08:24:42 +0200
Message-Id: <20190618062442.14647-4-thomas@shipmail.org>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190618062442.14647-1-thomas@shipmail.org>
References: <20190618062442.14647-1-thomas@shipmail.org>
MIME-Version: 1.0
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
 d=shipmail.org; s=mail; 
 t=1560839097; bh=8HheSq2Oign1rmCAo4TBR86lvuFCQhzbiuwzKSMPifw=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=mtgCzpIcKTEH3+An1MYhVyZ5ydjYXknb43u1ielAy168XeTFW1N9H4eE8iLqGH9yk
 eIfxZ/O1gqpDY0zF+cKZJBUHyhKrh9IIelIX2TTp0PrGsmEU8jZ/i8wt0zrD2nlV+o
 NjzrxROWI6Llvdh1TPtkjNlMpIJEzjecKmanGi8M=
X-Mailman-Original-Authentication-Results: ste-pvt-msa1.bahnhof.se;
 dkim=pass (1024-bit key;
 unprotected) header.d=shipmail.org header.i=@shipmail.org header.b=mtgCzpIc; 
 dkim-atps=neutral
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: pv-drivers@vmware.com, Brian Paul <brianp@vmware.com>,
 Thomas Hellstrom <thellstrom@vmware.com>, Deepak Rawat <drawat@vmware.com>,
 linux-graphics-maintainer@vmware.com
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

RnJvbTogVGhvbWFzIEhlbGxzdHJvbSA8dGhlbGxzdHJvbUB2bXdhcmUuY29tPgoKQXQgb25lIHBv
aW50LCB0aGUgR1BVIGNvbW1hbmQgdmVyaWZpZXIgYW5kIHVzZXItc3BhY2UgaGFuZGxlIG1hbmFn
ZXIKY291bGRuJ3QgcHJvcGVybHkgcHJvdGVjdCBHUFUgY2xpZW50cyBmcm9tIGFjY2Vzc2luZyBl
YWNoIG90aGVyJ3MgZGF0YS4KSW5zdGVhZCB0aGVyZSB3YXMgYW4gZWxhYm9yYXRlIG1lY2hhbmlz
bSB0byBtYWtlIHN1cmUgb25seSB0aGUgYWN0aXZlCm1hc3RlcidzIHByaW1hcnkgY2xpZW50cyBj
b3VsZCByZW5kZXIuIFRoZSBvdGhlciBjbGllbnRzIHdlcmUgZWl0aGVyCnB1dCB0byBzbGVlcCBv
ciBldmVuIGtpbGxlZCAoaWYgdGhlIG1hc3RlciBoYWQgZXhpdGVkKS4gVlJBTSB3YXMKZXZpY3Rl
ZCBvbiBtYXN0ZXIgc3dpdGNoLiBXaXRoIHRoZSBhZHZlbnQgb2YgcmVuZGVyLW5vZGUgZnVuY3Rp
b25hbGl0eSwKd2UgcmVsYXhlZCB0aGUgVlJBTSBldmljdGlvbiwgYnV0IHRoZSBvdGhlciBtZWNo
YW5pc21zIHN0YXllZCBpbiBwbGFjZS4KCk5vdyB0aGF0IHRoZSBHUFUgIGNvbW1hbmQgdmVyaWZp
ZXIgYW5kIHR0bSBvYmplY3QgbWFuYWdlciBwcm9wZXJseQppc29sYXRlcyBwcmltYXJ5IGNsaWVu
dHMgZnJvbSBkaWZmZXJlbnQgbWFzdGVyIHJlYWxtcyB3ZSBjYW4gcmVtb3ZlIHRoZQptYXN0ZXIg
c3dpdGNoIHJlbGF0ZWQgY29kZSBhbmQgZHJvcCB0aG9zZSBsZWdhY3kgZmVhdHVyZXMuCgpTaWdu
ZWQtb2ZmLWJ5OiBUaG9tYXMgSGVsbHN0cm9tIDx0aGVsbHN0cm9tQHZtd2FyZS5jb20+ClJldmll
d2VkLWJ5OiBCcmlhbiBQYXVsIDxicmlhbnBAdm13YXJlLmNvbT4KUmV2aWV3ZWQtYnk6IERlZXBh
ayBSYXdhdCA8ZHJhd2F0QHZtd2FyZS5jb20+Ci0tLQogZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC90
dG1fbG9jay5jICAgICAgIHwgMTAwIC0tLS0tLS0tLS0tLS0tLQogZHJpdmVycy9ncHUvZHJtL3Zt
d2dmeC90dG1fbG9jay5oICAgICAgIHwgIDMwIC0tLS0tCiBkcml2ZXJzL2dwdS9kcm0vdm13Z2Z4
L3Ztd2dmeF9kcnYuYyAgICAgfCAxNjIgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiBkcml2ZXJz
L2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9kcnYuaCAgICAgfCAgMTYgKy0tCiBkcml2ZXJzL2dwdS9k
cm0vdm13Z2Z4L3Ztd2dmeF9zdXJmYWNlLmMgfCAgIDYgLQogNSBmaWxlcyBjaGFuZ2VkLCAzIGlu
c2VydGlvbnMoKyksIDMxMSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9k
cm0vdm13Z2Z4L3R0bV9sb2NrLmMgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3R0bV9sb2NrLmMK
aW5kZXggMTZiMjA4M2NiOWQ0Li41OTcxYzcyZTZkMTAgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1
L2RybS92bXdnZngvdHRtX2xvY2suYworKysgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3R0bV9s
b2NrLmMKQEAgLTI5LDcgKzI5LDYgQEAKICAqIEF1dGhvcnM6IFRob21hcyBIZWxsc3Ryb20gPHRo
ZWxsc3Ryb20tYXQtdm13YXJlLWRvdC1jb20+CiAgKi8KIAotI2luY2x1ZGUgPGRybS90dG0vdHRt
X21vZHVsZS5oPgogI2luY2x1ZGUgPGxpbnV4L2F0b21pYy5oPgogI2luY2x1ZGUgPGxpbnV4L2Vy
cm5vLmg+CiAjaW5jbHVkZSA8bGludXgvd2FpdC5oPgpAQCAtNDksOCArNDgsNiBAQCB2b2lkIHR0
bV9sb2NrX2luaXQoc3RydWN0IHR0bV9sb2NrICpsb2NrKQogCWluaXRfd2FpdHF1ZXVlX2hlYWQo
JmxvY2stPnF1ZXVlKTsKIAlsb2NrLT5ydyA9IDA7CiAJbG9jay0+ZmxhZ3MgPSAwOwotCWxvY2st
PmtpbGxfdGFrZXJzID0gZmFsc2U7Ci0JbG9jay0+c2lnbmFsID0gU0lHS0lMTDsKIH0KIAogdm9p
ZCB0dG1fcmVhZF91bmxvY2soc3RydWN0IHR0bV9sb2NrICpsb2NrKQpAQCAtNjYsMTEgKzYzLDYg
QEAgc3RhdGljIGJvb2wgX190dG1fcmVhZF9sb2NrKHN0cnVjdCB0dG1fbG9jayAqbG9jaykKIAli
b29sIGxvY2tlZCA9IGZhbHNlOwogCiAJc3Bpbl9sb2NrKCZsb2NrLT5sb2NrKTsKLQlpZiAodW5s
aWtlbHkobG9jay0+a2lsbF90YWtlcnMpKSB7Ci0JCXNlbmRfc2lnKGxvY2stPnNpZ25hbCwgY3Vy
cmVudCwgMCk7Ci0JCXNwaW5fdW5sb2NrKCZsb2NrLT5sb2NrKTsKLQkJcmV0dXJuIGZhbHNlOwot
CX0KIAlpZiAobG9jay0+cncgPj0gMCAmJiBsb2NrLT5mbGFncyA9PSAwKSB7CiAJCSsrbG9jay0+
cnc7CiAJCWxvY2tlZCA9IHRydWU7CkBAIC05OCwxMSArOTAsNiBAQCBzdGF0aWMgYm9vbCBfX3R0
bV9yZWFkX3RyeWxvY2soc3RydWN0IHR0bV9sb2NrICpsb2NrLCBib29sICpsb2NrZWQpCiAJKmxv
Y2tlZCA9IGZhbHNlOwogCiAJc3Bpbl9sb2NrKCZsb2NrLT5sb2NrKTsKLQlpZiAodW5saWtlbHko
bG9jay0+a2lsbF90YWtlcnMpKSB7Ci0JCXNlbmRfc2lnKGxvY2stPnNpZ25hbCwgY3VycmVudCwg
MCk7Ci0JCXNwaW5fdW5sb2NrKCZsb2NrLT5sb2NrKTsKLQkJcmV0dXJuIGZhbHNlOwotCX0KIAlp
ZiAobG9jay0+cncgPj0gMCAmJiBsb2NrLT5mbGFncyA9PSAwKSB7CiAJCSsrbG9jay0+cnc7CiAJ
CWJsb2NrID0gZmFsc2U7CkBAIC0xNDcsMTEgKzEzNCw2IEBAIHN0YXRpYyBib29sIF9fdHRtX3dy
aXRlX2xvY2soc3RydWN0IHR0bV9sb2NrICpsb2NrKQogCWJvb2wgbG9ja2VkID0gZmFsc2U7CiAK
IAlzcGluX2xvY2soJmxvY2stPmxvY2spOwotCWlmICh1bmxpa2VseShsb2NrLT5raWxsX3Rha2Vy
cykpIHsKLQkJc2VuZF9zaWcobG9jay0+c2lnbmFsLCBjdXJyZW50LCAwKTsKLQkJc3Bpbl91bmxv
Y2soJmxvY2stPmxvY2spOwotCQlyZXR1cm4gZmFsc2U7Ci0JfQogCWlmIChsb2NrLT5ydyA9PSAw
ICYmICgobG9jay0+ZmxhZ3MgJiB+VFRNX1dSSVRFX0xPQ0tfUEVORElORykgPT0gMCkpIHsKIAkJ
bG9jay0+cncgPSAtMTsKIAkJbG9jay0+ZmxhZ3MgJj0gflRUTV9XUklURV9MT0NLX1BFTkRJTkc7
CkBAIC0xODIsODggKzE2NCw2IEBAIGludCB0dG1fd3JpdGVfbG9jayhzdHJ1Y3QgdHRtX2xvY2sg
KmxvY2ssIGJvb2wgaW50ZXJydXB0aWJsZSkKIAlyZXR1cm4gcmV0OwogfQogCi1zdGF0aWMgaW50
IF9fdHRtX3Z0X3VubG9jayhzdHJ1Y3QgdHRtX2xvY2sgKmxvY2spCi17Ci0JaW50IHJldCA9IDA7
Ci0KLQlzcGluX2xvY2soJmxvY2stPmxvY2spOwotCWlmICh1bmxpa2VseSghKGxvY2stPmZsYWdz
ICYgVFRNX1ZUX0xPQ0spKSkKLQkJcmV0ID0gLUVJTlZBTDsKLQlsb2NrLT5mbGFncyAmPSB+VFRN
X1ZUX0xPQ0s7Ci0Jd2FrZV91cF9hbGwoJmxvY2stPnF1ZXVlKTsKLQlzcGluX3VubG9jaygmbG9j
ay0+bG9jayk7Ci0KLQlyZXR1cm4gcmV0OwotfQotCi1zdGF0aWMgdm9pZCB0dG1fdnRfbG9ja19y
ZW1vdmUoc3RydWN0IHR0bV9iYXNlX29iamVjdCAqKnBfYmFzZSkKLXsKLQlzdHJ1Y3QgdHRtX2Jh
c2Vfb2JqZWN0ICpiYXNlID0gKnBfYmFzZTsKLQlzdHJ1Y3QgdHRtX2xvY2sgKmxvY2sgPSBjb250
YWluZXJfb2YoYmFzZSwgc3RydWN0IHR0bV9sb2NrLCBiYXNlKTsKLQlpbnQgcmV0OwotCi0JKnBf
YmFzZSA9IE5VTEw7Ci0JcmV0ID0gX190dG1fdnRfdW5sb2NrKGxvY2spOwotCUJVR19PTihyZXQg
IT0gMCk7Ci19Ci0KLXN0YXRpYyBib29sIF9fdHRtX3Z0X2xvY2soc3RydWN0IHR0bV9sb2NrICps
b2NrKQotewotCWJvb2wgbG9ja2VkID0gZmFsc2U7Ci0KLQlzcGluX2xvY2soJmxvY2stPmxvY2sp
OwotCWlmIChsb2NrLT5ydyA9PSAwKSB7Ci0JCWxvY2stPmZsYWdzICY9IH5UVE1fVlRfTE9DS19Q
RU5ESU5HOwotCQlsb2NrLT5mbGFncyB8PSBUVE1fVlRfTE9DSzsKLQkJbG9ja2VkID0gdHJ1ZTsK
LQl9IGVsc2UgewotCQlsb2NrLT5mbGFncyB8PSBUVE1fVlRfTE9DS19QRU5ESU5HOwotCX0KLQlz
cGluX3VubG9jaygmbG9jay0+bG9jayk7Ci0JcmV0dXJuIGxvY2tlZDsKLX0KLQotaW50IHR0bV92
dF9sb2NrKHN0cnVjdCB0dG1fbG9jayAqbG9jaywKLQkJYm9vbCBpbnRlcnJ1cHRpYmxlLAotCQlz
dHJ1Y3QgdHRtX29iamVjdF9maWxlICp0ZmlsZSkKLXsKLQlpbnQgcmV0ID0gMDsKLQotCWlmIChp
bnRlcnJ1cHRpYmxlKSB7Ci0JCXJldCA9IHdhaXRfZXZlbnRfaW50ZXJydXB0aWJsZShsb2NrLT5x
dWV1ZSwKLQkJCQkJICAgICAgIF9fdHRtX3Z0X2xvY2sobG9jaykpOwotCQlpZiAodW5saWtlbHko
cmV0ICE9IDApKSB7Ci0JCQlzcGluX2xvY2soJmxvY2stPmxvY2spOwotCQkJbG9jay0+ZmxhZ3Mg
Jj0gflRUTV9WVF9MT0NLX1BFTkRJTkc7Ci0JCQl3YWtlX3VwX2FsbCgmbG9jay0+cXVldWUpOwot
CQkJc3Bpbl91bmxvY2soJmxvY2stPmxvY2spOwotCQkJcmV0dXJuIHJldDsKLQkJfQotCX0gZWxz
ZQotCQl3YWl0X2V2ZW50KGxvY2stPnF1ZXVlLCBfX3R0bV92dF9sb2NrKGxvY2spKTsKLQotCS8q
Ci0JICogQWRkIGEgYmFzZS1vYmplY3QsIHRoZSBkZXN0cnVjdG9yIG9mIHdoaWNoIHdpbGwKLQkg
KiBtYWtlIHN1cmUgdGhlIGxvY2sgaXMgcmVsZWFzZWQgaWYgdGhlIGNsaWVudCBkaWVzCi0JICog
d2hpbGUgaG9sZGluZyBpdC4KLQkgKi8KLQotCXJldCA9IHR0bV9iYXNlX29iamVjdF9pbml0KHRm
aWxlLCAmbG9jay0+YmFzZSwgZmFsc2UsCi0JCQkJICAgdHRtX2xvY2tfdHlwZSwgJnR0bV92dF9s
b2NrX3JlbW92ZSwgTlVMTCk7Ci0JaWYgKHJldCkKLQkJKHZvaWQpX190dG1fdnRfdW5sb2NrKGxv
Y2spOwotCWVsc2UKLQkJbG9jay0+dnRfaG9sZGVyID0gdGZpbGU7Ci0KLQlyZXR1cm4gcmV0Owot
fQotCi1pbnQgdHRtX3Z0X3VubG9jayhzdHJ1Y3QgdHRtX2xvY2sgKmxvY2spCi17Ci0JcmV0dXJu
IHR0bV9yZWZfb2JqZWN0X2Jhc2VfdW5yZWYobG9jay0+dnRfaG9sZGVyLAotCQkJCQkgbG9jay0+
YmFzZS5oYW5kbGUsIFRUTV9SRUZfVVNBR0UpOwotfQotCiB2b2lkIHR0bV9zdXNwZW5kX3VubG9j
ayhzdHJ1Y3QgdHRtX2xvY2sgKmxvY2spCiB7CiAJc3Bpbl9sb2NrKCZsb2NrLT5sb2NrKTsKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdHRtX2xvY2suaCBiL2RyaXZlcnMvZ3B1
L2RybS92bXdnZngvdHRtX2xvY2suaAppbmRleCAwYzNhZjk4MzY4NjMuLjNkNDU0ZThiNDkxZiAx
MDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC90dG1fbG9jay5oCisrKyBiL2RyaXZl
cnMvZ3B1L2RybS92bXdnZngvdHRtX2xvY2suaApAQCAtNjMsOCArNjMsNiBAQAogICogQGxvY2s6
IFNwaW5sb2NrIHByb3RlY3Rpbmcgc29tZSBsb2NrIG1lbWJlcnMuCiAgKiBAcnc6IFJlYWQtd3Jp
dGUgbG9jayBjb3VudGVyLiBQcm90ZWN0ZWQgYnkgQGxvY2suCiAgKiBAZmxhZ3M6IExvY2sgc3Rh
dGUuIFByb3RlY3RlZCBieSBAbG9jay4KLSAqIEBraWxsX3Rha2VyczogQm9vbGVhbiB3aGV0aGVy
IHRvIGtpbGwgdGFrZXJzIG9mIHRoZSBsb2NrLgotICogQHNpZ25hbDogU2lnbmFsIHRvIHNlbmQg
d2hlbiBraWxsX3Rha2VycyBpcyB0cnVlLgogICovCiAKIHN0cnVjdCB0dG1fbG9jayB7CkBAIC03
Myw5ICs3MSw2IEBAIHN0cnVjdCB0dG1fbG9jayB7CiAJc3BpbmxvY2tfdCBsb2NrOwogCWludDMy
X3Qgcnc7CiAJdWludDMyX3QgZmxhZ3M7Ci0JYm9vbCBraWxsX3Rha2VyczsKLQlpbnQgc2lnbmFs
OwotCXN0cnVjdCB0dG1fb2JqZWN0X2ZpbGUgKnZ0X2hvbGRlcjsKIH07CiAKIApAQCAtMjIwLDI5
ICsyMTUsNCBAQCBleHRlcm4gdm9pZCB0dG1fd3JpdGVfdW5sb2NrKHN0cnVjdCB0dG1fbG9jayAq
bG9jayk7CiAgKi8KIGV4dGVybiBpbnQgdHRtX3dyaXRlX2xvY2soc3RydWN0IHR0bV9sb2NrICps
b2NrLCBib29sIGludGVycnVwdGlibGUpOwogCi0vKioKLSAqIHR0bV9sb2NrX3NldF9raWxsCi0g
KgotICogQGxvY2s6IFBvaW50ZXIgdG8gYSBzdHJ1Y3QgdHRtX2xvY2sKLSAqIEB2YWw6IEJvb2xl
YW4gd2hldGhlciB0byBraWxsIHByb2Nlc3NlcyB0YWtpbmcgdGhlIGxvY2suCi0gKiBAc2lnbmFs
OiBTaWduYWwgdG8gc2VuZCB0byB0aGUgcHJvY2VzcyB0YWtpbmcgdGhlIGxvY2suCi0gKgotICog
VGhlIGtpbGwtd2hlbi10YWtpbmctbG9jayBmdW5jdGlvbmFsaXR5IGlzIHVzZWQgdG8ga2lsbCBw
cm9jZXNzZXMgdGhhdCBrZWVwCi0gKiBvbiB1c2luZyB0aGUgVFRNIGZ1bmN0aW9uYWxpdHkgd2hl
biBpdHMgcmVzb3VyY2VzIGhhcyBiZWVuIHRha2VuIGRvd24sIGZvcgotICogZXhhbXBsZSB3aGVu
IHRoZSBYIHNlcnZlciBleGl0cy4gQSB0eXBpY2FsIHNlcXVlbmNlIHdvdWxkIGxvb2sgbGlrZSB0
aGlzOgotICogLSBYIHNlcnZlciB0YWtlcyBsb2NrIGluIHdyaXRlIG1vZGUuCi0gKiAtIHR0bV9s
b2NrX3NldF9raWxsKCkgaXMgY2FsbGVkIHdpdGggQHZhbCBzZXQgdG8gdHJ1ZS4KLSAqIC0gQXMg
cGFydCBvZiBYIHNlcnZlciBleGl0LCBUVE0gcmVzb3VyY2VzIGFyZSB0YWtlbiBkb3duLgotICog
LSBYIHNlcnZlciByZWxlYXNlcyB0aGUgbG9jayBvbiBmaWxlIHJlbGVhc2UuCi0gKiAtIEFub3Ro
ZXIgZHJpIGNsaWVudCB3YW50cyB0byByZW5kZXIsIHRha2VzIHRoZSBsb2NrIGFuZCBpcyBraWxs
ZWQuCi0gKgotICovCi1zdGF0aWMgaW5saW5lIHZvaWQgdHRtX2xvY2tfc2V0X2tpbGwoc3RydWN0
IHR0bV9sb2NrICpsb2NrLCBib29sIHZhbCwKLQkJCQkgICAgIGludCBzaWduYWwpCi17Ci0JbG9j
ay0+a2lsbF90YWtlcnMgPSB2YWw7Ci0JaWYgKHZhbCkKLQkJbG9jay0+c2lnbmFsID0gc2lnbmFs
OwotfQotCiAjZW5kaWYKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4
X2Rydi5jIGIvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfZHJ2LmMKaW5kZXggZDU5YzQ3
NGJlMzhlLi44MzQ5YTZjYzEyNmYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngv
dm13Z2Z4X2Rydi5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X2Rydi5jCkBA
IC0yNTQsNyArMjU0LDYgQEAgc3RhdGljIGludCB2bXdfcmVzdHJpY3RfZG1hX21hc2s7CiBzdGF0
aWMgaW50IHZtd19hc3N1bWVfMTZicHA7CiAKIHN0YXRpYyBpbnQgdm13X3Byb2JlKHN0cnVjdCBw
Y2lfZGV2ICosIGNvbnN0IHN0cnVjdCBwY2lfZGV2aWNlX2lkICopOwotc3RhdGljIHZvaWQgdm13
X21hc3Rlcl9pbml0KHN0cnVjdCB2bXdfbWFzdGVyICopOwogc3RhdGljIGludCB2bXdnZnhfcG1f
bm90aWZpZXIoc3RydWN0IG5vdGlmaWVyX2Jsb2NrICpuYiwgdW5zaWduZWQgbG9uZyB2YWwsCiAJ
CQkgICAgICB2b2lkICpwdHIpOwogCkBAIC03NjIsMTAgKzc2MSw2IEBAIHN0YXRpYyBpbnQgdm13
X2RyaXZlcl9sb2FkKHN0cnVjdCBkcm1fZGV2aWNlICpkZXYsIHVuc2lnbmVkIGxvbmcgY2hpcHNl
dCkKIAlEUk1fSU5GTygiTU1JTyBhdCAweCUwOHggc2l6ZSBpcyAldSBraUJcbiIsCiAJCSBkZXZf
cHJpdi0+bW1pb19zdGFydCwgZGV2X3ByaXYtPm1taW9fc2l6ZSAvIDEwMjQpOwogCi0Jdm13X21h
c3Rlcl9pbml0KCZkZXZfcHJpdi0+ZmJkZXZfbWFzdGVyKTsKLQl0dG1fbG9ja19zZXRfa2lsbCgm
ZGV2X3ByaXYtPmZiZGV2X21hc3Rlci5sb2NrLCBmYWxzZSwgU0lHVEVSTSk7Ci0JZGV2X3ByaXYt
PmFjdGl2ZV9tYXN0ZXIgPSAmZGV2X3ByaXYtPmZiZGV2X21hc3RlcjsKLQogCWRldl9wcml2LT5t
bWlvX3ZpcnQgPSBtZW1yZW1hcChkZXZfcHJpdi0+bW1pb19zdGFydCwKIAkJCQkgICAgICAgZGV2
X3ByaXYtPm1taW9fc2l6ZSwgTUVNUkVNQVBfV0IpOwogCkBAIC0xMDEyLDE4ICsxMDA3LDcgQEAg
c3RhdGljIHZvaWQgdm13X2RyaXZlcl91bmxvYWQoc3RydWN0IGRybV9kZXZpY2UgKmRldikKIHN0
YXRpYyB2b2lkIHZtd19wb3N0Y2xvc2Uoc3RydWN0IGRybV9kZXZpY2UgKmRldiwKIAkJCSBzdHJ1
Y3QgZHJtX2ZpbGUgKmZpbGVfcHJpdikKIHsKLQlzdHJ1Y3Qgdm13X2Zwcml2ICp2bXdfZnA7Ci0K
LQl2bXdfZnAgPSB2bXdfZnByaXYoZmlsZV9wcml2KTsKLQotCWlmICh2bXdfZnAtPmxvY2tlZF9t
YXN0ZXIpIHsKLQkJc3RydWN0IHZtd19tYXN0ZXIgKnZtYXN0ZXIgPQotCQkJdm13X21hc3Rlcih2
bXdfZnAtPmxvY2tlZF9tYXN0ZXIpOwotCi0JCXR0bV9sb2NrX3NldF9raWxsKCZ2bWFzdGVyLT5s
b2NrLCB0cnVlLCBTSUdURVJNKTsKLQkJdHRtX3Z0X3VubG9jaygmdm1hc3Rlci0+bG9jayk7Ci0J
CWRybV9tYXN0ZXJfcHV0KCZ2bXdfZnAtPmxvY2tlZF9tYXN0ZXIpOwotCX0KKwlzdHJ1Y3Qgdm13
X2Zwcml2ICp2bXdfZnAgPSB2bXdfZnByaXYoZmlsZV9wcml2KTsKIAogCXR0bV9vYmplY3RfZmls
ZV9yZWxlYXNlKCZ2bXdfZnAtPnRmaWxlKTsKIAlrZnJlZSh2bXdfZnApOwpAQCAtMTA1Miw1NSAr
MTAzNiw2IEBAIHN0YXRpYyBpbnQgdm13X2RyaXZlcl9vcGVuKHN0cnVjdCBkcm1fZGV2aWNlICpk
ZXYsIHN0cnVjdCBkcm1fZmlsZSAqZmlsZV9wcml2KQogCXJldHVybiByZXQ7CiB9CiAKLXN0YXRp
YyBzdHJ1Y3Qgdm13X21hc3RlciAqdm13X21hc3Rlcl9jaGVjayhzdHJ1Y3QgZHJtX2RldmljZSAq
ZGV2LAotCQkJCQkgICBzdHJ1Y3QgZHJtX2ZpbGUgKmZpbGVfcHJpdiwKLQkJCQkJICAgdW5zaWdu
ZWQgaW50IGZsYWdzKQotewotCWludCByZXQ7Ci0Jc3RydWN0IHZtd19mcHJpdiAqdm13X2ZwID0g
dm13X2Zwcml2KGZpbGVfcHJpdik7Ci0Jc3RydWN0IHZtd19tYXN0ZXIgKnZtYXN0ZXI7Ci0KLQlp
ZiAoIWRybV9pc19wcmltYXJ5X2NsaWVudChmaWxlX3ByaXYpIHx8ICEoZmxhZ3MgJiBEUk1fQVVU
SCkpCi0JCXJldHVybiBOVUxMOwotCi0JcmV0ID0gbXV0ZXhfbG9ja19pbnRlcnJ1cHRpYmxlKCZk
ZXYtPm1hc3Rlcl9tdXRleCk7Ci0JaWYgKHVubGlrZWx5KHJldCAhPSAwKSkKLQkJcmV0dXJuIEVS
Ul9QVFIoLUVSRVNUQVJUU1lTKTsKLQotCWlmIChkcm1faXNfY3VycmVudF9tYXN0ZXIoZmlsZV9w
cml2KSkgewotCQltdXRleF91bmxvY2soJmRldi0+bWFzdGVyX211dGV4KTsKLQkJcmV0dXJuIE5V
TEw7Ci0JfQotCi0JLyoKLQkgKiBDaGVjayBpZiB3ZSB3ZXJlIHByZXZpb3VzbHkgbWFzdGVyLCBi
dXQgbm93IGRyb3BwZWQuIEluIHRoYXQKLQkgKiBjYXNlLCBhbGxvdyBhdCBsZWFzdCByZW5kZXIg
bm9kZSBmdW5jdGlvbmFsaXR5LgotCSAqLwotCWlmICh2bXdfZnAtPmxvY2tlZF9tYXN0ZXIpIHsK
LQkJbXV0ZXhfdW5sb2NrKCZkZXYtPm1hc3Rlcl9tdXRleCk7Ci0KLQkJaWYgKGZsYWdzICYgRFJN
X1JFTkRFUl9BTExPVykKLQkJCXJldHVybiBOVUxMOwotCi0JCURSTV9FUlJPUigiRHJvcHBlZCBt
YXN0ZXIgdHJ5aW5nIHRvIGFjY2VzcyBpb2N0bCB0aGF0ICIKLQkJCSAgInJlcXVpcmVzIGF1dGhl
bnRpY2F0aW9uLlxuIik7Ci0JCXJldHVybiBFUlJfUFRSKC1FQUNDRVMpOwotCX0KLQltdXRleF91
bmxvY2soJmRldi0+bWFzdGVyX211dGV4KTsKLQotCS8qCi0JICogVGFrZSB0aGUgVFRNIGxvY2su
IFBvc3NpYmx5IHNsZWVwIHdhaXRpbmcgZm9yIHRoZSBhdXRoZW50aWNhdGluZwotCSAqIG1hc3Rl
ciB0byBiZWNvbWUgbWFzdGVyIGFnYWluLCBvciBmb3IgYSBTSUdURVJNIGlmIHRoZQotCSAqIGF1
dGhlbnRpY2F0aW5nIG1hc3RlciBleGl0cy4KLQkgKi8KLQl2bWFzdGVyID0gdm13X21hc3Rlcihm
aWxlX3ByaXYtPm1hc3Rlcik7Ci0JcmV0ID0gdHRtX3JlYWRfbG9jaygmdm1hc3Rlci0+bG9jaywg
dHJ1ZSk7Ci0JaWYgKHVubGlrZWx5KHJldCAhPSAwKSkKLQkJdm1hc3RlciA9IEVSUl9QVFIocmV0
KTsKLQotCXJldHVybiB2bWFzdGVyOwotfQotCiBzdGF0aWMgbG9uZyB2bXdfZ2VuZXJpY19pb2N0
bChzdHJ1Y3QgZmlsZSAqZmlscCwgdW5zaWduZWQgaW50IGNtZCwKIAkJCSAgICAgIHVuc2lnbmVk
IGxvbmcgYXJnLAogCQkJICAgICAgbG9uZyAoKmlvY3RsX2Z1bmMpKHN0cnVjdCBmaWxlICosIHVu
c2lnbmVkIGludCwKQEAgLTExMDksNyArMTA0NCw2IEBAIHN0YXRpYyBsb25nIHZtd19nZW5lcmlj
X2lvY3RsKHN0cnVjdCBmaWxlICpmaWxwLCB1bnNpZ25lZCBpbnQgY21kLAogCXN0cnVjdCBkcm1f
ZmlsZSAqZmlsZV9wcml2ID0gZmlscC0+cHJpdmF0ZV9kYXRhOwogCXN0cnVjdCBkcm1fZGV2aWNl
ICpkZXYgPSBmaWxlX3ByaXYtPm1pbm9yLT5kZXY7CiAJdW5zaWduZWQgaW50IG5yID0gRFJNX0lP
Q1RMX05SKGNtZCk7Ci0Jc3RydWN0IHZtd19tYXN0ZXIgKnZtYXN0ZXI7CiAJdW5zaWduZWQgaW50
IGZsYWdzOwogCWxvbmcgcmV0OwogCkBAIC0xMTQ1LDIxICsxMDc5LDcgQEAgc3RhdGljIGxvbmcg
dm13X2dlbmVyaWNfaW9jdGwoc3RydWN0IGZpbGUgKmZpbHAsIHVuc2lnbmVkIGludCBjbWQsCiAJ
fSBlbHNlIGlmICghZHJtX2lvY3RsX2ZsYWdzKG5yLCAmZmxhZ3MpKQogCQlyZXR1cm4gLUVJTlZB
TDsKIAotCXZtYXN0ZXIgPSB2bXdfbWFzdGVyX2NoZWNrKGRldiwgZmlsZV9wcml2LCBmbGFncyk7
Ci0JaWYgKElTX0VSUih2bWFzdGVyKSkgewotCQlyZXQgPSBQVFJfRVJSKHZtYXN0ZXIpOwotCi0J
CWlmIChyZXQgIT0gLUVSRVNUQVJUU1lTKQotCQkJRFJNX0lORk8oIklPQ1RMIEVSUk9SIENvbW1h
bmQgJWQsIEVycm9yICVsZC5cbiIsCi0JCQkJIG5yLCByZXQpOwotCQlyZXR1cm4gcmV0OwotCX0K
LQotCXJldCA9IGlvY3RsX2Z1bmMoZmlscCwgY21kLCBhcmcpOwotCWlmICh2bWFzdGVyKQotCQl0
dG1fcmVhZF91bmxvY2soJnZtYXN0ZXItPmxvY2spOwotCi0JcmV0dXJuIHJldDsKKwlyZXR1cm4g
aW9jdGxfZnVuYyhmaWxwLCBjbWQsIGFyZyk7CiAKIG91dF9pb19lbmNvZGluZzoKIAlEUk1fRVJS
T1IoIkludmFsaWQgY29tbWFuZCBmb3JtYXQsIGlvY3RsICVkXG4iLApAQCAtMTE4Niw2NSArMTEw
NiwxMCBAQCBzdGF0aWMgdm9pZCB2bXdfbGFzdGNsb3NlKHN0cnVjdCBkcm1fZGV2aWNlICpkZXYp
CiB7CiB9CiAKLXN0YXRpYyB2b2lkIHZtd19tYXN0ZXJfaW5pdChzdHJ1Y3Qgdm13X21hc3RlciAq
dm1hc3RlcikKLXsKLQl0dG1fbG9ja19pbml0KCZ2bWFzdGVyLT5sb2NrKTsKLX0KLQotc3RhdGlj
IGludCB2bXdfbWFzdGVyX2NyZWF0ZShzdHJ1Y3QgZHJtX2RldmljZSAqZGV2LAotCQkJICAgICBz
dHJ1Y3QgZHJtX21hc3RlciAqbWFzdGVyKQotewotCXN0cnVjdCB2bXdfbWFzdGVyICp2bWFzdGVy
OwotCi0Jdm1hc3RlciA9IGt6YWxsb2Moc2l6ZW9mKCp2bWFzdGVyKSwgR0ZQX0tFUk5FTCk7Ci0J
aWYgKHVubGlrZWx5KCF2bWFzdGVyKSkKLQkJcmV0dXJuIC1FTk9NRU07Ci0KLQl2bXdfbWFzdGVy
X2luaXQodm1hc3Rlcik7Ci0JdHRtX2xvY2tfc2V0X2tpbGwoJnZtYXN0ZXItPmxvY2ssIHRydWUs
IFNJR1RFUk0pOwotCW1hc3Rlci0+ZHJpdmVyX3ByaXYgPSB2bWFzdGVyOwotCi0JcmV0dXJuIDA7
Ci19Ci0KLXN0YXRpYyB2b2lkIHZtd19tYXN0ZXJfZGVzdHJveShzdHJ1Y3QgZHJtX2RldmljZSAq
ZGV2LAotCQkJICAgICAgIHN0cnVjdCBkcm1fbWFzdGVyICptYXN0ZXIpCi17Ci0Jc3RydWN0IHZt
d19tYXN0ZXIgKnZtYXN0ZXIgPSB2bXdfbWFzdGVyKG1hc3Rlcik7Ci0KLQltYXN0ZXItPmRyaXZl
cl9wcml2ID0gTlVMTDsKLQlrZnJlZSh2bWFzdGVyKTsKLX0KLQogc3RhdGljIGludCB2bXdfbWFz
dGVyX3NldChzdHJ1Y3QgZHJtX2RldmljZSAqZGV2LAogCQkJICBzdHJ1Y3QgZHJtX2ZpbGUgKmZp
bGVfcHJpdiwKIAkJCSAgYm9vbCBmcm9tX29wZW4pCiB7Ci0Jc3RydWN0IHZtd19wcml2YXRlICpk
ZXZfcHJpdiA9IHZtd19wcml2KGRldik7Ci0Jc3RydWN0IHZtd19mcHJpdiAqdm13X2ZwID0gdm13
X2Zwcml2KGZpbGVfcHJpdik7Ci0Jc3RydWN0IHZtd19tYXN0ZXIgKmFjdGl2ZSA9IGRldl9wcml2
LT5hY3RpdmVfbWFzdGVyOwotCXN0cnVjdCB2bXdfbWFzdGVyICp2bWFzdGVyID0gdm13X21hc3Rl
cihmaWxlX3ByaXYtPm1hc3Rlcik7Ci0JaW50IHJldCA9IDA7Ci0KLQlpZiAoYWN0aXZlKSB7Ci0J
CUJVR19PTihhY3RpdmUgIT0gJmRldl9wcml2LT5mYmRldl9tYXN0ZXIpOwotCQlyZXQgPSB0dG1f
dnRfbG9jaygmYWN0aXZlLT5sb2NrLCBmYWxzZSwgdm13X2ZwLT50ZmlsZSk7Ci0JCWlmICh1bmxp
a2VseShyZXQgIT0gMCkpCi0JCQlyZXR1cm4gcmV0OwotCi0JCXR0bV9sb2NrX3NldF9raWxsKCZh
Y3RpdmUtPmxvY2ssIHRydWUsIFNJR1RFUk0pOwotCQlkZXZfcHJpdi0+YWN0aXZlX21hc3RlciA9
IE5VTEw7Ci0JfQotCi0JdHRtX2xvY2tfc2V0X2tpbGwoJnZtYXN0ZXItPmxvY2ssIGZhbHNlLCBT
SUdURVJNKTsKLQlpZiAoIWZyb21fb3BlbikgewotCQl0dG1fdnRfdW5sb2NrKCZ2bWFzdGVyLT5s
b2NrKTsKLQkJQlVHX09OKHZtd19mcC0+bG9ja2VkX21hc3RlciAhPSBmaWxlX3ByaXYtPm1hc3Rl
cik7Ci0JCWRybV9tYXN0ZXJfcHV0KCZ2bXdfZnAtPmxvY2tlZF9tYXN0ZXIpOwotCX0KLQotCWRl
dl9wcml2LT5hY3RpdmVfbWFzdGVyID0gdm1hc3RlcjsKLQogCS8qCiAJICogSW5mb3JtIGEgbmV3
IG1hc3RlciB0aGF0IHRoZSBsYXlvdXQgbWF5IGhhdmUgY2hhbmdlZCB3aGlsZQogCSAqIGl0IHdh
cyBnb25lLgpAQCAtMTI1OSwzMSArMTEyNCwxMCBAQCBzdGF0aWMgdm9pZCB2bXdfbWFzdGVyX2Ry
b3Aoc3RydWN0IGRybV9kZXZpY2UgKmRldiwKIAkJCSAgICBzdHJ1Y3QgZHJtX2ZpbGUgKmZpbGVf
cHJpdikKIHsKIAlzdHJ1Y3Qgdm13X3ByaXZhdGUgKmRldl9wcml2ID0gdm13X3ByaXYoZGV2KTsK
LQlzdHJ1Y3Qgdm13X2Zwcml2ICp2bXdfZnAgPSB2bXdfZnByaXYoZmlsZV9wcml2KTsKLQlzdHJ1
Y3Qgdm13X21hc3RlciAqdm1hc3RlciA9IHZtd19tYXN0ZXIoZmlsZV9wcml2LT5tYXN0ZXIpOwot
CWludCByZXQ7Ci0KLQkvKioKLQkgKiBNYWtlIHN1cmUgdGhlIG1hc3RlciBkb2Vzbid0IGRpc2Fw
cGVhciB3aGlsZSB3ZSBoYXZlCi0JICogaXQgbG9ja2VkLgotCSAqLwogCi0Jdm13X2ZwLT5sb2Nr
ZWRfbWFzdGVyID0gZHJtX21hc3Rlcl9nZXQoZmlsZV9wcml2LT5tYXN0ZXIpOwotCXJldCA9IHR0
bV92dF9sb2NrKCZ2bWFzdGVyLT5sb2NrLCBmYWxzZSwgdm13X2ZwLT50ZmlsZSk7CiAJdm13X2tt
c19sZWdhY3lfaG90c3BvdF9jbGVhcihkZXZfcHJpdik7Ci0JaWYgKHVubGlrZWx5KChyZXQgIT0g
MCkpKSB7Ci0JCURSTV9FUlJPUigiVW5hYmxlIHRvIGxvY2sgVFRNIGF0IFZUIHN3aXRjaC5cbiIp
OwotCQlkcm1fbWFzdGVyX3B1dCgmdm13X2ZwLT5sb2NrZWRfbWFzdGVyKTsKLQl9Ci0KLQl0dG1f
bG9ja19zZXRfa2lsbCgmdm1hc3Rlci0+bG9jaywgZmFsc2UsIFNJR1RFUk0pOwotCiAJaWYgKCFk
ZXZfcHJpdi0+ZW5hYmxlX2ZiKQogCQl2bXdfc3ZnYV9kaXNhYmxlKGRldl9wcml2KTsKLQotCWRl
dl9wcml2LT5hY3RpdmVfbWFzdGVyID0gJmRldl9wcml2LT5mYmRldl9tYXN0ZXI7Ci0JdHRtX2xv
Y2tfc2V0X2tpbGwoJmRldl9wcml2LT5mYmRldl9tYXN0ZXIubG9jaywgZmFsc2UsIFNJR1RFUk0p
OwotCXR0bV92dF91bmxvY2soJmRldl9wcml2LT5mYmRldl9tYXN0ZXIubG9jayk7CiB9CiAKIC8q
KgpAQCAtMTU2Miw4ICsxNDA2LDYgQEAgc3RhdGljIHN0cnVjdCBkcm1fZHJpdmVyIGRyaXZlciA9
IHsKIAkuZGlzYWJsZV92YmxhbmsgPSB2bXdfZGlzYWJsZV92YmxhbmssCiAJLmlvY3RscyA9IHZt
d19pb2N0bHMsCiAJLm51bV9pb2N0bHMgPSBBUlJBWV9TSVpFKHZtd19pb2N0bHMpLAotCS5tYXN0
ZXJfY3JlYXRlID0gdm13X21hc3Rlcl9jcmVhdGUsCi0JLm1hc3Rlcl9kZXN0cm95ID0gdm13X21h
c3Rlcl9kZXN0cm95LAogCS5tYXN0ZXJfc2V0ID0gdm13X21hc3Rlcl9zZXQsCiAJLm1hc3Rlcl9k
cm9wID0gdm13X21hc3Rlcl9kcm9wLAogCS5vcGVuID0gdm13X2RyaXZlcl9vcGVuLApkaWZmIC0t
Z2l0IGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfZHJ2LmggYi9kcml2ZXJzL2dwdS9k
cm0vdm13Z2Z4L3Ztd2dmeF9kcnYuaAppbmRleCBiNGM4ODE3ZGMyNjcuLjNhMzU4YTU0OTVlNCAx
MDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfZHJ2LmgKKysrIGIvZHJp
dmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfZHJ2LmgKQEAgLTgxLDcgKzgxLDYgQEAKICNkZWZp
bmUgVk1XX1JFU19TSEFERVIgdHRtX2RyaXZlcl90eXBlNAogCiBzdHJ1Y3Qgdm13X2Zwcml2IHsK
LQlzdHJ1Y3QgZHJtX21hc3RlciAqbG9ja2VkX21hc3RlcjsKIAlzdHJ1Y3QgdHRtX29iamVjdF9m
aWxlICp0ZmlsZTsKIAlib29sIGdiX2F3YXJlOyAvKiB1c2VyLXNwYWNlIGlzIGd1ZXN0LWJhY2tl
ZCBhd2FyZSAqLwogfTsKQEAgLTM5MywxMCArMzkyLDYgQEAgc3RydWN0IHZtd19zd19jb250ZXh0
ewogc3RydWN0IHZtd19sZWdhY3lfZGlzcGxheTsKIHN0cnVjdCB2bXdfb3ZlcmxheTsKIAotc3Ry
dWN0IHZtd19tYXN0ZXIgewotCXN0cnVjdCB0dG1fbG9jayBsb2NrOwotfTsKLQogc3RydWN0IHZt
d192Z2FfdG9wb2xvZ3lfc3RhdGUgewogCXVpbnQzMl90IHdpZHRoOwogCXVpbnQzMl90IGhlaWdo
dDsKQEAgLTU1OSwxMSArNTU0LDggQEAgc3RydWN0IHZtd19wcml2YXRlIHsKIAlzcGlubG9ja190
IHN2Z2FfbG9jazsKIAogCS8qKgotCSAqIE1hc3RlciBtYW5hZ2VtZW50LgorCSAqIFBNIG1hbmFn
ZW1lbnQuCiAJICovCi0KLQlzdHJ1Y3Qgdm13X21hc3RlciAqYWN0aXZlX21hc3RlcjsKLQlzdHJ1
Y3Qgdm13X21hc3RlciBmYmRldl9tYXN0ZXI7CiAJc3RydWN0IG5vdGlmaWVyX2Jsb2NrIHBtX25i
OwogCWJvb2wgcmVmdXNlX2hpYmVybmF0aW9uOwogCWJvb2wgc3VzcGVuZF9sb2NrZWQ7CkBAIC02
MzIsMTEgKzYyNCw2IEBAIHN0YXRpYyBpbmxpbmUgc3RydWN0IHZtd19mcHJpdiAqdm13X2Zwcml2
KHN0cnVjdCBkcm1fZmlsZSAqZmlsZV9wcml2KQogCXJldHVybiAoc3RydWN0IHZtd19mcHJpdiAq
KWZpbGVfcHJpdi0+ZHJpdmVyX3ByaXY7CiB9CiAKLXN0YXRpYyBpbmxpbmUgc3RydWN0IHZtd19t
YXN0ZXIgKnZtd19tYXN0ZXIoc3RydWN0IGRybV9tYXN0ZXIgKm1hc3RlcikKLXsKLQlyZXR1cm4g
KHN0cnVjdCB2bXdfbWFzdGVyICopIG1hc3Rlci0+ZHJpdmVyX3ByaXY7Ci19Ci0KIC8qCiAgKiBU
aGUgbG9ja2luZyBoZXJlIGlzIGZpbmUtZ3JhaW5lZCwgc28gdGhhdCBpdCBpcyBwZXJmb3JtZWQg
b25jZQogICogZm9yIGV2ZXJ5IHJlYWQtIGFuZCB3cml0ZSBvcGVyYXRpb24uIFRoaXMgaXMgb2Yg
Y291cnNlIGNvc3RseSwgYnV0IHdlCkBAIC0xMTAyLDcgKzEwODksNiBAQCB2b2lkIHZtd19rbXNf
Y3Vyc29yX3Nub29wKHN0cnVjdCB2bXdfc3VyZmFjZSAqc3JmLAogaW50IHZtd19rbXNfd3JpdGVf
c3ZnYShzdHJ1Y3Qgdm13X3ByaXZhdGUgKnZtd19wcml2LAogCQkgICAgICAgdW5zaWduZWQgd2lk
dGgsIHVuc2lnbmVkIGhlaWdodCwgdW5zaWduZWQgcGl0Y2gsCiAJCSAgICAgICB1bnNpZ25lZCBi
cHAsIHVuc2lnbmVkIGRlcHRoKTsKLXZvaWQgdm13X2ttc19pZGxlX3dvcmtxdWV1ZXMoc3RydWN0
IHZtd19tYXN0ZXIgKnZtYXN0ZXIpOwogYm9vbCB2bXdfa21zX3ZhbGlkYXRlX21vZGVfdnJhbShz
dHJ1Y3Qgdm13X3ByaXZhdGUgKmRldl9wcml2LAogCQkJCXVpbnQzMl90IHBpdGNoLAogCQkJCXVp
bnQzMl90IGhlaWdodCk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dm
eF9zdXJmYWNlLmMgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9zdXJmYWNlLmMKaW5k
ZXggNjM3MDQzZjFiZWZhLi44NjJjYTQ0NjgwY2EgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2Ry
bS92bXdnZngvdm13Z2Z4X3N1cmZhY2UuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Zt
d2dmeF9zdXJmYWNlLmMKQEAgLTk0NiwxMiArOTQ2LDYgQEAgdm13X3N1cmZhY2VfaGFuZGxlX3Jl
ZmVyZW5jZShzdHJ1Y3Qgdm13X3ByaXZhdGUgKmRldl9wcml2LAogCQlpZiAodW5saWtlbHkoZHJt
X2lzX3JlbmRlcl9jbGllbnQoZmlsZV9wcml2KSkpCiAJCQlyZXF1aXJlX2V4aXN0ID0gdHJ1ZTsK
IAotCQlpZiAoUkVBRF9PTkNFKHZtd19mcHJpdihmaWxlX3ByaXYpLT5sb2NrZWRfbWFzdGVyKSkg
ewotCQkJRFJNX0VSUk9SKCJMb2NrZWQgbWFzdGVyIHJlZnVzZWQgbGVnYWN5ICIKLQkJCQkgICJz
dXJmYWNlIHJlZmVyZW5jZS5cbiIpOwotCQkJcmV0dXJuIC1FQUNDRVM7Ci0JCX0KLQogCQloYW5k
bGUgPSB1X2hhbmRsZTsKIAl9CiAKLS0gCjIuMjAuMQoKX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX18KZHJpLWRldmVsIG1haWxpbmcgbGlzdApkcmktZGV2ZWxA
bGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3JnL21haWxt
YW4vbGlzdGluZm8vZHJpLWRldmVs
