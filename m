Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id C3B9C8C6461
	for <lists+dri-devel@lfdr.de>; Wed, 15 May 2024 11:56:52 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 1C68410E53B;
	Wed, 15 May 2024 09:56:48 +0000 (UTC)
Authentication-Results: gabe.freedesktop.org;
	dkim=pass (2048-bit key; unprotected) header.d=intel.com header.i=@intel.com header.b="i3buWgzr";
	dkim-atps=neutral
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.21])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 12B1C10E53B
 for <dri-devel@lists.freedesktop.org>; Wed, 15 May 2024 09:56:45 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
 t=1715767006; x=1747303006;
 h=from:to:subject:in-reply-to:references:date:message-id:
 mime-version; bh=U+L4XsrB0uizqZ9ivxYWgSvRZV6FPutrCTtoT8FDyg4=;
 b=i3buWgzrmczfCZtusDnlqEVZBOg+OaBC67SwGViYLVKUP3F++1nTSYrK
 kDQUUfCyh66zJ+g0UBITBIEZt79lt0gu0nAiV5M4YQ1Mg8CB70CXmiU0l
 zrYedP0zoDDXHIFJCI3pxXcuVdECNIUrzxiGOWdaFlZ3Nj2Kf7XGIgvPU
 Mp/MojlMNDwt4vtyJHvkh5leSZFtcwevJmqEfna5RM1aToyLMcT6ykWse
 RSIvvgezi1D35oaHoDiIT3na+JefIa/BFyyqcnlsGuO9/XwGqsWPc6RhX
 fUE0iaU/mNK8gInYI5kEInJRJeDzYYI/lD7uy3kAtjdxlQvl4VlZ4EUgC g==;
X-CSE-ConnectionGUID: p/0C87QsSS+a5qwWkhcHJQ==
X-CSE-MsgGUID: CrwagrtmRw6KXXVgKlWFAA==
X-IronPort-AV: E=McAfee;i="6600,9927,11073"; a="11749388"
X-IronPort-AV: E=Sophos;i="6.08,161,1712646000"; d="scan'208";a="11749388"
Received: from fmviesa003.fm.intel.com ([10.60.135.143])
 by orvoesa113.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 15 May 2024 02:56:10 -0700
X-CSE-ConnectionGUID: CI7I1U0nQ4CmVxrlcOmOxg==
X-CSE-MsgGUID: x8z32otJTZ+ct5a4Nrh8yw==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.08,161,1712646000"; d="scan'208";a="35546362"
Received: from mwiniars-desk2.ger.corp.intel.com (HELO localhost)
 ([10.245.246.141])
 by fmviesa003-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 15 May 2024 02:56:08 -0700
From: Jani Nikula <jani.nikula@linux.intel.com>
To: Michal Wajdeczko <michal.wajdeczko@intel.com>,
 dri-devel@lists.freedesktop.org
Subject: Re: [RFC] drm/print: Introduce drm_line_printer
In-Reply-To: <20240514145631.2128-1-michal.wajdeczko@intel.com>
Organization: Intel Finland Oy - BIC 0357606-4 - Westendinkatu 7, 02160 Espoo
References: <20240514145631.2128-1-michal.wajdeczko@intel.com>
Date: Wed, 15 May 2024 12:56:05 +0300
Message-ID: <87seyjcsay.fsf@intel.com>
MIME-Version: 1.0
Content-Type: text/plain
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

On Tue, 14 May 2024, Michal Wajdeczko <michal.wajdeczko@intel.com> wrote:
> This drm printer wrapper can be used to increase the robustness of
> the captured output generated by any other drm_printer to make sure
> we didn't lost any intermediate lines of the output by adding line
> numbers to each output line. Helpful for capturing some crash data.

Interesting. Nothing another level of abstraction can't solve. ;)

Except maybe it'll make adding function names to debug printers harder.

No strong feelings either way about it, I'll let others chime in.

A few comments inline.


BR,
Jani.

>
> Signed-off-by: Michal Wajdeczko <michal.wajdeczko@intel.com>
> ---
>  drivers/gpu/drm/drm_print.c |  9 +++++++++
>  include/drm/drm_print.h     | 37 +++++++++++++++++++++++++++++++++++++
>  2 files changed, 46 insertions(+)
>
> diff --git a/drivers/gpu/drm/drm_print.c b/drivers/gpu/drm/drm_print.c
> index cf2efb44722c..d6fb50d3407a 100644
> --- a/drivers/gpu/drm/drm_print.c
> +++ b/drivers/gpu/drm/drm_print.c
> @@ -214,6 +214,15 @@ void __drm_printfn_err(struct drm_printer *p, struct va_format *vaf)
>  }
>  EXPORT_SYMBOL(__drm_printfn_err);
>  
> +void __drm_printfn_line(struct drm_printer *p, struct va_format *vaf)
> +{
> +	unsigned int line = (uintptr_t)(++p->prefix);

Subtle. Might warrant adding a union in struct drm_printer for clarity.

> +	struct drm_printer *dp = p->arg;
> +
> +	drm_printf(dp, "%u: %pV", line, vaf);
> +}
> +EXPORT_SYMBOL(__drm_printfn_line);
> +
>  /**
>   * drm_puts - print a const string to a &drm_printer stream
>   * @p: the &drm printer
> diff --git a/include/drm/drm_print.h b/include/drm/drm_print.h
> index 089950ad8681..58cc73c53853 100644
> --- a/include/drm/drm_print.h
> +++ b/include/drm/drm_print.h
> @@ -186,6 +186,7 @@ void __drm_puts_seq_file(struct drm_printer *p, const char *str);
>  void __drm_printfn_info(struct drm_printer *p, struct va_format *vaf);
>  void __drm_printfn_dbg(struct drm_printer *p, struct va_format *vaf);
>  void __drm_printfn_err(struct drm_printer *p, struct va_format *vaf);
> +void __drm_printfn_line(struct drm_printer *p, struct va_format *vaf);
>  
>  __printf(2, 3)
>  void drm_printf(struct drm_printer *p, const char *f, ...);
> @@ -357,6 +358,42 @@ static inline struct drm_printer drm_err_printer(struct drm_device *drm,
>  	return p;
>  }
>  
> +/**
> + * drm_line_printer - construct a &drm_printer that prefixes outputs with line numbers
> + * @dp: the &struct drm_printer which actually generates the output
> + *
> + * This printer can be used to increase the robustness of the captured output
> + * to make sure we didn't lost any intermediate lines of the output. Helpful
> + * while capturing some crash data.
> + *
> + * For example::
> + *
> + *	void crash_dump(struct drm_device *drm)
> + *	{
> + *		struct drm_printer dp = drm_err_printer(drm, "crash");
> + *		struct drm_printer lp = drm_line_printer(&dp);
> + *
> + *		drm_printf(&lp, "foo");
> + *		drm_printf(&lp, "bar");
> + *	}
> + *
> + * Above code will print into the dmesg something like::
> + *
> + *	[ ] 0000:00:00.0: [drm] *ERROR* crash 1: foo
> + *	[ ] 0000:00:00.0: [drm] *ERROR* crash 2: bar
> + *
> + * RETURNS:
> + * The &drm_printer object
> + */
> +static inline struct drm_printer drm_line_printer(struct drm_printer *dp)

Just p is customary for the drm_printer. "dp" gives me too much Display
Port vibes.

> +{
> +	struct drm_printer lp = {
> +		.printfn = __drm_printfn_line,
> +		.arg = dp,
> +	};
> +	return lp;
> +}
> +
>  /*
>   * struct device based logging
>   *

-- 
Jani Nikula, Intel
