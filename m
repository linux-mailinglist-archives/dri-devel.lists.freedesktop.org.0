Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 27E87E1FCC
	for <lists+dri-devel@lfdr.de>; Wed, 23 Oct 2019 17:45:42 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 44EA36EB1D;
	Wed, 23 Oct 2019 15:45:36 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from bhuna.collabora.co.uk (bhuna.collabora.co.uk [46.235.227.227])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 553E78959D
 for <dri-devel@lists.freedesktop.org>; Wed, 23 Oct 2019 15:45:31 +0000 (UTC)
Received: from localhost.localdomain (unknown
 [IPv6:2a01:e0a:2c:6930:5cf4:84a1:2763:fe0d])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested) (Authenticated sender: bbrezillon)
 by bhuna.collabora.co.uk (Postfix) with ESMTPSA id 7DB1D28F969;
 Wed, 23 Oct 2019 16:45:29 +0100 (BST)
From: Boris Brezillon <boris.brezillon@collabora.com>
To: dri-devel@lists.freedesktop.org
Subject: [PATCH v3 14/21] drm/bridge: Add the necessary bits to support bus
 format negotiation
Date: Wed, 23 Oct 2019 17:45:05 +0200
Message-Id: <20191023154512.9762-15-boris.brezillon@collabora.com>
X-Mailer: git-send-email 2.21.0
In-Reply-To: <20191023154512.9762-1-boris.brezillon@collabora.com>
References: <20191023154512.9762-1-boris.brezillon@collabora.com>
MIME-Version: 1.0
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Mark Rutland <mark.rutland@arm.com>,
 Neil Armstrong <narmstrong@baylibre.com>,
 Thierry Reding <thierry.reding@gmail.com>,
 Laurent Pinchart <Laurent.pinchart@ideasonboard.com>, kernel@collabora.com,
 Sam Ravnborg <sam@ravnborg.org>,
 Nikita Yushchenko <nikita.yoush@cogentembedded.com>,
 Andrey Smirnov <andrew.smirnov@gmail.com>,
 Kyungmin Park <kyungmin.park@samsung.com>, Chris Healy <cphealy@gmail.com>,
 devicetree@vger.kernel.org, Jonas Karlman <jonas@kwiboo.se>,
 Rob Herring <robh+dt@kernel.org>, Jernej Skrabec <jernej.skrabec@siol.net>,
 Seung-Woo Kim <sw0312.kim@samsung.com>,
 Boris Brezillon <boris.brezillon@collabora.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

ZHJtX2JyaWRnZV9zdGF0ZSBpcyBleHRlbmRlZCB0byBkZXNjcmliZSB0aGUgaW5wdXQgYW5kIG91
dHB1dCBidXMKY29uZmlndXJhdGlvbi4gVGhpcyBidXMgY29uZmlndXJhdGlvbiBpcyBleHBvc2Vk
IHRocm91Z2ggdGhlCmRybV9idXNfY2ZnIHN0cnVjdCB3aGljaCBjb250YWlucyAyIHByb3BlcnRp
ZXM6IHRoZSBidXMgZm9ybWF0IGFuZAp0aGUgYnVzIGZsYWdzLgoKQnVzIGZvcm1hdCBuZWdvdGlh
dGlvbiBpcyBhdXRvbWF0ZWQgYnkgdGhlIGNvcmUsIGRyaXZlcnMganVzdCBoYXZlCnRvIGltcGxl
bWVudCB0aGUgLT5hdG9taWNfZ2V0X3tvdXRwdXQsaW5wdXR9X2J1c19mbXRzKCkgaG9va3MgaWYg
dGhleQp3YW50IHRvIHRha2UgcGFydCB0byB0aGlzIG5lZ290aWF0aW9uLiBOZWdvdGlhdGlvbiBo
YXBwZW5zIGluIHJlc2VydmUKb3JkZXIsIHN0YXJ0aW5nIGZyb20gdGhlIGxhc3QgZWxlbWVudCBv
ZiB0aGUgY2hhaW4gKHRoZSBvbmUgZGlyZWN0bHkKY29ubmVjdGVkIHRvIHRoZSBkaXNwbGF5KSB1
cCB0byB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgY2hhaW4gKHRoZSBvbmUKY29ubmVjdGVkIHRv
IHRoZSBlbmNvZGVyKS4KRHVyaW5nIHRoaXMgbmVnb3RpYXRpb24gYWxsIHN1cHBvcnRlZCBmb3Jt
YXRzIGFyZSB0ZXN0ZWQgdW50aWwgd2UgZmluZApvbmUgdGhhdCB3b3JrcywgbWVhbmluZyB0aGF0
IHRoZSBmb3JtYXRzIGFycmF5IHNob3VsZCBiZSBpbiBkZWNyZWFzaW5nCnByZWZlcmVuY2Ugb3Jk
ZXIgKGFzc3VtaW5nIHRoZSBkcml2ZXIgaGFzIGEgcHJlZmVyZW5jZSBvcmRlcikuCgpOb3RlIHRo
YXQgdGhlIGJ1cyBmb3JtYXQgbmVnb3RpYXRpb24gd29ya3MgZXZlbiBpZiBzb21lIGVsZW1lbnRz
IGluIHRoZQpjaGFpbiBkb24ndCBpbXBsZW1lbnQgdGhlIC0+YXRvbWljX2dldF97b3V0cHV0LGlu
cHV0fV9idXNfZm10cygpIGhvb2tzLgpJbiB0aGF0IGNhc2UsIHRoZSBjb3JlIGFkdmVydGlzZXMg
b25seSBNRURJQV9CVVNfRk1UX0ZJWEVEIGFuZCBsZXQKdGhlIHByZXZpb3VzIGJyaWRnZSBlbGVt
ZW50IGRlY2lkZSB3aGF0IHRvIGRvIChtb3N0IG9mIHRoZSB0aW1lLCBicmlkZ2UKZHJpdmVycyB3
aWxsIHBpY2sgYSBkZWZhdWx0IGJ1cyBmb3JtYXQgb2YgZXh0cmFjdCB0aGlzIHBpZWNlIG9mCmlu
Zm9ybWF0aW9uIGZyb20gc29tZXdoZXJlIGVsc2UsIGxpa2UgYSBGVyBwcm9wZXJ0eSkuCgpCdXMg
ZmxhZ3MgbmVnb3RpYXRpb24gaXMgbGVmdCB0byBkcml2ZXJzIHdoaWNoIGNhbiBzaW1wbHkgcHJv
cGFnYXRlIHRoZQpmbGFncyBmcm9tIHRoZSBpbnB1dCBvZiB0aGUgbmV4dCBicmlkZ2UgZWxlbWVu
dCBpZiB0aGVyZSdzIG5vIGNvbnZlcnNpb24KZG9uZSBpbnNpZGUgdGhlIGJyaWRnZSwgb3IgdHdl
YWsgdGhlbSBpZiB0aGUgYnJpZGdlIGRvZXMgc29tZSBraW5kIG9mCnNpZ25hbCBpbnZlcnNpb24u
CgpTaWduZWQtb2ZmLWJ5OiBCb3JpcyBCcmV6aWxsb24gPGJvcmlzLmJyZXppbGxvbkBjb2xsYWJv
cmEuY29tPgotLS0KQ2hhbmdlcyBpbiB2MzoKKiBGaXggdGhlIGNvbW1pdCBtZXNzYWdlIChSZXBv
cnRlZCBieSBMYXVyZW50KQoqIERvY3VtZW50IHRoZSBmYWN0IHRoYXQgYnVzIGZvcm1hdHMgc2hv
dWxkIG5vdCBiZSBkaXJlY3RseSBtb2RpZmllZCBieQogIGRyaXZlcnMgKFN1Z2dlc3RlZCBieSBM
YXVyZW50KQoqIERvY3VtZW50IHRoZSBmYWN0IHRoYXQgZm9ybWF0IG9yZGVyIG1hdHRlcnMgKFN1
Z2dlc3RlZCBieSBMYXVyZW50KQoqIFByb3BhZ2F0ZSBidXMgZmxhZ3MgYnkgZGVmYXVsdAoqIERv
Y3VtZW50IHRoZSBmYWN0IHRoYXQgZHJpdmVycyBjYW4gdHdlYWsgYnVzIGZsYWdzIGlmIG5lZWRl
ZAoqIExldCAtPmF0b21pY19nZXRfe291dHB1dCxpbnB1dH1fYnVzX2ZtdHMoKSBhbGxvY2F0ZSB0
aGUgYnVzIGZvcm1hdAogIGFycmF5IChTdWdnZXN0ZWQgYnkgTGF1cmVudCkKKiBBZGQgYSBkcm1f
YXRvbWljX2hlbHBlcl9icmlkZ2VfcHJvcGFnYXRlX2J1c19mbXQoKQoqIE1hbmRhdGUgdGhhdCBi
cmlkZ2UgZHJpdmVycyByZXR1cm4gYWNjdXJhdGUgaW5wdXRfZm10cyBldmVuIGlmIHRoZXkKICBh
cmUga25vd24gdG8gYmUgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGJyaWRnZSBjaGFpbgoKQ2hh
bmdlcyBpbiB2MjoKKiBSZXdvcmsgdGhpbmdzIHRvIHN1cHBvcnQgbW9yZSBjb21wbGV4IHVzZSBj
YXNlcwotLS0KIGRyaXZlcnMvZ3B1L2RybS9kcm1fYnJpZGdlLmMgfCAyNTcgKysrKysrKysrKysr
KysrKysrKysrKysrKysrKysrKysrKy0KIGluY2x1ZGUvZHJtL2RybV9icmlkZ2UuaCAgICAgfCAx
MDYgKysrKysrKysrKysrKysrCiAyIGZpbGVzIGNoYW5nZWQsIDM2MiBpbnNlcnRpb25zKCspLCAx
IGRlbGV0aW9uKC0pCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2RybV9icmlkZ2UuYyBi
L2RyaXZlcnMvZ3B1L2RybS9kcm1fYnJpZGdlLmMKaW5kZXggOTkwZTA1NjI5NmJkLi42MDIyZmIz
ZDQwNmEgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9kcm1fYnJpZGdlLmMKKysrIGIvZHJp
dmVycy9ncHUvZHJtL2RybV9icmlkZ2UuYwpAQCAtNjQxLDEzICs2NDEsMjUxIEBAIHN0YXRpYyBp
bnQgZHJtX2F0b21pY19icmlkZ2VfY2hlY2soc3RydWN0IGRybV9icmlkZ2UgKmJyaWRnZSwKIAly
ZXR1cm4gMDsKIH0KIAorc3RhdGljIGludCBzZWxlY3RfYnVzX2ZtdF9yZWN1cnNpdmUoc3RydWN0
IGRybV9icmlkZ2UgKmZpcnN0LAorCQkJCSAgICBzdHJ1Y3QgZHJtX2JyaWRnZSAqY3VyLAorCQkJ
CSAgICBzdHJ1Y3QgZHJtX2NydGNfc3RhdGUgKmNydGNfc3RhdGUsCisJCQkJICAgIHN0cnVjdCBk
cm1fY29ubmVjdG9yX3N0YXRlICpjb25uX3N0YXRlLAorCQkJCSAgICB1MzIgb3V0X2J1c19mbXQp
Cit7CisJc3RydWN0IGRybV9icmlkZ2Vfc3RhdGUgKmN1cl9zdGF0ZTsKKwl1bnNpZ25lZCBpbnQg
bnVtX2luX2J1c19mbXRzLCBpOworCXN0cnVjdCBkcm1fYnJpZGdlICpwcmV2OworCXUzMiAqaW5f
YnVzX2ZtdHM7CisJaW50IHJldDsKKworCXByZXYgPSBkcm1fYnJpZGdlX2NoYWluX2dldF9wcmV2
X2JyaWRnZShjdXIpOworCWN1cl9zdGF0ZSA9IGRybV9hdG9taWNfZ2V0X25ld19icmlkZ2Vfc3Rh
dGUoY3J0Y19zdGF0ZS0+c3RhdGUsIGN1cik7CisJaWYgKFdBUk5fT04oIWN1cl9zdGF0ZSkpCisJ
CXJldHVybiAtRUlOVkFMOworCisJLyoKKwkgKiBCdXMgZm9ybWF0IG5lZ290aWF0aW9uIGlzIG5v
dCBzdXBwb3J0ZWQgYnkgdGhpcyBicmlkZ2UsIGxldCdzIHBhc3MKKwkgKiBNRURJQV9CVVNfRk1U
X0ZJWEVEIHRvIHRoZSBwcmV2aW91cyBicmlkZ2UgaW4gdGhlIGNoYWluIGFuZCBob3BlCisJICog
dGhhdCBpdCBjYW4gaGFuZGxlIHRoaXMgc2l0dWF0aW9uIGdyYWNlZnVsbHkgKGJ5IHByb3ZpZGlu
ZworCSAqIGFwcHJvcHJpYXRlIGRlZmF1bHQgdmFsdWVzKS4KKwkgKi8KKwlpZiAoIWN1ci0+ZnVu
Y3MtPmF0b21pY19nZXRfaW5wdXRfYnVzX2ZtdHMpIHsKKwkJaWYgKGN1ciAhPSBmaXJzdCkgewor
CQkJcmV0ID0gc2VsZWN0X2J1c19mbXRfcmVjdXJzaXZlKGZpcnN0LCBwcmV2LCBjcnRjX3N0YXRl
LAorCQkJCQkJICAgICAgIGNvbm5fc3RhdGUsCisJCQkJCQkgICAgICAgTUVESUFfQlVTX0ZNVF9G
SVhFRCk7CisJCQlpZiAocmV0KQorCQkJCXJldHVybiByZXQ7CisJCX0KKworCQljdXJfc3RhdGUt
PmlucHV0X2J1c19jZmcuZm10ID0gTUVESUFfQlVTX0ZNVF9GSVhFRDsKKwkJY3VyX3N0YXRlLT5v
dXRwdXRfYnVzX2NmZy5mbXQgPSBvdXRfYnVzX2ZtdDsKKwkJcmV0dXJuIDA7CisJfQorCisJaW5f
YnVzX2ZtdHMgPSBjdXItPmZ1bmNzLT5hdG9taWNfZ2V0X2lucHV0X2J1c19mbXRzKGN1ciwgY3Vy
X3N0YXRlLAorCQkJCQkJCSAgICBjcnRjX3N0YXRlLAorCQkJCQkJCSAgICBjb25uX3N0YXRlLAor
CQkJCQkJCSAgICBvdXRfYnVzX2ZtdCwKKwkJCQkJCQkgICAgJm51bV9pbl9idXNfZm10cyk7CisJ
aWYgKCFudW1faW5fYnVzX2ZtdHMpCisJCXJldHVybiAtRU5PVFNVUFA7CisJZWxzZSBpZiAoIWlu
X2J1c19mbXRzKQorCQlyZXR1cm4gLUVOT01FTTsKKworCWlmIChmaXJzdCA9PSBjdXIpIHsKKwkJ
Y3VyX3N0YXRlLT5pbnB1dF9idXNfY2ZnLmZtdCA9IGluX2J1c19mbXRzWzBdOworCQljdXJfc3Rh
dGUtPm91dHB1dF9idXNfY2ZnLmZtdCA9IG91dF9idXNfZm10OworCQlrZnJlZShpbl9idXNfZm10
cyk7CisJCXJldHVybiAwOworCX0KKworCWZvciAoaSA9IDA7IGkgPCBudW1faW5fYnVzX2ZtdHM7
IGkrKykgeworCQlyZXQgPSBzZWxlY3RfYnVzX2ZtdF9yZWN1cnNpdmUoZmlyc3QsIHByZXYsIGNy
dGNfc3RhdGUsCisJCQkJCSAgICAgICBjb25uX3N0YXRlLCBpbl9idXNfZm10c1tpXSk7CisJCWlm
IChyZXQgIT0gLUVOT1RTVVBQKQorCQkJYnJlYWs7CisJfQorCisJaWYgKCFyZXQpIHsKKwkJY3Vy
X3N0YXRlLT5pbnB1dF9idXNfY2ZnLmZtdCA9IGluX2J1c19mbXRzW2ldOworCQljdXJfc3RhdGUt
Pm91dHB1dF9idXNfY2ZnLmZtdCA9IG91dF9idXNfZm10OworCX0KKworCWtmcmVlKGluX2J1c19m
bXRzKTsKKwlyZXR1cm4gcmV0OworfQorCisvKgorICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQg
YnkgJmRybV9hdG9taWNfYnJpZGdlX2NoYWluX2NoZWNrKCkganVzdCBiZWZvcmUKKyAqIGNhbGxp
bmcgJmRybV9icmlkZ2VfZnVuY3MuYXRvbWljX2NoZWNrKCkgb24gYWxsIGVsZW1lbnRzIG9mIHRo
ZSBjaGFpbi4KKyAqIEl0J3MgcHJvdmlkaW5nIGJ1cyBmb3JtYXQgbmVnb3RpYXRpb24gYmV0d2Vl
biBicmlkZ2UgZWxlbWVudHMuIFRoZQorICogbmVnb3RpYXRpb24gaGFwcGVucyBpbiByZXZlcnNl
IG9yZGVyLCBzdGFydGluZyBmcm9tIHRoZSBsYXN0IGVsZW1lbnQgaW4KKyAqIHRoZSBjaGFpbiB1
cCB0byBAYnJpZGdlLgorICoKKyAqIE5lZ290aWF0aW9uIHN0YXJ0cyBieSByZXRyaWV2aW5nIHN1
cHBvcnRlZCBvdXRwdXQgYnVzIGZvcm1hdHMgb24gdGhlIGxhc3QKKyAqIGJyaWRnZSBlbGVtZW50
IGFuZCB0ZXN0aW5nIHRoZW0gb25lIGJ5IG9uZS4gVGhlIHRlc3QgaXMgcmVjdXJzaXZlLCBtZWFu
aW5nCisgKiB0aGF0IGZvciBlYWNoIHRlc3RlZCBvdXRwdXQgZm9ybWF0LCB0aGUgd2hvbGUgY2hh
aW4gd2lsbCBiZSB3YWxrZWQgYmFja3dhcmQsCisgKiBhbmQgZWFjaCBlbGVtZW50IHdpbGwgaGF2
ZSB0byBjaG9vc2UgYW4gaW5wdXQgYnVzIGZvcm1hdCB0aGF0IGNhbiBiZQorICogdHJhbnNjb2Rl
ZCB0byB0aGUgcmVxdWVzdGVkIG91dHB1dCBmb3JtYXQuIFdoZW4gYSBicmlkZ2UgZWxlbWVudCBk
b2VzIG5vdAorICogc3VwcG9ydCB0cmFuc2NvZGluZyBpbnRvIGEgc3BlY2lmaWMgb3V0cHV0IGZv
cm1hdCAtRU5PVFNVUFAgaXMgcmV0dXJuZWQgYW5kCisgKiB0aGUgbmV4dCBicmlkZ2UgZWxlbWVu
dCB3aWxsIGhhdmUgdG8gdHJ5IGEgZGlmZmVyZW50IGZvcm1hdC4gSWYgbm9uZSBvZiB0aGUKKyAq
IGNvbWJpbmF0aW9ucyB3b3JrZWQsIC1FTk9UU1VQUCBpcyByZXR1cm5lZCBhbmQgdGhlIGF0b21p
YyBtb2Rlc2V0IHdpbGwgZmFpbC4KKyAqCisgKiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIHJlbHlp
bmcgb24KKyAqICZkcm1fYnJpZGdlX2Z1bmNzLmF0b21pY19nZXRfb3V0cHV0X2J1c19mbXRzKCkg
YW5kCisgKiAmZHJtX2JyaWRnZV9mdW5jcy5hdG9taWNfZ2V0X2lucHV0X2J1c19mbXRzKCkgdG8g
Z2F0aGVyIHN1cHBvcnRlZAorICogaW5wdXQvb3V0cHV0IGZvcm1hdHMuCisgKiBXaGVuICZkcm1f
YnJpZGdlX2Z1bmNzLmF0b21pY19nZXRfb3V0cHV0X2J1c19mbXRzKCkgaXMgbm90IGltcGxlbWVu
dGVkIGJ5CisgKiB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSBjaGFpbiwgJmRybV9hdG9taWNfYnJp
ZGdlX2NoYWluX3NlbGVjdF9idXNfZm10cygpCisgKiB0cmllcyBhIHNpbmdsZSBmb3JtYXQ6ICZk
cm1fY29ubmVjdG9yLmRpc3BsYXlfaW5mby5idXNfZm9ybWF0c1swXSBpZgorICogYXZhaWxhYmxl
LCBNRURJQV9CVVNfRk1UX0ZJWEVEIG90aGVyd2lzZS4KKyAqIFdoZW4gJmRybV9icmlkZ2VfZnVu
Y3MuYXRvbWljX2dldF9pbnB1dF9idXNfZm10cygpIGlzIG5vdCBpbXBsZW1lbnRlZCwKKyAqICZk
cm1fYXRvbWljX2JyaWRnZV9jaGFpbl9zZWxlY3RfYnVzX2ZtdHMoKSBza2lwcyB0aGUgbmVnb3Rp
YXRpb24gb24gdGhlCisgKiBicmlkZ2UgZWxlbWVudCB0aGF0IGxhY2tzIHRoaXMgaG9vayBhbmQg
YXNrcyB0aGUgcHJldmlvdXMgZWxlbWVudCBpbiB0aGUKKyAqIGNoYWluIHRvIHRyeSBNRURJQV9C
VVNfRk1UX0ZJWEVELiBJdCdzIHVwIHRvIGJyaWRnZSBkcml2ZXJzIHRvIGRlY2lkZSB3aGF0Cisg
KiB0byBkbyBpbiB0aGF0IGNhc2UgKGZhaWwgaWYgdGhleSB3YW50IHRvIGVuZm9yY2UgYnVzIGZv
cm1hdCBuZWdvdGlhdGlvbiwgb3IKKyAqIHByb3ZpZGUgYSByZWFzb25hYmxlIGRlZmF1bHQgaWYg
dGhleSBuZWVkIHRvIHN1cHBvcnQgcGlwZWxpbmVzIHdoZXJlIG5vdAorICogYWxsIGVsZW1lbnRz
IHN1cHBvcnQgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbikuCisgKi8KK3N0YXRpYyBpbnQKK2RybV9h
dG9taWNfYnJpZGdlX2NoYWluX3NlbGVjdF9idXNfZm10cyhzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJp
ZGdlLAorCQkJCQlzdHJ1Y3QgZHJtX2NydGNfc3RhdGUgKmNydGNfc3RhdGUsCisJCQkJCXN0cnVj
dCBkcm1fY29ubmVjdG9yX3N0YXRlICpjb25uX3N0YXRlKQoreworCXN0cnVjdCBkcm1fY29ubmVj
dG9yICpjb25uID0gY29ubl9zdGF0ZS0+Y29ubmVjdG9yOworCXN0cnVjdCBkcm1fZW5jb2RlciAq
ZW5jb2RlciA9IGJyaWRnZS0+ZW5jb2RlcjsKKwlzdHJ1Y3QgZHJtX2JyaWRnZV9zdGF0ZSAqbGFz
dF9icmlkZ2Vfc3RhdGU7CisJdW5zaWduZWQgaW50IGksIG51bV9vdXRfYnVzX2ZtdHM7CisJc3Ry
dWN0IGRybV9icmlkZ2UgKmxhc3RfYnJpZGdlOworCXUzMiAqb3V0X2J1c19mbXRzOworCWludCBy
ZXQgPSAwOworCisJbGFzdF9icmlkZ2UgPSBsaXN0X2xhc3RfZW50cnkoJmVuY29kZXItPmJyaWRn
ZV9jaGFpbiwKKwkJCQkgICAgICBzdHJ1Y3QgZHJtX2JyaWRnZSwgY2hhaW5fbm9kZSk7CisJbGFz
dF9icmlkZ2Vfc3RhdGUgPSBkcm1fYXRvbWljX2dldF9uZXdfYnJpZGdlX3N0YXRlKGNydGNfc3Rh
dGUtPnN0YXRlLAorCQkJCQkJCSAgICBsYXN0X2JyaWRnZSk7CisJaWYgKFdBUk5fT04oIWxhc3Rf
YnJpZGdlX3N0YXRlKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlpZiAobGFzdF9icmlkZ2UtPmZ1
bmNzLT5hdG9taWNfZ2V0X291dHB1dF9idXNfZm10cykgeworCQljb25zdCBzdHJ1Y3QgZHJtX2Jy
aWRnZV9mdW5jcyAqZnVuY3MgPSBsYXN0X2JyaWRnZS0+ZnVuY3M7CisKKwkJb3V0X2J1c19mbXRz
ID0gZnVuY3MtPmF0b21pY19nZXRfb3V0cHV0X2J1c19mbXRzKGxhc3RfYnJpZGdlLAorCQkJCQkJ
CWxhc3RfYnJpZGdlX3N0YXRlLAorCQkJCQkJCWNydGNfc3RhdGUsCisJCQkJCQkJY29ubl9zdGF0
ZSwKKwkJCQkJCQkmbnVtX291dF9idXNfZm10cyk7CisJCWlmICghbnVtX291dF9idXNfZm10cykK
KwkJCXJldHVybiAtRU5PVFNVUFA7CisJCWVsc2UgaWYgKCFvdXRfYnVzX2ZtdHMpCisJCQlyZXR1
cm4gLUVOT01FTTsKKwl9IGVsc2UgeworCQludW1fb3V0X2J1c19mbXRzID0gMTsKKwkJb3V0X2J1
c19mbXRzID0ga3phbGxvYyhzaXplb2YoKm91dF9idXNfZm10cyksIEdGUF9LRVJORUwpOworCQlp
ZiAoIW91dF9idXNfZm10cykKKwkJCXJldHVybiAtRU5PTUVNOworCisJCWlmIChjb25uLT5kaXNw
bGF5X2luZm8ubnVtX2J1c19mb3JtYXRzICYmCisJCSAgICBjb25uLT5kaXNwbGF5X2luZm8uYnVz
X2Zvcm1hdHMpCisJCQlvdXRfYnVzX2ZtdHNbMF0gPSBjb25uLT5kaXNwbGF5X2luZm8uYnVzX2Zv
cm1hdHNbMF07CisJCWVsc2UKKwkJCW91dF9idXNfZm10c1swXSA9IE1FRElBX0JVU19GTVRfRklY
RUQ7CisJfQorCisJZm9yIChpID0gMDsgaSA8IG51bV9vdXRfYnVzX2ZtdHM7IGkrKykgeworCQly
ZXQgPSBzZWxlY3RfYnVzX2ZtdF9yZWN1cnNpdmUoYnJpZGdlLCBsYXN0X2JyaWRnZSwgY3J0Y19z
dGF0ZSwKKwkJCQkJICAgICAgIGNvbm5fc3RhdGUsIG91dF9idXNfZm10c1tpXSk7CisJCWlmIChy
ZXQgIT0gLUVOT1RTVVBQKQorCQkJYnJlYWs7CisJfQorCisJa2ZyZWUob3V0X2J1c19mbXRzKTsK
KworCXJldHVybiByZXQ7Cit9CisKK3N0YXRpYyB2b2lkCitkcm1fYXRvbWljX2JyaWRnZV9wcm9w
YWdhdGVfYnVzX2ZsYWdzKHN0cnVjdCBkcm1fYnJpZGdlICpicmlkZ2UsCisJCQkJICAgICAgc3Ry
dWN0IGRybV9jb25uZWN0b3IgKmNvbm4sCisJCQkJICAgICAgc3RydWN0IGRybV9hdG9taWNfc3Rh
dGUgKnN0YXRlKQoreworCXN0cnVjdCBkcm1fYnJpZGdlX3N0YXRlICpicmlkZ2Vfc3RhdGUsICpu
ZXh0X2JyaWRnZV9zdGF0ZTsKKwlzdHJ1Y3QgZHJtX2JyaWRnZSAqbmV4dF9icmlkZ2U7CisJdTMy
IG91dHB1dF9mbGFnczsKKworCWJyaWRnZV9zdGF0ZSA9IGRybV9hdG9taWNfZ2V0X25ld19icmlk
Z2Vfc3RhdGUoc3RhdGUsIGJyaWRnZSk7CisJbmV4dF9icmlkZ2UgPSBkcm1fYnJpZGdlX2NoYWlu
X2dldF9uZXh0X2JyaWRnZShicmlkZ2UpOworCisJLyoKKwkgKiBMZXQncyB0cnkgdG8gYXBwbHkg
dGhlIG1vc3QgY29tbW9uIGNhc2UgaGVyZSwgdGhhdCBpcywgcHJvcGFnYXRlCisJICogZGlzcGxh
eV9pbmZvIGZsYWdzIGZvciB0aGUgbGFzdCBicmlkZ2UsIGFuZCBwcm9wYWdhdGUgdGhlIGlucHV0
CisJICogZmxhZ3Mgb2YgdGhlIG5leHQgYnJpZGdlIGVsZW1lbnQgdG8gdGhlIG91dHB1dCBlbmQg
b2YgdGhlIGN1cnJlbnQKKwkgKiBicmlkZ2Ugd2hlbiB0aGUgYnJpZGdlIGlzIG5vdCB0aGUgbGFz
dCBvbmUuCisJICogVGhlcmUgYXJlIGV4Y2VwdGlvbnMgdG8gdGhpcyBydWxlLCBsaWtlIHdoZW4g
c2lnbmFsIGludmVyc2lvbiBpcworCSAqIGhhcHBlbmluZyBhdCB0aGUgYm9hcmQgbGV2ZWwsIGJ1
dCB0aGF0J3Mgc29tZXRoaW5nIGRyaXZlcnMgY2FuIGRlYWwKKwkgKiB3aXRoIGZyb20gdGhlaXIg
JmRybV9icmlkZ2VfZnVuY3MuYXRvbWljX2NoZWNrKCkgaW1wbGVtZW50YXRpb24gYnkKKwkgKiBz
aW1wbHkgb3ZlcnJpZGluZyB0aGUgZmxhZ3MgdmFsdWUgd2UndmUgc2V0IGhlcmUuCisJICovCisJ
aWYgKCFuZXh0X2JyaWRnZSkgeworCQlvdXRwdXRfZmxhZ3MgPSBjb25uLT5kaXNwbGF5X2luZm8u
YnVzX2ZsYWdzOworCX0gZWxzZSB7CisJCW5leHRfYnJpZGdlX3N0YXRlID0gZHJtX2F0b21pY19n
ZXRfbmV3X2JyaWRnZV9zdGF0ZShzdGF0ZSwKKwkJCQkJCQkJbmV4dF9icmlkZ2UpOworCQlvdXRw
dXRfZmxhZ3MgPSBuZXh0X2JyaWRnZV9zdGF0ZS0+aW5wdXRfYnVzX2NmZy5mbGFnczsKKwl9CisK
KwlicmlkZ2Vfc3RhdGUtPm91dHB1dF9idXNfY2ZnLmZsYWdzID0gb3V0cHV0X2ZsYWdzOworCisJ
LyoKKwkgKiBQcm9wYWdlIHRoZSBvdXRwdXQgZmxhZ3MgdG8gdGhlIGlucHV0IGVuZCBvZiB0aGUg
YnJpZGdlLiBBZ2FpbiwgaXQncworCSAqIG5vdCBuZWNlc3NhcmlseSB3aGF0IGFsbCBicmlkZ2Vz
IHdhbnQsIGJ1dCB0aGF0J3Mgd2hhdCBtb3N0IG9mIHRoZW0KKwkgKiBkbywgYW5kIGJ5IGRvaW5n
IHRoYXQgYnkgZGVmYXVsdCB3ZSBhdm9pZCBmb3JjaW5nIGRyaXZlcnMgdG8KKwkgKiBkdXBsaWNh
dGUgdGhlICJkdW1teSBwcm9wYWdhdGlvbiIgbG9naWMuCisJICovCisJYnJpZGdlX3N0YXRlLT5p
bnB1dF9idXNfY2ZnLmZsYWdzID0gb3V0cHV0X2ZsYWdzOworfQorCisvKioKKyAqIGRybV9hdG9t
aWNfaGVscGVyX2JyaWRnZV9wcm9wYWdhdGVfYnVzX2ZtdCgpIC0gUHJvcGFnYXRlIG91dHB1dCBm
b3JtYXQgdG8KKyAqCQkJCQkJICB0aGUgaW5wdXQgZW5kIG9mIGEgYnJpZGdlCisgKiBAYnJpZGdl
OiBicmlkZ2UgY29udHJvbCBzdHJ1Y3R1cmUKKyAqIEBicmlkZ2Vfc3RhdGU6IG5ldyBicmlkZ2Ug
c3RhdGUKKyAqIEBjcnRjX3N0YXRlOiBuZXcgQ1JUQyBzdGF0ZQorICogQGNvbm5fc3RhdGU6IG5l
dyBjb25uZWN0b3Igc3RhdGUKKyAqIEBvdXRwdXRfZm10OiB0ZXN0ZWQgb3V0cHV0IGJ1cyBmb3Jt
YXQKKyAqIEBudW1faW5wdXRfZm10czogd2lsbCBjb250YWluIHRoZSBzaXplIG9mIHRoZSByZXR1
cm5lZCBhcnJheQorICoKKyAqIEhlbHBlciB0aGF0IHByb3BhZ2F0ZSB0aGUgb3V0cHV0IGZvcm1h
dCB0byB0aGUgaW5wdXQgZW5kIG9mIGJyaWRnZS4KKyAqIFBhcnRpY3VsYXJseSB1c2VmdWwgZm9y
IGR1bW15IGJyaWRnZSBlbGVtZW50cyBsaWtlIHRoZSBwYW5lbF9icmlkZ2UuCisgKgorICogUkVU
VVJOUzoKKyAqIGEgdmFsaWQgZm9ybWF0IGFycmF5IG9mIHNpemUgQG51bV9pbnB1dF9mbXRzLCBv
ciBOVUxMIGlmIHRoZSBhbGxvY2F0aW9uCisgKiBmYWlsZWQgb3IgaWYgQG51bV9pbnB1dF9mbXRz
IGlzIHNldCB0byAwCisgKi8KK3UzMiAqCitkcm1fYXRvbWljX2hlbHBlcl9icmlkZ2VfcHJvcGFn
YXRlX2J1c19mbXQoc3RydWN0IGRybV9icmlkZ2UgKmJyaWRnZSwKKwkJCQkJc3RydWN0IGRybV9i
cmlkZ2Vfc3RhdGUgKmJyaWRnZV9zdGF0ZSwKKwkJCQkJc3RydWN0IGRybV9jcnRjX3N0YXRlICpj
cnRjX3N0YXRlLAorCQkJCQlzdHJ1Y3QgZHJtX2Nvbm5lY3Rvcl9zdGF0ZSAqY29ubl9zdGF0ZSwK
KwkJCQkJdTMyIG91dHB1dF9mbXQsCisJCQkJCXVuc2lnbmVkIGludCAqbnVtX2lucHV0X2ZtdHMp
Cit7CisJdTMyICppbnB1dF9mbXRzOworCisJKm51bV9pbnB1dF9mbXRzID0gMTsKKwlpbnB1dF9m
bXRzID0ga3phbGxvYyhzaXplb2YoKmlucHV0X2ZtdHMpLCBHRlBfS0VSTkVMKTsKKwlpZiAoIWlu
cHV0X2ZtdHMpCisJCXJldHVybiBOVUxMOworCisJaW5wdXRfZm10c1swXSA9IG91dHB1dF9mbXQ7
CisJcmV0dXJuIGlucHV0X2ZtdHM7Cit9CitFWFBPUlRfU1lNQk9MKGRybV9hdG9taWNfaGVscGVy
X2JyaWRnZV9wcm9wYWdhdGVfYnVzX2ZtdCk7CisKIC8qKgogICogZHJtX2F0b21pY19icmlkZ2Vf
Y2hhaW5fY2hlY2soKSAtIERvIGFuIGF0b21pYyBjaGVjayBvbiB0aGUgYnJpZGdlIGNoYWluCiAg
KiBAYnJpZGdlOiBicmlkZ2UgY29udHJvbCBzdHJ1Y3R1cmUKICAqIEBjcnRjX3N0YXRlOiBuZXcg
Q1JUQyBzdGF0ZQogICogQGNvbm5fc3RhdGU6IG5ldyBjb25uZWN0b3Igc3RhdGUKICAqCi0gKiBD
YWxscyAmZHJtX2JyaWRnZV9mdW5jcy5hdG9taWNfY2hlY2soKSAoZmFsbHMgYmFjayBvbgorICog
Rmlyc3QgdHJpZ2dlciBhIGJ1cyBmb3JtYXQgbmVnb3RpYXRpb24gYmVmb3JlIGNhbGxpbmcKKyAq
ICZkcm1fYnJpZGdlX2Z1bmNzLmF0b21pY19jaGVjaygpIChmYWxscyBiYWNrIG9uCiAgKiAmZHJt
X2JyaWRnZV9mdW5jcy5tb2RlX2ZpeHVwKCkpIG9wIGZvciBhbGwgdGhlIGJyaWRnZXMgaW4gdGhl
IGVuY29kZXIgY2hhaW4sCiAgKiBzdGFydGluZyBmcm9tIHRoZSBsYXN0IGJyaWRnZSB0byB0aGUg
Zmlyc3QuIFRoZXNlIGFyZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcKICAqICZkcm1fZW5jb2Rlcl9o
ZWxwZXJfZnVuY3MuYXRvbWljX2NoZWNrKCkKQEAgLTY1OSwxMiArODk3LDI5IEBAIGludCBkcm1f
YXRvbWljX2JyaWRnZV9jaGFpbl9jaGVjayhzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJpZGdlLAogCQkJ
CSAgc3RydWN0IGRybV9jcnRjX3N0YXRlICpjcnRjX3N0YXRlLAogCQkJCSAgc3RydWN0IGRybV9j
b25uZWN0b3Jfc3RhdGUgKmNvbm5fc3RhdGUpCiB7CisJc3RydWN0IGRybV9jb25uZWN0b3IgKmNv
bm4gPSBjb25uX3N0YXRlLT5jb25uZWN0b3I7CiAJc3RydWN0IGRybV9lbmNvZGVyICplbmNvZGVy
ID0gYnJpZGdlLT5lbmNvZGVyOwogCXN0cnVjdCBkcm1fYnJpZGdlICppdGVyOworCWludCByZXQ7
CisKKwlyZXQgPSBkcm1fYXRvbWljX2JyaWRnZV9jaGFpbl9zZWxlY3RfYnVzX2ZtdHMoYnJpZGdl
LCBjcnRjX3N0YXRlLAorCQkJCQkJICAgICAgY29ubl9zdGF0ZSk7CisJaWYgKHJldCkKKwkJcmV0
dXJuIHJldDsKIAogCWxpc3RfZm9yX2VhY2hfZW50cnlfcmV2ZXJzZShpdGVyLCAmZW5jb2Rlci0+
YnJpZGdlX2NoYWluLCBjaGFpbl9ub2RlKSB7CiAJCWludCByZXQ7CiAKKwkJLyoKKwkJICogQnVz
IGZsYWdzIGFyZSBwcm9wYWdhdGVkIGJ5IGRlZmF1bHQuIElmIGEgYnJpZGdlIG5lZWRzIHRvCisJ
CSAqIHR3ZWFrIHRoZSBpbnB1dCBidXMgZmxhZ3MgZm9yIGFueSByZWFzb24sIGl0IHNob3VsZCBo
YXBwZW4KKwkJICogaW4gaXRzICZkcm1fYnJpZGdlX2Z1bmNzLmF0b21pY19jaGVjaygpIGltcGxl
bWVudGF0aW9uIHN1Y2gKKwkJICogdGhhdCBwcmVjZWRpbmcgYnJpZGdlcyBpbiB0aGUgY2hhaW4g
Y2FuIHByb3BhZ2F0ZSB0aGUgbmV3CisJCSAqIGJ1cyBmbGFncy4KKwkJICovCisJCWRybV9hdG9t
aWNfYnJpZGdlX3Byb3BhZ2F0ZV9idXNfZmxhZ3MoaXRlciwgY29ubiwKKwkJCQkJCSAgICAgIGNy
dGNfc3RhdGUtPnN0YXRlKTsKKwogCQlyZXQgPSBkcm1fYXRvbWljX2JyaWRnZV9jaGVjayhpdGVy
LCBjcnRjX3N0YXRlLCBjb25uX3N0YXRlKTsKIAkJaWYgKHJldCkKIAkJCXJldHVybiByZXQ7CmRp
ZmYgLS1naXQgYS9pbmNsdWRlL2RybS9kcm1fYnJpZGdlLmggYi9pbmNsdWRlL2RybS9kcm1fYnJp
ZGdlLmgKaW5kZXggM2ZiNTE4NDk0NjQwLi5kMzdhYWYzNGI4ODIgMTAwNjQ0Ci0tLSBhL2luY2x1
ZGUvZHJtL2RybV9icmlkZ2UuaAorKysgYi9pbmNsdWRlL2RybS9kcm1fYnJpZGdlLmgKQEAgLTM0
LDE1ICszNCw0MyBAQCBzdHJ1Y3QgZHJtX2JyaWRnZTsKIHN0cnVjdCBkcm1fYnJpZGdlX3RpbWlu
Z3M7CiBzdHJ1Y3QgZHJtX3BhbmVsOwogCisvKioKKyAqIHN0cnVjdCBkcm1fYnVzX2NmZyAtIGJ1
cyBjb25maWd1cmF0aW9uCisgKiBAZm10OiBmb3JtYXQgdXNlZCBvbiB0aGlzIGJ1cy4gVGhpcyBm
aWVsZCBzaG91bGQgbm90IGJlIGRpcmVjdGx5IG1vZGlmaWVkCisgKgkgYnkgZHJpdmVycyAoJmRy
bV9hdG9taWNfYnJpZGdlX2NoYWluX3NlbGVjdF9idXNfZm10cygpIHRha2VzIGNhcmUgb2YKKyAq
CSB0aGUgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbikuCisgKiBAZmxhZ3M6IERSTV9CVVNfIGZsYWdz
IHVzZWQgb24gdGhpcyBidXMuIERyaXZlcnMgc2hvdWxkIHNldCB0aGUgb3V0cHV0IGJ1cworICoJ
ICAgZmxhZ3MgdG8gdGhlIGlucHV0IGJ1cyBmbGFncyBvZiB0aGUgbmV4dCBicmlkZ2UgZWxlbWVu
dCAodW5sZXNzIHRoZXkKKyAqCSAgIGhhdmUgYSBnb29kIHJlYXNvbiBub3QgdG8sIGxpa2UgYSBw
YXNzaXZlIHNpZ25hbCBpbnZlcnNpb24gYmV0d2VlbgorICoJICAgdGhvc2UgMiBlbGVtZW50cyku
IElucHV0IGJ1cyBmbGFncyBjYW4gYmUgZGlmZmVyZW50IGZyb20gdGhlIG91dHB1dAorICoJICAg
b25lcyBpZiB0aGVyZSdzIHNvbWUga2luZCBvZiBjb252ZXJzaW9uIGhhcHBlbmluZyBpbnNpZGUg
dGhlIGJyaWRnZSwKKyAqCSAgIGJ1dCBtb3N0IG9mIHRoZSB0aW1lcyBpdCdzIHNhZmUgdG8ganVz
dCBwcm9wYWdhdGUgdGhlIG91dHB1dCBidXMKKyAqCSAgIGZsYWdzIHRvIHRoZSBpbnB1dCBlbmQu
CisgKgkgICBUaGlzIGJ1cyBmbGFncyBzZWxlY3Rpb24vcHJvcGFnYXRpb24gc2hvdWxkIGJlIGRv
bmUgaW4gdGhlIGRyaXZlcgorICoJICAgJmRybV9icmlkZ2VfZnVuY3MuYXRvbWljX2NoZWNrKCkg
aG9vay4KKyAqCisgKiBFbmNvZGVzIHRoZSBidXMgZm9ybWF0IGFuZCBidXMgZmxhZ3MgdXNlZCBi
eSBvbmUgZW5kIG9mIHRoZSBicmlkZ2Ugb3IKKyAqIGJ5IHRoZSBlbmNvZGVyIG91dHB1dC4KKyAq
Lworc3RydWN0IGRybV9idXNfY2ZnIHsKKwl1MzIgZm10OworCXUzMiBmbGFnczsKK307CisKIC8q
KgogICogc3RydWN0IGRybV9icmlkZ2Vfc3RhdGUgLSBBdG9taWMgYnJpZGdlIHN0YXRlIG9iamVj
dAogICogQGJhc2U6IGluaGVyaXQgZnJvbSAmZHJtX3ByaXZhdGVfc3RhdGUKICAqIEBicmlkZ2U6
IHRoZSBicmlkZ2UgdGhpcyBzdGF0ZSByZWZlcnMgdG8KKyAqIEBpbnB1dF9idXNfaW5mbzogaW5w
dXQgYnVzIGluZm9ybWF0aW9uCisgKiBAb3V0cHV0X2J1c19pbmZvOiBvdXRwdXQgYnVzIGluZm9y
bWF0aW9uCiAgKi8KIHN0cnVjdCBkcm1fYnJpZGdlX3N0YXRlIHsKIAlzdHJ1Y3QgZHJtX3ByaXZh
dGVfc3RhdGUgYmFzZTsKIAogCXN0cnVjdCBkcm1fYnJpZGdlICpicmlkZ2U7CisKKwlzdHJ1Y3Qg
ZHJtX2J1c19jZmcgaW5wdXRfYnVzX2NmZzsKKwlzdHJ1Y3QgZHJtX2J1c19jZmcgb3V0cHV0X2J1
c19jZmc7CiB9OwogCiBzdGF0aWMgaW5saW5lIHN0cnVjdCBkcm1fYnJpZGdlX3N0YXRlICoKQEAg
LTM5Myw2ICs0MjEsNjkgQEAgc3RydWN0IGRybV9icmlkZ2VfZnVuY3MgewogCXZvaWQgKCphdG9t
aWNfZGVzdHJveV9zdGF0ZSkoc3RydWN0IGRybV9icmlkZ2UgKmJyaWRnZSwKIAkJCQkgICAgIHN0
cnVjdCBkcm1fYnJpZGdlX3N0YXRlICpzdGF0ZSk7CiAKKwkvKioKKwkgKiBAYXRvbWljX2dldF9v
dXRwdXRfYnVzX2ZtdHM6CisJICoKKwkgKiBSZXR1cm4gdGhlIHN1cHBvcnRlZCBidXMgZm9ybWF0
cyBvbiB0aGUgb3V0cHV0IGVuZCBvZiBhIGJyaWRnZS4KKwkgKiBUaGUgcmV0dXJuZWQgYXJyYXkg
bXVzdCBiZSBhbGxvY2F0ZWQgd2l0aCBrbWFsbG9jKCkgYW5kIHdpbGwgYmUKKwkgKiBmcmVlZCBi
eSB0aGUgY2FsbGVyLCBpZiB0aGUgYWxsb2NhdGlvbiBmYWlscywgTlVMTCBzaG91bGQgYmUKKwkg
KiByZXR1cm5lZC4gbnVtX291dHB1dF9mbXRzIG11c3QgYmUgc2V0IHRvIHRoZSByZXR1cm5lZCBh
cnJheSBzaXplLgorCSAqIEZvcm1hdHMgbGlzdGVkIGluIHRoZSByZXR1cm5lZCBhcnJheSBzaG91
bGQgYmUgbGlzdGVkIGluIGRlY3JlYXNpbmcKKwkgKiBwcmVmZXJlbmNlIG9yZGVyICh0aGUgY29y
ZSB3aWxsIHRyeSBhbGwgZm9ybWF0cyB1bnRpbCBpdCBmaW5kcyBvbmUKKwkgKiB0aGF0IHdvcmtz
KS4KKwkgKgorCSAqIFRoaXMgbWV0aG9kIGlzIG9ubHkgY2FsbGVkIG9uIHRoZSBsYXN0IGVsZW1l
bnQgb2YgdGhlIGJyaWRnZSBjaGFpbgorCSAqIGFzIHBhcnQgb2YgdGhlIGJ1cyBmb3JtYXQgbmVn
b3RpYXRpb24gcHJvY2VzcyB0aGF0IGhhcHBlbnMgaW4KKwkgKiAmZHJtX2F0b21pY19icmlkZ2Vf
Y2hhaW5fc2VsZWN0X2J1c19mbXRzKCkuCisJICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuIFdo
ZW4gbm90IGltcGxlbWVudGVkLCB0aGUgY29yZSB3aWxsCisJICogZmFsbGJhY2sgdG8gJmRybV9j
b25uZWN0b3IuZGlzcGxheV9pbmZvLmJ1c19mb3JtYXRzWzBdIGlmCisJICogJmRybV9jb25uZWN0
b3IuZGlzcGxheV9pbmZvLm51bV9idXNfZm9ybWF0cyA+IDAsCisJICogTUVESUFfQlVTX0ZNVF9G
SVhFRCBvdGhlcndpc2UuCisJICovCisJdTMyICooKmF0b21pY19nZXRfb3V0cHV0X2J1c19mbXRz
KShzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJpZGdlLAorCQkJCQkgICBzdHJ1Y3QgZHJtX2JyaWRnZV9z
dGF0ZSAqYnJpZGdlX3N0YXRlLAorCQkJCQkgICBzdHJ1Y3QgZHJtX2NydGNfc3RhdGUgKmNydGNf
c3RhdGUsCisJCQkJCSAgIHN0cnVjdCBkcm1fY29ubmVjdG9yX3N0YXRlICpjb25uX3N0YXRlLAor
CQkJCQkgICB1bnNpZ25lZCBpbnQgKm51bV9vdXRwdXRfZm10cyk7CisKKwkvKioKKwkgKiBAYXRv
bWljX2dldF9pbnB1dF9idXNfZm10czoKKwkgKgorCSAqIFJldHVybiB0aGUgc3VwcG9ydGVkIGJ1
cyBmb3JtYXRzIG9uIHRoZSBpbnB1dCBlbmQgb2YgYSBicmlkZ2UgZm9yCisJICogYSBzcGVjaWZp
YyBvdXRwdXQgYnVzIGZvcm1hdC4KKwkgKiBUaGUgcmV0dXJuZWQgYXJyYXkgbXVzdCBiZSBhbGxv
Y2F0ZWQgd2l0aCBrbWFsbG9jKCkgYW5kIHdpbGwgYmUKKwkgKiBmcmVlZCBieSB0aGUgY2FsbGVy
LCBpZiB0aGUgYWxsb2NhdGlvbiBmYWlscywgTlVMTCBzaG91bGQgYmUKKwkgKiByZXR1cm5lZC4g
bnVtX291dHB1dF9mbXRzIG11c3QgYmUgc2V0IHRvIHRoZSByZXR1cm5lZCBhcnJheSBzaXplLgor
CSAqIEZvcm1hdHMgbGlzdGVkIGluIHRoZSByZXR1cm5lZCBhcnJheSBzaG91bGQgYmUgbGlzdGVk
IGluIGRlY3JlYXNpbmcKKwkgKiBwcmVmZXJlbmNlIG9yZGVyICh0aGUgY29yZSB3aWxsIHRyeSBh
bGwgZm9ybWF0cyB1bnRpbCBpdCBmaW5kcyBvbmUKKwkgKiB0aGF0IHdvcmtzKS4KKwkgKgorCSAq
IFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbiBhbGwgZWxlbWVudCBvZiB0aGUgYnJpZGdlIGNoYWlu
IGFzIHBhcnQgb2YKKwkgKiB0aGUgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbiBwcm9jZXNzIHRoYXQg
aGFwcGVucyBpbgorCSAqICZkcm1fYXRvbWljX2JyaWRnZV9jaGFpbl9zZWxlY3RfYnVzX2ZtdHMo
KS4KKwkgKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC4gV2hlbiBub3QgaW1wbGVtZW50ZWQsIHRo
ZSBjb3JlIHdpbGwgYnlwYXNzCisJICogYnVzIGZvcm1hdCBuZWdvdGlhdGlvbiBvbiB0aGlzIGVs
ZW1lbnQgb2YgdGhlIGJyaWRnZSB3aXRob3V0CisJICogZmFpbGluZywgYW5kIHRoZSBwcmV2aW91
cyBlbGVtZW50IGluIHRoZSBjaGFpbiB3aWxsIGJlIHBhc3NlZAorCSAqIE1FRElBX0JVU19GTVRf
RklYRUQgYXMgaXRzIG91dHB1dCBidXMgZm9ybWF0LgorCSAqCisJICogQnJpZGdlIGRyaXZlcnMg
dGhhdCBuZWVkIHRvIHN1cHBvcnQgYmVpbmcgbGlua2VkIHRvIGJyaWRnZXMgdGhhdCBhcmUKKwkg
KiBub3Qgc3VwcG9ydGluZyBidXMgZm9ybWF0IG5lZ290aWF0aW9uIHNob3VsZCBoYW5kbGUgdGhl
CisJICogb3V0cHV0X2ZtdCA9PSBNRURJQV9CVVNfRk1UX0ZJWEVEIGNhc2UgYXBwcm9wcmlhdGVs
eSwgYnkgc2VsZWN0aW5nIGEKKwkgKiBzZW5zaWJsZSBkZWZhdWx0IHZhbHVlIG9yIGV4dHJhY3Rp
bmcgdGhpcyBpbmZvcm1hdGlvbiBmcm9tIHNvbWV3aGVyZQorCSAqIGVsc2UgKEZXIHByb3BlcnR5
LCAmZHJtX2Rpc3BsYXlfbW9kZSwgJmRybV9kaXNwbGF5X2luZm8sIC4uLikKKwkgKgorCSAqIE5v
dGU6IGV2ZW4gaWYgaW5wdXQgZm9ybWF0IHNlbGVjdGlvbiBvbiB0aGUgZmlyc3QgYnJpZGdlIGhh
cyBubworCSAqIGltcGFjdCBvbiB0aGUgbmVnb3RpYXRpb24gcHJvY2VzcyAoYnVzIGZvcm1hdCBu
ZWdvdGlhdGlvbiBzdG9wcyBvbmNlCisJICogd2UgcmVhY2ggdGhlIGZpcnN0IGVsZW1lbnQgb2Yg
dGhlIGNoYWluKSwgZHJpdmVycyBhcmUgZXhwZWN0ZWQgdG8KKwkgKiByZXR1cm4gYWNjdXJhdGUg
aW5wdXQgZm9ybWF0cy4KKwkgKi8KKwl1MzIgKigqYXRvbWljX2dldF9pbnB1dF9idXNfZm10cyko
c3RydWN0IGRybV9icmlkZ2UgKmJyaWRnZSwKKwkJCQkJICBzdHJ1Y3QgZHJtX2JyaWRnZV9zdGF0
ZSAqYnJpZGdlX3N0YXRlLAorCQkJCQkgIHN0cnVjdCBkcm1fY3J0Y19zdGF0ZSAqY3J0Y19zdGF0
ZSwKKwkJCQkJICBzdHJ1Y3QgZHJtX2Nvbm5lY3Rvcl9zdGF0ZSAqY29ubl9zdGF0ZSwKKwkJCQkJ
ICB1MzIgb3V0cHV0X2ZtdCwKKwkJCQkJICB1bnNpZ25lZCBpbnQgKm51bV9pbnB1dF9mbXRzKTsK
KwogCS8qKgogCSAqIEBhdG9taWNfY2hlY2s6CiAJICoKQEAgLTQwNyw2ICs0OTgsMTMgQEAgc3Ry
dWN0IGRybV9icmlkZ2VfZnVuY3MgewogCSAqIGNhbGxlZCB3aGVuICZkcm1fYnJpZGdlX2Z1bmNz
LmF0b21pY19jaGVjaygpIGlzIGltcGxlbWVudGVkLCBzbyBvbmx5CiAJICogb25lIG9mIHRoZW0g
c2hvdWxkIGJlIHByb3ZpZGVkLgogCSAqCisJICogSWYgZHJpdmVycyBuZWVkIHRvIHR3ZWFrICZk
cm1fYnJpZGdlX3N0YXRlLmlucHV0X2J1c19jZmcuZmxhZ3Mgb3IKKwkgKiAmZHJtX2JyaWRnZV9z
dGF0ZS5pbnB1dF9idXNfY2ZnLmZsYWdzIGl0IHNob3VsZCBzaG91bGQgaGFwcGVuIGluCisJICog
dGhpcyBmdW5jdGlvbi4gQnkgZGVmYXVsdCB0aG9zZSBmaWVsZHMgYXJlIHNldCB0byB0aGUgbmV4
dCBicmlkZ2UKKwkgKiAmZHJtX2JyaWRnZV9zdGF0ZS5pbnB1dF9idXNfY2ZnLmZsYWdzIHZhbHVl
IG9yCisJICogJmRybV9jb25uZWN0b3IuZGlzcGxheV9pbmZvLmJ1c19mbGFncyBpZiB0aGUgYnJp
ZGdlIGlzIHRoZSBsYXN0CisJICogZWxlbWVudCBpbiB0aGUgY2hhaW4uCisJICoKIAkgKiBSRVRV
Uk5TOgogCSAqIHplcm8gaWYgdGhlIGNoZWNrIHBhc3NlZCwgYSBuZWdhdGl2ZSBlcnJvciBjb2Rl
IG90aGVyd2lzZS4KIAkgKi8KQEAgLTU5NCw2ICs2OTIsMTQgQEAgdm9pZCBkcm1fYXRvbWljX2Jy
aWRnZV9jaGFpbl9wcmVfZW5hYmxlKHN0cnVjdCBkcm1fYnJpZGdlICpicmlkZ2UsCiB2b2lkIGRy
bV9hdG9taWNfYnJpZGdlX2NoYWluX2VuYWJsZShzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJpZGdlLAog
CQkJCSAgICBzdHJ1Y3QgZHJtX2F0b21pY19zdGF0ZSAqc3RhdGUpOwogCit1MzIgKgorZHJtX2F0
b21pY19oZWxwZXJfYnJpZGdlX3Byb3BhZ2F0ZV9idXNfZm10KHN0cnVjdCBkcm1fYnJpZGdlICpi
cmlkZ2UsCisJCQkJCXN0cnVjdCBkcm1fYnJpZGdlX3N0YXRlICpicmlkZ2Vfc3RhdGUsCisJCQkJ
CXN0cnVjdCBkcm1fY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSwKKwkJCQkJc3RydWN0IGRybV9jb25u
ZWN0b3Jfc3RhdGUgKmNvbm5fc3RhdGUsCisJCQkJCXUzMiBvdXRwdXRfZm10LAorCQkJCQl1bnNp
Z25lZCBpbnQgKm51bV9pbnB1dF9mbXRzKTsKKwogdm9pZCBfX2RybV9hdG9taWNfaGVscGVyX2Jy
aWRnZV9yZXNldChzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJpZGdlLAogCQkJCSAgICAgIHN0cnVjdCBk
cm1fYnJpZGdlX3N0YXRlICpzdGF0ZSk7CiBzdHJ1Y3QgZHJtX2JyaWRnZV9zdGF0ZSAqCi0tIAoy
LjIxLjAKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRy
aS1kZXZlbCBtYWlsaW5nIGxpc3QKZHJpLWRldmVsQGxpc3RzLmZyZWVkZXNrdG9wLm9yZwpodHRw
czovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xpc3RpbmZvL2RyaS1kZXZlbA==
