Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id A5C0E9BA3B
	for <lists+dri-devel@lfdr.de>; Sat, 24 Aug 2019 03:35:10 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 7D6E46ED87;
	Sat, 24 Aug 2019 01:35:07 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from mail-vk1-xa49.google.com (mail-vk1-xa49.google.com
 [IPv6:2607:f8b0:4864:20::a49])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 68DAF6ED87
 for <dri-devel@lists.freedesktop.org>; Sat, 24 Aug 2019 01:35:03 +0000 (UTC)
Received: by mail-vk1-xa49.google.com with SMTP id o75so4527457vke.3
 for <dri-devel@lists.freedesktop.org>; Fri, 23 Aug 2019 18:35:03 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:date:in-reply-to:message-id:mime-version
 :references:subject:from:to:cc;
 bh=RKvEkOlrbtCGcsAB272EoThhil2qrnBtSdQHhp/duDU=;
 b=bfO4Zwt0zdg4FzvrLBB8wrB6Z7q5dnM5sHFNUtVYWE2mnUD3WUDuLEiOwzzscwF8o2
 zoZt7TJ/v41tVD++axIERcPhwFQGR9xRxp7v4K5BIxMqhQuIeJGJjGWas2O9vdkuh/Fi
 Kcit8Ugh78xj3xuumjpS0tdlfEjIw6NQ5/5bXbEBLSJ/xB3GnhcXn+rOArqef9FWThFf
 3HNhgkAuM1vCBD14iDzAi7dlGbZMf+eVhI6ZE2x5mMEddU+XAw6QKHGGC8VqkPyDyDJP
 cZieQ+W+SaLyklPUJ8SfU0GViogECoEkYvDv28woewouBRQpz98iq8OgSLTZmmIOGCPE
 ootw==
X-Gm-Message-State: APjAAAXF0FrccODi/OkZ5UKWD4NzAxrirmo6beJr6YiiyLgBIiIXgA+2
 2rjy1kFdZhB499uhYTTiBsNtHQpFQggqL4x4t5UTFA==
X-Google-Smtp-Source: APXvYqwjcm0eRORkBdq0wpww3SFLNgOxqdjmHDPCzWjLBlybd0g7J4MQQ4uhOLw6/hlwykAU8IrWG/rNOdZZ9qQCHKgLYQ==
X-Received: by 2002:ab0:7782:: with SMTP id x2mr4008334uar.140.1566610500801; 
 Fri, 23 Aug 2019 18:35:00 -0700 (PDT)
Date: Fri, 23 Aug 2019 18:34:16 -0700
In-Reply-To: <20190824013425.175645-1-brendanhiggins@google.com>
Message-Id: <20190824013425.175645-10-brendanhiggins@google.com>
Mime-Version: 1.0
References: <20190824013425.175645-1-brendanhiggins@google.com>
X-Mailer: git-send-email 2.23.0.187.g17f5b7556c-goog
Subject: [PATCH v15 09/18] kunit: test: add support for test abort
From: Brendan Higgins <brendanhiggins@google.com>
To: frowand.list@gmail.com, gregkh@linuxfoundation.org, jpoimboe@redhat.com, 
 keescook@google.com, kieran.bingham@ideasonboard.com, mcgrof@kernel.org, 
 peterz@infradead.org, robh@kernel.org, sboyd@kernel.org, shuah@kernel.org, 
 tytso@mit.edu, yamada.masahiro@socionext.com
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=google.com; s=20161025;
 h=date:in-reply-to:message-id:mime-version:references:subject:from:to
 :cc;
 bh=RKvEkOlrbtCGcsAB272EoThhil2qrnBtSdQHhp/duDU=;
 b=sKQl/ggMxFNKtK4b2XjUWB1mXYbx8Uz1v+odpEh7Opx6JxBgMKNlnY7qtPiR7TXUuF
 qsddY8un1s1G1aspzuKd/13swMX4DZMOW5AnOB1Fvvs9VydG74ZyG+g6phJrdF43cKrr
 i2nAJijp7WdWEUBS1TFnD7edKAcb1y927l4hZ3E/jgoqYQx4B9ZR8ccv9bG+vLt1u7q8
 z7TeHjt+DUBEP22ET7yOQ238Bqv/xi8axGYH2NZDArjvWNQdWTf5kxnSc7PSBMRQkqPw
 C26Ayz+UXSVxpIqwkfSeqb2Iid/kzRAZPjVsWNU7Gfs1L0lynlfCJ1QNyWblIqxjQ+yT
 4Vwg==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: pmladek@suse.com, linux-doc@vger.kernel.org, amir73il@gmail.com,
 Brendan Higgins <brendanhiggins@google.com>, dri-devel@lists.freedesktop.org,
 Alexander.Levin@microsoft.com, linux-kselftest@vger.kernel.org,
 linux-nvdimm@lists.01.org, khilman@baylibre.com, knut.omang@oracle.com,
 wfg@linux.intel.com, joel@jms.id.au, rientjes@google.com, jdike@addtoit.com,
 dan.carpenter@oracle.com, devicetree@vger.kernel.org,
 linux-kbuild@vger.kernel.org, Tim.Bird@sony.com, linux-um@lists.infradead.org,
 rostedt@goodmis.org, julia.lawall@lip6.fr, kunit-dev@googlegroups.com,
 richard@nod.at, rdunlap@infradead.org, linux-kernel@vger.kernel.org,
 mpe@ellerman.id.au, linux-fsdevel@vger.kernel.org, logang@deltatee.com
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

QWRkIHN1cHBvcnQgZm9yIGFib3J0aW5nL2JhaWxpbmcgb3V0IG9mIHRlc3QgY2FzZXMsIHdoaWNo
IGlzIG5lZWRlZCBmb3IKaW1wbGVtZW50aW5nIGFzc2VydGlvbnMuCgpBbiBhc3NlcnRpb24gaXMg
bGlrZSBhbiBleHBlY3RhdGlvbiwgYnV0IGJhaWxzIG91dCBvZiB0aGUgdGVzdCBjYXNlCmVhcmx5
IGlmIHRoZSBhc3NlcnRpb24gaXMgbm90IG1ldC4gVGhlIGlkZWEgd2l0aCBhc3NlcnRpb25zIGlz
IHRoYXQgeW91CnVzZSB0aGVtIHRvIHN0YXRlIGFsbCB0aGUgcHJlY29uZGl0aW9ucyBmb3IgeW91
ciB0ZXN0LiBMb2dpY2FsbHkKc3BlYWtpbmcsIHRoZXNlIGFyZSB0aGUgcHJlbWlzZXMgb2YgdGhl
IHRlc3QgY2FzZSwgc28gaWYgYSBwcmVtaXNlIGlzbid0CnRydWUsIHRoZXJlIGlzIG5vIHBvaW50
IGluIGNvbnRpbnVpbmcgdGhlIHRlc3QgY2FzZSBiZWNhdXNlIHRoZXJlIGFyZSBubwpjb25jbHVz
aW9ucyB0aGF0IGNhbiBiZSBkcmF3biB3aXRob3V0IHRoZSBwcmVtaXNlcy4gV2hlcmVhcywgdGhl
CmV4cGVjdGF0aW9uIGlzIHRoZSB0aGluZyB5b3UgYXJlIHRyeWluZyB0byBwcm92ZS4KClNpZ25l
ZC1vZmYtYnk6IEJyZW5kYW4gSGlnZ2lucyA8YnJlbmRhbmhpZ2dpbnNAZ29vZ2xlLmNvbT4KUmV2
aWV3ZWQtYnk6IEdyZWcgS3JvYWgtSGFydG1hbiA8Z3JlZ2toQGxpbnV4Zm91bmRhdGlvbi5vcmc+
ClJldmlld2VkLWJ5OiBMb2dhbiBHdW50aG9ycGUgPGxvZ2FuZ0BkZWx0YXRlZS5jb20+ClJldmll
d2VkLWJ5OiBTdGVwaGVuIEJveWQgPHNib3lkQGtlcm5lbC5vcmc+Ci0tLQogaW5jbHVkZS9rdW5p
dC90ZXN0LmggICAgICB8ICAgMiArCiBpbmNsdWRlL2t1bml0L3RyeS1jYXRjaC5oIHwgIDc1ICsr
KysrKysrKysrKysrKysrKysrKwoga3VuaXQvTWFrZWZpbGUgICAgICAgICAgICB8ICAgMyArLQog
a3VuaXQvdGVzdC5jICAgICAgICAgICAgICB8IDEzNyArKysrKysrKysrKysrKysrKysrKysrKysr
KysrKysrKystLS0tLQoga3VuaXQvdHJ5LWNhdGNoLmMgICAgICAgICB8IDExOCArKysrKysrKysr
KysrKysrKysrKysrKysrKysrKysrKwogNSBmaWxlcyBjaGFuZ2VkLCAzMTkgaW5zZXJ0aW9ucygr
KSwgMTYgZGVsZXRpb25zKC0pCiBjcmVhdGUgbW9kZSAxMDA2NDQgaW5jbHVkZS9rdW5pdC90cnkt
Y2F0Y2guaAogY3JlYXRlIG1vZGUgMTAwNjQ0IGt1bml0L3RyeS1jYXRjaC5jCgpkaWZmIC0tZ2l0
IGEvaW5jbHVkZS9rdW5pdC90ZXN0LmggYi9pbmNsdWRlL2t1bml0L3Rlc3QuaAppbmRleCAzMGE2
MmRlMTZiYzkuLjNkNTU0ZDdjMWM3OSAxMDA2NDQKLS0tIGEvaW5jbHVkZS9rdW5pdC90ZXN0LmgK
KysrIGIvaW5jbHVkZS9rdW5pdC90ZXN0LmgKQEAgLTEwLDYgKzEwLDcgQEAKICNkZWZpbmUgX0tV
TklUX1RFU1RfSAogCiAjaW5jbHVkZSA8a3VuaXQvYXNzZXJ0Lmg+CisjaW5jbHVkZSA8a3VuaXQv
dHJ5LWNhdGNoLmg+CiAjaW5jbHVkZSA8bGludXgva2VybmVsLmg+CiAjaW5jbHVkZSA8bGludXgv
c2xhYi5oPgogI2luY2x1ZGUgPGxpbnV4L3R5cGVzLmg+CkBAIC0xNzIsNiArMTczLDcgQEAgc3Ry
dWN0IGt1bml0IHsKIAogCS8qIHByaXZhdGU6IGludGVybmFsIHVzZSBvbmx5LiAqLwogCWNvbnN0
IGNoYXIgKm5hbWU7IC8qIFJlYWQgb25seSBhZnRlciBpbml0aWFsaXphdGlvbiEgKi8KKwlzdHJ1
Y3Qga3VuaXRfdHJ5X2NhdGNoIHRyeV9jYXRjaDsKIAkvKgogCSAqIHN1Y2Nlc3Mgc3RhcnRzIGFz
IHRydWUsIGFuZCBtYXkgb25seSBiZSBzZXQgdG8gZmFsc2UgZHVyaW5nIGEKIAkgKiB0ZXN0IGNh
c2U7IHRodXMsIGl0IGlzIHNhZmUgdG8gdXBkYXRlIHRoaXMgYWNyb3NzIG11bHRpcGxlCmRpZmYg
LS1naXQgYS9pbmNsdWRlL2t1bml0L3RyeS1jYXRjaC5oIGIvaW5jbHVkZS9rdW5pdC90cnktY2F0
Y2guaApuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMDAuLjQwNGYzMzZjYmRj
OAotLS0gL2Rldi9udWxsCisrKyBiL2luY2x1ZGUva3VuaXQvdHJ5LWNhdGNoLmgKQEAgLTAsMCAr
MSw3NSBAQAorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAgKi8KKy8qCisgKiBB
biBBUEkgdG8gYWxsb3cgYSBmdW5jdGlvbiwgdGhhdCBtYXkgZmFpbCwgdG8gYmUgZXhlY3V0ZWQs
IGFuZCByZWNvdmVyIGluIGEKKyAqIGNvbnRyb2xsZWQgbWFubmVyLgorICoKKyAqIENvcHlyaWdo
dCAoQykgMjAxOSwgR29vZ2xlIExMQy4KKyAqIEF1dGhvcjogQnJlbmRhbiBIaWdnaW5zIDxicmVu
ZGFuaGlnZ2luc0Bnb29nbGUuY29tPgorICovCisKKyNpZm5kZWYgX0tVTklUX1RSWV9DQVRDSF9I
CisjZGVmaW5lIF9LVU5JVF9UUllfQ0FUQ0hfSAorCisjaW5jbHVkZSA8bGludXgvdHlwZXMuaD4K
KwordHlwZWRlZiB2b2lkICgqa3VuaXRfdHJ5X2NhdGNoX2Z1bmNfdCkodm9pZCAqKTsKKworc3Ry
dWN0IGNvbXBsZXRpb247CitzdHJ1Y3Qga3VuaXQ7CisKKy8qKgorICogc3RydWN0IGt1bml0X3Ry
eV9jYXRjaCAtIHByb3ZpZGVzIGEgZ2VuZXJpYyB3YXkgdG8gcnVuIGNvZGUgd2hpY2ggbWlnaHQg
ZmFpbC4KKyAqIEB0ZXN0OiBUaGUgdGVzdCBjYXNlIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIGV4
ZWN1dGVkLgorICogQHRyeV9jb21wbGV0aW9uOiBDb21wbGV0aW9uIHRoYXQgdGhlIGNvbnRyb2wg
dGhyZWFkIHdhaXRzIG9uIHdoaWxlIHRlc3QgcnVucy4KKyAqIEB0cnlfcmVzdWx0OiBDb250YWlu
cyBhbnkgZXJybm8gb2J0YWluZWQgd2hpbGUgcnVubmluZyB0ZXN0IGNhc2UuCisgKiBAdHJ5OiBU
aGUgZnVuY3Rpb24sIHRoZSB0ZXN0IGNhc2UsIHRvIGF0dGVtcHQgdG8gcnVuLgorICogQGNhdGNo
OiBUaGUgZnVuY3Rpb24gY2FsbGVkIGlmIEB0cnkgYmFpbHMgb3V0LgorICogQGNvbnRleHQ6IHVz
ZWQgdG8gcGFzcyB1c2VyIGRhdGEgdG8gdGhlIHRyeSBhbmQgY2F0Y2ggZnVuY3Rpb25zLgorICoK
KyAqIGt1bml0X3RyeV9jYXRjaCBwcm92aWRlcyBhIGdlbmVyaWMsIGFyY2hpdGVjdHVyZSBpbmRl
cGVuZGVudCB3YXkgdG8gZXhlY3V0ZQorICogYW4gYXJiaXRyYXJ5IGZ1bmN0aW9uIG9mIHR5cGUg
a3VuaXRfdHJ5X2NhdGNoX2Z1bmNfdCB3aGljaCBtYXkgYmFpbCBvdXQgYnkKKyAqIGNhbGxpbmcg
a3VuaXRfdHJ5X2NhdGNoX3Rocm93KCkuIElmIGt1bml0X3RyeV9jYXRjaF90aHJvdygpIGlzIGNh
bGxlZCwgQHRyeQorICogaXMgc3RvcHBlZCBhdCB0aGUgc2l0ZSBvZiBpbnZvY2F0aW9uIGFuZCBA
Y2F0Y2ggaXMgY2FsbGVkLgorICoKKyAqIHN0cnVjdCBrdW5pdF90cnlfY2F0Y2ggcHJvdmlkZXMg
YSBnZW5lcmljIGludGVyZmFjZSBmb3IgdGhlIGZ1bmN0aW9uYWxpdHkKKyAqIG5lZWRlZCB0byBp
bXBsZW1lbnQga3VuaXQtPmFib3J0KCkgd2hpY2ggaW4gdHVybiBpcyBuZWVkZWQgZm9yIGltcGxl
bWVudGluZworICogYXNzZXJ0aW9ucy4gQXNzZXJ0aW9ucyBhbGxvdyBzdGF0aW5nIGEgcHJlY29u
ZGl0aW9uIGZvciBhIHRlc3Qgc2ltcGxpZnlpbmcKKyAqIGhvdyB0ZXN0IGNhc2VzIGFyZSB3cml0
dGVuIGFuZCBwcmVzZW50ZWQuCisgKgorICogQXNzZXJ0aW9ucyBhcmUgbGlrZSBleHBlY3RhdGlv
bnMsIGV4Y2VwdCB0aGV5IGFib3J0IChjYWxsCisgKiBrdW5pdF90cnlfY2F0Y2hfdGhyb3coKSkg
d2hlbiB0aGUgc3BlY2lmaWVkIGNvbmRpdGlvbiBpcyBub3QgbWV0LiBUaGlzIGlzCisgKiB1c2Vm
dWwgd2hlbiB5b3UgbG9vayBhdCBhIHRlc3QgY2FzZSBhcyBhIGxvZ2ljYWwgc3RhdGVtZW50IGFi
b3V0IHNvbWUgcGllY2UKKyAqIG9mIGNvZGUsIHdoZXJlIGFzc2VydGlvbnMgYXJlIHRoZSBwcmVt
aXNlcyBmb3IgdGhlIHRlc3QgY2FzZSwgYW5kIHRoZQorICogY29uY2x1c2lvbiBpcyBhIHNldCBv
ZiBwcmVkaWNhdGVzLCByYXRoZXIgZXhwZWN0YXRpb25zLCB0aGF0IG11c3QgYWxsIGJlCisgKiB0
cnVlLiBJZiB5b3VyIHByZW1pc2VzIGFyZSB2aW9sYXRlZCwgaXQgZG9lcyBub3QgbWFrZXMgc2Vu
c2UgdG8gY29udGludWUuCisgKi8KK3N0cnVjdCBrdW5pdF90cnlfY2F0Y2ggeworCS8qIHByaXZh
dGU6IGludGVybmFsIHVzZSBvbmx5LiAqLworCXN0cnVjdCBrdW5pdCAqdGVzdDsKKwlzdHJ1Y3Qg
Y29tcGxldGlvbiAqdHJ5X2NvbXBsZXRpb247CisJaW50IHRyeV9yZXN1bHQ7CisJa3VuaXRfdHJ5
X2NhdGNoX2Z1bmNfdCB0cnk7CisJa3VuaXRfdHJ5X2NhdGNoX2Z1bmNfdCBjYXRjaDsKKwl2b2lk
ICpjb250ZXh0OworfTsKKwordm9pZCBrdW5pdF90cnlfY2F0Y2hfaW5pdChzdHJ1Y3Qga3VuaXRf
dHJ5X2NhdGNoICp0cnlfY2F0Y2gsCisJCQkgIHN0cnVjdCBrdW5pdCAqdGVzdCwKKwkJCSAga3Vu
aXRfdHJ5X2NhdGNoX2Z1bmNfdCB0cnksCisJCQkgIGt1bml0X3RyeV9jYXRjaF9mdW5jX3QgY2F0
Y2gpOworCit2b2lkIGt1bml0X3RyeV9jYXRjaF9ydW4oc3RydWN0IGt1bml0X3RyeV9jYXRjaCAq
dHJ5X2NhdGNoLCB2b2lkICpjb250ZXh0KTsKKwordm9pZCBfX25vcmV0dXJuIGt1bml0X3RyeV9j
YXRjaF90aHJvdyhzdHJ1Y3Qga3VuaXRfdHJ5X2NhdGNoICp0cnlfY2F0Y2gpOworCitzdGF0aWMg
aW5saW5lIGludCBrdW5pdF90cnlfY2F0Y2hfZ2V0X3Jlc3VsdChzdHJ1Y3Qga3VuaXRfdHJ5X2Nh
dGNoICp0cnlfY2F0Y2gpCit7CisJcmV0dXJuIHRyeV9jYXRjaC0+dHJ5X3Jlc3VsdDsKK30KKwor
LyoKKyAqIEV4cG9zZWQgZm9yIHRlc3Rpbmcgb25seS4KKyAqLwordm9pZCBrdW5pdF9nZW5lcmlj
X3RyeV9jYXRjaF9pbml0KHN0cnVjdCBrdW5pdF90cnlfY2F0Y2ggKnRyeV9jYXRjaCk7CisKKyNl
bmRpZiAvKiBfS1VOSVRfVFJZX0NBVENIX0ggKi8KZGlmZiAtLWdpdCBhL2t1bml0L01ha2VmaWxl
IGIva3VuaXQvTWFrZWZpbGUKaW5kZXggNGU0NjQ1MGJjYjNhLi5jOTE3NmM5YzU3OGMgMTAwNjQ0
Ci0tLSBhL2t1bml0L01ha2VmaWxlCisrKyBiL2t1bml0L01ha2VmaWxlCkBAIC0xLDYgKzEsNyBA
QAogb2JqLSQoQ09ORklHX0tVTklUKSArPQkJCXRlc3QubyBcCiAJCQkJCXN0cmluZy1zdHJlYW0u
byBcCi0JCQkJCWFzc2VydC5vCisJCQkJCWFzc2VydC5vIFwKKwkJCQkJdHJ5LWNhdGNoLm8KIAog
b2JqLSQoQ09ORklHX0tVTklUX1RFU1QpICs9CQlzdHJpbmctc3RyZWFtLXRlc3QubwogCmRpZmYg
LS1naXQgYS9rdW5pdC90ZXN0LmMgYi9rdW5pdC90ZXN0LmMKaW5kZXggM2NiY2ViMzRiM2IzLi5i
MmNhOWI5NGMzNTMgMTAwNjQ0Ci0tLSBhL2t1bml0L3Rlc3QuYworKysgYi9rdW5pdC90ZXN0LmMK
QEAgLTcsNyArNyw5IEBACiAgKi8KIAogI2luY2x1ZGUgPGt1bml0L3Rlc3QuaD4KKyNpbmNsdWRl
IDxrdW5pdC90cnktY2F0Y2guaD4KICNpbmNsdWRlIDxsaW51eC9rZXJuZWwuaD4KKyNpbmNsdWRl
IDxsaW51eC9zY2hlZC9kZWJ1Zy5oPgogCiBzdGF0aWMgdm9pZCBrdW5pdF9zZXRfZmFpbHVyZShz
dHJ1Y3Qga3VuaXQgKnRlc3QpCiB7CkBAIC0xNjIsNiArMTY0LDE5IEBAIHN0YXRpYyB2b2lkIGt1
bml0X2ZhaWwoc3RydWN0IGt1bml0ICp0ZXN0LCBzdHJ1Y3Qga3VuaXRfYXNzZXJ0ICphc3NlcnQp
CiAJV0FSTl9PTihzdHJpbmdfc3RyZWFtX2Rlc3Ryb3koc3RyZWFtKSk7CiB9CiAKK3N0YXRpYyB2
b2lkIF9fbm9yZXR1cm4ga3VuaXRfYWJvcnQoc3RydWN0IGt1bml0ICp0ZXN0KQoreworCWt1bml0
X3RyeV9jYXRjaF90aHJvdygmdGVzdC0+dHJ5X2NhdGNoKTsgLyogRG9lcyBub3QgcmV0dXJuLiAq
LworCisJLyoKKwkgKiBUaHJvdyBjb3VsZCBub3QgYWJvcnQgZnJvbSB0ZXN0LgorCSAqCisJICog
WFhYOiB3ZSBzaG91bGQgbmV2ZXIgcmVhY2ggdGhpcyBsaW5lISBBcyBrdW5pdF90cnlfY2F0Y2hf
dGhyb3cgaXMKKwkgKiBtYXJrZWQgX19ub3JldHVybi4KKwkgKi8KKwlXQVJOX09OQ0UodHJ1ZSwg
IlRocm93IGNvdWxkIG5vdCBhYm9ydCBmcm9tIHRlc3QhXG4iKTsKK30KKwogdm9pZCBrdW5pdF9k
b19hc3NlcnRpb24oc3RydWN0IGt1bml0ICp0ZXN0LAogCQkJc3RydWN0IGt1bml0X2Fzc2VydCAq
YXNzZXJ0LAogCQkJYm9vbCBwYXNzLApAQCAtMTgwLDYgKzE5NSw5IEBAIHZvaWQga3VuaXRfZG9f
YXNzZXJ0aW9uKHN0cnVjdCBrdW5pdCAqdGVzdCwKIAlrdW5pdF9mYWlsKHRlc3QsIGFzc2VydCk7
CiAKIAl2YV9lbmQoYXJncyk7CisKKwlpZiAoYXNzZXJ0LT50eXBlID09IEtVTklUX0FTU0VSVElP
TikKKwkJa3VuaXRfYWJvcnQodGVzdCk7CiB9CiAKIHZvaWQga3VuaXRfaW5pdF90ZXN0KHN0cnVj
dCBrdW5pdCAqdGVzdCwgY29uc3QgY2hhciAqbmFtZSkKQEAgLTE5MSwzMyArMjA5LDEyMiBAQCB2
b2lkIGt1bml0X2luaXRfdGVzdChzdHJ1Y3Qga3VuaXQgKnRlc3QsIGNvbnN0IGNoYXIgKm5hbWUp
CiB9CiAKIC8qCi0gKiBQZXJmb3JtcyBhbGwgbG9naWMgdG8gcnVuIGEgdGVzdCBjYXNlLgorICog
SW5pdGlhbGl6ZXMgYW5kIHJ1bnMgdGVzdCBjYXNlLiBEb2VzIG5vdCBjbGVhbiB1cCBvciBkbyBw
b3N0IHZhbGlkYXRpb25zLgogICovCi1zdGF0aWMgdm9pZCBrdW5pdF9ydW5fY2FzZShzdHJ1Y3Qg
a3VuaXRfc3VpdGUgKnN1aXRlLAotCQkJICAgc3RydWN0IGt1bml0X2Nhc2UgKnRlc3RfY2FzZSkK
K3N0YXRpYyB2b2lkIGt1bml0X3J1bl9jYXNlX2ludGVybmFsKHN0cnVjdCBrdW5pdCAqdGVzdCwK
KwkJCQkgICAgc3RydWN0IGt1bml0X3N1aXRlICpzdWl0ZSwKKwkJCQkgICAgc3RydWN0IGt1bml0
X2Nhc2UgKnRlc3RfY2FzZSkKIHsKLQlzdHJ1Y3Qga3VuaXQgdGVzdDsKLQotCWt1bml0X2luaXRf
dGVzdCgmdGVzdCwgdGVzdF9jYXNlLT5uYW1lKTsKLQogCWlmIChzdWl0ZS0+aW5pdCkgewogCQlp
bnQgcmV0OwogCi0JCXJldCA9IHN1aXRlLT5pbml0KCZ0ZXN0KTsKKwkJcmV0ID0gc3VpdGUtPmlu
aXQodGVzdCk7CiAJCWlmIChyZXQpIHsKLQkJCWt1bml0X2VycigmdGVzdCwgImZhaWxlZCB0byBp
bml0aWFsaXplOiAlZFxuIiwgcmV0KTsKLQkJCWt1bml0X3NldF9mYWlsdXJlKCZ0ZXN0KTsKLQkJ
CXRlc3RfY2FzZS0+c3VjY2VzcyA9IHRlc3Quc3VjY2VzczsKKwkJCWt1bml0X2Vycih0ZXN0LCAi
ZmFpbGVkIHRvIGluaXRpYWxpemU6ICVkXG4iLCByZXQpOworCQkJa3VuaXRfc2V0X2ZhaWx1cmUo
dGVzdCk7CiAJCQlyZXR1cm47CiAJCX0KIAl9CiAKLQl0ZXN0X2Nhc2UtPnJ1bl9jYXNlKCZ0ZXN0
KTsKKwl0ZXN0X2Nhc2UtPnJ1bl9jYXNlKHRlc3QpOworfQogCitzdGF0aWMgdm9pZCBrdW5pdF9j
YXNlX2ludGVybmFsX2NsZWFudXAoc3RydWN0IGt1bml0ICp0ZXN0KQoreworCWt1bml0X2NsZWFu
dXAodGVzdCk7Cit9CisKKy8qCisgKiBQZXJmb3JtcyBwb3N0IHZhbGlkYXRpb25zIGFuZCBjbGVh
bnVwIGFmdGVyIGEgdGVzdCBjYXNlIHdhcyBydW4uCisgKiBYWFg6IFNob3VsZCBPTkxZIEJFIENB
TExFRCBBRlRFUiBrdW5pdF9ydW5fY2FzZV9pbnRlcm5hbCEKKyAqLworc3RhdGljIHZvaWQga3Vu
aXRfcnVuX2Nhc2VfY2xlYW51cChzdHJ1Y3Qga3VuaXQgKnRlc3QsCisJCQkJICAgc3RydWN0IGt1
bml0X3N1aXRlICpzdWl0ZSkKK3sKIAlpZiAoc3VpdGUtPmV4aXQpCi0JCXN1aXRlLT5leGl0KCZ0
ZXN0KTsKKwkJc3VpdGUtPmV4aXQodGVzdCk7CisKKwlrdW5pdF9jYXNlX2ludGVybmFsX2NsZWFu
dXAodGVzdCk7Cit9CisKK3N0cnVjdCBrdW5pdF90cnlfY2F0Y2hfY29udGV4dCB7CisJc3RydWN0
IGt1bml0ICp0ZXN0OworCXN0cnVjdCBrdW5pdF9zdWl0ZSAqc3VpdGU7CisJc3RydWN0IGt1bml0
X2Nhc2UgKnRlc3RfY2FzZTsKK307CisKK3N0YXRpYyB2b2lkIGt1bml0X3RyeV9ydW5fY2FzZSh2
b2lkICpkYXRhKQoreworCXN0cnVjdCBrdW5pdF90cnlfY2F0Y2hfY29udGV4dCAqY3R4ID0gZGF0
YTsKKwlzdHJ1Y3Qga3VuaXQgKnRlc3QgPSBjdHgtPnRlc3Q7CisJc3RydWN0IGt1bml0X3N1aXRl
ICpzdWl0ZSA9IGN0eC0+c3VpdGU7CisJc3RydWN0IGt1bml0X2Nhc2UgKnRlc3RfY2FzZSA9IGN0
eC0+dGVzdF9jYXNlOworCisJLyoKKwkgKiBrdW5pdF9ydW5fY2FzZV9pbnRlcm5hbCBtYXkgZW5j
b3VudGVyIGEgZmF0YWwgZXJyb3I7IGlmIGl0IGRvZXMsCisJICogYWJvcnQgd2lsbCBiZSBjYWxs
ZWQsIHRoaXMgdGhyZWFkIHdpbGwgZXhpdCwgYW5kIGZpbmFsbHkgdGhlIHBhcmVudAorCSAqIHRo
cmVhZCB3aWxsIHJlc3VtZSBjb250cm9sIGFuZCBoYW5kbGUgYW55IG5lY2Vzc2FyeSBjbGVhbiB1
cC4KKwkgKi8KKwlrdW5pdF9ydW5fY2FzZV9pbnRlcm5hbCh0ZXN0LCBzdWl0ZSwgdGVzdF9jYXNl
KTsKKwkvKiBUaGlzIGxpbmUgbWF5IG5ldmVyIGJlIHJlYWNoZWQuICovCisJa3VuaXRfcnVuX2Nh
c2VfY2xlYW51cCh0ZXN0LCBzdWl0ZSk7Cit9CisKK3N0YXRpYyB2b2lkIGt1bml0X2NhdGNoX3J1
bl9jYXNlKHZvaWQgKmRhdGEpCit7CisJc3RydWN0IGt1bml0X3RyeV9jYXRjaF9jb250ZXh0ICpj
dHggPSBkYXRhOworCXN0cnVjdCBrdW5pdCAqdGVzdCA9IGN0eC0+dGVzdDsKKwlzdHJ1Y3Qga3Vu
aXRfc3VpdGUgKnN1aXRlID0gY3R4LT5zdWl0ZTsKKwlpbnQgdHJ5X2V4aXRfY29kZSA9IGt1bml0
X3RyeV9jYXRjaF9nZXRfcmVzdWx0KCZ0ZXN0LT50cnlfY2F0Y2gpOworCisJaWYgKHRyeV9leGl0
X2NvZGUpIHsKKwkJa3VuaXRfc2V0X2ZhaWx1cmUodGVzdCk7CisJCS8qCisJCSAqIFRlc3QgY2Fz
ZSBjb3VsZCBub3QgZmluaXNoLCB3ZSBoYXZlIG5vIGlkZWEgd2hhdCBzdGF0ZSBpdCBpcworCQkg
KiBpbiwgc28gZG9uJ3QgZG8gY2xlYW4gdXAuCisJCSAqLworCQlpZiAodHJ5X2V4aXRfY29kZSA9
PSAtRVRJTUVET1VUKSB7CisJCQlrdW5pdF9lcnIodGVzdCwgInRlc3QgY2FzZSB0aW1lZCBvdXRc
biIpOworCQkvKgorCQkgKiBVbmtub3duIGludGVybmFsIGVycm9yIG9jY3VycmVkIHByZXZlbnRp
bmcgdGVzdCBjYXNlIGZyb20KKwkJICogcnVubmluZywgc28gdGhlcmUgaXMgbm90aGluZyB0byBj
bGVhbiB1cC4KKwkJICovCisJCX0gZWxzZSB7CisJCQlrdW5pdF9lcnIodGVzdCwgImludGVybmFs
IGVycm9yIG9jY3VycmVkIHByZXZlbnRpbmcgdGVzdCBjYXNlIGZyb20gcnVubmluZzogJWRcbiIs
CisJCQkJICB0cnlfZXhpdF9jb2RlKTsKKwkJfQorCQlyZXR1cm47CisJfQorCisJLyoKKwkgKiBU
ZXN0IGNhc2Ugd2FzIHJ1biwgYnV0IGFib3J0ZWQuIEl0IGlzIHRoZSB0ZXN0IGNhc2UncyBidXNp
bmVzcyBhcyB0bworCSAqIHdoZXRoZXIgaXQgZmFpbGVkIG9yIG5vdCwgd2UganVzdCBuZWVkIHRv
IGNsZWFuIHVwLgorCSAqLworCWt1bml0X3J1bl9jYXNlX2NsZWFudXAodGVzdCwgc3VpdGUpOwor
fQorCisvKgorICogUGVyZm9ybXMgYWxsIGxvZ2ljIHRvIHJ1biBhIHRlc3QgY2FzZS4gSXQgYWxz
byBjYXRjaGVzIG1vc3QgZXJyb3JzIHRoYXQKKyAqIG9jY3VyIGluIGEgdGVzdCBjYXNlIGFuZCBy
ZXBvcnRzIHRoZW0gYXMgZmFpbHVyZXMuCisgKi8KK3N0YXRpYyB2b2lkIGt1bml0X3J1bl9jYXNl
X2NhdGNoX2Vycm9ycyhzdHJ1Y3Qga3VuaXRfc3VpdGUgKnN1aXRlLAorCQkJCQlzdHJ1Y3Qga3Vu
aXRfY2FzZSAqdGVzdF9jYXNlKQoreworCXN0cnVjdCBrdW5pdF90cnlfY2F0Y2hfY29udGV4dCBj
b250ZXh0OworCXN0cnVjdCBrdW5pdF90cnlfY2F0Y2ggKnRyeV9jYXRjaDsKKwlzdHJ1Y3Qga3Vu
aXQgdGVzdDsKKworCWt1bml0X2luaXRfdGVzdCgmdGVzdCwgdGVzdF9jYXNlLT5uYW1lKTsKKwl0
cnlfY2F0Y2ggPSAmdGVzdC50cnlfY2F0Y2g7CiAKLQlrdW5pdF9jbGVhbnVwKCZ0ZXN0KTsKKwlr
dW5pdF90cnlfY2F0Y2hfaW5pdCh0cnlfY2F0Y2gsCisJCQkgICAgICZ0ZXN0LAorCQkJICAgICBr
dW5pdF90cnlfcnVuX2Nhc2UsCisJCQkgICAgIGt1bml0X2NhdGNoX3J1bl9jYXNlKTsKKwljb250
ZXh0LnRlc3QgPSAmdGVzdDsKKwljb250ZXh0LnN1aXRlID0gc3VpdGU7CisJY29udGV4dC50ZXN0
X2Nhc2UgPSB0ZXN0X2Nhc2U7CisJa3VuaXRfdHJ5X2NhdGNoX3J1bih0cnlfY2F0Y2gsICZjb250
ZXh0KTsKIAogCXRlc3RfY2FzZS0+c3VjY2VzcyA9IHRlc3Quc3VjY2VzczsKIH0KQEAgLTIzMCw3
ICszMzcsNyBAQCBpbnQga3VuaXRfcnVuX3Rlc3RzKHN0cnVjdCBrdW5pdF9zdWl0ZSAqc3VpdGUp
CiAJa3VuaXRfcHJpbnRfc3VidGVzdF9zdGFydChzdWl0ZSk7CiAKIAlmb3IgKHRlc3RfY2FzZSA9
IHN1aXRlLT50ZXN0X2Nhc2VzOyB0ZXN0X2Nhc2UtPnJ1bl9jYXNlOyB0ZXN0X2Nhc2UrKykgewot
CQlrdW5pdF9ydW5fY2FzZShzdWl0ZSwgdGVzdF9jYXNlKTsKKwkJa3VuaXRfcnVuX2Nhc2VfY2F0
Y2hfZXJyb3JzKHN1aXRlLCB0ZXN0X2Nhc2UpOwogCQlrdW5pdF9wcmludF90ZXN0X2Nhc2Vfb2tf
bm90X29rKHRlc3RfY2FzZSwgdGVzdF9jYXNlX2NvdW50KyspOwogCX0KIApkaWZmIC0tZ2l0IGEv
a3VuaXQvdHJ5LWNhdGNoLmMgYi9rdW5pdC90cnktY2F0Y2guYwpuZXcgZmlsZSBtb2RlIDEwMDY0
NAppbmRleCAwMDAwMDAwMDAwMDAuLjU1Njg2ODM5ZWI2MQotLS0gL2Rldi9udWxsCisrKyBiL2t1
bml0L3RyeS1jYXRjaC5jCkBAIC0wLDAgKzEsMTE4IEBACisvLyBTUERYLUxpY2Vuc2UtSWRlbnRp
ZmllcjogR1BMLTIuMAorLyoKKyAqIEFuIEFQSSB0byBhbGxvdyBhIGZ1bmN0aW9uLCB0aGF0IG1h
eSBmYWlsLCB0byBiZSBleGVjdXRlZCwgYW5kIHJlY292ZXIgaW4gYQorICogY29udHJvbGxlZCBt
YW5uZXIuCisgKgorICogQ29weXJpZ2h0IChDKSAyMDE5LCBHb29nbGUgTExDLgorICogQXV0aG9y
OiBCcmVuZGFuIEhpZ2dpbnMgPGJyZW5kYW5oaWdnaW5zQGdvb2dsZS5jb20+CisgKi8KKworI2lu
Y2x1ZGUgPGt1bml0L3Rlc3QuaD4KKyNpbmNsdWRlIDxrdW5pdC90cnktY2F0Y2guaD4KKyNpbmNs
dWRlIDxsaW51eC9jb21wbGV0aW9uLmg+CisjaW5jbHVkZSA8bGludXgva2VybmVsLmg+CisjaW5j
bHVkZSA8bGludXgva3RocmVhZC5oPgorI2luY2x1ZGUgPGxpbnV4L3NjaGVkL3N5c2N0bC5oPgor
Cit2b2lkIF9fbm9yZXR1cm4ga3VuaXRfdHJ5X2NhdGNoX3Rocm93KHN0cnVjdCBrdW5pdF90cnlf
Y2F0Y2ggKnRyeV9jYXRjaCkKK3sKKwl0cnlfY2F0Y2gtPnRyeV9yZXN1bHQgPSAtRUZBVUxUOwor
CWNvbXBsZXRlX2FuZF9leGl0KHRyeV9jYXRjaC0+dHJ5X2NvbXBsZXRpb24sIC1FRkFVTFQpOwor
fQorCitzdGF0aWMgaW50IGt1bml0X2dlbmVyaWNfcnVuX3RocmVhZGZuX2FkYXB0ZXIodm9pZCAq
ZGF0YSkKK3sKKwlzdHJ1Y3Qga3VuaXRfdHJ5X2NhdGNoICp0cnlfY2F0Y2ggPSBkYXRhOworCisJ
dHJ5X2NhdGNoLT50cnkodHJ5X2NhdGNoLT5jb250ZXh0KTsKKworCWNvbXBsZXRlX2FuZF9leGl0
KHRyeV9jYXRjaC0+dHJ5X2NvbXBsZXRpb24sIDApOworfQorCitzdGF0aWMgdW5zaWduZWQgbG9u
ZyBrdW5pdF90ZXN0X3RpbWVvdXQodm9pZCkKK3sKKwl1bnNpZ25lZCBsb25nIHRpbWVvdXRfbXNl
Y3M7CisKKwkvKgorCSAqIFRPRE8oYnJlbmRhbmhpZ2dpbnNAZ29vZ2xlLmNvbSk6IFdlIHNob3Vs
ZCBwcm9iYWJseSBoYXZlIHNvbWUgdHlwZSBvZgorCSAqIHZhcmlhYmxlIHRpbWVvdXQgaGVyZS4g
VGhlIG9ubHkgcXVlc3Rpb24gaXMgd2hhdCB0aGF0IHRpbWVvdXQgdmFsdWUKKwkgKiBzaG91bGQg
YmUuCisJICoKKwkgKiBUaGUgaW50ZW50aW9uIGhhcyBhbHdheXMgYmVlbiwgYXQgc29tZSBwb2lu
dCwgdG8gYmUgYWJsZSB0byBsYWJlbAorCSAqIHRlc3RzIHdpdGggc29tZSB0eXBlIG9mIHNpemUg
YnVja2V0ICh1bml0L3NtYWxsLCBpbnRlZ3JhdGlvbi9tZWRpdW0sCisJICogbGFyZ2Uvc3lzdGVt
L2VuZC10by1lbmQsIGV0YyksIHdoZXJlIGVhY2ggc2l6ZSBidWNrZXQgd291bGQgZ2V0IGEKKwkg
KiBkZWZhdWx0IHRpbWVvdXQgdmFsdWUga2luZCBvZiBsaWtlIHdoYXQgQmF6ZWwgZG9lczoKKwkg
KiBodHRwczovL2RvY3MuYmF6ZWwuYnVpbGQvdmVyc2lvbnMvbWFzdGVyL2JlL2NvbW1vbi1kZWZp
bml0aW9ucy5odG1sI3Rlc3Quc2l6ZQorCSAqIFRoZXJlIGlzIHN0aWxsIHNvbWUgZGViYXRlIHRv
IGJlIGhhZCBvbiBleGFjdGx5IGhvdyB3ZSBkbyB0aGlzLiAoRm9yCisJICogb25lLCB3ZSBwcm9i
YWJseSB3YW50IHRvIGhhdmUgc29tZSBzb3J0IG9mIHRlc3QgcnVubmVyIGxldmVsCisJICogdGlt
ZW91dC4pCisJICoKKwkgKiBGb3IgbW9yZSBiYWNrZ3JvdW5kIG9uIHRoaXMgdG9waWMsIHNlZToK
KwkgKiBodHRwczovL21pa2UtYmxhbmQuY29tLzIwMTEvMTEvMDEvc21hbGwtbWVkaXVtLWxhcmdl
Lmh0bWwKKwkgKi8KKwlpZiAoc3lzY3RsX2h1bmdfdGFza190aW1lb3V0X3NlY3MpIHsKKwkJLyoK
KwkJICogSWYgc3lzY3RsX2h1bmdfdGFzayBpcyBhY3RpdmUsIGp1c3Qgc2V0IHRoZSB0aW1lb3V0
IHRvIHNvbWUKKwkJICogdmFsdWUgbGVzcyB0aGFuIHRoYXQuCisJCSAqCisJCSAqIEluIHJlZ2Fy
ZHMgdG8gdGhlIGFib3ZlIFRPRE8sIGlmIHdlIGRlY2lkZSBvbiB2YXJpYWJsZQorCQkgKiB0aW1l
b3V0cywgdGhpcyBsb2dpYyB3aWxsIGxpa2VseSBuZWVkIHRvIGNoYW5nZS4KKwkJICovCisJCXRp
bWVvdXRfbXNlY3MgPSAoc3lzY3RsX2h1bmdfdGFza190aW1lb3V0X3NlY3MgLSAxKSAqCisJCQkJ
TVNFQ19QRVJfU0VDOworCX0gZWxzZSB7CisJCXRpbWVvdXRfbXNlY3MgPSAzMDAgKiBNU0VDX1BF
Ul9TRUM7IC8qIDUgbWluICovCisJfQorCisJcmV0dXJuIHRpbWVvdXRfbXNlY3M7Cit9CisKK3Zv
aWQga3VuaXRfdHJ5X2NhdGNoX3J1bihzdHJ1Y3Qga3VuaXRfdHJ5X2NhdGNoICp0cnlfY2F0Y2gs
IHZvaWQgKmNvbnRleHQpCit7CisJREVDTEFSRV9DT01QTEVUSU9OX09OU1RBQ0sodHJ5X2NvbXBs
ZXRpb24pOworCXN0cnVjdCBrdW5pdCAqdGVzdCA9IHRyeV9jYXRjaC0+dGVzdDsKKwlzdHJ1Y3Qg
dGFza19zdHJ1Y3QgKnRhc2tfc3RydWN0OworCWludCBleGl0X2NvZGUsIHRpbWVfcmVtYWluaW5n
OworCisJdHJ5X2NhdGNoLT5jb250ZXh0ID0gY29udGV4dDsKKwl0cnlfY2F0Y2gtPnRyeV9jb21w
bGV0aW9uID0gJnRyeV9jb21wbGV0aW9uOworCXRyeV9jYXRjaC0+dHJ5X3Jlc3VsdCA9IDA7CisJ
dGFza19zdHJ1Y3QgPSBrdGhyZWFkX3J1bihrdW5pdF9nZW5lcmljX3J1bl90aHJlYWRmbl9hZGFw
dGVyLAorCQkJCSAgdHJ5X2NhdGNoLAorCQkJCSAgImt1bml0X3RyeV9jYXRjaF90aHJlYWQiKTsK
KwlpZiAoSVNfRVJSKHRhc2tfc3RydWN0KSkgeworCQl0cnlfY2F0Y2gtPmNhdGNoKHRyeV9jYXRj
aC0+Y29udGV4dCk7CisJCXJldHVybjsKKwl9CisKKwl0aW1lX3JlbWFpbmluZyA9IHdhaXRfZm9y
X2NvbXBsZXRpb25fdGltZW91dCgmdHJ5X2NvbXBsZXRpb24sCisJCQkJCQkgICAgIGt1bml0X3Rl
c3RfdGltZW91dCgpKTsKKwlpZiAodGltZV9yZW1haW5pbmcgPT0gMCkgeworCQlrdW5pdF9lcnIo
dGVzdCwgInRyeSB0aW1lZCBvdXRcbiIpOworCQl0cnlfY2F0Y2gtPnRyeV9yZXN1bHQgPSAtRVRJ
TUVET1VUOworCX0KKworCWV4aXRfY29kZSA9IHRyeV9jYXRjaC0+dHJ5X3Jlc3VsdDsKKworCWlm
ICghZXhpdF9jb2RlKQorCQlyZXR1cm47CisKKwlpZiAoZXhpdF9jb2RlID09IC1FRkFVTFQpCisJ
CXRyeV9jYXRjaC0+dHJ5X3Jlc3VsdCA9IDA7CisJZWxzZSBpZiAoZXhpdF9jb2RlID09IC1FSU5U
UikKKwkJa3VuaXRfZXJyKHRlc3QsICJ3YWtlX3VwX3Byb2Nlc3MoKSB3YXMgbmV2ZXIgY2FsbGVk
XG4iKTsKKwllbHNlIGlmIChleGl0X2NvZGUpCisJCWt1bml0X2Vycih0ZXN0LCAiVW5rbm93biBl
cnJvcjogJWRcbiIsIGV4aXRfY29kZSk7CisKKwl0cnlfY2F0Y2gtPmNhdGNoKHRyeV9jYXRjaC0+
Y29udGV4dCk7Cit9CisKK3ZvaWQga3VuaXRfdHJ5X2NhdGNoX2luaXQoc3RydWN0IGt1bml0X3Ry
eV9jYXRjaCAqdHJ5X2NhdGNoLAorCQkJICBzdHJ1Y3Qga3VuaXQgKnRlc3QsCisJCQkgIGt1bml0
X3RyeV9jYXRjaF9mdW5jX3QgdHJ5LAorCQkJICBrdW5pdF90cnlfY2F0Y2hfZnVuY190IGNhdGNo
KQoreworCXRyeV9jYXRjaC0+dGVzdCA9IHRlc3Q7CisJdHJ5X2NhdGNoLT50cnkgPSB0cnk7CisJ
dHJ5X2NhdGNoLT5jYXRjaCA9IGNhdGNoOworfQotLSAKMi4yMy4wLjE4Ny5nMTdmNWI3NTU2Yy1n
b29nCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkcmkt
ZGV2ZWwgbWFpbGluZyBsaXN0CmRyaS1kZXZlbEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6
Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9kcmktZGV2ZWw=
