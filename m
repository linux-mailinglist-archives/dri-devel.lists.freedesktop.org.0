Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 33A2927E7C
	for <lists+dri-devel@lfdr.de>; Thu, 23 May 2019 15:44:52 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 80B2C89E59;
	Thu, 23 May 2019 13:44:39 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from smtp.domeneshop.no (smtp.domeneshop.no
 [IPv6:2a01:5b40:0:3005::1])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 854ED89DF9;
 Thu, 23 May 2019 13:44:37 +0000 (UTC)
Received: from 211.81-166-168.customer.lyse.net ([81.166.168.211]:53376
 helo=localhost.localdomain)
 by smtp.domeneshop.no with esmtpsa (TLS1.2:ECDHE_RSA_AES_128_CBC_SHA1:128)
 (Exim 4.84_2) (envelope-from <noralf@tronnes.org>)
 id 1hTo1L-0002si-Ie; Thu, 23 May 2019 15:44:35 +0200
From: =?UTF-8?q?Noralf=20Tr=C3=B8nnes?= <noralf@tronnes.org>
To: dri-devel@lists.freedesktop.org
Subject: [PATCH v6 2/8] drm/fb-helper: Remove drm_fb_helper_crtc
Date: Thu, 23 May 2019 15:44:07 +0200
Message-Id: <20190523134413.4210-3-noralf@tronnes.org>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190523134413.4210-1-noralf@tronnes.org>
References: <20190523134413.4210-1-noralf@tronnes.org>
MIME-Version: 1.0
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt;
 c=relaxed/relaxed; d=tronnes.org; s=ds201810; 
 h=Content-Transfer-Encoding:Content-Type:MIME-Version:References:In-Reply-To:Message-Id:Date:Subject:Cc:To:From;
 bh=Ddta8KrRaqlCTkGBupw7d2uCEkJJQmJDqr/4vRWUY0w=; 
 b=NSXYQ6pPgFoA7Ny4USDFMYXd9emU6ROAajEuVaIEO/gG3o5kuxR9qLnfblFCOT25o7tOEludZ1t33f0rEdTKOX0Lqweh/7gEP+8u8/M2CzoSPEQmzfVoIqnqs5VmG45CGlzx4jmL8HVQJ2lxBrzEXQ/wbCzJaPdHZk6iYYu2SsowuELLLJ8s64UGMOBol/Thdzpzcj5LFMfUJNzLz1RERBxw9kPT7Dw1GKf0oY6xtOq5kb6nYdmMuy4+CTtS7t6Fp4kcFdlMG+aiRvqFCRjGUhOzMWC2HQtE+FylXObIk2YNAxQHzK0wkG7tB+j+Tkqw8zwVcCa9tG4jhzIc0x8p4A==;
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: intel-gfx@lists.freedesktop.org, Sam Ravnborg <sam@ravnborg.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

c3RydWN0IGRybV9mYl9oZWxwZXJfY3J0YyBpcyBub3cganVzdCBhIHdyYXBwZXIgYXJvdW5kIGRy
bV9tb2RlX3NldCBzbwp1c2UgdGhhdCBkaXJlY3RseSBpbnN0ZWFkIGFuZCBhdHRhY2ggaXQgYXMg
YSBtb2Rlc2V0IGFycmF5IG9udG8KZHJtX2NsaWVudF9kZXYuIGRybV9mYl9oZWxwZXIgd2lsbCB1
c2UgdGhpcyBhcnJheSB0byBzdG9yZSBpdHMgbW9kZXNldHMKd2hpY2ggbWVhbnMgaXQgd2lsbCBh
bHdheXMgaW5pdGlhbGl6ZSBhIGRybV9jbGllbnQsIGJ1dCBpdCB3aWxsIG5vdApyZWdpc3RlciB0
aGUgY2xpZW50IChjYWxsYmFja3MpIHVubGVzcyBpdCdzIHRoZSBnZW5lcmljIGZiZGV2IGVtdWxh
dGlvbi4KCkNvZGUgd2lsbCBsYXRlciBiZSBtb3ZlZCB0byBkcm1fY2xpZW50LCBzbyBhZGQgY29k
ZSB0aGVyZSBpbiBhIG5ldyBmaWxlCmRybV9jbGllbnRfbW9kZXNldC5jIHdpdGggTUlUIGxpY2Vu
c2UgdG8gbWF0Y2ggZHJtX2ZiX2hlbHBlci5jLgoKVGhlIG1vZGVzZXQgY29ubmVjdG9yIGFycmF5
IHNpemUgaXMgaGFyZGNvZGVkIGZvciB0aGUgY2xvbmVkIGNhc2UgdG8gYXZvaWQKaGF2aW5nIHRv
IHBhc3MgaW4gYSB2YWx1ZSBmcm9tIHRoZSBkcml2ZXIuIEEgdmFsdWUgb2YgOCBpcyBjaG9zZW4g
dG8gZXJyCm9uIHRoZSBzYWZlIHNpZGUuIFRoaXMgbWVhbnMgdGhhdCB0aGUgbWF4IGNvbm5lY3Rv
ciBhcmd1bWVudCBmb3IKZHJtX2ZiX2hlbHBlcl9pbml0KCkgYW5kIGRybV9mYl9oZWxwZXJfZmJk
ZXZfc2V0dXAoKSBpc24ndCB1c2VkIGFueW1vcmUsCmEgdG9kbyBlbnRyeSBmb3IgdGhpcyBpcyBh
ZGRlZC4KCkluIHBhbl9kaXNwbGF5X2F0b21pYygpIHJlc3RvcmVfZmJkZXZfbW9kZV9mb3JjZSgp
IGlzIHVzZWQgaW5zdGVhZCBvZgpyZXN0b3JlX2ZiZGV2X21vZGVfYXRvbWljKCkgYmVjYXVzZSB0
aGF0IG9uZSB3aWxsIGxhdGVyIGJlY29tZSBpbnRlcm5hbAp0byBkcm1fY2xpZW50X21vZGVzZXQu
CgpMb2NraW5nIG9yZGVyOgoxLiBkcm1fZmJfaGVscGVyLT5sb2NrCjIuIGRybV9tYXN0ZXJfaW50
ZXJuYWxfYWNxdWlyZQozLiBkcm1fY2xpZW50X2Rldi0+bW9kZXNldF9tdXRleAoKdjY6IEltcHJv
dmUgY29tbWl0IG1lc3NhZ2UgKFNhbSBSYXZuYm9yZykKCnYzOgotIFVzZSBmdWxsIGRybV9jbGll
bnRfaW5pdC9yZWxlYXNlIGZvciB0aGUgbW9kZXNldHMgKERhbmllbCBWZXR0ZXIpCi0gZHJtX2Ns
aWVudF9mb3JfZWFjaF9tb2Rlc2V0OiB1c2UgbG9ja2RlcF9hc3NlcnRfaGVsZCAoRGFuaWVsIFZl
dHRlcikKLSBIb29rIHVwIHRvIERvY3VtZW50YXRpb24vZ3B1L2RybS1jbGllbnQucnN0IChEYW5p
ZWwgVmV0dGVyKQoKdjI6Ci0gQWRkIG1vZGVzZXRzIGFycmF5IHRvIGRybV9jbGllbnQgKERhbmll
bCBWZXR0ZXIpCi0gVXNlIGEgbmV3IGZpbGUgZm9yIHRoZSBtb2Rlc2V0IGNvZGUgKERhbmllbCBW
ZXR0ZXIpCi0gRmlsZSBoYXMgdG8gYmUgTUlUIGxpY2Vuc2VkIChFbW1hbnVlbCBWYWRvdCkKLSBB
ZGQgY29weXJpZ2h0cyBmcm9tIGRybV9mYl9oZWxwZXIuYwoKU2lnbmVkLW9mZi1ieTogTm9yYWxm
IFRyw7hubmVzIDxub3JhbGZAdHJvbm5lcy5vcmc+ClJldmlld2VkLWJ5OiBTYW0gUmF2bmJvcmcg
PHNhbUByYXZuYm9yZy5vcmc+Ci0tLQogRG9jdW1lbnRhdGlvbi9ncHUvZHJtLWNsaWVudC5yc3Qg
ICAgIHwgICAzICsKIERvY3VtZW50YXRpb24vZ3B1L3RvZG8ucnN0ICAgICAgICAgICB8ICAgMyAr
CiBkcml2ZXJzL2dwdS9kcm0vTWFrZWZpbGUgICAgICAgICAgICAgfCAgIDIgKy0KIGRyaXZlcnMv
Z3B1L2RybS9kcm1fY2xpZW50LmMgICAgICAgICB8ICAxMCArLQogZHJpdmVycy9ncHUvZHJtL2Ry
bV9jbGllbnRfbW9kZXNldC5jIHwgMTA0ICsrKysrKysrKwogZHJpdmVycy9ncHUvZHJtL2RybV9m
Yl9oZWxwZXIuYyAgICAgIHwgMzAxICsrKysrKysrKysrLS0tLS0tLS0tLS0tLS0tLQogaW5jbHVk
ZS9kcm0vZHJtX2NsaWVudC5oICAgICAgICAgICAgIHwgIDMwICsrKwogaW5jbHVkZS9kcm0vZHJt
X2ZiX2hlbHBlci5oICAgICAgICAgIHwgICA4IC0KIDggZmlsZXMgY2hhbmdlZCwgMjc0IGluc2Vy
dGlvbnMoKyksIDE4NyBkZWxldGlvbnMoLSkKIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dw
dS9kcm0vZHJtX2NsaWVudF9tb2Rlc2V0LmMKCmRpZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9uL2dw
dS9kcm0tY2xpZW50LnJzdCBiL0RvY3VtZW50YXRpb24vZ3B1L2RybS1jbGllbnQucnN0CmluZGV4
IDdlNjcyMDYzZTdlYi4uNThiNWExZDEyMTlkIDEwMDY0NAotLS0gYS9Eb2N1bWVudGF0aW9uL2dw
dS9kcm0tY2xpZW50LnJzdAorKysgYi9Eb2N1bWVudGF0aW9uL2dwdS9kcm0tY2xpZW50LnJzdApA
QCAtMTAsMyArMTAsNiBAQCBLZXJuZWwgY2xpZW50cwogCiAuLiBrZXJuZWwtZG9jOjogZHJpdmVy
cy9ncHUvZHJtL2RybV9jbGllbnQuYwogICAgOmV4cG9ydDoKKworLi4ga2VybmVsLWRvYzo6IGRy
aXZlcnMvZ3B1L2RybS9kcm1fY2xpZW50X21vZGVzZXQuYworICAgOmV4cG9ydDoKZGlmZiAtLWdp
dCBhL0RvY3VtZW50YXRpb24vZ3B1L3RvZG8ucnN0IGIvRG9jdW1lbnRhdGlvbi9ncHUvdG9kby5y
c3QKaW5kZXggNjZmMDVmNGU0NjlmLi45ZDQwMzhjNTAwMTMgMTAwNjQ0Ci0tLSBhL0RvY3VtZW50
YXRpb24vZ3B1L3RvZG8ucnN0CisrKyBiL0RvY3VtZW50YXRpb24vZ3B1L3RvZG8ucnN0CkBAIC0y
ODksNiArMjg5LDkgQEAgZHJtX2ZiX2hlbHBlciB0YXNrcwogICB0aGVzZSBpZ3QgdGVzdHMgbmVl
ZCB0byBiZSBmaXhlZDoga21zX2ZiY29uX2ZidEBwc3IgYW5kCiAgIGttc19mYmNvbl9mYnRAcHNy
LXN1c3BlbmQuCiAKKy0gVGhlIG1heCBjb25uZWN0b3IgYXJndW1lbnQgZm9yIGRybV9mYl9oZWxw
ZXJfaW5pdCgpIGFuZAorICBkcm1fZmJfaGVscGVyX2ZiZGV2X3NldHVwKCkgaXNuJ3QgdXNlZCBh
bnltb3JlIGFuZCBjYW4gYmUgcmVtb3ZlZC4KKwogQ29yZSByZWZhY3RvcmluZ3MKID09PT09PT09
PT09PT09PT09CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9NYWtlZmlsZSBiL2RyaXZl
cnMvZ3B1L2RybS9NYWtlZmlsZQppbmRleCA0YzNkYzQyNjhiNjUuLjllYWQ2NDM2ZmI4NyAxMDA2
NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL01ha2VmaWxlCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9N
YWtlZmlsZQpAQCAtMTcsNyArMTcsNyBAQCBkcm0teSAgICAgICA6PQlkcm1fYXV0aC5vIGRybV9j
YWNoZS5vIFwKIAkJZHJtX3BsYW5lLm8gZHJtX2NvbG9yX21nbXQubyBkcm1fcHJpbnQubyBcCiAJ
CWRybV9kdW1iX2J1ZmZlcnMubyBkcm1fbW9kZV9jb25maWcubyBkcm1fdmJsYW5rLm8gXAogCQlk
cm1fc3luY29iai5vIGRybV9sZWFzZS5vIGRybV93cml0ZWJhY2subyBkcm1fY2xpZW50Lm8gXAot
CQlkcm1fYXRvbWljX3VhcGkubworCQlkcm1fY2xpZW50X21vZGVzZXQubyBkcm1fYXRvbWljX3Vh
cGkubwogCiBkcm0tJChDT05GSUdfRFJNX0xFR0FDWSkgKz0gZHJtX2xlZ2FjeV9taXNjLm8gZHJt
X2J1ZnMubyBkcm1fY29udGV4dC5vIGRybV9kbWEubyBkcm1fc2NhdHRlci5vIGRybV9sb2NrLm8K
IGRybS0kKENPTkZJR19EUk1fTElCX1JBTkRPTSkgKz0gbGliL2RybV9yYW5kb20ubwpkaWZmIC0t
Z2l0IGEvZHJpdmVycy9ncHUvZHJtL2RybV9jbGllbnQuYyBiL2RyaXZlcnMvZ3B1L2RybS9kcm1f
Y2xpZW50LmMKaW5kZXggNWFiY2Q4M2RhNmE2Li43N2FhMWNmMDljYWEgMTAwNjQ0Ci0tLSBhL2Ry
aXZlcnMvZ3B1L2RybS9kcm1fY2xpZW50LmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2RybV9jbGll
bnQuYwpAQCAtMjcsNyArMjcsNiBAQAogICogRE9DOiBvdmVydmlldwogICoKICAqIFRoaXMgbGli
cmFyeSBwcm92aWRlcyBzdXBwb3J0IGZvciBjbGllbnRzIHJ1bm5pbmcgaW4gdGhlIGtlcm5lbCBs
aWtlIGZiZGV2IGFuZCBib290c3BsYXNoLgotICogQ3VycmVudGx5IGl0J3Mgb25seSBwYXJ0aWFs
bHkgaW1wbGVtZW50ZWQsIGp1c3QgZW5vdWdoIHRvIHN1cHBvcnQgZmJkZXYuCiAgKgogICogR0VN
IGRyaXZlcnMgd2hpY2ggcHJvdmlkZSBhIEdFTSBiYXNlZCBkdW1iIGJ1ZmZlciB3aXRoIGEgdmly
dHVhbCBhZGRyZXNzIGFyZSBzdXBwb3J0ZWQuCiAgKi8KQEAgLTkyLDE0ICs5MSwyMCBAQCBpbnQg
ZHJtX2NsaWVudF9pbml0KHN0cnVjdCBkcm1fZGV2aWNlICpkZXYsIHN0cnVjdCBkcm1fY2xpZW50
X2RldiAqY2xpZW50LAogCWNsaWVudC0+bmFtZSA9IG5hbWU7CiAJY2xpZW50LT5mdW5jcyA9IGZ1
bmNzOwogCi0JcmV0ID0gZHJtX2NsaWVudF9vcGVuKGNsaWVudCk7CisJcmV0ID0gZHJtX2NsaWVu
dF9tb2Rlc2V0X2NyZWF0ZShjbGllbnQpOwogCWlmIChyZXQpCiAJCWdvdG8gZXJyX3B1dF9tb2R1
bGU7CiAKKwlyZXQgPSBkcm1fY2xpZW50X29wZW4oY2xpZW50KTsKKwlpZiAocmV0KQorCQlnb3Rv
IGVycl9mcmVlOworCiAJZHJtX2Rldl9nZXQoZGV2KTsKIAogCXJldHVybiAwOwogCitlcnJfZnJl
ZToKKwlkcm1fY2xpZW50X21vZGVzZXRfZnJlZShjbGllbnQpOwogZXJyX3B1dF9tb2R1bGU6CiAJ
aWYgKGZ1bmNzKQogCQltb2R1bGVfcHV0KGZ1bmNzLT5vd25lcik7CkBAIC0xNDgsNiArMTUzLDcg
QEAgdm9pZCBkcm1fY2xpZW50X3JlbGVhc2Uoc3RydWN0IGRybV9jbGllbnRfZGV2ICpjbGllbnQp
CiAKIAlEUk1fREVWX0RFQlVHX0tNUyhkZXYtPmRldiwgIiVzXG4iLCBjbGllbnQtPm5hbWUpOwog
CisJZHJtX2NsaWVudF9tb2Rlc2V0X2ZyZWUoY2xpZW50KTsKIAlkcm1fY2xpZW50X2Nsb3NlKGNs
aWVudCk7CiAJZHJtX2Rldl9wdXQoZGV2KTsKIAlpZiAoY2xpZW50LT5mdW5jcykKZGlmZiAtLWdp
dCBhL2RyaXZlcnMvZ3B1L2RybS9kcm1fY2xpZW50X21vZGVzZXQuYyBiL2RyaXZlcnMvZ3B1L2Ry
bS9kcm1fY2xpZW50X21vZGVzZXQuYwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAw
MDAwMDAuLjY2NzcwZWQzMjk5ZQotLS0gL2Rldi9udWxsCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9k
cm1fY2xpZW50X21vZGVzZXQuYwpAQCAtMCwwICsxLDEwNCBAQAorLy8gU1BEWC1MaWNlbnNlLUlk
ZW50aWZpZXI6IE1JVAorLyoKKyAqIENvcHlyaWdodCAyMDE4IE5vcmFsZiBUcsO4bm5lcworICog
Q29weXJpZ2h0IChjKSAyMDA2LTIwMDkgUmVkIEhhdCBJbmMuCisgKiBDb3B5cmlnaHQgKGMpIDIw
MDYtMjAwOCBJbnRlbCBDb3Jwb3JhdGlvbgorICogICBKZXNzZSBCYXJuZXMgPGplc3NlLmJhcm5l
c0BpbnRlbC5jb20+CisgKiBDb3B5cmlnaHQgKGMpIDIwMDcgRGF2ZSBBaXJsaWUgPGFpcmxpZWRA
bGludXguaWU+CisgKi8KKworI2luY2x1ZGUgPGxpbnV4L21vZHVsZS5oPgorI2luY2x1ZGUgPGxp
bnV4L211dGV4Lmg+CisjaW5jbHVkZSA8bGludXgvc2xhYi5oPgorCisjaW5jbHVkZSA8ZHJtL2Ry
bV9jbGllbnQuaD4KKyNpbmNsdWRlIDxkcm0vZHJtX2NydGMuaD4KKyNpbmNsdWRlIDxkcm0vZHJt
X2RldmljZS5oPgorCitpbnQgZHJtX2NsaWVudF9tb2Rlc2V0X2NyZWF0ZShzdHJ1Y3QgZHJtX2Ns
aWVudF9kZXYgKmNsaWVudCkKK3sKKwlzdHJ1Y3QgZHJtX2RldmljZSAqZGV2ID0gY2xpZW50LT5k
ZXY7CisJdW5zaWduZWQgaW50IG51bV9jcnRjID0gZGV2LT5tb2RlX2NvbmZpZy5udW1fY3J0YzsK
Kwl1bnNpZ25lZCBpbnQgbWF4X2Nvbm5lY3Rvcl9jb3VudCA9IDE7CisJc3RydWN0IGRybV9tb2Rl
X3NldCAqbW9kZXNldDsKKwlzdHJ1Y3QgZHJtX2NydGMgKmNydGM7CisJdW5zaWduZWQgaW50IGkg
PSAwOworCisJLyogQWRkIHRlcm1pbmF0aW5nIHplcm8gZW50cnkgdG8gZW5hYmxlIGluZGV4IGxl
c3MgaXRlcmF0aW9uICovCisJY2xpZW50LT5tb2Rlc2V0cyA9IGtjYWxsb2MobnVtX2NydGMgKyAx
LCBzaXplb2YoKmNsaWVudC0+bW9kZXNldHMpLCBHRlBfS0VSTkVMKTsKKwlpZiAoIWNsaWVudC0+
bW9kZXNldHMpCisJCXJldHVybiAtRU5PTUVNOworCisJbXV0ZXhfaW5pdCgmY2xpZW50LT5tb2Rl
c2V0X211dGV4KTsKKworCWRybV9mb3JfZWFjaF9jcnRjKGNydGMsIGRldikKKwkJY2xpZW50LT5t
b2Rlc2V0c1tpKytdLmNydGMgPSBjcnRjOworCisJLyogQ2xvbmluZyBpcyBvbmx5IHN1cHBvcnRl
ZCBpbiB0aGUgc2luZ2xlIGNydGMgY2FzZS4gKi8KKwlpZiAobnVtX2NydGMgPT0gMSkKKwkJbWF4
X2Nvbm5lY3Rvcl9jb3VudCA9IERSTV9DTElFTlRfTUFYX0NMT05FRF9DT05ORUNUT1JTOworCisJ
Zm9yIChtb2Rlc2V0ID0gY2xpZW50LT5tb2Rlc2V0czsgbW9kZXNldC0+Y3J0YzsgbW9kZXNldCsr
KSB7CisJCW1vZGVzZXQtPmNvbm5lY3RvcnMgPSBrY2FsbG9jKG1heF9jb25uZWN0b3JfY291bnQs
CisJCQkJCSAgICAgIHNpemVvZigqbW9kZXNldC0+Y29ubmVjdG9ycyksIEdGUF9LRVJORUwpOwor
CQlpZiAoIW1vZGVzZXQtPmNvbm5lY3RvcnMpCisJCQlnb3RvIGVycl9mcmVlOworCX0KKworCXJl
dHVybiAwOworCitlcnJfZnJlZToKKwlkcm1fY2xpZW50X21vZGVzZXRfZnJlZShjbGllbnQpOwor
CisJcmV0dXJuIC1FTk9NRU07Cit9CisKK3ZvaWQgZHJtX2NsaWVudF9tb2Rlc2V0X3JlbGVhc2Uo
c3RydWN0IGRybV9jbGllbnRfZGV2ICpjbGllbnQpCit7CisJc3RydWN0IGRybV9tb2RlX3NldCAq
bW9kZXNldDsKKwl1bnNpZ25lZCBpbnQgaTsKKworCWRybV9jbGllbnRfZm9yX2VhY2hfbW9kZXNl
dChtb2Rlc2V0LCBjbGllbnQpIHsKKwkJZHJtX21vZGVfZGVzdHJveShjbGllbnQtPmRldiwgbW9k
ZXNldC0+bW9kZSk7CisJCW1vZGVzZXQtPm1vZGUgPSBOVUxMOworCQltb2Rlc2V0LT5mYiA9IE5V
TEw7CisKKwkJZm9yIChpID0gMDsgaSA8IG1vZGVzZXQtPm51bV9jb25uZWN0b3JzOyBpKyspIHsK
KwkJCWRybV9jb25uZWN0b3JfcHV0KG1vZGVzZXQtPmNvbm5lY3RvcnNbaV0pOworCQkJbW9kZXNl
dC0+Y29ubmVjdG9yc1tpXSA9IE5VTEw7CisJCX0KKwkJbW9kZXNldC0+bnVtX2Nvbm5lY3RvcnMg
PSAwOworCX0KK30KKy8qIFRPRE86IFJlbW92ZSBleHBvcnQgd2hlbiBtb2Rlc2V0IGNvZGUgaGFz
IGJlZW4gbW92ZWQgb3ZlciAqLworRVhQT1JUX1NZTUJPTChkcm1fY2xpZW50X21vZGVzZXRfcmVs
ZWFzZSk7CisKK3ZvaWQgZHJtX2NsaWVudF9tb2Rlc2V0X2ZyZWUoc3RydWN0IGRybV9jbGllbnRf
ZGV2ICpjbGllbnQpCit7CisJc3RydWN0IGRybV9tb2RlX3NldCAqbW9kZXNldDsKKworCW11dGV4
X2xvY2soJmNsaWVudC0+bW9kZXNldF9tdXRleCk7CisKKwlkcm1fY2xpZW50X21vZGVzZXRfcmVs
ZWFzZShjbGllbnQpOworCisJZHJtX2NsaWVudF9mb3JfZWFjaF9tb2Rlc2V0KG1vZGVzZXQsIGNs
aWVudCkKKwkJa2ZyZWUobW9kZXNldC0+Y29ubmVjdG9ycyk7CisKKwltdXRleF91bmxvY2soJmNs
aWVudC0+bW9kZXNldF9tdXRleCk7CisKKwltdXRleF9kZXN0cm95KCZjbGllbnQtPm1vZGVzZXRf
bXV0ZXgpOworCWtmcmVlKGNsaWVudC0+bW9kZXNldHMpOworfQorCitzdHJ1Y3QgZHJtX21vZGVf
c2V0ICpkcm1fY2xpZW50X2ZpbmRfbW9kZXNldChzdHJ1Y3QgZHJtX2NsaWVudF9kZXYgKmNsaWVu
dCwgc3RydWN0IGRybV9jcnRjICpjcnRjKQoreworCXN0cnVjdCBkcm1fbW9kZV9zZXQgKm1vZGVz
ZXQ7CisKKwlkcm1fY2xpZW50X2Zvcl9lYWNoX21vZGVzZXQobW9kZXNldCwgY2xpZW50KQorCQlp
ZiAobW9kZXNldC0+Y3J0YyA9PSBjcnRjKQorCQkJcmV0dXJuIG1vZGVzZXQ7CisKKwlyZXR1cm4g
TlVMTDsKK30KKy8qIFRPRE86IFJlbW92ZSBleHBvcnQgd2hlbiBtb2Rlc2V0IGNvZGUgaGFzIGJl
ZW4gbW92ZWQgb3ZlciAqLworRVhQT1JUX1NZTUJPTChkcm1fY2xpZW50X2ZpbmRfbW9kZXNldCk7
CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vZHJtX2ZiX2hlbHBlci5jIGIvZHJpdmVycy9n
cHUvZHJtL2RybV9mYl9oZWxwZXIuYwppbmRleCAzMDJjZjVmOGJjY2UuLmRlZTE2ZDk3ZjNkYSAx
MDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2RybV9mYl9oZWxwZXIuYworKysgYi9kcml2ZXJz
L2dwdS9kcm0vZHJtX2ZiX2hlbHBlci5jCkBAIC0zMTcsMTMgKzMxNywxMSBAQCBpbnQgZHJtX2Zi
X2hlbHBlcl9kZWJ1Z19lbnRlcihzdHJ1Y3QgZmJfaW5mbyAqaW5mbykKIHsKIAlzdHJ1Y3QgZHJt
X2ZiX2hlbHBlciAqaGVscGVyID0gaW5mby0+cGFyOwogCWNvbnN0IHN0cnVjdCBkcm1fY3J0Y19o
ZWxwZXJfZnVuY3MgKmZ1bmNzOwotCWludCBpOworCXN0cnVjdCBkcm1fbW9kZV9zZXQgKm1vZGVf
c2V0OwogCiAJbGlzdF9mb3JfZWFjaF9lbnRyeShoZWxwZXIsICZrZXJuZWxfZmJfaGVscGVyX2xp
c3QsIGtlcm5lbF9mYl9saXN0KSB7Ci0JCWZvciAoaSA9IDA7IGkgPCBoZWxwZXItPmNydGNfY291
bnQ7IGkrKykgewotCQkJc3RydWN0IGRybV9tb2RlX3NldCAqbW9kZV9zZXQgPQotCQkJCSZoZWxw
ZXItPmNydGNfaW5mb1tpXS5tb2RlX3NldDsKLQorCQltdXRleF9sb2NrKCZoZWxwZXItPmNsaWVu
dC5tb2Rlc2V0X211dGV4KTsKKwkJZHJtX2NsaWVudF9mb3JfZWFjaF9tb2Rlc2V0KG1vZGVfc2V0
LCAmaGVscGVyLT5jbGllbnQpIHsKIAkJCWlmICghbW9kZV9zZXQtPmNydGMtPmVuYWJsZWQpCiAJ
CQkJY29udGludWU7CiAKQEAgLTM0MCw2ICszMzgsNyBAQCBpbnQgZHJtX2ZiX2hlbHBlcl9kZWJ1
Z19lbnRlcihzdHJ1Y3QgZmJfaW5mbyAqaW5mbykKIAkJCQkJCSAgICBtb2RlX3NldC0+eSwKIAkJ
CQkJCSAgICBFTlRFUl9BVE9NSUNfTU9ERV9TRVQpOwogCQl9CisJCW11dGV4X3VubG9jaygmaGVs
cGVyLT5jbGllbnQubW9kZXNldF9tdXRleCk7CiAJfQogCiAJcmV0dXJuIDA7CkBAIC0zNTMsMTQg
KzM1MiwxNCBAQCBFWFBPUlRfU1lNQk9MKGRybV9mYl9oZWxwZXJfZGVidWdfZW50ZXIpOwogaW50
IGRybV9mYl9oZWxwZXJfZGVidWdfbGVhdmUoc3RydWN0IGZiX2luZm8gKmluZm8pCiB7CiAJc3Ry
dWN0IGRybV9mYl9oZWxwZXIgKmhlbHBlciA9IGluZm8tPnBhcjsKKwlzdHJ1Y3QgZHJtX2NsaWVu
dF9kZXYgKmNsaWVudCA9ICZoZWxwZXItPmNsaWVudDsKIAlzdHJ1Y3QgZHJtX2NydGMgKmNydGM7
CiAJY29uc3Qgc3RydWN0IGRybV9jcnRjX2hlbHBlcl9mdW5jcyAqZnVuY3M7CisJc3RydWN0IGRy
bV9tb2RlX3NldCAqbW9kZV9zZXQ7CiAJc3RydWN0IGRybV9mcmFtZWJ1ZmZlciAqZmI7Ci0JaW50
IGk7Ci0KLQlmb3IgKGkgPSAwOyBpIDwgaGVscGVyLT5jcnRjX2NvdW50OyBpKyspIHsKLQkJc3Ry
dWN0IGRybV9tb2RlX3NldCAqbW9kZV9zZXQgPSAmaGVscGVyLT5jcnRjX2luZm9baV0ubW9kZV9z
ZXQ7CiAKKwltdXRleF9sb2NrKCZjbGllbnQtPm1vZGVzZXRfbXV0ZXgpOworCWRybV9jbGllbnRf
Zm9yX2VhY2hfbW9kZXNldChtb2RlX3NldCwgY2xpZW50KSB7CiAJCWNydGMgPSBtb2RlX3NldC0+
Y3J0YzsKIAkJaWYgKGRybV9kcnZfdXNlc19hdG9taWNfbW9kZXNldChjcnRjLT5kZXYpKQogCQkJ
Y29udGludWU7CkBAIC0zODMsNiArMzgyLDcgQEAgaW50IGRybV9mYl9oZWxwZXJfZGVidWdfbGVh
dmUoc3RydWN0IGZiX2luZm8gKmluZm8pCiAJCWZ1bmNzLT5tb2RlX3NldF9iYXNlX2F0b21pYyht
b2RlX3NldC0+Y3J0YywgZmIsIGNydGMtPngsCiAJCQkJCSAgICBjcnRjLT55LCBMRUFWRV9BVE9N
SUNfTU9ERV9TRVQpOwogCX0KKwltdXRleF91bmxvY2soJmNsaWVudC0+bW9kZXNldF9tdXRleCk7
CiAKIAlyZXR1cm4gMDsKIH0KQEAgLTQzMywxMiArNDMzLDE0IEBAIHN0YXRpYyBib29sIGRybV9m
Yl9oZWxwZXJfcGFuZWxfcm90YXRpb24oc3RydWN0IGRybV9tb2RlX3NldCAqbW9kZXNldCwKIAog
c3RhdGljIGludCByZXN0b3JlX2ZiZGV2X21vZGVfYXRvbWljKHN0cnVjdCBkcm1fZmJfaGVscGVy
ICpmYl9oZWxwZXIsIGJvb2wgYWN0aXZlKQogeworCXN0cnVjdCBkcm1fY2xpZW50X2RldiAqY2xp
ZW50ID0gJmZiX2hlbHBlci0+Y2xpZW50OwogCXN0cnVjdCBkcm1fZGV2aWNlICpkZXYgPSBmYl9o
ZWxwZXItPmRldjsKIAlzdHJ1Y3QgZHJtX3BsYW5lX3N0YXRlICpwbGFuZV9zdGF0ZTsKIAlzdHJ1
Y3QgZHJtX3BsYW5lICpwbGFuZTsKIAlzdHJ1Y3QgZHJtX2F0b21pY19zdGF0ZSAqc3RhdGU7Ci0J
aW50IGksIHJldDsKIAlzdHJ1Y3QgZHJtX21vZGVzZXRfYWNxdWlyZV9jdHggY3R4OworCXN0cnVj
dCBkcm1fbW9kZV9zZXQgKm1vZGVfc2V0OworCWludCByZXQ7CiAKIAlkcm1fbW9kZXNldF9hY3F1
aXJlX2luaXQoJmN0eCwgMCk7CiAKQEAgLTQ2OCw4ICs0NzAsNyBAQCBzdGF0aWMgaW50IHJlc3Rv
cmVfZmJkZXZfbW9kZV9hdG9taWMoc3RydWN0IGRybV9mYl9oZWxwZXIgKmZiX2hlbHBlciwgYm9v
bCBhY3RpdgogCQkJZ290byBvdXRfc3RhdGU7CiAJfQogCi0JZm9yIChpID0gMDsgaSA8IGZiX2hl
bHBlci0+Y3J0Y19jb3VudDsgaSsrKSB7Ci0JCXN0cnVjdCBkcm1fbW9kZV9zZXQgKm1vZGVfc2V0
ID0gJmZiX2hlbHBlci0+Y3J0Y19pbmZvW2ldLm1vZGVfc2V0OworCWRybV9jbGllbnRfZm9yX2Vh
Y2hfbW9kZXNldChtb2RlX3NldCwgY2xpZW50KSB7CiAJCXN0cnVjdCBkcm1fcGxhbmUgKnByaW1h
cnkgPSBtb2RlX3NldC0+Y3J0Yy0+cHJpbWFyeTsKIAkJdW5zaWduZWQgaW50IHJvdGF0aW9uOwog
CkBAIC01MTcsOSArNTE4LDExIEBAIHN0YXRpYyBpbnQgcmVzdG9yZV9mYmRldl9tb2RlX2F0b21p
YyhzdHJ1Y3QgZHJtX2ZiX2hlbHBlciAqZmJfaGVscGVyLCBib29sIGFjdGl2CiAKIHN0YXRpYyBp
bnQgcmVzdG9yZV9mYmRldl9tb2RlX2xlZ2FjeShzdHJ1Y3QgZHJtX2ZiX2hlbHBlciAqZmJfaGVs
cGVyKQogeworCXN0cnVjdCBkcm1fY2xpZW50X2RldiAqY2xpZW50ID0gJmZiX2hlbHBlci0+Y2xp
ZW50OwogCXN0cnVjdCBkcm1fZGV2aWNlICpkZXYgPSBmYl9oZWxwZXItPmRldjsKKwlzdHJ1Y3Qg
ZHJtX21vZGVfc2V0ICptb2RlX3NldDsKIAlzdHJ1Y3QgZHJtX3BsYW5lICpwbGFuZTsKLQlpbnQg
aSwgcmV0ID0gMDsKKwlpbnQgcmV0ID0gMDsKIAogCWRybV9tb2Rlc2V0X2xvY2tfYWxsKGZiX2hl
bHBlci0+ZGV2KTsKIAlkcm1fZm9yX2VhY2hfcGxhbmUocGxhbmUsIGRldikgewpAQCAtNTMyLDgg
KzUzNSw3IEBAIHN0YXRpYyBpbnQgcmVzdG9yZV9mYmRldl9tb2RlX2xlZ2FjeShzdHJ1Y3QgZHJt
X2ZiX2hlbHBlciAqZmJfaGVscGVyKQogCQkJCQkJICAgIERSTV9NT0RFX1JPVEFURV8wKTsKIAl9
CiAKLQlmb3IgKGkgPSAwOyBpIDwgZmJfaGVscGVyLT5jcnRjX2NvdW50OyBpKyspIHsKLQkJc3Ry
dWN0IGRybV9tb2RlX3NldCAqbW9kZV9zZXQgPSAmZmJfaGVscGVyLT5jcnRjX2luZm9baV0ubW9k
ZV9zZXQ7CisJZHJtX2NsaWVudF9mb3JfZWFjaF9tb2Rlc2V0KG1vZGVfc2V0LCBjbGllbnQpIHsK
IAkJc3RydWN0IGRybV9jcnRjICpjcnRjID0gbW9kZV9zZXQtPmNydGM7CiAKIAkJaWYgKGNydGMt
PmZ1bmNzLT5jdXJzb3Jfc2V0MikgewpAQCAtNTU5LDExICs1NjEsMTYgQEAgc3RhdGljIGludCBy
ZXN0b3JlX2ZiZGV2X21vZGVfbGVnYWN5KHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIp
CiBzdGF0aWMgaW50IHJlc3RvcmVfZmJkZXZfbW9kZV9mb3JjZShzdHJ1Y3QgZHJtX2ZiX2hlbHBl
ciAqZmJfaGVscGVyKQogewogCXN0cnVjdCBkcm1fZGV2aWNlICpkZXYgPSBmYl9oZWxwZXItPmRl
djsKKwlpbnQgcmV0OwogCisJbXV0ZXhfbG9jaygmZmJfaGVscGVyLT5jbGllbnQubW9kZXNldF9t
dXRleCk7CiAJaWYgKGRybV9kcnZfdXNlc19hdG9taWNfbW9kZXNldChkZXYpKQotCQlyZXR1cm4g
cmVzdG9yZV9mYmRldl9tb2RlX2F0b21pYyhmYl9oZWxwZXIsIHRydWUpOworCQlyZXQgPSByZXN0
b3JlX2ZiZGV2X21vZGVfYXRvbWljKGZiX2hlbHBlciwgdHJ1ZSk7CiAJZWxzZQotCQlyZXR1cm4g
cmVzdG9yZV9mYmRldl9tb2RlX2xlZ2FjeShmYl9oZWxwZXIpOworCQlyZXQgPSByZXN0b3JlX2Zi
ZGV2X21vZGVfbGVnYWN5KGZiX2hlbHBlcik7CisJbXV0ZXhfdW5sb2NrKCZmYl9oZWxwZXItPmNs
aWVudC5tb2Rlc2V0X211dGV4KTsKKworCXJldHVybiByZXQ7CiB9CiAKIHN0YXRpYyBpbnQgcmVz
dG9yZV9mYmRldl9tb2RlKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIpCkBAIC02ODIs
MTUgKzY4OSwxNCBAQCBzdGF0aWMgc3RydWN0IHN5c3JxX2tleV9vcCBzeXNycV9kcm1fZmJfaGVs
cGVyX3Jlc3RvcmVfb3AgPSB7IH07CiAKIHN0YXRpYyB2b2lkIGRwbXNfbGVnYWN5KHN0cnVjdCBk
cm1fZmJfaGVscGVyICpmYl9oZWxwZXIsIGludCBkcG1zX21vZGUpCiB7CisJc3RydWN0IGRybV9j
bGllbnRfZGV2ICpjbGllbnQgPSAmZmJfaGVscGVyLT5jbGllbnQ7CiAJc3RydWN0IGRybV9kZXZp
Y2UgKmRldiA9IGZiX2hlbHBlci0+ZGV2OwogCXN0cnVjdCBkcm1fY29ubmVjdG9yICpjb25uZWN0
b3I7CiAJc3RydWN0IGRybV9tb2RlX3NldCAqbW9kZXNldDsKLQlpbnQgaSwgajsKKwlpbnQgajsK
IAogCWRybV9tb2Rlc2V0X2xvY2tfYWxsKGRldik7Ci0JZm9yIChpID0gMDsgaSA8IGZiX2hlbHBl
ci0+Y3J0Y19jb3VudDsgaSsrKSB7Ci0JCW1vZGVzZXQgPSAmZmJfaGVscGVyLT5jcnRjX2luZm9b
aV0ubW9kZV9zZXQ7Ci0KKwlkcm1fY2xpZW50X2Zvcl9lYWNoX21vZGVzZXQobW9kZXNldCwgY2xp
ZW50KSB7CiAJCWlmICghbW9kZXNldC0+Y3J0Yy0+ZW5hYmxlZCkKIAkJCWNvbnRpbnVlOwogCkBA
IC03MDcsNiArNzEzLDcgQEAgc3RhdGljIHZvaWQgZHBtc19sZWdhY3koc3RydWN0IGRybV9mYl9o
ZWxwZXIgKmZiX2hlbHBlciwgaW50IGRwbXNfbW9kZSkKIHN0YXRpYyB2b2lkIGRybV9mYl9oZWxw
ZXJfZHBtcyhzdHJ1Y3QgZmJfaW5mbyAqaW5mbywgaW50IGRwbXNfbW9kZSkKIHsKIAlzdHJ1Y3Qg
ZHJtX2ZiX2hlbHBlciAqZmJfaGVscGVyID0gaW5mby0+cGFyOworCXN0cnVjdCBkcm1fY2xpZW50
X2RldiAqY2xpZW50ID0gJmZiX2hlbHBlci0+Y2xpZW50OwogCXN0cnVjdCBkcm1fZGV2aWNlICpk
ZXYgPSBmYl9oZWxwZXItPmRldjsKIAogCS8qCkBAIC03MTYsMTAgKzcyMywxMiBAQCBzdGF0aWMg
dm9pZCBkcm1fZmJfaGVscGVyX2RwbXMoc3RydWN0IGZiX2luZm8gKmluZm8sIGludCBkcG1zX21v
ZGUpCiAJaWYgKCFkcm1fbWFzdGVyX2ludGVybmFsX2FjcXVpcmUoZGV2KSkKIAkJZ290byB1bmxv
Y2s7CiAKKwltdXRleF9sb2NrKCZjbGllbnQtPm1vZGVzZXRfbXV0ZXgpOwogCWlmIChkcm1fZHJ2
X3VzZXNfYXRvbWljX21vZGVzZXQoZGV2KSkKIAkJcmVzdG9yZV9mYmRldl9tb2RlX2F0b21pYyhm
Yl9oZWxwZXIsIGRwbXNfbW9kZSA9PSBEUk1fTU9ERV9EUE1TX09OKTsKIAllbHNlCiAJCWRwbXNf
bGVnYWN5KGZiX2hlbHBlciwgZHBtc19tb2RlKTsKKwltdXRleF91bmxvY2soJmNsaWVudC0+bW9k
ZXNldF9tdXRleCk7CiAKIAlkcm1fbWFzdGVyX2ludGVybmFsX3JlbGVhc2UoZGV2KTsKIHVubG9j
azoKQEAgLTc2Miw0MyArNzcxLDYgQEAgaW50IGRybV9mYl9oZWxwZXJfYmxhbmsoaW50IGJsYW5r
LCBzdHJ1Y3QgZmJfaW5mbyAqaW5mbykKIH0KIEVYUE9SVF9TWU1CT0woZHJtX2ZiX2hlbHBlcl9i
bGFuayk7CiAKLXN0YXRpYyB2b2lkIGRybV9mYl9oZWxwZXJfbW9kZXNldF9yZWxlYXNlKHN0cnVj
dCBkcm1fZmJfaGVscGVyICpoZWxwZXIsCi0JCQkJCSAgc3RydWN0IGRybV9tb2RlX3NldCAqbW9k
ZXNldCkKLXsKLQlpbnQgaTsKLQotCWZvciAoaSA9IDA7IGkgPCBtb2Rlc2V0LT5udW1fY29ubmVj
dG9yczsgaSsrKSB7Ci0JCWRybV9jb25uZWN0b3JfcHV0KG1vZGVzZXQtPmNvbm5lY3RvcnNbaV0p
OwotCQltb2Rlc2V0LT5jb25uZWN0b3JzW2ldID0gTlVMTDsKLQl9Ci0JbW9kZXNldC0+bnVtX2Nv
bm5lY3RvcnMgPSAwOwotCi0JZHJtX21vZGVfZGVzdHJveShoZWxwZXItPmRldiwgbW9kZXNldC0+
bW9kZSk7Ci0JbW9kZXNldC0+bW9kZSA9IE5VTEw7Ci0KLQkvKiBGSVhNRSBzaG91bGQgaG9sZCBh
IHJlZj8gKi8KLQltb2Rlc2V0LT5mYiA9IE5VTEw7Ci19Ci0KLXN0YXRpYyB2b2lkIGRybV9mYl9o
ZWxwZXJfY3J0Y19mcmVlKHN0cnVjdCBkcm1fZmJfaGVscGVyICpoZWxwZXIpCi17Ci0JaW50IGk7
Ci0KLQlmb3IgKGkgPSAwOyBpIDwgaGVscGVyLT5jb25uZWN0b3JfY291bnQ7IGkrKykgewotCQlk
cm1fY29ubmVjdG9yX3B1dChoZWxwZXItPmNvbm5lY3Rvcl9pbmZvW2ldLT5jb25uZWN0b3IpOwot
CQlrZnJlZShoZWxwZXItPmNvbm5lY3Rvcl9pbmZvW2ldKTsKLQl9Ci0Ja2ZyZWUoaGVscGVyLT5j
b25uZWN0b3JfaW5mbyk7Ci0KLQlmb3IgKGkgPSAwOyBpIDwgaGVscGVyLT5jcnRjX2NvdW50OyBp
KyspIHsKLQkJc3RydWN0IGRybV9tb2RlX3NldCAqbW9kZXNldCA9ICZoZWxwZXItPmNydGNfaW5m
b1tpXS5tb2RlX3NldDsKLQotCQlkcm1fZmJfaGVscGVyX21vZGVzZXRfcmVsZWFzZShoZWxwZXIs
IG1vZGVzZXQpOwotCQlrZnJlZShtb2Rlc2V0LT5jb25uZWN0b3JzKTsKLQl9Ci0Ja2ZyZWUoaGVs
cGVyLT5jcnRjX2luZm8pOwotfQotCiBzdGF0aWMgdm9pZCBkcm1fZmJfaGVscGVyX3Jlc3VtZV93
b3JrZXIoc3RydWN0IHdvcmtfc3RydWN0ICp3b3JrKQogewogCXN0cnVjdCBkcm1fZmJfaGVscGVy
ICpoZWxwZXIgPSBjb250YWluZXJfb2Yod29yaywgc3RydWN0IGRybV9mYl9oZWxwZXIsCkBAIC04
NzcsNyArODQ5LDcgQEAgRVhQT1JUX1NZTUJPTChkcm1fZmJfaGVscGVyX3ByZXBhcmUpOwogICog
ZHJtX2ZiX2hlbHBlcl9pbml0IC0gaW5pdGlhbGl6ZSBhICZzdHJ1Y3QgZHJtX2ZiX2hlbHBlcgog
ICogQGRldjogZHJtIGRldmljZQogICogQGZiX2hlbHBlcjogZHJpdmVyLWFsbG9jYXRlZCBmYmRl
diBoZWxwZXIgc3RydWN0dXJlIHRvIGluaXRpYWxpemUKLSAqIEBtYXhfY29ubl9jb3VudDogbWF4
IGNvbm5lY3RvciBjb3VudAorICogQG1heF9jb25uX2NvdW50OiBtYXggY29ubmVjdG9yIGNvdW50
IChub3QgdXNlZCkKICAqCiAgKiBUaGlzIGFsbG9jYXRlcyB0aGUgc3RydWN0dXJlcyBmb3IgdGhl
IGZiZGV2IGhlbHBlciB3aXRoIHRoZSBnaXZlbiBsaW1pdHMuCiAgKiBOb3RlIHRoYXQgdGhpcyB3
b24ndCB5ZXQgdG91Y2ggdGhlIGhhcmR3YXJlICh0aHJvdWdoIHRoZSBkcml2ZXIgaW50ZXJmYWNl
cykKQEAgLTg5Myw1MyArODY1LDM2IEBAIGludCBkcm1fZmJfaGVscGVyX2luaXQoc3RydWN0IGRy
bV9kZXZpY2UgKmRldiwKIAkJICAgICAgIHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIs
CiAJCSAgICAgICBpbnQgbWF4X2Nvbm5fY291bnQpCiB7Ci0Jc3RydWN0IGRybV9jcnRjICpjcnRj
OwotCXN0cnVjdCBkcm1fbW9kZV9jb25maWcgKmNvbmZpZyA9ICZkZXYtPm1vZGVfY29uZmlnOwot
CWludCBpOworCWludCByZXQ7CiAKIAlpZiAoIWRybV9mYmRldl9lbXVsYXRpb24pIHsKIAkJZGV2
LT5mYl9oZWxwZXIgPSBmYl9oZWxwZXI7CiAJCXJldHVybiAwOwogCX0KIAotCWlmICghbWF4X2Nv
bm5fY291bnQpCi0JCXJldHVybiAtRUlOVkFMOwotCi0JZmJfaGVscGVyLT5jcnRjX2luZm8gPSBr
Y2FsbG9jKGNvbmZpZy0+bnVtX2NydGMsIHNpemVvZihzdHJ1Y3QgZHJtX2ZiX2hlbHBlcl9jcnRj
KSwgR0ZQX0tFUk5FTCk7Ci0JaWYgKCFmYl9oZWxwZXItPmNydGNfaW5mbykKLQkJcmV0dXJuIC1F
Tk9NRU07Ci0KLQlmYl9oZWxwZXItPmNydGNfY291bnQgPSBjb25maWctPm51bV9jcnRjOwotCWZi
X2hlbHBlci0+Y29ubmVjdG9yX2luZm8gPSBrY2FsbG9jKGRldi0+bW9kZV9jb25maWcubnVtX2Nv
bm5lY3Rvciwgc2l6ZW9mKHN0cnVjdCBkcm1fZmJfaGVscGVyX2Nvbm5lY3RvciAqKSwgR0ZQX0tF
Uk5FTCk7Ci0JaWYgKCFmYl9oZWxwZXItPmNvbm5lY3Rvcl9pbmZvKSB7Ci0JCWtmcmVlKGZiX2hl
bHBlci0+Y3J0Y19pbmZvKTsKLQkJcmV0dXJuIC1FTk9NRU07CisJLyoKKwkgKiBJZiB0aGlzIGlz
IG5vdCB0aGUgZ2VuZXJpYyBmYmRldiBjbGllbnQsIGluaXRpYWxpemUgYSBkcm1fY2xpZW50CisJ
ICogd2l0aG91dCBjYWxsYmFja3Mgc28gd2UgY2FuIHVzZSB0aGUgbW9kZXNldHMuCisJICovCisJ
aWYgKCFmYl9oZWxwZXItPmNsaWVudC5mdW5jcykgeworCQlyZXQgPSBkcm1fY2xpZW50X2luaXQo
ZGV2LCAmZmJfaGVscGVyLT5jbGllbnQsICJkcm1fZmJfaGVscGVyIiwgTlVMTCk7CisJCWlmIChy
ZXQpCisJCQlyZXR1cm4gcmV0OwogCX0KKworCWZiX2hlbHBlci0+Y29ubmVjdG9yX2luZm8gPSBr
Y2FsbG9jKGRldi0+bW9kZV9jb25maWcubnVtX2Nvbm5lY3Rvciwgc2l6ZW9mKHN0cnVjdCBkcm1f
ZmJfaGVscGVyX2Nvbm5lY3RvciAqKSwgR0ZQX0tFUk5FTCk7CisJaWYgKCFmYl9oZWxwZXItPmNv
bm5lY3Rvcl9pbmZvKQorCQlnb3RvIG91dF9mcmVlOworCiAJZmJfaGVscGVyLT5jb25uZWN0b3Jf
aW5mb19hbGxvY19jb3VudCA9IGRldi0+bW9kZV9jb25maWcubnVtX2Nvbm5lY3RvcjsKIAlmYl9o
ZWxwZXItPmNvbm5lY3Rvcl9jb3VudCA9IDA7CiAKLQlmb3IgKGkgPSAwOyBpIDwgZmJfaGVscGVy
LT5jcnRjX2NvdW50OyBpKyspIHsKLQkJZmJfaGVscGVyLT5jcnRjX2luZm9baV0ubW9kZV9zZXQu
Y29ubmVjdG9ycyA9Ci0JCQlrY2FsbG9jKG1heF9jb25uX2NvdW50LAotCQkJCXNpemVvZihzdHJ1
Y3QgZHJtX2Nvbm5lY3RvciAqKSwKLQkJCQlHRlBfS0VSTkVMKTsKLQotCQlpZiAoIWZiX2hlbHBl
ci0+Y3J0Y19pbmZvW2ldLm1vZGVfc2V0LmNvbm5lY3RvcnMpCi0JCQlnb3RvIG91dF9mcmVlOwot
CQlmYl9oZWxwZXItPmNydGNfaW5mb1tpXS5tb2RlX3NldC5udW1fY29ubmVjdG9ycyA9IDA7Ci0J
fQotCi0JaSA9IDA7Ci0JZHJtX2Zvcl9lYWNoX2NydGMoY3J0YywgZGV2KSB7Ci0JCWZiX2hlbHBl
ci0+Y3J0Y19pbmZvW2ldLm1vZGVfc2V0LmNydGMgPSBjcnRjOwotCQlpKys7Ci0JfQotCiAJZGV2
LT5mYl9oZWxwZXIgPSBmYl9oZWxwZXI7CiAKIAlyZXR1cm4gMDsKIG91dF9mcmVlOgotCWRybV9m
Yl9oZWxwZXJfY3J0Y19mcmVlKGZiX2hlbHBlcik7CisJZHJtX2NsaWVudF9yZWxlYXNlKCZmYl9o
ZWxwZXItPmNsaWVudCk7CisKIAlyZXR1cm4gLUVOT01FTTsKIH0KIEVYUE9SVF9TWU1CT0woZHJt
X2ZiX2hlbHBlcl9pbml0KTsKQEAgLTEwMTUsNiArOTcwLDcgQEAgRVhQT1JUX1NZTUJPTChkcm1f
ZmJfaGVscGVyX3VucmVnaXN0ZXJfZmJpKTsKIHZvaWQgZHJtX2ZiX2hlbHBlcl9maW5pKHN0cnVj
dCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIpCiB7CiAJc3RydWN0IGZiX2luZm8gKmluZm87CisJ
aW50IGk7CiAKIAlpZiAoIWZiX2hlbHBlcikKIAkJcmV0dXJuOwpAQCAtMTA0NCw4ICsxMDAwLDE1
IEBAIHZvaWQgZHJtX2ZiX2hlbHBlcl9maW5pKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxw
ZXIpCiAJbXV0ZXhfdW5sb2NrKCZrZXJuZWxfZmJfaGVscGVyX2xvY2spOwogCiAJbXV0ZXhfZGVz
dHJveSgmZmJfaGVscGVyLT5sb2NrKTsKLQlkcm1fZmJfaGVscGVyX2NydGNfZnJlZShmYl9oZWxw
ZXIpOwogCisJaWYgKCFmYl9oZWxwZXItPmNsaWVudC5mdW5jcykKKwkJZHJtX2NsaWVudF9yZWxl
YXNlKCZmYl9oZWxwZXItPmNsaWVudCk7CisKKwlmb3IgKGkgPSAwOyBpIDwgZmJfaGVscGVyLT5j
b25uZWN0b3JfY291bnQ7IGkrKykgeworCQlkcm1fY29ubmVjdG9yX3B1dChmYl9oZWxwZXItPmNv
bm5lY3Rvcl9pbmZvW2ldLT5jb25uZWN0b3IpOworCQlrZnJlZShmYl9oZWxwZXItPmNvbm5lY3Rv
cl9pbmZvW2ldKTsKKwl9CisJa2ZyZWUoZmJfaGVscGVyLT5jb25uZWN0b3JfaW5mbyk7CiB9CiBF
WFBPUlRfU1lNQk9MKGRybV9mYl9oZWxwZXJfZmluaSk7CiAKQEAgLTEzOTAsMTMgKzEzNTMsMTQg
QEAgc3RhdGljIGludCBzZXRjbWFwX3BzZXVkb19wYWxldHRlKHN0cnVjdCBmYl9jbWFwICpjbWFw
LCBzdHJ1Y3QgZmJfaW5mbyAqaW5mbykKIHN0YXRpYyBpbnQgc2V0Y21hcF9sZWdhY3koc3RydWN0
IGZiX2NtYXAgKmNtYXAsIHN0cnVjdCBmYl9pbmZvICppbmZvKQogewogCXN0cnVjdCBkcm1fZmJf
aGVscGVyICpmYl9oZWxwZXIgPSBpbmZvLT5wYXI7CisJc3RydWN0IGRybV9tb2RlX3NldCAqbW9k
ZXNldDsKIAlzdHJ1Y3QgZHJtX2NydGMgKmNydGM7CiAJdTE2ICpyLCAqZywgKmI7Ci0JaW50IGks
IHJldCA9IDA7CisJaW50IHJldCA9IDA7CiAKIAlkcm1fbW9kZXNldF9sb2NrX2FsbChmYl9oZWxw
ZXItPmRldik7Ci0JZm9yIChpID0gMDsgaSA8IGZiX2hlbHBlci0+Y3J0Y19jb3VudDsgaSsrKSB7
Ci0JCWNydGMgPSBmYl9oZWxwZXItPmNydGNfaW5mb1tpXS5tb2RlX3NldC5jcnRjOworCWRybV9j
bGllbnRfZm9yX2VhY2hfbW9kZXNldChtb2Rlc2V0LCAmZmJfaGVscGVyLT5jbGllbnQpIHsKKwkJ
Y3J0YyA9IG1vZGVzZXQtPmNydGM7CiAJCWlmICghY3J0Yy0+ZnVuY3MtPmdhbW1hX3NldCB8fCAh
Y3J0Yy0+Z2FtbWFfc2l6ZSkKIAkJCXJldHVybiAtRUlOVkFMOwogCkBAIC0xNDcyLDEwICsxNDM2
LDExIEBAIHN0YXRpYyBpbnQgc2V0Y21hcF9hdG9taWMoc3RydWN0IGZiX2NtYXAgKmNtYXAsIHN0
cnVjdCBmYl9pbmZvICppbmZvKQogCXN0cnVjdCBkcm1fbW9kZXNldF9hY3F1aXJlX2N0eCBjdHg7
CiAJc3RydWN0IGRybV9jcnRjX3N0YXRlICpjcnRjX3N0YXRlOwogCXN0cnVjdCBkcm1fYXRvbWlj
X3N0YXRlICpzdGF0ZTsKKwlzdHJ1Y3QgZHJtX21vZGVfc2V0ICptb2Rlc2V0OwogCXN0cnVjdCBk
cm1fY3J0YyAqY3J0YzsKIAl1MTYgKnIsICpnLCAqYjsKLQlpbnQgaSwgcmV0ID0gMDsKIAlib29s
IHJlcGxhY2VkOworCWludCByZXQgPSAwOwogCiAJZHJtX21vZGVzZXRfYWNxdWlyZV9pbml0KCZj
dHgsIDApOwogCkBAIC0xNDg3LDggKzE0NTIsOCBAQCBzdGF0aWMgaW50IHNldGNtYXBfYXRvbWlj
KHN0cnVjdCBmYl9jbWFwICpjbWFwLCBzdHJ1Y3QgZmJfaW5mbyAqaW5mbykKIAogCXN0YXRlLT5h
Y3F1aXJlX2N0eCA9ICZjdHg7CiByZXRyeToKLQlmb3IgKGkgPSAwOyBpIDwgZmJfaGVscGVyLT5j
cnRjX2NvdW50OyBpKyspIHsKLQkJY3J0YyA9IGZiX2hlbHBlci0+Y3J0Y19pbmZvW2ldLm1vZGVf
c2V0LmNydGM7CisJZHJtX2NsaWVudF9mb3JfZWFjaF9tb2Rlc2V0KG1vZGVzZXQsICZmYl9oZWxw
ZXItPmNsaWVudCkgeworCQljcnRjID0gbW9kZXNldC0+Y3J0YzsKIAogCQlpZiAoIWdhbW1hX2x1
dCkKIAkJCWdhbW1hX2x1dCA9IHNldGNtYXBfbmV3X2dhbW1hX2x1dChjcnRjLCBjbWFwKTsKQEAg
LTE1MTYsOCArMTQ4MSw4IEBAIHN0YXRpYyBpbnQgc2V0Y21hcF9hdG9taWMoc3RydWN0IGZiX2Nt
YXAgKmNtYXAsIHN0cnVjdCBmYl9pbmZvICppbmZvKQogCWlmIChyZXQpCiAJCWdvdG8gb3V0X3N0
YXRlOwogCi0JZm9yIChpID0gMDsgaSA8IGZiX2hlbHBlci0+Y3J0Y19jb3VudDsgaSsrKSB7Ci0J
CWNydGMgPSBmYl9oZWxwZXItPmNydGNfaW5mb1tpXS5tb2RlX3NldC5jcnRjOworCWRybV9jbGll
bnRfZm9yX2VhY2hfbW9kZXNldChtb2Rlc2V0LCAmZmJfaGVscGVyLT5jbGllbnQpIHsKKwkJY3J0
YyA9IG1vZGVzZXQtPmNydGM7CiAKIAkJciA9IGNydGMtPmdhbW1hX3N0b3JlOwogCQlnID0gciAr
IGNydGMtPmdhbW1hX3NpemU7CkBAIC0xNTY3LDEyICsxNTMyLDE0IEBAIGludCBkcm1fZmJfaGVs
cGVyX3NldGNtYXAoc3RydWN0IGZiX2NtYXAgKmNtYXAsIHN0cnVjdCBmYl9pbmZvICppbmZvKQog
CQlnb3RvIHVubG9jazsKIAl9CiAKKwltdXRleF9sb2NrKCZmYl9oZWxwZXItPmNsaWVudC5tb2Rl
c2V0X211dGV4KTsKIAlpZiAoaW5mby0+Zml4LnZpc3VhbCA9PSBGQl9WSVNVQUxfVFJVRUNPTE9S
KQogCQlyZXQgPSBzZXRjbWFwX3BzZXVkb19wYWxldHRlKGNtYXAsIGluZm8pOwogCWVsc2UgaWYg
KGRybV9kcnZfdXNlc19hdG9taWNfbW9kZXNldChmYl9oZWxwZXItPmRldikpCiAJCXJldCA9IHNl
dGNtYXBfYXRvbWljKGNtYXAsIGluZm8pOwogCWVsc2UKIAkJcmV0ID0gc2V0Y21hcF9sZWdhY3ko
Y21hcCwgaW5mbyk7CisJbXV0ZXhfdW5sb2NrKCZmYl9oZWxwZXItPmNsaWVudC5tb2Rlc2V0X211
dGV4KTsKIAogCWRybV9tYXN0ZXJfaW50ZXJuYWxfcmVsZWFzZShkZXYpOwogdW5sb2NrOgpAQCAt
MTU5Niw3ICsxNTYzLDYgQEAgaW50IGRybV9mYl9oZWxwZXJfaW9jdGwoc3RydWN0IGZiX2luZm8g
KmluZm8sIHVuc2lnbmVkIGludCBjbWQsCiB7CiAJc3RydWN0IGRybV9mYl9oZWxwZXIgKmZiX2hl
bHBlciA9IGluZm8tPnBhcjsKIAlzdHJ1Y3QgZHJtX2RldmljZSAqZGV2ID0gZmJfaGVscGVyLT5k
ZXY7Ci0Jc3RydWN0IGRybV9tb2RlX3NldCAqbW9kZV9zZXQ7CiAJc3RydWN0IGRybV9jcnRjICpj
cnRjOwogCWludCByZXQgPSAwOwogCkBAIC0xNjI0LDggKzE1OTAsNyBAQCBpbnQgZHJtX2ZiX2hl
bHBlcl9pb2N0bChzdHJ1Y3QgZmJfaW5mbyAqaW5mbywgdW5zaWduZWQgaW50IGNtZCwKIAkJICog
bWFrZS4gSWYgd2UncmUgbm90IHNtYXJ0IGVub3VnaCBoZXJlLCBvbmUgc2hvdWxkCiAJCSAqIGp1
c3QgY29uc2lkZXIgc3dpdGNoIHRoZSB1c2Vyc3BhY2UgdG8gS01TLgogCQkgKi8KLQkJbW9kZV9z
ZXQgPSAmZmJfaGVscGVyLT5jcnRjX2luZm9bMF0ubW9kZV9zZXQ7Ci0JCWNydGMgPSBtb2RlX3Nl
dC0+Y3J0YzsKKwkJY3J0YyA9IGZiX2hlbHBlci0+Y2xpZW50Lm1vZGVzZXRzWzBdLmNydGM7CiAK
IAkJLyoKIAkJICogT25seSB3YWl0IGZvciBhIHZibGFuayBldmVudCBpZiB0aGUgQ1JUQyBpcwpA
QCAtMTgyMiwxNiArMTc4NywxNCBAQCBFWFBPUlRfU1lNQk9MKGRybV9mYl9oZWxwZXJfc2V0X3Bh
cik7CiAKIHN0YXRpYyB2b2lkIHBhbl9zZXQoc3RydWN0IGRybV9mYl9oZWxwZXIgKmZiX2hlbHBl
ciwgaW50IHgsIGludCB5KQogewotCWludCBpOwotCi0JZm9yIChpID0gMDsgaSA8IGZiX2hlbHBl
ci0+Y3J0Y19jb3VudDsgaSsrKSB7Ci0JCXN0cnVjdCBkcm1fbW9kZV9zZXQgKm1vZGVfc2V0Owot
Ci0JCW1vZGVfc2V0ID0gJmZiX2hlbHBlci0+Y3J0Y19pbmZvW2ldLm1vZGVfc2V0OworCXN0cnVj
dCBkcm1fbW9kZV9zZXQgKm1vZGVfc2V0OwogCisJbXV0ZXhfbG9jaygmZmJfaGVscGVyLT5jbGll
bnQubW9kZXNldF9tdXRleCk7CisJZHJtX2NsaWVudF9mb3JfZWFjaF9tb2Rlc2V0KG1vZGVfc2V0
LCAmZmJfaGVscGVyLT5jbGllbnQpIHsKIAkJbW9kZV9zZXQtPnggPSB4OwogCQltb2RlX3NldC0+
eSA9IHk7CiAJfQorCW11dGV4X3VubG9jaygmZmJfaGVscGVyLT5jbGllbnQubW9kZXNldF9tdXRl
eCk7CiB9CiAKIHN0YXRpYyBpbnQgcGFuX2Rpc3BsYXlfYXRvbWljKHN0cnVjdCBmYl92YXJfc2Ny
ZWVuaW5mbyAqdmFyLApAQCAtMTg0Miw3ICsxODA1LDcgQEAgc3RhdGljIGludCBwYW5fZGlzcGxh
eV9hdG9taWMoc3RydWN0IGZiX3Zhcl9zY3JlZW5pbmZvICp2YXIsCiAKIAlwYW5fc2V0KGZiX2hl
bHBlciwgdmFyLT54b2Zmc2V0LCB2YXItPnlvZmZzZXQpOwogCi0JcmV0ID0gcmVzdG9yZV9mYmRl
dl9tb2RlX2F0b21pYyhmYl9oZWxwZXIsIHRydWUpOworCXJldCA9IHJlc3RvcmVfZmJkZXZfbW9k
ZV9mb3JjZShmYl9oZWxwZXIpOwogCWlmICghcmV0KSB7CiAJCWluZm8tPnZhci54b2Zmc2V0ID0g
dmFyLT54b2Zmc2V0OwogCQlpbmZvLT52YXIueW9mZnNldCA9IHZhci0+eW9mZnNldDsKQEAgLTE4
NTYsMTQgKzE4MTksMTMgQEAgc3RhdGljIGludCBwYW5fZGlzcGxheV9sZWdhY3koc3RydWN0IGZi
X3Zhcl9zY3JlZW5pbmZvICp2YXIsCiAJCQkgICAgICBzdHJ1Y3QgZmJfaW5mbyAqaW5mbykKIHsK
IAlzdHJ1Y3QgZHJtX2ZiX2hlbHBlciAqZmJfaGVscGVyID0gaW5mby0+cGFyOworCXN0cnVjdCBk
cm1fY2xpZW50X2RldiAqY2xpZW50ID0gJmZiX2hlbHBlci0+Y2xpZW50OwogCXN0cnVjdCBkcm1f
bW9kZV9zZXQgKm1vZGVzZXQ7CiAJaW50IHJldCA9IDA7Ci0JaW50IGk7CiAKIAlkcm1fbW9kZXNl
dF9sb2NrX2FsbChmYl9oZWxwZXItPmRldik7Ci0JZm9yIChpID0gMDsgaSA8IGZiX2hlbHBlci0+
Y3J0Y19jb3VudDsgaSsrKSB7Ci0JCW1vZGVzZXQgPSAmZmJfaGVscGVyLT5jcnRjX2luZm9baV0u
bW9kZV9zZXQ7Ci0KKwltdXRleF9sb2NrKCZjbGllbnQtPm1vZGVzZXRfbXV0ZXgpOworCWRybV9j
bGllbnRfZm9yX2VhY2hfbW9kZXNldChtb2Rlc2V0LCBjbGllbnQpIHsKIAkJbW9kZXNldC0+eCA9
IHZhci0+eG9mZnNldDsKIAkJbW9kZXNldC0+eSA9IHZhci0+eW9mZnNldDsKIApAQCAtMTg3NSw2
ICsxODM3LDcgQEAgc3RhdGljIGludCBwYW5fZGlzcGxheV9sZWdhY3koc3RydWN0IGZiX3Zhcl9z
Y3JlZW5pbmZvICp2YXIsCiAJCQl9CiAJCX0KIAl9CisJbXV0ZXhfdW5sb2NrKCZjbGllbnQtPm1v
ZGVzZXRfbXV0ZXgpOwogCWRybV9tb2Rlc2V0X3VubG9ja19hbGwoZmJfaGVscGVyLT5kZXYpOwog
CiAJcmV0dXJuIHJldDsKQEAgLTE5MjEsMTAgKzE4ODQsMTIgQEAgRVhQT1JUX1NZTUJPTChkcm1f
ZmJfaGVscGVyX3Bhbl9kaXNwbGF5KTsKIHN0YXRpYyBpbnQgZHJtX2ZiX2hlbHBlcl9zaW5nbGVf
ZmJfcHJvYmUoc3RydWN0IGRybV9mYl9oZWxwZXIgKmZiX2hlbHBlciwKIAkJCQkJIGludCBwcmVm
ZXJyZWRfYnBwKQogeworCXN0cnVjdCBkcm1fY2xpZW50X2RldiAqY2xpZW50ID0gJmZiX2hlbHBl
ci0+Y2xpZW50OwogCWludCByZXQgPSAwOwogCWludCBjcnRjX2NvdW50ID0gMDsKIAlpbnQgaTsK
IAlzdHJ1Y3QgZHJtX2ZiX2hlbHBlcl9zdXJmYWNlX3NpemUgc2l6ZXM7CisJc3RydWN0IGRybV9t
b2RlX3NldCAqbW9kZV9zZXQ7CiAJaW50IGJlc3RfZGVwdGggPSAwOwogCiAJbWVtc2V0KCZzaXpl
cywgMCwgc2l6ZW9mKHN0cnVjdCBkcm1fZmJfaGVscGVyX3N1cmZhY2Vfc2l6ZSkpOwpAQCAtMTk3
NSwxMyArMTk0MCwxMyBAQCBzdGF0aWMgaW50IGRybV9mYl9oZWxwZXJfc2luZ2xlX2ZiX3Byb2Jl
KHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCiAJICogc3VwcG9ydHMgUkdCQTU1NTEg
KDE2IGJwcCwgZGVwdGggMTUpIGJ1dCBub3QgUkdCNTY1ICgxNiBicHAsIGRlcHRoCiAJICogMTYp
IHdlIG5lZWQgdG8gc2NhbGUgZG93biB0aGUgZGVwdGggb2YgdGhlIHNpemVzIHdlIHJlcXVlc3Qu
CiAJICovCi0JZm9yIChpID0gMDsgaSA8IGZiX2hlbHBlci0+Y3J0Y19jb3VudDsgaSsrKSB7Ci0J
CXN0cnVjdCBkcm1fbW9kZV9zZXQgKm1vZGVfc2V0ID0gJmZiX2hlbHBlci0+Y3J0Y19pbmZvW2ld
Lm1vZGVfc2V0OworCW11dGV4X2xvY2soJmNsaWVudC0+bW9kZXNldF9tdXRleCk7CisJZHJtX2Ns
aWVudF9mb3JfZWFjaF9tb2Rlc2V0KG1vZGVfc2V0LCBjbGllbnQpIHsKIAkJc3RydWN0IGRybV9j
cnRjICpjcnRjID0gbW9kZV9zZXQtPmNydGM7CiAJCXN0cnVjdCBkcm1fcGxhbmUgKnBsYW5lID0g
Y3J0Yy0+cHJpbWFyeTsKIAkJaW50IGo7CiAKLQkJRFJNX0RFQlVHKCJ0ZXN0IENSVEMgJWQgcHJp
bWFyeSBwbGFuZVxuIiwgaSk7CisJCURSTV9ERUJVRygidGVzdCBDUlRDICV1IHByaW1hcnkgcGxh
bmVcbiIsIGRybV9jcnRjX2luZGV4KGNydGMpKTsKIAogCQlmb3IgKGogPSAwOyBqIDwgcGxhbmUt
PmZvcm1hdF9jb3VudDsgaisrKSB7CiAJCQljb25zdCBzdHJ1Y3QgZHJtX2Zvcm1hdF9pbmZvICpm
bXQ7CkBAIC0yMDIxLDkgKzE5ODYsOCBAQCBzdGF0aWMgaW50IGRybV9mYl9oZWxwZXJfc2luZ2xl
X2ZiX3Byb2JlKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCiAKIAkvKiBmaXJzdCB1
cCBnZXQgYSBjb3VudCBvZiBjcnRjcyBub3cgaW4gdXNlIGFuZCBuZXcgbWluL21heGVzIHdpZHRo
L2hlaWdodHMgKi8KIAljcnRjX2NvdW50ID0gMDsKLQlmb3IgKGkgPSAwOyBpIDwgZmJfaGVscGVy
LT5jcnRjX2NvdW50OyBpKyspIHsKKwlkcm1fY2xpZW50X2Zvcl9lYWNoX21vZGVzZXQobW9kZV9z
ZXQsIGNsaWVudCkgewogCQlzdHJ1Y3QgZHJtX2Rpc3BsYXlfbW9kZSAqZGVzaXJlZF9tb2RlOwot
CQlzdHJ1Y3QgZHJtX21vZGVfc2V0ICptb2RlX3NldDsKIAkJaW50IHgsIHksIGo7CiAJCS8qIGlu
IGNhc2Ugb2YgdGlsZSBncm91cCwgYXJlIHdlIHRoZSBsYXN0IHRpbGUgdmVydCBvciBob3Jpej8K
IAkJICogSWYgbm8gdGlsZSBncm91cCB5b3UgYXJlIGFsd2F5cyB0aGUgbGFzdCBvbmUgYm90aCB2
ZXJ0aWNhbGx5CkBAIC0yMDMxLDcgKzE5OTUsNiBAQCBzdGF0aWMgaW50IGRybV9mYl9oZWxwZXJf
c2luZ2xlX2ZiX3Byb2JlKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCiAJCSAqLwog
CQlib29sIGxhc3R2ID0gdHJ1ZSwgbGFzdGggPSB0cnVlOwogCi0JCW1vZGVfc2V0ID0gJmZiX2hl
bHBlci0+Y3J0Y19pbmZvW2ldLm1vZGVfc2V0OwogCQlkZXNpcmVkX21vZGUgPSBtb2RlX3NldC0+
bW9kZTsKIAogCQlpZiAoIWRlc2lyZWRfbW9kZSkKQEAgLTIwNjEsNiArMjAyNCw3IEBAIHN0YXRp
YyBpbnQgZHJtX2ZiX2hlbHBlcl9zaW5nbGVfZmJfcHJvYmUoc3RydWN0IGRybV9mYl9oZWxwZXIg
KmZiX2hlbHBlciwKIAkJaWYgKGxhc3R2KQogCQkJc2l6ZXMuZmJfaGVpZ2h0ID0gbWluX3QodTMy
LCBkZXNpcmVkX21vZGUtPnZkaXNwbGF5ICsgeSwgc2l6ZXMuZmJfaGVpZ2h0KTsKIAl9CisJbXV0
ZXhfdW5sb2NrKCZjbGllbnQtPm1vZGVzZXRfbXV0ZXgpOwogCiAJaWYgKGNydGNfY291bnQgPT0g
MCB8fCBzaXplcy5mYl93aWR0aCA9PSAtMSB8fCBzaXplcy5mYl9oZWlnaHQgPT0gLTEpIHsKIAkJ
RFJNX0lORk8oIkNhbm5vdCBmaW5kIGFueSBjcnRjIG9yIHNpemVzXG4iKTsKQEAgLTIyOTIsNyAr
MjI1Niw3IEBAIHN0YXRpYyBib29sIGRybV90YXJnZXRfY2xvbmVkKHN0cnVjdCBkcm1fZmJfaGVs
cGVyICpmYl9oZWxwZXIsCiAJc3RydWN0IGRybV9kaXNwbGF5X21vZGUgKmRtdF9tb2RlLCAqbW9k
ZTsKIAogCS8qIG9ubHkgY29udGVtcGxhdGUgY2xvbmluZyBpbiB0aGUgc2luZ2xlIGNydGMgY2Fz
ZSAqLwotCWlmIChmYl9oZWxwZXItPmNydGNfY291bnQgPiAxKQorCWlmIChmYl9oZWxwZXItPmRl
di0+bW9kZV9jb25maWcubnVtX2NydGMgPiAxKQogCQlyZXR1cm4gZmFsc2U7CiAKIAljb3VudCA9
IDA7CkBAIC0yNDgxLDE1ICsyNDQ1LDE3IEBAIHN0YXRpYyBib29sIGNvbm5lY3Rvcl9oYXNfcG9z
c2libGVfY3J0YyhzdHJ1Y3QgZHJtX2Nvbm5lY3RvciAqY29ubmVjdG9yLAogfQogCiBzdGF0aWMg
aW50IGRybV9waWNrX2NydGNzKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCi0JCQkg
IHN0cnVjdCBkcm1fZmJfaGVscGVyX2NydGMgKipiZXN0X2NydGNzLAorCQkJICBzdHJ1Y3QgZHJt
X2NydGMgKipiZXN0X2NydGNzLAogCQkJICBzdHJ1Y3QgZHJtX2Rpc3BsYXlfbW9kZSAqKm1vZGVz
LAogCQkJICBpbnQgbiwgaW50IHdpZHRoLCBpbnQgaGVpZ2h0KQogewotCWludCBjLCBvOworCXN0
cnVjdCBkcm1fY2xpZW50X2RldiAqY2xpZW50ID0gJmZiX2hlbHBlci0+Y2xpZW50OwogCXN0cnVj
dCBkcm1fY29ubmVjdG9yICpjb25uZWN0b3I7CiAJaW50IG15X3Njb3JlLCBiZXN0X3Njb3JlLCBz
Y29yZTsKLQlzdHJ1Y3QgZHJtX2ZiX2hlbHBlcl9jcnRjICoqY3J0Y3MsICpjcnRjOworCXN0cnVj
dCBkcm1fY3J0YyAqKmNydGNzLCAqY3J0YzsKKwlzdHJ1Y3QgZHJtX21vZGVfc2V0ICptb2Rlc2V0
OwogCXN0cnVjdCBkcm1fZmJfaGVscGVyX2Nvbm5lY3RvciAqZmJfaGVscGVyX2Nvbm47CisJaW50
IG87CiAKIAlpZiAobiA9PSBmYl9oZWxwZXItPmNvbm5lY3Rvcl9jb3VudCkKIAkJcmV0dXJuIDA7
CkBAIC0yNTAyLDggKzI0NjgsNyBAQCBzdGF0aWMgaW50IGRybV9waWNrX2NydGNzKHN0cnVjdCBk
cm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCiAJaWYgKG1vZGVzW25dID09IE5VTEwpCiAJCXJldHVy
biBiZXN0X3Njb3JlOwogCi0JY3J0Y3MgPSBrY2FsbG9jKGZiX2hlbHBlci0+Y29ubmVjdG9yX2Nv
dW50LAotCQkJc2l6ZW9mKHN0cnVjdCBkcm1fZmJfaGVscGVyX2NydGMgKiksIEdGUF9LRVJORUwp
OworCWNydGNzID0ga2NhbGxvYyhmYl9oZWxwZXItPmNvbm5lY3Rvcl9jb3VudCwgc2l6ZW9mKCpj
cnRjcyksIEdGUF9LRVJORUwpOwogCWlmICghY3J0Y3MpCiAJCXJldHVybiBiZXN0X3Njb3JlOwog
CkBAIC0yNTE5LDExICsyNDg0LDEwIEBAIHN0YXRpYyBpbnQgZHJtX3BpY2tfY3J0Y3Moc3RydWN0
IGRybV9mYl9oZWxwZXIgKmZiX2hlbHBlciwKIAkgKiBzZWxlY3QgYSBjcnRjIGZvciB0aGlzIGNv
bm5lY3RvciBhbmQgdGhlbiBhdHRlbXB0IHRvIGNvbmZpZ3VyZQogCSAqIHJlbWFpbmluZyBjb25u
ZWN0b3JzCiAJICovCi0JZm9yIChjID0gMDsgYyA8IGZiX2hlbHBlci0+Y3J0Y19jb3VudDsgYysr
KSB7Ci0JCWNydGMgPSAmZmJfaGVscGVyLT5jcnRjX2luZm9bY107CisJZHJtX2NsaWVudF9mb3Jf
ZWFjaF9tb2Rlc2V0KG1vZGVzZXQsIGNsaWVudCkgeworCQljcnRjID0gbW9kZXNldC0+Y3J0YzsK
IAotCQlpZiAoIWNvbm5lY3Rvcl9oYXNfcG9zc2libGVfY3J0Yyhjb25uZWN0b3IsCi0JCQkJCQkg
Y3J0Yy0+bW9kZV9zZXQuY3J0YykpCisJCWlmICghY29ubmVjdG9yX2hhc19wb3NzaWJsZV9jcnRj
KGNvbm5lY3RvciwgY3J0YykpCiAJCQljb250aW51ZTsKIAogCQlmb3IgKG8gPSAwOyBvIDwgbjsg
bysrKQpAQCAtMjUzMiw3ICsyNDk2LDcgQEAgc3RhdGljIGludCBkcm1fcGlja19jcnRjcyhzdHJ1
Y3QgZHJtX2ZiX2hlbHBlciAqZmJfaGVscGVyLAogCiAJCWlmIChvIDwgbikgewogCQkJLyogaWdu
b3JlIGNsb25pbmcgdW5sZXNzIG9ubHkgYSBzaW5nbGUgY3J0YyAqLwotCQkJaWYgKGZiX2hlbHBl
ci0+Y3J0Y19jb3VudCA+IDEpCisJCQlpZiAoZmJfaGVscGVyLT5kZXYtPm1vZGVfY29uZmlnLm51
bV9jcnRjID4gMSkKIAkJCQljb250aW51ZTsKIAogCQkJaWYgKCFkcm1fbW9kZV9lcXVhbChtb2Rl
c1tvXSwgbW9kZXNbbl0pKQpAQCAtMjU0MCwxNCArMjUwNCwxMyBAQCBzdGF0aWMgaW50IGRybV9w
aWNrX2NydGNzKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCiAJCX0KIAogCQljcnRj
c1tuXSA9IGNydGM7Ci0JCW1lbWNweShjcnRjcywgYmVzdF9jcnRjcywgbiAqIHNpemVvZihzdHJ1
Y3QgZHJtX2ZiX2hlbHBlcl9jcnRjICopKTsKKwkJbWVtY3B5KGNydGNzLCBiZXN0X2NydGNzLCBu
ICogc2l6ZW9mKCpjcnRjcykpOwogCQlzY29yZSA9IG15X3Njb3JlICsgZHJtX3BpY2tfY3J0Y3Mo
ZmJfaGVscGVyLCBjcnRjcywgbW9kZXMsIG4gKyAxLAogCQkJCQkJICB3aWR0aCwgaGVpZ2h0KTsK
IAkJaWYgKHNjb3JlID4gYmVzdF9zY29yZSkgewogCQkJYmVzdF9zY29yZSA9IHNjb3JlOwogCQkJ
bWVtY3B5KGJlc3RfY3J0Y3MsIGNydGNzLAotCQkJICAgICAgIGZiX2hlbHBlci0+Y29ubmVjdG9y
X2NvdW50ICoKLQkJCSAgICAgICBzaXplb2Yoc3RydWN0IGRybV9mYl9oZWxwZXJfY3J0YyAqKSk7
CisJCQkgICAgICAgZmJfaGVscGVyLT5jb25uZWN0b3JfY291bnQgKiBzaXplb2YoKmNydGNzKSk7
CiAJCX0KIAl9CiAKQEAgLTI1NTUsMjEgKzI1MTgsOSBAQCBzdGF0aWMgaW50IGRybV9waWNrX2Ny
dGNzKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCiAJcmV0dXJuIGJlc3Rfc2NvcmU7
CiB9CiAKLXN0YXRpYyBzdHJ1Y3QgZHJtX2ZiX2hlbHBlcl9jcnRjICoKLWRybV9mYl9oZWxwZXJf
Y3J0YyhzdHJ1Y3QgZHJtX2ZiX2hlbHBlciAqZmJfaGVscGVyLCBzdHJ1Y3QgZHJtX2NydGMgKmNy
dGMpCi17Ci0JaW50IGk7Ci0KLQlmb3IgKGkgPSAwOyBpIDwgZmJfaGVscGVyLT5jcnRjX2NvdW50
OyBpKyspCi0JCWlmIChmYl9oZWxwZXItPmNydGNfaW5mb1tpXS5tb2RlX3NldC5jcnRjID09IGNy
dGMpCi0JCQlyZXR1cm4gJmZiX2hlbHBlci0+Y3J0Y19pbmZvW2ldOwotCi0JcmV0dXJuIE5VTEw7
Ci19Ci0KIC8qIFRyeSB0byByZWFkIHRoZSBCSU9TIGRpc3BsYXkgY29uZmlndXJhdGlvbiBhbmQg
dXNlIGl0IGZvciB0aGUgaW5pdGlhbCBjb25maWcgKi8KIHN0YXRpYyBib29sIGRybV9mYl9oZWxw
ZXJfZmlybXdhcmVfY29uZmlnKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCi0JCQkJ
CSAgc3RydWN0IGRybV9mYl9oZWxwZXJfY3J0YyAqKmNydGNzLAorCQkJCQkgIHN0cnVjdCBkcm1f
Y3J0YyAqKmNydGNzLAogCQkJCQkgIHN0cnVjdCBkcm1fZGlzcGxheV9tb2RlICoqbW9kZXMsCiAJ
CQkJCSAgc3RydWN0IGRybV9mYl9vZmZzZXQgKm9mZnNldHMsCiAJCQkJCSAgYm9vbCAqZW5hYmxl
ZCwgaW50IHdpZHRoLCBpbnQgaGVpZ2h0KQpAQCAtMjYwNSw3ICsyNTU2LDcgQEAgc3RhdGljIGJv
b2wgZHJtX2ZiX2hlbHBlcl9maXJtd2FyZV9jb25maWcoc3RydWN0IGRybV9mYl9oZWxwZXIgKmZi
X2hlbHBlciwKIAkJc3RydWN0IGRybV9mYl9oZWxwZXJfY29ubmVjdG9yICpmYl9jb25uOwogCQlz
dHJ1Y3QgZHJtX2Nvbm5lY3RvciAqY29ubmVjdG9yOwogCQlzdHJ1Y3QgZHJtX2VuY29kZXIgKmVu
Y29kZXI7Ci0JCXN0cnVjdCBkcm1fZmJfaGVscGVyX2NydGMgKm5ld19jcnRjOworCQlzdHJ1Y3Qg
ZHJtX2NydGMgKm5ld19jcnRjOwogCiAJCWZiX2Nvbm4gPSBmYl9oZWxwZXItPmNvbm5lY3Rvcl9p
bmZvW2ldOwogCQljb25uZWN0b3IgPSBmYl9jb25uLT5jb25uZWN0b3I7CkBAIC0yNjQ3LDcgKzI1
OTgsNyBAQCBzdGF0aWMgYm9vbCBkcm1fZmJfaGVscGVyX2Zpcm13YXJlX2NvbmZpZyhzdHJ1Y3Qg
ZHJtX2ZiX2hlbHBlciAqZmJfaGVscGVyLAogCiAJCW51bV9jb25uZWN0b3JzX2VuYWJsZWQrKzsK
IAotCQluZXdfY3J0YyA9IGRybV9mYl9oZWxwZXJfY3J0YyhmYl9oZWxwZXIsIGNvbm5lY3Rvci0+
c3RhdGUtPmNydGMpOworCQluZXdfY3J0YyA9IGNvbm5lY3Rvci0+c3RhdGUtPmNydGM7CiAKIAkJ
LyoKIAkJICogTWFrZSBzdXJlIHdlJ3JlIG5vdCB0cnlpbmcgdG8gZHJpdmUgbXVsdGlwbGUgY29u
bmVjdG9ycwpAQCAtMjc0NywxMCArMjY5OCwxMSBAQCBzdGF0aWMgYm9vbCBkcm1fZmJfaGVscGVy
X2Zpcm13YXJlX2NvbmZpZyhzdHJ1Y3QgZHJtX2ZiX2hlbHBlciAqZmJfaGVscGVyLAogc3RhdGlj
IHZvaWQgZHJtX3NldHVwX2NydGNzKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCiAJ
CQkgICAgdTMyIHdpZHRoLCB1MzIgaGVpZ2h0KQogeworCXN0cnVjdCBkcm1fY2xpZW50X2RldiAq
Y2xpZW50ID0gJmZiX2hlbHBlci0+Y2xpZW50OwogCXN0cnVjdCBkcm1fZGV2aWNlICpkZXYgPSBm
Yl9oZWxwZXItPmRldjsKLQlzdHJ1Y3QgZHJtX2ZiX2hlbHBlcl9jcnRjICoqY3J0Y3M7CiAJc3Ry
dWN0IGRybV9kaXNwbGF5X21vZGUgKiptb2RlczsKIAlzdHJ1Y3QgZHJtX2ZiX29mZnNldCAqb2Zm
c2V0czsKKwlzdHJ1Y3QgZHJtX2NydGMgKipjcnRjczsKIAlib29sICplbmFibGVkOwogCWludCBp
OwogCkBAIC0yNzU4LDggKzI3MTAsNyBAQCBzdGF0aWMgdm9pZCBkcm1fc2V0dXBfY3J0Y3Moc3Ry
dWN0IGRybV9mYl9oZWxwZXIgKmZiX2hlbHBlciwKIAkvKiBwcmV2ZW50IGNvbmN1cnJlbnQgbW9k
aWZpY2F0aW9uIG9mIGNvbm5lY3Rvcl9jb3VudCBieSBob3RwbHVnICovCiAJbG9ja2RlcF9hc3Nl
cnRfaGVsZCgmZmJfaGVscGVyLT5sb2NrKTsKIAotCWNydGNzID0ga2NhbGxvYyhmYl9oZWxwZXIt
PmNvbm5lY3Rvcl9jb3VudCwKLQkJCXNpemVvZihzdHJ1Y3QgZHJtX2ZiX2hlbHBlcl9jcnRjICop
LCBHRlBfS0VSTkVMKTsKKwljcnRjcyA9IGtjYWxsb2MoZmJfaGVscGVyLT5jb25uZWN0b3JfY291
bnQsIHNpemVvZigqY3J0Y3MpLCBHRlBfS0VSTkVMKTsKIAltb2RlcyA9IGtjYWxsb2MoZmJfaGVs
cGVyLT5jb25uZWN0b3JfY291bnQsCiAJCQlzaXplb2Yoc3RydWN0IGRybV9kaXNwbGF5X21vZGUg
KiksIEdGUF9LRVJORUwpOwogCW9mZnNldHMgPSBrY2FsbG9jKGZiX2hlbHBlci0+Y29ubmVjdG9y
X2NvdW50LApAQCAtMjc3MSw2ICsyNzIyLDggQEAgc3RhdGljIHZvaWQgZHJtX3NldHVwX2NydGNz
KHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCiAJCWdvdG8gb3V0OwogCX0KIAorCW11
dGV4X2xvY2soJmNsaWVudC0+bW9kZXNldF9tdXRleCk7CisKIAltdXRleF9sb2NrKCZmYl9oZWxw
ZXItPmRldi0+bW9kZV9jb25maWcubXV0ZXgpOwogCWlmIChkcm1fZmJfaGVscGVyX3Byb2JlX2Nv
bm5lY3Rvcl9tb2RlcyhmYl9oZWxwZXIsIHdpZHRoLCBoZWlnaHQpID09IDApCiAJCURSTV9ERUJV
R19LTVMoIk5vIGNvbm5lY3RvcnMgcmVwb3J0ZWQgY29ubmVjdGVkIHdpdGggbW9kZXNcbiIpOwpA
QCAtMjc5NSwyNCArMjc0OCwyNCBAQCBzdGF0aWMgdm9pZCBkcm1fc2V0dXBfY3J0Y3Moc3RydWN0
IGRybV9mYl9oZWxwZXIgKmZiX2hlbHBlciwKIAl9CiAJbXV0ZXhfdW5sb2NrKCZmYl9oZWxwZXIt
PmRldi0+bW9kZV9jb25maWcubXV0ZXgpOwogCi0JLyogbmVlZCB0byBzZXQgdGhlIG1vZGVzZXRz
IHVwIGhlcmUgZm9yIHVzZSBsYXRlciAqLwotCS8qIGZpbGwgb3V0IHRoZSBjb25uZWN0b3I8LT5j
cnRjIG1hcHBpbmdzIGludG8gdGhlIG1vZGVzZXRzICovCi0JZm9yIChpID0gMDsgaSA8IGZiX2hl
bHBlci0+Y3J0Y19jb3VudDsgaSsrKQotCQlkcm1fZmJfaGVscGVyX21vZGVzZXRfcmVsZWFzZShm
Yl9oZWxwZXIsCi0JCQkJCSAgICAgICZmYl9oZWxwZXItPmNydGNfaW5mb1tpXS5tb2RlX3NldCk7
CisJZHJtX2NsaWVudF9tb2Rlc2V0X3JlbGVhc2UoY2xpZW50KTsKIAogCWRybV9mYl9oZWxwZXJf
Zm9yX2VhY2hfY29ubmVjdG9yKGZiX2hlbHBlciwgaSkgewogCQlzdHJ1Y3QgZHJtX2Rpc3BsYXlf
bW9kZSAqbW9kZSA9IG1vZGVzW2ldOwotCQlzdHJ1Y3QgZHJtX2ZiX2hlbHBlcl9jcnRjICpmYl9j
cnRjID0gY3J0Y3NbaV07CisJCXN0cnVjdCBkcm1fY3J0YyAqY3J0YyA9IGNydGNzW2ldOwogCQlz
dHJ1Y3QgZHJtX2ZiX29mZnNldCAqb2Zmc2V0ID0gJm9mZnNldHNbaV07CiAKLQkJaWYgKG1vZGUg
JiYgZmJfY3J0YykgewotCQkJc3RydWN0IGRybV9tb2RlX3NldCAqbW9kZXNldCA9ICZmYl9jcnRj
LT5tb2RlX3NldDsKKwkJaWYgKG1vZGUgJiYgY3J0YykgeworCQkJc3RydWN0IGRybV9tb2RlX3Nl
dCAqbW9kZXNldCA9IGRybV9jbGllbnRfZmluZF9tb2Rlc2V0KGNsaWVudCwgY3J0Yyk7CiAJCQlz
dHJ1Y3QgZHJtX2Nvbm5lY3RvciAqY29ubmVjdG9yID0KIAkJCQlmYl9oZWxwZXItPmNvbm5lY3Rv
cl9pbmZvW2ldLT5jb25uZWN0b3I7CiAKIAkJCURSTV9ERUJVR19LTVMoImRlc2lyZWQgbW9kZSAl
cyBzZXQgb24gY3J0YyAlZCAoJWQsJWQpXG4iLAotCQkJCSAgICAgIG1vZGUtPm5hbWUsIGZiX2Ny
dGMtPm1vZGVfc2V0LmNydGMtPmJhc2UuaWQsIG9mZnNldC0+eCwgb2Zmc2V0LT55KTsKKwkJCQkg
ICAgICBtb2RlLT5uYW1lLCBjcnRjLT5iYXNlLmlkLCBvZmZzZXQtPngsIG9mZnNldC0+eSk7CisK
KwkJCWlmIChXQVJOX09OX09OQ0UobW9kZXNldC0+bnVtX2Nvbm5lY3RvcnMgPT0gRFJNX0NMSUVO
VF9NQVhfQ0xPTkVEX0NPTk5FQ1RPUlMgfHwKKwkJCQkJIChkZXYtPm1vZGVfY29uZmlnLm51bV9j
cnRjID4gMSAmJiBtb2Rlc2V0LT5udW1fY29ubmVjdG9ycyA9PSAxKSkpCisJCQkJYnJlYWs7CiAK
IAkJCW1vZGVzZXQtPm1vZGUgPSBkcm1fbW9kZV9kdXBsaWNhdGUoZGV2LCBtb2RlKTsKIAkJCWRy
bV9jb25uZWN0b3JfZ2V0KGNvbm5lY3Rvcik7CkBAIC0yODIxLDYgKzI3NzQsOCBAQCBzdGF0aWMg
dm9pZCBkcm1fc2V0dXBfY3J0Y3Moc3RydWN0IGRybV9mYl9oZWxwZXIgKmZiX2hlbHBlciwKIAkJ
CW1vZGVzZXQtPnkgPSBvZmZzZXQtPnk7CiAJCX0KIAl9CisKKwltdXRleF91bmxvY2soJmNsaWVu
dC0+bW9kZXNldF9tdXRleCk7CiBvdXQ6CiAJa2ZyZWUoY3J0Y3MpOwogCWtmcmVlKG1vZGVzKTsK
QEAgLTI4MzcsMTMgKzI3OTIsMTQgQEAgc3RhdGljIHZvaWQgZHJtX3NldHVwX2NydGNzKHN0cnVj
dCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIsCiAgKi8KIHN0YXRpYyB2b2lkIGRybV9zZXR1cF9j
cnRjc19mYihzdHJ1Y3QgZHJtX2ZiX2hlbHBlciAqZmJfaGVscGVyKQogeworCXN0cnVjdCBkcm1f
Y2xpZW50X2RldiAqY2xpZW50ID0gJmZiX2hlbHBlci0+Y2xpZW50OwogCXN0cnVjdCBmYl9pbmZv
ICppbmZvID0gZmJfaGVscGVyLT5mYmRldjsKIAl1bnNpZ25lZCBpbnQgcm90YXRpb24sIHN3X3Jv
dGF0aW9ucyA9IDA7CisJc3RydWN0IGRybV9tb2RlX3NldCAqbW9kZXNldDsKIAlpbnQgaTsKIAot
CWZvciAoaSA9IDA7IGkgPCBmYl9oZWxwZXItPmNydGNfY291bnQ7IGkrKykgewotCQlzdHJ1Y3Qg
ZHJtX21vZGVfc2V0ICptb2Rlc2V0ID0gJmZiX2hlbHBlci0+Y3J0Y19pbmZvW2ldLm1vZGVfc2V0
OwotCisJbXV0ZXhfbG9jaygmY2xpZW50LT5tb2Rlc2V0X211dGV4KTsKKwlkcm1fY2xpZW50X2Zv
cl9lYWNoX21vZGVzZXQobW9kZXNldCwgY2xpZW50KSB7CiAJCWlmICghbW9kZXNldC0+bnVtX2Nv
bm5lY3RvcnMpCiAJCQljb250aW51ZTsKIApAQCAtMjg1NSw2ICsyODExLDcgQEAgc3RhdGljIHZv
aWQgZHJtX3NldHVwX2NydGNzX2ZiKHN0cnVjdCBkcm1fZmJfaGVscGVyICpmYl9oZWxwZXIpCiAJ
CWVsc2UKIAkJCXN3X3JvdGF0aW9ucyB8PSByb3RhdGlvbjsKIAl9CisJbXV0ZXhfdW5sb2NrKCZj
bGllbnQtPm1vZGVzZXRfbXV0ZXgpOwogCiAJbXV0ZXhfbG9jaygmZmJfaGVscGVyLT5kZXYtPm1v
ZGVfY29uZmlnLm11dGV4KTsKIAlkcm1fZmJfaGVscGVyX2Zvcl9lYWNoX2Nvbm5lY3RvcihmYl9o
ZWxwZXIsIGkpIHsKQEAgLTMwNzAsOCArMzAyNyw3IEBAIEVYUE9SVF9TWU1CT0woZHJtX2ZiX2hl
bHBlcl9ob3RwbHVnX2V2ZW50KTsKICAqIEBmdW5jczogZmJkZXYgaGVscGVyIGZ1bmN0aW9ucwog
ICogQHByZWZlcnJlZF9icHA6IFByZWZlcnJlZCBiaXRzIHBlciBwaXhlbCBmb3IgdGhlIGRldmlj
ZS4KICAqICAgICAgICAgICAgICAgICBAZGV2LT5tb2RlX2NvbmZpZy5wcmVmZXJyZWRfZGVwdGgg
aXMgdXNlZCBpZiB0aGlzIGlzIHplcm8uCi0gKiBAbWF4X2Nvbm5fY291bnQ6IE1heGltdW0gbnVt
YmVyIG9mIGNvbm5lY3RvcnMuCi0gKiAgICAgICAgICAgICAgICAgIEBkZXYtPm1vZGVfY29uZmln
Lm51bV9jb25uZWN0b3IgaXMgdXNlZCBpZiB0aGlzIGlzIHplcm8uCisgKiBAbWF4X2Nvbm5fY291
bnQ6IE1heGltdW0gbnVtYmVyIG9mIGNvbm5lY3RvcnMgKG5vdCB1c2VkKQogICoKICAqIFRoaXMg
ZnVuY3Rpb24gc2V0cyB1cCBmYmRldiBlbXVsYXRpb24gYW5kIHJlZ2lzdGVycyBmYmRldiBmb3Ig
YWNjZXNzIGJ5CiAgKiB1c2Vyc3BhY2UuIElmIGFsbCBjb25uZWN0b3JzIGFyZSBkaXNjb25uZWN0
ZWQsIHNldHVwIGlzIGRlZmVycmVkIHRvIHRoZSBuZXh0CkBAIC0zMDk5LDE2ICszMDU1LDkgQEAg
aW50IGRybV9mYl9oZWxwZXJfZmJkZXZfc2V0dXAoc3RydWN0IGRybV9kZXZpY2UgKmRldiwKIAlp
ZiAoIXByZWZlcnJlZF9icHApCiAJCXByZWZlcnJlZF9icHAgPSAzMjsKIAotCWlmICghbWF4X2Nv
bm5fY291bnQpCi0JCW1heF9jb25uX2NvdW50ID0gZGV2LT5tb2RlX2NvbmZpZy5udW1fY29ubmVj
dG9yOwotCWlmICghbWF4X2Nvbm5fY291bnQpIHsKLQkJRFJNX0RFVl9FUlJPUihkZXYtPmRldiwg
ImZiZGV2OiBObyBjb25uZWN0b3JzXG4iKTsKLQkJcmV0dXJuIC1FSU5WQUw7Ci0JfQotCiAJZHJt
X2ZiX2hlbHBlcl9wcmVwYXJlKGRldiwgZmJfaGVscGVyLCBmdW5jcyk7CiAKLQlyZXQgPSBkcm1f
ZmJfaGVscGVyX2luaXQoZGV2LCBmYl9oZWxwZXIsIG1heF9jb25uX2NvdW50KTsKKwlyZXQgPSBk
cm1fZmJfaGVscGVyX2luaXQoZGV2LCBmYl9oZWxwZXIsIDApOwogCWlmIChyZXQgPCAwKSB7CiAJ
CURSTV9ERVZfRVJST1IoZGV2LT5kZXYsICJmYmRldjogRmFpbGVkIHRvIGluaXRpYWxpemUgKHJl
dD0lZClcbiIsIHJldCk7CiAJCXJldHVybiByZXQ7CkBAIC0zNDIxLDcgKzMzNzAsNyBAQCBzdGF0
aWMgaW50IGRybV9mYmRldl9jbGllbnRfaG90cGx1ZyhzdHJ1Y3QgZHJtX2NsaWVudF9kZXYgKmNs
aWVudCkKIAogCWRybV9mYl9oZWxwZXJfcHJlcGFyZShkZXYsIGZiX2hlbHBlciwgJmRybV9mYl9o
ZWxwZXJfZ2VuZXJpY19mdW5jcyk7CiAKLQlyZXQgPSBkcm1fZmJfaGVscGVyX2luaXQoZGV2LCBm
Yl9oZWxwZXIsIGRldi0+bW9kZV9jb25maWcubnVtX2Nvbm5lY3Rvcik7CisJcmV0ID0gZHJtX2Zi
X2hlbHBlcl9pbml0KGRldiwgZmJfaGVscGVyLCAwKTsKIAlpZiAocmV0KQogCQlnb3RvIGVycjsK
IApkaWZmIC0tZ2l0IGEvaW5jbHVkZS9kcm0vZHJtX2NsaWVudC5oIGIvaW5jbHVkZS9kcm0vZHJt
X2NsaWVudC5oCmluZGV4IDI2OGIyY2YwMDUyYS4uODdiZTlhZWIxZmUwIDEwMDY0NAotLS0gYS9p
bmNsdWRlL2RybS9kcm1fY2xpZW50LmgKKysrIGIvaW5jbHVkZS9kcm0vZHJtX2NsaWVudC5oCkBA
IC0zLDggKzMsMTIgQEAKICNpZm5kZWYgX0RSTV9DTElFTlRfSF8KICNkZWZpbmUgX0RSTV9DTElF
TlRfSF8KIAorI2luY2x1ZGUgPGxpbnV4L2xvY2tkZXAuaD4KKyNpbmNsdWRlIDxsaW51eC9tdXRl
eC5oPgogI2luY2x1ZGUgPGxpbnV4L3R5cGVzLmg+CiAKKyNpbmNsdWRlIDxkcm0vZHJtX2NydGMu
aD4KKwogc3RydWN0IGRybV9jbGllbnRfZGV2Owogc3RydWN0IGRybV9kZXZpY2U7CiBzdHJ1Y3Qg
ZHJtX2ZpbGU7CkBAIC0xMyw2ICsxNyw4IEBAIHN0cnVjdCBkcm1fZ2VtX29iamVjdDsKIHN0cnVj
dCBkcm1fbWlub3I7CiBzdHJ1Y3QgbW9kdWxlOwogCisjZGVmaW5lIERSTV9DTElFTlRfTUFYX0NM
T05FRF9DT05ORUNUT1JTCTgKKwogLyoqCiAgKiBzdHJ1Y3QgZHJtX2NsaWVudF9mdW5jcyAtIERS
TSBjbGllbnQgY2FsbGJhY2tzCiAgKi8KQEAgLTg1LDYgKzkxLDE2IEBAIHN0cnVjdCBkcm1fY2xp
ZW50X2RldiB7CiAJICogQGZpbGU6IERSTSBmaWxlCiAJICovCiAJc3RydWN0IGRybV9maWxlICpm
aWxlOworCisJLyoqCisJICogQG1vZGVzZXRfbXV0ZXg6IFByb3RlY3RzIEBtb2Rlc2V0cy4KKwkg
Ki8KKwlzdHJ1Y3QgbXV0ZXggbW9kZXNldF9tdXRleDsKKworCS8qKgorCSAqIEBtb2Rlc2V0czog
Q1JUQyBjb25maWd1cmF0aW9ucworCSAqLworCXN0cnVjdCBkcm1fbW9kZV9zZXQgKm1vZGVzZXRz
OwogfTsKIAogaW50IGRybV9jbGllbnRfaW5pdChzdHJ1Y3QgZHJtX2RldmljZSAqZGV2LCBzdHJ1
Y3QgZHJtX2NsaWVudF9kZXYgKmNsaWVudCwKQEAgLTEzNSw2ICsxNTEsMjAgQEAgc3RydWN0IGRy
bV9jbGllbnRfYnVmZmVyICoKIGRybV9jbGllbnRfZnJhbWVidWZmZXJfY3JlYXRlKHN0cnVjdCBk
cm1fY2xpZW50X2RldiAqY2xpZW50LCB1MzIgd2lkdGgsIHUzMiBoZWlnaHQsIHUzMiBmb3JtYXQp
Owogdm9pZCBkcm1fY2xpZW50X2ZyYW1lYnVmZmVyX2RlbGV0ZShzdHJ1Y3QgZHJtX2NsaWVudF9i
dWZmZXIgKmJ1ZmZlcik7CiAKK2ludCBkcm1fY2xpZW50X21vZGVzZXRfY3JlYXRlKHN0cnVjdCBk
cm1fY2xpZW50X2RldiAqY2xpZW50KTsKK3ZvaWQgZHJtX2NsaWVudF9tb2Rlc2V0X2ZyZWUoc3Ry
dWN0IGRybV9jbGllbnRfZGV2ICpjbGllbnQpOwordm9pZCBkcm1fY2xpZW50X21vZGVzZXRfcmVs
ZWFzZShzdHJ1Y3QgZHJtX2NsaWVudF9kZXYgKmNsaWVudCk7CitzdHJ1Y3QgZHJtX21vZGVfc2V0
ICpkcm1fY2xpZW50X2ZpbmRfbW9kZXNldChzdHJ1Y3QgZHJtX2NsaWVudF9kZXYgKmNsaWVudCwg
c3RydWN0IGRybV9jcnRjICpjcnRjKTsKKworLyoqCisgKiBkcm1fY2xpZW50X2Zvcl9lYWNoX21v
ZGVzZXQoKSAtIEl0ZXJhdGUgb3ZlciBjbGllbnQgbW9kZXNldHMKKyAqIEBtb2Rlc2V0OiAmZHJt
X21vZGVfc2V0IGxvb3AgY3Vyc29yCisgKiBAY2xpZW50OiBEUk0gY2xpZW50CisgKi8KKyNkZWZp
bmUgZHJtX2NsaWVudF9mb3JfZWFjaF9tb2Rlc2V0KG1vZGVzZXQsIGNsaWVudCkgXAorCWZvciAo
KHsgbG9ja2RlcF9hc3NlcnRfaGVsZCgmKGNsaWVudCktPm1vZGVzZXRfbXV0ZXgpOyB9KSwgXAor
CSAgICAgbW9kZXNldCA9IChjbGllbnQpLT5tb2Rlc2V0czsgbW9kZXNldC0+Y3J0YzsgbW9kZXNl
dCsrKQorCiBpbnQgZHJtX2NsaWVudF9kZWJ1Z2ZzX2luaXQoc3RydWN0IGRybV9taW5vciAqbWlu
b3IpOwogCiAjZW5kaWYKZGlmZiAtLWdpdCBhL2luY2x1ZGUvZHJtL2RybV9mYl9oZWxwZXIuaCBi
L2luY2x1ZGUvZHJtL2RybV9mYl9oZWxwZXIuaAppbmRleCAyYWYxYzZkM2UxNDcuLjZiMzM0ZjRk
OGEyMiAxMDA2NDQKLS0tIGEvaW5jbHVkZS9kcm0vZHJtX2ZiX2hlbHBlci5oCisrKyBiL2luY2x1
ZGUvZHJtL2RybV9mYl9oZWxwZXIuaApAQCAtNDcsMTAgKzQ3LDYgQEAgc3RydWN0IGRybV9mYl9v
ZmZzZXQgewogCWludCB4LCB5OwogfTsKIAotc3RydWN0IGRybV9mYl9oZWxwZXJfY3J0YyB7Ci0J
c3RydWN0IGRybV9tb2RlX3NldCBtb2RlX3NldDsKLX07Ci0KIC8qKgogICogc3RydWN0IGRybV9m
Yl9oZWxwZXJfc3VyZmFjZV9zaXplIC0gZGVzY3JpYmVzIGZiZGV2IHNpemUgYW5kIHNjYW5vdXQg
c3VyZmFjZSBzaXplCiAgKiBAZmJfd2lkdGg6IGZiZGV2IHdpZHRoCkBAIC0xMDksOCArMTA1LDYg
QEAgc3RydWN0IGRybV9mYl9oZWxwZXJfY29ubmVjdG9yIHsKICAqIHN0cnVjdCBkcm1fZmJfaGVs
cGVyIC0gbWFpbiBzdHJ1Y3R1cmUgdG8gZW11bGF0ZSBmYmRldiBvbiB0b3Agb2YgS01TCiAgKiBA
ZmI6IFNjYW5vdXQgZnJhbWVidWZmZXIgb2JqZWN0CiAgKiBAZGV2OiBEUk0gZGV2aWNlCi0gKiBA
Y3J0Y19jb3VudDogbnVtYmVyIG9mIHBvc3NpYmxlIENSVENzCi0gKiBAY3J0Y19pbmZvOiBwZXIt
Q1JUQyBoZWxwZXIgc3RhdGUgKG1vZGUsIHgveSBvZmZzZXQsIGV0YykKICAqIEBjb25uZWN0b3Jf
Y291bnQ6IG51bWJlciBvZiBjb25uZWN0ZWQgY29ubmVjdG9ycwogICogQGNvbm5lY3Rvcl9pbmZv
X2FsbG9jX2NvdW50OiBzaXplIG9mIGNvbm5lY3Rvcl9pbmZvCiAgKiBAZnVuY3M6IGRyaXZlciBj
YWxsYmFja3MgZm9yIGZiIGhlbHBlcgpAQCAtMTQ0LDggKzEzOCw2IEBAIHN0cnVjdCBkcm1fZmJf
aGVscGVyIHsKIAogCXN0cnVjdCBkcm1fZnJhbWVidWZmZXIgKmZiOwogCXN0cnVjdCBkcm1fZGV2
aWNlICpkZXY7Ci0JaW50IGNydGNfY291bnQ7Ci0Jc3RydWN0IGRybV9mYl9oZWxwZXJfY3J0YyAq
Y3J0Y19pbmZvOwogCWludCBjb25uZWN0b3JfY291bnQ7CiAJaW50IGNvbm5lY3Rvcl9pbmZvX2Fs
bG9jX2NvdW50OwogCS8qKgotLSAKMi4yMC4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fXwpkcmktZGV2ZWwgbWFpbGluZyBsaXN0CmRyaS1kZXZlbEBsaXN0
cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9s
aXN0aW5mby9kcmktZGV2ZWw=
