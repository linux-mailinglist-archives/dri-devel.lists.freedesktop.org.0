Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id A546411F01B
	for <lists+dri-devel@lfdr.de>; Sat, 14 Dec 2019 04:26:31 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 9A0B86E2F3;
	Sat, 14 Dec 2019 03:26:26 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from hqnvemgate26.nvidia.com (hqnvemgate26.nvidia.com
 [216.228.121.65])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 539E86E093
 for <dri-devel@lists.freedesktop.org>; Sat, 14 Dec 2019 03:26:25 +0000 (UTC)
Received: from hqpgpgate101.nvidia.com (Not Verified[216.228.121.13]) by
 hqnvemgate26.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
 id <B5df456580000>; Fri, 13 Dec 2019 19:26:16 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
 by hqpgpgate101.nvidia.com (PGP Universal service);
 Fri, 13 Dec 2019 19:26:24 -0800
X-PGP-Universal: processed;
 by hqpgpgate101.nvidia.com on Fri, 13 Dec 2019 19:26:24 -0800
Received: from HQMAIL109.nvidia.com (172.20.187.15) by HQMAIL107.nvidia.com
 (172.20.187.13) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Sat, 14 Dec
 2019 03:26:23 +0000
Received: from hqnvemgw03.nvidia.com (10.124.88.68) by HQMAIL109.nvidia.com
 (172.20.187.15) with Microsoft SMTP Server (TLS) id 15.0.1473.3 via Frontend
 Transport; Sat, 14 Dec 2019 03:26:23 +0000
Received: from blueforge.nvidia.com (Not Verified[10.110.48.28]) by
 hqnvemgw03.nvidia.com with Trustwave SEG (v7, 5, 8, 10121)
 id <B5df4565f0000>; Fri, 13 Dec 2019 19:26:23 -0800
From: John Hubbard <jhubbard@nvidia.com>
To: Andrew Morton <akpm@linux-foundation.org>
Subject: [PATCH v11 23/25] mm/gup: track FOLL_PIN pages
Date: Fri, 13 Dec 2019 19:26:17 -0800
Message-ID: <20191214032617.1670759-1-jhubbard@nvidia.com>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20191212101741.GD10065@quack2.suse.cz>
References: <20191212101741.GD10065@quack2.suse.cz>
MIME-Version: 1.0
X-NVConfidentiality: public
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nvidia.com; s=n1;
 t=1576293977; bh=FWLx+gxsfuOtztyFqCn2BrgEGx3+6Ho7wvF61tReGAs=;
 h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
 In-Reply-To:References:MIME-Version:X-NVConfidentiality:
 Content-Type:Content-Transfer-Encoding;
 b=WkL7owZ9gFju7i8EFMdo5Q0r1OhgKGh57iUuH09esJDfd0e8lMlEDFkm7O23kSf+D
 zkUn/kMK0Kg5t+WYy0LUJOs6P+nS2LzGrhN6qoxCqRHONlwD4Z3QT8unPZHnutLWAa
 YCPgINrSV7A3p64GSmJo1QIzkB7eIHjwLwUOd6fdWFyJtjNLSAH2u/0pu12FV7haS+
 ZpI4AyYXwtc0hekbYHTZoxc/rqxvkDh4zAd3C0b8zGPjr7i4dlOesbfzKlHnOVooz7
 5od5DHduIBwWLuAXWlQNVJFx1/DQn9rM0iTDW595imZenedlq/17sWCiublJSUE6Xh
 IaED8zp2fVshg==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Michal Hocko <mhocko@suse.com>, Jan Kara <jack@suse.cz>,
 kvm@vger.kernel.org, linux-doc@vger.kernel.org,
 David Airlie <airlied@linux.ie>, Dave Chinner <david@fromorbit.com>,
 dri-devel@lists.freedesktop.org, LKML <linux-kernel@vger.kernel.org>,
 linux-mm@kvack.org, Paul Mackerras <paulus@samba.org>,
 linux-kselftest@vger.kernel.org, Ira Weiny <ira.weiny@intel.com>,
 Jonathan Corbet <corbet@lwn.net>, linux-rdma@vger.kernel.org,
 Michael Ellerman <mpe@ellerman.id.au>, Christoph Hellwig <hch@infradead.org>,
 Jason Gunthorpe <jgg@ziepe.ca>, Vlastimil Babka <vbabka@suse.cz>,
 =?UTF-8?q?Bj=C3=B6rn=20T=C3=B6pel?= <bjorn.topel@intel.com>,
 linux-media@vger.kernel.org, Shuah Khan <shuah@kernel.org>,
 John Hubbard <jhubbard@nvidia.com>, linux-block@vger.kernel.org,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Al Viro <viro@zeniv.linux.org.uk>, Dan Williams <dan.j.williams@intel.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Magnus Karlsson <magnus.karlsson@intel.com>, Jens Axboe <axboe@kernel.dk>,
 netdev@vger.kernel.org, Alex Williamson <alex.williamson@redhat.com>,
 linux-fsdevel@vger.kernel.org, bpf@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org, "David S . Miller" <davem@davemloft.net>,
 "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
 Mike Kravetz <mike.kravetz@oracle.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

QWRkIHRyYWNraW5nIG9mIHBhZ2VzIHRoYXQgd2VyZSBwaW5uZWQgdmlhIEZPTExfUElOLgoKQXMg
bWVudGlvbmVkIGluIHRoZSBGT0xMX1BJTiBkb2N1bWVudGF0aW9uLCBjYWxsZXJzIHdobyBlZmZl
Y3RpdmVseSBzZXQKRk9MTF9QSU4gYXJlIHJlcXVpcmVkIHRvIHVsdGltYXRlbHkgZnJlZSBzdWNo
IHBhZ2VzIHZpYSB1bnBpbl91c2VyX3BhZ2UoKS4KVGhlIGVmZmVjdCBpcyBzaW1pbGFyIHRvIEZP
TExfR0VULCBhbmQgbWF5IGJlIHRob3VnaHQgb2YgYXMgIkZPTExfR0VUCmZvciBESU8gYW5kL29y
IFJETUEgdXNlIi4KClBhZ2VzIHRoYXQgaGF2ZSBiZWVuIHBpbm5lZCB2aWEgRk9MTF9QSU4gYXJl
IGlkZW50aWZpYWJsZSB2aWEgYQpuZXcgZnVuY3Rpb24gY2FsbDoKCiAgIGJvb2wgcGFnZV9kbWFf
cGlubmVkKHN0cnVjdCBwYWdlICpwYWdlKTsKCldoYXQgdG8gZG8gaW4gcmVzcG9uc2UgdG8gZW5j
b3VudGVyaW5nIHN1Y2ggYSBwYWdlLCBpcyBsZWZ0IHRvIGxhdGVyCnBhdGNoc2V0cy4gVGhlcmUg
aXMgZGlzY3Vzc2lvbiBhYm91dCB0aGlzIGluIFsxXSwgWzJdLCBhbmQgWzNdLgoKVGhpcyBhbHNv
IGNoYW5nZXMgYSBCVUdfT04oKSwgdG8gYSBXQVJOX09OKCksIGluIGZvbGxvd19wYWdlX21hc2so
KS4KClsxXSBTb21lIHNsb3cgcHJvZ3Jlc3Mgb24gZ2V0X3VzZXJfcGFnZXMoKSAoQXByIDIsIDIw
MTkpOgogICAgaHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzc4NDU3NC8KWzJdIERNQSBhbmQgZ2V0
X3VzZXJfcGFnZXMoKSAoTFBDOiBEZWMgMTIsIDIwMTgpOgogICAgaHR0cHM6Ly9sd24ubmV0L0Fy
dGljbGVzLzc3NDQxMS8KWzNdIFRoZSB0cm91YmxlIHdpdGggZ2V0X3VzZXJfcGFnZXMoKSAoQXBy
IDMwLCAyMDE4KToKICAgIGh0dHBzOi8vbHduLm5ldC9BcnRpY2xlcy83NTMwMjcvCgpTdWdnZXN0
ZWQtYnk6IEphbiBLYXJhIDxqYWNrQHN1c2UuY3o+ClN1Z2dlc3RlZC1ieTogSsOpcsO0bWUgR2xp
c3NlIDxqZ2xpc3NlQHJlZGhhdC5jb20+CkNjOiBLaXJpbGwgQS4gU2h1dGVtb3YgPGtpcmlsbC5z
aHV0ZW1vdkBsaW51eC5pbnRlbC5jb20+ClNpZ25lZC1vZmYtYnk6IEpvaG4gSHViYmFyZCA8amh1
YmJhcmRAbnZpZGlhLmNvbT4KLS0tCgpIaSBKYW4sCgpUaGlzIHNob3VsZCBhZGRyZXNzIGFsbCBv
ZiB5b3VyIGNvbW1lbnRzIGZvciBwYXRjaCAyMyEKCnRoYW5rcywKSm9obiBIdWJiYXJkCk5WSURJ
QQoKIERvY3VtZW50YXRpb24vY29yZS1hcGkvcGluX3VzZXJfcGFnZXMucnN0IHwgICAyICstCiBp
bmNsdWRlL2xpbnV4L21tLmggICAgICAgICAgICAgICAgICAgICAgICB8ICA4MyArKysrLQogaW5j
bHVkZS9saW51eC9tbXpvbmUuaCAgICAgICAgICAgICAgICAgICAgfCAgIDIgKwogaW5jbHVkZS9s
aW51eC9wYWdlX3JlZi5oICAgICAgICAgICAgICAgICAgfCAgMTAgKwogbW0vZ3VwLmMgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCA0MDkgKysrKysrKysrKysrKysrKystLS0tLQog
bW0vaHVnZV9tZW1vcnkuYyAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgMjggKy0KIG1tL2h1
Z2V0bGIuYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDM4ICstCiBtbS92bXN0YXQu
YyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgMiArCiA4IGZpbGVzIGNoYW5nZWQs
IDQzOCBpbnNlcnRpb25zKCspLCAxMzYgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvRG9jdW1l
bnRhdGlvbi9jb3JlLWFwaS9waW5fdXNlcl9wYWdlcy5yc3QgYi9Eb2N1bWVudGF0aW9uL2NvcmUt
YXBpL3Bpbl91c2VyX3BhZ2VzLnJzdAppbmRleCAxZDQ5MDE1NWVjZDcuLjJkYjE0ZGYxZjJkNyAx
MDA2NDQKLS0tIGEvRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9waW5fdXNlcl9wYWdlcy5yc3QKKysr
IGIvRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9waW5fdXNlcl9wYWdlcy5yc3QKQEAgLTUzLDcgKzUz
LDcgQEAgV2hpY2ggZmxhZ3MgYXJlIHNldCBieSBlYWNoIHdyYXBwZXIKIEZvciB0aGVzZSBwaW5f
dXNlcl9wYWdlcyooKSBmdW5jdGlvbnMsIEZPTExfUElOIGlzIE9SJ2QgaW4gd2l0aCB3aGF0ZXZl
ciBndXAKIGZsYWdzIHRoZSBjYWxsZXIgcHJvdmlkZXMuIFRoZSBjYWxsZXIgaXMgcmVxdWlyZWQg
dG8gcGFzcyBpbiBhIG5vbi1udWxsIHN0cnVjdAogcGFnZXMqIGFycmF5LCBhbmQgdGhlIGZ1bmN0
aW9uIHRoZW4gcGluIHBhZ2VzIGJ5IGluY3JlbWVudGluZyBlYWNoIGJ5IGEgc3BlY2lhbAotdmFs
dWUuIEZvciBub3csIHRoYXQgdmFsdWUgaXMgKzEsIGp1c3QgbGlrZSBnZXRfdXNlcl9wYWdlcyoo
KS46OgordmFsdWU6IEdVUF9QSU5fQ09VTlRJTkdfQklBUy46OgogCiAgRnVuY3Rpb24KICAtLS0t
LS0tLQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9tbS5oIGIvaW5jbHVkZS9saW51eC9tbS5o
CmluZGV4IDZhMWEzNTdlN2Q4Ni4uYmI0NGM0ZDJhZGE3IDEwMDY0NAotLS0gYS9pbmNsdWRlL2xp
bnV4L21tLmgKKysrIGIvaW5jbHVkZS9saW51eC9tbS5oCkBAIC0xMDE2LDYgKzEwMTYsOCBAQCBz
dGF0aWMgaW5saW5lIHZvaWQgZ2V0X3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCiAJcGFnZV9yZWZf
aW5jKHBhZ2UpOwogfQogCitib29sIF9fbXVzdF9jaGVjayB0cnlfZ3JhYl9wYWdlKHN0cnVjdCBw
YWdlICpwYWdlLCB1bnNpZ25lZCBpbnQgZmxhZ3MpOworCiBzdGF0aWMgaW5saW5lIF9fbXVzdF9j
aGVjayBib29sIHRyeV9nZXRfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKIHsKIAlwYWdlID0gY29t
cG91bmRfaGVhZChwYWdlKTsKQEAgLTEwNDQsMjkgKzEwNDYsODAgQEAgc3RhdGljIGlubGluZSB2
b2lkIHB1dF9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQogCQlfX3B1dF9wYWdlKHBhZ2UpOwogfQog
Ci0vKioKLSAqIHVucGluX3VzZXJfcGFnZSgpIC0gcmVsZWFzZSBhIGd1cC1waW5uZWQgcGFnZQot
ICogQHBhZ2U6ICAgICAgICAgICAgcG9pbnRlciB0byBwYWdlIHRvIGJlIHJlbGVhc2VkCisvKgor
ICogR1VQX1BJTl9DT1VOVElOR19CSUFTLCBhbmQgdGhlIGFzc29jaWF0ZWQgZnVuY3Rpb25zIHRo
YXQgdXNlIGl0LCBvdmVybG9hZAorICogdGhlIHBhZ2UncyByZWZjb3VudCBzbyB0aGF0IHR3byBz
ZXBhcmF0ZSBpdGVtcyBhcmUgdHJhY2tlZDogdGhlIG9yaWdpbmFsIHBhZ2UKKyAqIHJlZmVyZW5j
ZSBjb3VudCwgYW5kIGFsc28gYSBuZXcgY291bnQgb2YgaG93IG1hbnkgcGluX3VzZXJfcGFnZXMo
KSBjYWxscyB3ZXJlCisgKiBtYWRlIGFnYWluc3QgdGhlIHBhZ2UuICgiZ3VwLXBpbm5lZCIgaXMg
YW5vdGhlciB0ZXJtIGZvciB0aGUgbGF0dGVyKS4KKyAqCisgKiBXaXRoIHRoaXMgc2NoZW1lLCBw
aW5fdXNlcl9wYWdlcygpIGJlY29tZXMgc3BlY2lhbDogc3VjaCBwYWdlcyBhcmUgbWFya2VkIGFz
CisgKiBkaXN0aW5jdCBmcm9tIG5vcm1hbCBwYWdlcy4gQXMgc3VjaCwgdGhlIHVucGluX3VzZXJf
cGFnZSgpIGNhbGwgKGFuZCBpdHMKKyAqIHZhcmlhbnRzKSBtdXN0IGJlIHVzZWQgaW4gb3JkZXIg
dG8gcmVsZWFzZSBndXAtcGlubmVkIHBhZ2VzLgorICoKKyAqIENob2ljZSBvZiB2YWx1ZToKKyAq
CisgKiBCeSBtYWtpbmcgR1VQX1BJTl9DT1VOVElOR19CSUFTIGEgcG93ZXIgb2YgdHdvLCBkZWJ1
Z2dpbmcgb2YgcGFnZSByZWZlcmVuY2UKKyAqIGNvdW50cyB3aXRoIHJlc3BlY3QgdG8gcGluX3Vz
ZXJfcGFnZXMoKSBhbmQgdW5waW5fdXNlcl9wYWdlKCkgYmVjb21lcworICogc2ltcGxlciwgZHVl
IHRvIHRoZSBmYWN0IHRoYXQgYWRkaW5nIGFuIGV2ZW4gcG93ZXIgb2YgdHdvIHRvIHRoZSBwYWdl
CisgKiByZWZjb3VudCBoYXMgdGhlIGVmZmVjdCBvZiB1c2luZyBvbmx5IHRoZSB1cHBlciBOIGJp
dHMsIGZvciB0aGUgY29kZSB0aGF0CisgKiBjb3VudHMgdXAgdXNpbmcgdGhlIGJpYXMgdmFsdWUu
IFRoaXMgbWVhbnMgdGhhdCB0aGUgbG93ZXIgYml0cyBhcmUgbGVmdCBmb3IKKyAqIHRoZSBleGNs
dXNpdmUgdXNlIG9mIHRoZSBvcmlnaW5hbCBjb2RlIHRoYXQgaW5jcmVtZW50cyBhbmQgZGVjcmVt
ZW50cyBieSBvbmUKKyAqIChvciBhdCBsZWFzdCwgYnkgbXVjaCBzbWFsbGVyIHZhbHVlcyB0aGFu
IHRoZSBiaWFzIHZhbHVlKS4KICAqCi0gKiBQYWdlcyB0aGF0IHdlcmUgcGlubmVkIHZpYSBwaW5f
dXNlcl9wYWdlcyooKSBtdXN0IGJlIHJlbGVhc2VkIHZpYSBlaXRoZXIKLSAqIHVucGluX3VzZXJf
cGFnZSgpLCBvciBvbmUgb2YgdGhlIHVucGluX3VzZXJfcGFnZXMqKCkgcm91dGluZXMuIFRoaXMg
aXMgc28KLSAqIHRoYXQgZXZlbnR1YWxseSBzdWNoIHBhZ2VzIGNhbiBiZSBzZXBhcmF0ZWx5IHRy
YWNrZWQgYW5kIHVuaXF1ZWx5IGhhbmRsZWQuIEluCi0gKiBwYXJ0aWN1bGFyLCBpbnRlcmFjdGlv
bnMgd2l0aCBSRE1BIGFuZCBmaWxlc3lzdGVtcyBuZWVkIHNwZWNpYWwgaGFuZGxpbmcuCisgKiBP
ZiBjb3Vyc2UsIG9uY2UgdGhlIGxvd2VyIGJpdHMgb3ZlcmZsb3cgaW50byB0aGUgdXBwZXIgYml0
cyAoYW5kIHRoaXMgaXMKKyAqIE9LLCBiZWNhdXNlIHN1YnRyYWN0aW9uIHJlY292ZXJzIHRoZSBv
cmlnaW5hbCB2YWx1ZXMpLCB0aGVuIHZpc3VhbCBpbnNwZWN0aW9uCisgKiBubyBsb25nZXIgc3Vm
ZmljZXMgdG8gZGlyZWN0bHkgdmlldyB0aGUgc2VwYXJhdGUgY291bnRzLiBIb3dldmVyLCBmb3Ig
bm9ybWFsCisgKiBhcHBsaWNhdGlvbnMgdGhhdCBkb24ndCBoYXZlIGh1Z2UgcGFnZSByZWZlcmVu
Y2UgY291bnRzLCB0aGlzIHdvbid0IGJlIGFuCisgKiBpc3N1ZS4KICAqCi0gKiB1bnBpbl91c2Vy
X3BhZ2UoKSBhbmQgcHV0X3BhZ2UoKSBhcmUgbm90IGludGVyY2hhbmdlYWJsZSwgZGVzcGl0ZSB0
aGlzIGVhcmx5Ci0gKiBpbXBsZW1lbnRhdGlvbiB0aGF0IG1ha2VzIHRoZW0gbG9vayB0aGUgc2Ft
ZS4gdW5waW5fdXNlcl9wYWdlKCkgY2FsbHMgbXVzdAotICogYmUgcGVyZmVjdGx5IG1hdGNoZWQg
dXAgd2l0aCBwaW4qKCkgY2FsbHMuCisgKiBMb2NraW5nOiB0aGUgbG9ja2xlc3MgYWxnb3JpdGht
IGRlc2NyaWJlZCBpbiBwYWdlX2NhY2hlX2dldF9zcGVjdWxhdGl2ZSgpCisgKiBhbmQgcGFnZV9j
YWNoZV9ndXBfcGluX3NwZWN1bGF0aXZlKCkgcHJvdmlkZXMgc2FmZSBvcGVyYXRpb24gZm9yCisg
KiBnZXRfdXNlcl9wYWdlcyBhbmQgcGFnZV9ta2NsZWFuIGFuZCBvdGhlciBjYWxscyB0aGF0IHJh
Y2UgdG8gc2V0IHVwIHBhZ2UKKyAqIHRhYmxlIGVudHJpZXMuCiAgKi8KLXN0YXRpYyBpbmxpbmUg
dm9pZCB1bnBpbl91c2VyX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCi17Ci0JcHV0X3BhZ2UocGFn
ZSk7Ci19CisjZGVmaW5lIEdVUF9QSU5fQ09VTlRJTkdfQklBUyAoMVUgPDwgMTApCiAKK3ZvaWQg
dW5waW5fdXNlcl9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKTsKIHZvaWQgdW5waW5fdXNlcl9wYWdl
c19kaXJ0eV9sb2NrKHN0cnVjdCBwYWdlICoqcGFnZXMsIHVuc2lnbmVkIGxvbmcgbnBhZ2VzLAog
CQkJCSBib29sIG1ha2VfZGlydHkpOwotCiB2b2lkIHVucGluX3VzZXJfcGFnZXMoc3RydWN0IHBh
Z2UgKipwYWdlcywgdW5zaWduZWQgbG9uZyBucGFnZXMpOwogCisvKioKKyAqIHBhZ2VfZG1hX3Bp
bm5lZCgpIC0gcmVwb3J0IGlmIGEgcGFnZSBpcyBwaW5uZWQgZm9yIERNQS4KKyAqCisgKiBUaGlz
IGZ1bmN0aW9uIGNoZWNrcyBpZiBhIHBhZ2UgaGFzIGJlZW4gcGlubmVkIHZpYSBhIGNhbGwgdG8K
KyAqIHBpbl91c2VyX3BhZ2VzKigpLgorICoKKyAqIFRoZSByZXR1cm4gdmFsdWUgaXMgcGFydGlh
bGx5IGZ1enp5OiBmYWxzZSBpcyBub3QgZnV6enksIGJlY2F1c2UgaXQgbWVhbnMKKyAqICJkZWZp
bml0ZWx5IG5vdCBwaW5uZWQgZm9yIERNQSIsIGJ1dCB0cnVlIG1lYW5zICJwcm9iYWJseSBwaW5u
ZWQgZm9yIERNQSwgYnV0CisgKiBwb3NzaWJseSBhIGZhbHNlIHBvc2l0aXZlIGR1ZSB0byBoYXZp
bmcgYXQgbGVhc3QgR1VQX1BJTl9DT1VOVElOR19CSUFTIHdvcnRoCisgKiBvZiBub3JtYWwgcGFn
ZSByZWZlcmVuY2VzIi4KKyAqCisgKiBGYWxzZSBwb3NpdGl2ZXMgYXJlIE9LLCBiZWNhdXNlOiBh
KSBpdCdzIHVubGlrZWx5IGZvciBhIHBhZ2UgdG8gZ2V0IHRoYXQgbWFueQorICogcmVmY291bnRz
LCBhbmQgYikgYWxsIHRoZSBjYWxsZXJzIG9mIHRoaXMgcm91dGluZSBhcmUgZXhwZWN0ZWQgdG8g
YmUgYWJsZSB0bworICogZGVhbCBncmFjZWZ1bGx5IHdpdGggYSBmYWxzZSBwb3NpdGl2ZS4KKyAq
CisgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bp
bl91c2VyX3BhZ2VzLnJzdC4KKyAqCisgKiBAcGFnZToJcG9pbnRlciB0byBwYWdlIHRvIGJlIHF1
ZXJpZWQuCisgKiBAUmV0dXJuOglUcnVlLCBpZiBpdCBpcyBsaWtlbHkgdGhhdCB0aGUgcGFnZSBo
YXMgYmVlbiAiZG1hLXBpbm5lZCIuCisgKgkJRmFsc2UsIGlmIHRoZSBwYWdlIGlzIGRlZmluaXRl
bHkgbm90IGRtYS1waW5uZWQuCisgKi8KK3N0YXRpYyBpbmxpbmUgYm9vbCBwYWdlX2RtYV9waW5u
ZWQoc3RydWN0IHBhZ2UgKnBhZ2UpCit7CisJLyoKKwkgKiBwYWdlX3JlZl9jb3VudCgpIGlzIHNp
Z25lZC4gSWYgdGhhdCByZWZjb3VudCBvdmVyZmxvd3MsIHRoZW4KKwkgKiBwYWdlX3JlZl9jb3Vu
dCgpIHJldHVybnMgYSBuZWdhdGl2ZSB2YWx1ZSwgYW5kIGNhbGxlcnMgd2lsbCBhdm9pZAorCSAq
IGZ1cnRoZXIgaW5jcmVtZW50aW5nIHRoZSByZWZjb3VudC4KKwkgKgorCSAqIEhlcmUsIGZvciB0
aGF0IG92ZXJmbG93IGNhc2UsIHVzZSB0aGUgc2lnbmVkIGJpdCB0byBjb3VudCBhIGxpdHRsZQor
CSAqIGJpdCBoaWdoZXIgdmlhIHVuc2lnbmVkIG1hdGgsIGFuZCB0aHVzIHN0aWxsIGdldCBhbiBh
Y2N1cmF0ZSByZXN1bHQKKwkgKiBmcm9tIHBhZ2VfZG1hX3Bpbm5lZCgpLgorCSAqLworCXJldHVy
biAoKHVuc2lnbmVkIGludClwYWdlX3JlZl9jb3VudChjb21wb3VuZF9oZWFkKHBhZ2UpKSkgPj0K
KwkJR1VQX1BJTl9DT1VOVElOR19CSUFTOworfQorCiAjaWYgZGVmaW5lZChDT05GSUdfU1BBUlNF
TUVNKSAmJiAhZGVmaW5lZChDT05GSUdfU1BBUlNFTUVNX1ZNRU1NQVApCiAjZGVmaW5lIFNFQ1RJ
T05fSU5fUEFHRV9GTEFHUwogI2VuZGlmCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L21tem9u
ZS5oIGIvaW5jbHVkZS9saW51eC9tbXpvbmUuaAppbmRleCA4OWQ4ZmYwNmM5Y2UuLmE3NDE4Zjdh
NDRkYSAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9tbXpvbmUuaAorKysgYi9pbmNsdWRlL2xp
bnV4L21tem9uZS5oCkBAIC0yNDQsNiArMjQ0LDggQEAgZW51bSBub2RlX3N0YXRfaXRlbSB7CiAJ
TlJfRElSVElFRCwJCS8qIHBhZ2UgZGlydHlpbmdzIHNpbmNlIGJvb3R1cCAqLwogCU5SX1dSSVRU
RU4sCQkvKiBwYWdlIHdyaXRpbmdzIHNpbmNlIGJvb3R1cCAqLwogCU5SX0tFUk5FTF9NSVNDX1JF
Q0xBSU1BQkxFLAkvKiByZWNsYWltYWJsZSBub24tc2xhYiBrZXJuZWwgcGFnZXMgKi8KKwlOUl9G
T0xMX1BJTl9SRVFVRVNURUQsCS8qIHZpYTogcGluX3VzZXJfcGFnZSgpLCBndXAgZmxhZzogRk9M
TF9QSU4gKi8KKwlOUl9GT0xMX1BJTl9SRVRVUk5FRCwJLyogcGFnZXMgcmV0dXJuZWQgdmlhIHVu
cGluX3VzZXJfcGFnZSgpICovCiAJTlJfVk1fTk9ERV9TVEFUX0lURU1TCiB9OwogCmRpZmYgLS1n
aXQgYS9pbmNsdWRlL2xpbnV4L3BhZ2VfcmVmLmggYi9pbmNsdWRlL2xpbnV4L3BhZ2VfcmVmLmgK
aW5kZXggMTRkMTRiZWIxZjdmLi5iOWNiZTU1M2QxZTcgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGlu
dXgvcGFnZV9yZWYuaAorKysgYi9pbmNsdWRlL2xpbnV4L3BhZ2VfcmVmLmgKQEAgLTEwMiw2ICsx
MDIsMTYgQEAgc3RhdGljIGlubGluZSB2b2lkIHBhZ2VfcmVmX3N1YihzdHJ1Y3QgcGFnZSAqcGFn
ZSwgaW50IG5yKQogCQlfX3BhZ2VfcmVmX21vZChwYWdlLCAtbnIpOwogfQogCitzdGF0aWMgaW5s
aW5lIGludCBwYWdlX3JlZl9zdWJfcmV0dXJuKHN0cnVjdCBwYWdlICpwYWdlLCBpbnQgbnIpCit7
CisJaW50IHJldCA9IGF0b21pY19zdWJfcmV0dXJuKG5yLCAmcGFnZS0+X3JlZmNvdW50KTsKKwor
CWlmIChwYWdlX3JlZl90cmFjZXBvaW50X2FjdGl2ZShfX3RyYWNlcG9pbnRfcGFnZV9yZWZfbW9k
KSkKKwkJX19wYWdlX3JlZl9tb2QocGFnZSwgLW5yKTsKKworCXJldHVybiByZXQ7Cit9CisKIHN0
YXRpYyBpbmxpbmUgdm9pZCBwYWdlX3JlZl9pbmMoc3RydWN0IHBhZ2UgKnBhZ2UpCiB7CiAJYXRv
bWljX2luYygmcGFnZS0+X3JlZmNvdW50KTsKZGlmZiAtLWdpdCBhL21tL2d1cC5jIGIvbW0vZ3Vw
LmMKaW5kZXggNzNhZWRjZWZhNGJkLi5jMjc5M2E4NjQ1MGUgMTAwNjQ0Ci0tLSBhL21tL2d1cC5j
CisrKyBiL21tL2d1cC5jCkBAIC0zNiw2ICszNiwyMCBAQCBzdGF0aWMgX19hbHdheXNfaW5saW5l
IGxvbmcgX19ndXBfbG9uZ3Rlcm1fbG9ja2VkKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLAogCQkJ
CQkJICBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAogCQkJCQkJICBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3Qg
Kip2bWFzLAogCQkJCQkJICB1bnNpZ25lZCBpbnQgZmxhZ3MpOworCisjaWZkZWYgQ09ORklHX0RF
QlVHX1ZNCitzdGF0aWMgaW5saW5lIHZvaWQgX191cGRhdGVfcHJvY192bXN0YXQoc3RydWN0IHBh
Z2UgKnBhZ2UsCisJCQkJCWVudW0gbm9kZV9zdGF0X2l0ZW0gaXRlbSwgaW50IGNvdW50KQorewor
CW1vZF9ub2RlX3BhZ2Vfc3RhdGUocGFnZV9wZ2RhdChwYWdlKSwgaXRlbSwgY291bnQpOworfQor
I2Vsc2UKK3N0YXRpYyBpbmxpbmUgdm9pZCBfX3VwZGF0ZV9wcm9jX3Ztc3RhdChzdHJ1Y3QgcGFn
ZSAqcGFnZSwKKwkJCQkJZW51bSBub2RlX3N0YXRfaXRlbSBpdGVtLCBpbnQgY291bnQpCit7Cit9
CisjZW5kaWYKKwogLyoKICAqIFJldHVybiB0aGUgY29tcG91bmQgaGVhZCBwYWdlIHdpdGggcmVm
IGFwcHJvcHJpYXRlbHkgaW5jcmVtZW50ZWQsCiAgKiBvciBOVUxMIGlmIHRoYXQgZmFpbGVkLgpA
QCAtNTEsNiArNjUsMTU2IEBAIHN0YXRpYyBpbmxpbmUgc3RydWN0IHBhZ2UgKnRyeV9nZXRfY29t
cG91bmRfaGVhZChzdHJ1Y3QgcGFnZSAqcGFnZSwgaW50IHJlZnMpCiAJcmV0dXJuIGhlYWQ7CiB9
CiAKKy8qKgorICogdHJ5X3Bpbl9jb21wb3VuZF9oZWFkKCkgLSBtYXJrIGEgY29tcG91bmQgcGFn
ZSBhcyBiZWluZyB1c2VkIGJ5CisgKiBwaW5fdXNlcl9wYWdlcyooKS4KKyAqCisgKiBUaGlzIGlz
IHRoZSBGT0xMX1BJTiBjb3VudGVycGFydCB0byB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQoKS4KKyAq
CisgKiBAcGFnZToJcG9pbnRlciB0byBwYWdlIHRvIGJlIG1hcmtlZAorICogQFJldHVybjoJdGhl
IGNvbXBvdW5kIGhlYWQgcGFnZSwgd2l0aCByZWYgYXBwcm9wcmlhdGVseSBpbmNyZW1lbnRlZCwK
KyAqIG9yIE5VTEwgdXBvbiBmYWlsdXJlLgorICovCitfX211c3RfY2hlY2sgc3RydWN0IHBhZ2Ug
KnRyeV9waW5fY29tcG91bmRfaGVhZChzdHJ1Y3QgcGFnZSAqcGFnZSwgaW50IHJlZnMpCit7CisJ
c3RydWN0IHBhZ2UgKmhlYWQgPSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQocGFnZSwKKwkJCQkJCSAg
R1VQX1BJTl9DT1VOVElOR19CSUFTICogcmVmcyk7CisJaWYgKCFoZWFkKQorCQlyZXR1cm4gTlVM
TDsKKworCV9fdXBkYXRlX3Byb2Nfdm1zdGF0KHBhZ2UsIE5SX0ZPTExfUElOX1JFUVVFU1RFRCwg
cmVmcyk7CisJcmV0dXJuIGhlYWQ7Cit9CisKKy8qCisgKiB0cnlfZ3JhYl9jb21wb3VuZF9oZWFk
KCkgLSBhdHRlbXB0IHRvIGVsZXZhdGUgYSBwYWdlJ3MgcmVmY291bnQsIGJ5IGEKKyAqIGZsYWdz
LWRlcGVuZGVudCBhbW91bnQuCisgKgorICogImdyYWIiIG5hbWVzIGluIHRoaXMgZmlsZSBtZWFu
LCAibG9vayBhdCBmbGFncyB0byBkZWNpZGUgd2hldGhlciB0byB1c2UKKyAqIEZPTExfUElOIG9y
IEZPTExfR0VUIGJlaGF2aW9yLCB3aGVuIGluY3JlbWVudGluZyB0aGUgcGFnZSdzIHJlZmNvdW50
LgorICoKKyAqIEVpdGhlciBGT0xMX1BJTiBvciBGT0xMX0dFVCAob3IgbmVpdGhlcikgbXVzdCBi
ZSBzZXQsIGJ1dCBub3QgYm90aCBhdCB0aGUKKyAqIHNhbWUgdGltZS4gKFRoYXQncyB0cnVlIHRo
cm91Z2hvdXQgdGhlIGdldF91c2VyX3BhZ2VzKigpIGFuZAorICogcGluX3VzZXJfcGFnZXMqKCkg
QVBJcy4pIENhc2VzOgorICoKKyAqICAgIEZPTExfR0VUOiBwYWdlJ3MgcmVmY291bnQgd2lsbCBi
ZSBpbmNyZW1lbnRlZCBieSAxLgorICogICAgRk9MTF9QSU46IHBhZ2UncyByZWZjb3VudCB3aWxs
IGJlIGluY3JlbWVudGVkIGJ5IEdVUF9QSU5fQ09VTlRJTkdfQklBUy4KKyAqCisgKiBSZXR1cm46
IGhlYWQgcGFnZSAod2l0aCByZWZjb3VudCBhcHByb3ByaWF0ZWx5IGluY3JlbWVudGVkKSBmb3Ig
c3VjY2Vzcywgb3IKKyAqIE5VTEwgdXBvbiBmYWlsdXJlLiBJZiBuZWl0aGVyIEZPTExfR0VUIG5v
ciBGT0xMX1BJTiB3YXMgc2V0LCB0aGF0J3MKKyAqIGNvbnNpZGVyZWQgZmFpbHVyZSwgYW5kIGZ1
cnRoZXJtb3JlLCBhIGxpa2VseSBidWcgaW4gdGhlIGNhbGxlciwgc28gYSB3YXJuaW5nCisgKiBp
cyBhbHNvIGVtaXR0ZWQuCisgKi8KK3N0YXRpYyBfX21heWJlX3VudXNlZCBzdHJ1Y3QgcGFnZSAq
dHJ5X2dyYWJfY29tcG91bmRfaGVhZChzdHJ1Y3QgcGFnZSAqcGFnZSwKKwkJCQkJCQkgIGludCBy
ZWZzLAorCQkJCQkJCSAgdW5zaWduZWQgaW50IGZsYWdzKQoreworCWlmIChmbGFncyAmIEZPTExf
R0VUKQorCQlyZXR1cm4gdHJ5X2dldF9jb21wb3VuZF9oZWFkKHBhZ2UsIHJlZnMpOworCWVsc2Ug
aWYgKGZsYWdzICYgRk9MTF9QSU4pCisJCXJldHVybiB0cnlfcGluX2NvbXBvdW5kX2hlYWQocGFn
ZSwgcmVmcyk7CisKKwlXQVJOX09OX09OQ0UoMSk7CisJcmV0dXJuIE5VTEw7Cit9CisKKy8qKgor
ICogdHJ5X2dyYWJfcGFnZSgpIC0gZWxldmF0ZSBhIHBhZ2UncyByZWZjb3VudCBieSBhIGZsYWct
ZGVwZW5kZW50IGFtb3VudAorICoKKyAqIFRoaXMgbWlnaHQgbm90IGRvIGFueXRoaW5nIGF0IGFs
bCwgZGVwZW5kaW5nIG9uIHRoZSBmbGFncyBhcmd1bWVudC4KKyAqCisgKiAiZ3JhYiIgbmFtZXMg
aW4gdGhpcyBmaWxlIG1lYW4sICJsb29rIGF0IGZsYWdzIHRvIGRlY2lkZSB3aGV0aGVyIHRvIHVz
ZQorICogRk9MTF9QSU4gb3IgRk9MTF9HRVQgYmVoYXZpb3IsIHdoZW4gaW5jcmVtZW50aW5nIHRo
ZSBwYWdlJ3MgcmVmY291bnQuCisgKgorICogQHBhZ2U6ICAgIHBvaW50ZXIgdG8gcGFnZSB0byBi
ZSBncmFiYmVkCisgKiBAZmxhZ3M6ICAgZ3VwIGZsYWdzOiB0aGVzZSBhcmUgdGhlIEZPTExfKiBm
bGFnIHZhbHVlcy4KKyAqCisgKiBFaXRoZXIgRk9MTF9QSU4gb3IgRk9MTF9HRVQgKG9yIG5laXRo
ZXIpIG1heSBiZSBzZXQsIGJ1dCBub3QgYm90aCBhdCB0aGUgc2FtZQorICogdGltZS4gQ2FzZXM6
CisgKgorICogICAgRk9MTF9HRVQ6IHBhZ2UncyByZWZjb3VudCB3aWxsIGJlIGluY3JlbWVudGVk
IGJ5IDEuCisgKiAgICBGT0xMX1BJTjogcGFnZSdzIHJlZmNvdW50IHdpbGwgYmUgaW5jcmVtZW50
ZWQgYnkgR1VQX1BJTl9DT1VOVElOR19CSUFTLgorICoKKyAqIFJldHVybjogdHJ1ZSBmb3Igc3Vj
Y2Vzcywgb3IgaWYgbm8gYWN0aW9uIHdhcyByZXF1aXJlZCAoaWYgbmVpdGhlciBGT0xMX1BJTgor
ICogbm9yIEZPTExfR0VUIHdhcyBzZXQsIG5vdGhpbmcgaXMgZG9uZSkuIEZhbHNlIGZvciBmYWls
dXJlOiBGT0xMX0dFVCBvcgorICogRk9MTF9QSU4gd2FzIHNldCwgYnV0IHRoZSBwYWdlIGNvdWxk
IG5vdCBiZSBncmFiYmVkLgorICovCitib29sIF9fbXVzdF9jaGVjayB0cnlfZ3JhYl9wYWdlKHN0
cnVjdCBwYWdlICpwYWdlLCB1bnNpZ25lZCBpbnQgZmxhZ3MpCit7CisJaWYgKGZsYWdzICYgRk9M
TF9HRVQpCisJCXJldHVybiB0cnlfZ2V0X3BhZ2UocGFnZSk7CisJZWxzZSBpZiAoZmxhZ3MgJiBG
T0xMX1BJTikgeworCQlwYWdlID0gY29tcG91bmRfaGVhZChwYWdlKTsKKwkJV0FSTl9PTl9PTkNF
KGZsYWdzICYgRk9MTF9HRVQpOworCisJCWlmIChXQVJOX09OX09OQ0UocGFnZV9yZWZfY291bnQo
cGFnZSkgPD0gMCkpCisJCQlyZXR1cm4gZmFsc2U7CisKKwkJcGFnZV9yZWZfYWRkKHBhZ2UsIEdV
UF9QSU5fQ09VTlRJTkdfQklBUyk7CisJCV9fdXBkYXRlX3Byb2Nfdm1zdGF0KHBhZ2UsIE5SX0ZP
TExfUElOX1JFUVVFU1RFRCwgMSk7CisJfQorCisJcmV0dXJuIHRydWU7Cit9CisKKyNpZmRlZiBD
T05GSUdfREVWX1BBR0VNQVBfT1BTCitzdGF0aWMgYm9vbCBfX3VucGluX2Rldm1hcF9tYW5hZ2Vk
X3VzZXJfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKK3sKKwlib29sIGlzX2Rldm1hcCA9IHBhZ2Vf
aXNfZGV2bWFwX21hbmFnZWQocGFnZSk7CisKKwlpZiAoaXNfZGV2bWFwKSB7CisJCWludCBjb3Vu
dCA9IHBhZ2VfcmVmX3N1Yl9yZXR1cm4ocGFnZSwgR1VQX1BJTl9DT1VOVElOR19CSUFTKTsKKwor
CQlfX3VwZGF0ZV9wcm9jX3Ztc3RhdChwYWdlLCBOUl9GT0xMX1BJTl9SRVRVUk5FRCwgMSk7CisJ
CS8qCisJCSAqIGRldm1hcCBwYWdlIHJlZmNvdW50cyBhcmUgMS1iYXNlZCwgcmF0aGVyIHRoYW4g
MC1iYXNlZDogaWYKKwkJICogcmVmY291bnQgaXMgMSwgdGhlbiB0aGUgcGFnZSBpcyBmcmVlIGFu
ZCB0aGUgcmVmY291bnQgaXMKKwkJICogc3RhYmxlIGJlY2F1c2Ugbm9ib2R5IGhvbGRzIGEgcmVm
ZXJlbmNlIG9uIHRoZSBwYWdlLgorCQkgKi8KKwkJaWYgKGNvdW50ID09IDEpCisJCQlmcmVlX2Rl
dm1hcF9tYW5hZ2VkX3BhZ2UocGFnZSk7CisJCWVsc2UgaWYgKCFjb3VudCkKKwkJCV9fcHV0X3Bh
Z2UocGFnZSk7CisJfQorCisJcmV0dXJuIGlzX2Rldm1hcDsKK30KKyNlbHNlCitzdGF0aWMgYm9v
bCBfX3VucGluX2Rldm1hcF9tYW5hZ2VkX3VzZXJfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKK3sK
KwlyZXR1cm4gZmFsc2U7Cit9CisjZW5kaWYgLyogQ09ORklHX0RFVl9QQUdFTUFQX09QUyAqLwor
CisvKioKKyAqIHVucGluX3VzZXJfcGFnZSgpIC0gcmVsZWFzZSBhIGRtYS1waW5uZWQgcGFnZQor
ICogQHBhZ2U6ICAgICAgICAgICAgcG9pbnRlciB0byBwYWdlIHRvIGJlIHJlbGVhc2VkCisgKgor
ICogUGFnZXMgdGhhdCB3ZXJlIHBpbm5lZCB2aWEgcGluX3VzZXJfcGFnZXMqKCkgbXVzdCBiZSBy
ZWxlYXNlZCB2aWEgZWl0aGVyCisgKiB1bnBpbl91c2VyX3BhZ2UoKSwgb3Igb25lIG9mIHRoZSB1
bnBpbl91c2VyX3BhZ2VzKigpIHJvdXRpbmVzLiBUaGlzIGlzIHNvCisgKiB0aGF0IHN1Y2ggcGFn
ZXMgY2FuIGJlIHNlcGFyYXRlbHkgdHJhY2tlZCBhbmQgdW5pcXVlbHkgaGFuZGxlZC4gSW4KKyAq
IHBhcnRpY3VsYXIsIGludGVyYWN0aW9ucyB3aXRoIFJETUEgYW5kIGZpbGVzeXN0ZW1zIG5lZWQg
c3BlY2lhbCBoYW5kbGluZy4KKyAqLwordm9pZCB1bnBpbl91c2VyX3BhZ2Uoc3RydWN0IHBhZ2Ug
KnBhZ2UpCit7CisJcGFnZSA9IGNvbXBvdW5kX2hlYWQocGFnZSk7CisKKwkvKgorCSAqIEZvciBk
ZXZtYXAgbWFuYWdlZCBwYWdlcyB3ZSBuZWVkIHRvIGNhdGNoIHJlZmNvdW50IHRyYW5zaXRpb24g
ZnJvbQorCSAqIEdVUF9QSU5fQ09VTlRJTkdfQklBUyB0byAxLCB3aGVuIHJlZmNvdW50IHJlYWNo
IG9uZSBpdCBtZWFucyB0aGUKKwkgKiBwYWdlIGlzIGZyZWUgYW5kIHdlIG5lZWQgdG8gaW5mb3Jt
IHRoZSBkZXZpY2UgZHJpdmVyIHRocm91Z2gKKwkgKiBjYWxsYmFjay4gU2VlIGluY2x1ZGUvbGlu
dXgvbWVtcmVtYXAuaCBhbmQgSE1NIGZvciBkZXRhaWxzLgorCSAqLworCWlmIChfX3VucGluX2Rl
dm1hcF9tYW5hZ2VkX3VzZXJfcGFnZShwYWdlKSkKKwkJcmV0dXJuOworCisJaWYgKHBhZ2VfcmVm
X3N1Yl9hbmRfdGVzdChwYWdlLCBHVVBfUElOX0NPVU5USU5HX0JJQVMpKQorCQlfX3B1dF9wYWdl
KHBhZ2UpOworCisJX191cGRhdGVfcHJvY192bXN0YXQocGFnZSwgTlJfRk9MTF9QSU5fUkVUVVJO
RUQsIDEpOworfQorRVhQT1JUX1NZTUJPTCh1bnBpbl91c2VyX3BhZ2UpOworCiAvKioKICAqIHVu
cGluX3VzZXJfcGFnZXNfZGlydHlfbG9jaygpIC0gcmVsZWFzZSBhbmQgb3B0aW9uYWxseSBkaXJ0
eSBndXAtcGlubmVkIHBhZ2VzCiAgKiBAcGFnZXM6ICBhcnJheSBvZiBwYWdlcyB0byBiZSBtYXli
ZSBtYXJrZWQgZGlydHksIGFuZCBkZWZpbml0ZWx5IHJlbGVhc2VkLgpAQCAtMjM3LDEwICs0MDEs
MTEgQEAgc3RhdGljIHN0cnVjdCBwYWdlICpmb2xsb3dfcGFnZV9wdGUoc3RydWN0IHZtX2FyZWFf
c3RydWN0ICp2bWEsCiAJfQogCiAJcGFnZSA9IHZtX25vcm1hbF9wYWdlKHZtYSwgYWRkcmVzcywg
cHRlKTsKLQlpZiAoIXBhZ2UgJiYgcHRlX2Rldm1hcChwdGUpICYmIChmbGFncyAmIEZPTExfR0VU
KSkgeworCWlmICghcGFnZSAmJiBwdGVfZGV2bWFwKHB0ZSkgJiYgKGZsYWdzICYgKEZPTExfR0VU
IHwgRk9MTF9QSU4pKSkgewogCQkvKgotCQkgKiBPbmx5IHJldHVybiBkZXZpY2UgbWFwcGluZyBw
YWdlcyBpbiB0aGUgRk9MTF9HRVQgY2FzZSBzaW5jZQotCQkgKiB0aGV5IGFyZSBvbmx5IHZhbGlk
IHdoaWxlIGhvbGRpbmcgdGhlIHBnbWFwIHJlZmVyZW5jZS4KKwkJICogT25seSByZXR1cm4gZGV2
aWNlIG1hcHBpbmcgcGFnZXMgaW4gdGhlIEZPTExfR0VUIG9yIEZPTExfUElOCisJCSAqIGNhc2Ug
c2luY2UgdGhleSBhcmUgb25seSB2YWxpZCB3aGlsZSBob2xkaW5nIHRoZSBwZ21hcAorCQkgKiBy
ZWZlcmVuY2UuCiAJCSAqLwogCQkqcGdtYXAgPSBnZXRfZGV2X3BhZ2VtYXAocHRlX3BmbihwdGUp
LCAqcGdtYXApOwogCQlpZiAoKnBnbWFwKQpAQCAtMjc4LDExICs0NDMsMTAgQEAgc3RhdGljIHN0
cnVjdCBwYWdlICpmb2xsb3dfcGFnZV9wdGUoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiAJ
CWdvdG8gcmV0cnk7CiAJfQogCi0JaWYgKGZsYWdzICYgRk9MTF9HRVQpIHsKLQkJaWYgKHVubGlr
ZWx5KCF0cnlfZ2V0X3BhZ2UocGFnZSkpKSB7Ci0JCQlwYWdlID0gRVJSX1BUUigtRU5PTUVNKTsK
LQkJCWdvdG8gb3V0OwotCQl9CisJLyogdHJ5X2dyYWJfcGFnZSgpIGRvZXMgbm90aGluZyB1bmxl
c3MgRk9MTF9HRVQgb3IgRk9MTF9QSU4gaXMgc2V0LiAqLworCWlmICh1bmxpa2VseSghdHJ5X2dy
YWJfcGFnZShwYWdlLCBmbGFncykpKSB7CisJCXBhZ2UgPSBFUlJfUFRSKC1FTk9NRU0pOworCQln
b3RvIG91dDsKIAl9CiAJaWYgKGZsYWdzICYgRk9MTF9UT1VDSCkgewogCQlpZiAoKGZsYWdzICYg
Rk9MTF9XUklURSkgJiYKQEAgLTU0NCw3ICs3MDgsNyBAQCBzdGF0aWMgc3RydWN0IHBhZ2UgKmZv
bGxvd19wYWdlX21hc2soc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiAJLyogbWFrZSB0aGlz
IGhhbmRsZSBodWdlcGQgKi8KIAlwYWdlID0gZm9sbG93X2h1Z2VfYWRkcihtbSwgYWRkcmVzcywg
ZmxhZ3MgJiBGT0xMX1dSSVRFKTsKIAlpZiAoIUlTX0VSUihwYWdlKSkgewotCQlCVUdfT04oZmxh
Z3MgJiBGT0xMX0dFVCk7CisJCVdBUk5fT05fT05DRShmbGFncyAmIChGT0xMX0dFVCB8IEZPTExf
UElOKSk7CiAJCXJldHVybiBwYWdlOwogCX0KIApAQCAtMTEzMSw2ICsxMjk1LDM2IEBAIHN0YXRp
YyBfX2Fsd2F5c19pbmxpbmUgbG9uZyBfX2dldF91c2VyX3BhZ2VzX2xvY2tlZChzdHJ1Y3QgdGFz
a19zdHJ1Y3QgKnRzaywKIAlyZXR1cm4gcGFnZXNfZG9uZTsKIH0KIAorc3RhdGljIGxvbmcgX19n
ZXRfdXNlcl9wYWdlc19yZW1vdGUoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ssCisJCQkJICAgIHN0
cnVjdCBtbV9zdHJ1Y3QgKm1tLAorCQkJCSAgICB1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25l
ZCBsb25nIG5yX3BhZ2VzLAorCQkJCSAgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3Qg
cGFnZSAqKnBhZ2VzLAorCQkJCSAgICBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2bWFzLCBpbnQg
KmxvY2tlZCkKK3sKKwkvKgorCSAqIFBhcnRzIG9mIEZPTExfTE9OR1RFUk0gYmVoYXZpb3IgYXJl
IGluY29tcGF0aWJsZSB3aXRoCisJICogRkFVTFRfRkxBR19BTExPV19SRVRSWSBiZWNhdXNlIG9m
IHRoZSBGUyBEQVggY2hlY2sgcmVxdWlyZW1lbnQgb24KKwkgKiB2bWFzLiBIb3dldmVyLCB0aGlz
IG9ubHkgY29tZXMgdXAgaWYgbG9ja2VkIGlzIHNldCwgYW5kIHRoZXJlIGFyZQorCSAqIGNhbGxl
cnMgdGhhdCBkbyByZXF1ZXN0IEZPTExfTE9OR1RFUk0sIGJ1dCBkbyBub3Qgc2V0IGxvY2tlZC4g
U28sCisJICogYWxsb3cgd2hhdCB3ZSBjYW4uCisJICovCisJaWYgKGd1cF9mbGFncyAmIEZPTExf
TE9OR1RFUk0pIHsKKwkJaWYgKFdBUk5fT05fT05DRShsb2NrZWQpKQorCQkJcmV0dXJuIC1FSU5W
QUw7CisJCS8qCisJCSAqIFRoaXMgd2lsbCBjaGVjayB0aGUgdm1hcyAoZXZlbiBpZiBvdXIgdm1h
cyBhcmcgaXMgTlVMTCkKKwkJICogYW5kIHJldHVybiAtRU5PVFNVUFAgaWYgREFYIGlzbid0IGFs
bG93ZWQgaW4gdGhpcyBjYXNlOgorCQkgKi8KKwkJcmV0dXJuIF9fZ3VwX2xvbmd0ZXJtX2xvY2tl
ZCh0c2ssIG1tLCBzdGFydCwgbnJfcGFnZXMsIHBhZ2VzLAorCQkJCQkgICAgIHZtYXMsIGd1cF9m
bGFncyB8IEZPTExfVE9VQ0ggfAorCQkJCQkgICAgIEZPTExfUkVNT1RFKTsKKwl9CisKKwlyZXR1
cm4gX19nZXRfdXNlcl9wYWdlc19sb2NrZWQodHNrLCBtbSwgc3RhcnQsIG5yX3BhZ2VzLCBwYWdl
cywgdm1hcywKKwkJCQkgICAgICAgbG9ja2VkLAorCQkJCSAgICAgICBndXBfZmxhZ3MgfCBGT0xM
X1RPVUNIIHwgRk9MTF9SRU1PVEUpOworfQorCiAvKgogICogZ2V0X3VzZXJfcGFnZXNfcmVtb3Rl
KCkgLSBwaW4gdXNlciBwYWdlcyBpbiBtZW1vcnkKICAqIEB0c2s6CXRoZSB0YXNrX3N0cnVjdCB0
byB1c2UgZm9yIHBhZ2UgZmF1bHQgYWNjb3VudGluZywgb3IKQEAgLTEyMDUsMjggKzEzOTksOCBA
QCBsb25nIGdldF91c2VyX3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRzaywgc3Ry
dWN0IG1tX3N0cnVjdCAqbW0sCiAJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX1BJ
TikpCiAJCXJldHVybiAtRUlOVkFMOwogCi0JLyoKLQkgKiBQYXJ0cyBvZiBGT0xMX0xPTkdURVJN
IGJlaGF2aW9yIGFyZSBpbmNvbXBhdGlibGUgd2l0aAotCSAqIEZBVUxUX0ZMQUdfQUxMT1dfUkVU
UlkgYmVjYXVzZSBvZiB0aGUgRlMgREFYIGNoZWNrIHJlcXVpcmVtZW50IG9uCi0JICogdm1hcy4g
SG93ZXZlciwgdGhpcyBvbmx5IGNvbWVzIHVwIGlmIGxvY2tlZCBpcyBzZXQsIGFuZCB0aGVyZSBh
cmUKLQkgKiBjYWxsZXJzIHRoYXQgZG8gcmVxdWVzdCBGT0xMX0xPTkdURVJNLCBidXQgZG8gbm90
IHNldCBsb2NrZWQuIFNvLAotCSAqIGFsbG93IHdoYXQgd2UgY2FuLgotCSAqLwotCWlmIChndXBf
ZmxhZ3MgJiBGT0xMX0xPTkdURVJNKSB7Ci0JCWlmIChXQVJOX09OX09OQ0UobG9ja2VkKSkKLQkJ
CXJldHVybiAtRUlOVkFMOwotCQkvKgotCQkgKiBUaGlzIHdpbGwgY2hlY2sgdGhlIHZtYXMgKGV2
ZW4gaWYgb3VyIHZtYXMgYXJnIGlzIE5VTEwpCi0JCSAqIGFuZCByZXR1cm4gLUVOT1RTVVBQIGlm
IERBWCBpc24ndCBhbGxvd2VkIGluIHRoaXMgY2FzZToKLQkJICovCi0JCXJldHVybiBfX2d1cF9s
b25ndGVybV9sb2NrZWQodHNrLCBtbSwgc3RhcnQsIG5yX3BhZ2VzLCBwYWdlcywKLQkJCQkJICAg
ICB2bWFzLCBndXBfZmxhZ3MgfCBGT0xMX1RPVUNIIHwKLQkJCQkJICAgICBGT0xMX1JFTU9URSk7
Ci0JfQotCi0JcmV0dXJuIF9fZ2V0X3VzZXJfcGFnZXNfbG9ja2VkKHRzaywgbW0sIHN0YXJ0LCBu
cl9wYWdlcywgcGFnZXMsIHZtYXMsCi0JCQkJICAgICAgIGxvY2tlZCwKLQkJCQkgICAgICAgZ3Vw
X2ZsYWdzIHwgRk9MTF9UT1VDSCB8IEZPTExfUkVNT1RFKTsKKwlyZXR1cm4gX19nZXRfdXNlcl9w
YWdlc19yZW1vdGUodHNrLCBtbSwgc3RhcnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3MsCisJCQkJICAg
ICAgIHBhZ2VzLCB2bWFzLCBsb2NrZWQpOwogfQogRVhQT1JUX1NZTUJPTChnZXRfdXNlcl9wYWdl
c19yZW1vdGUpOwogCkBAIC0xNDIxLDEwICsxNTk1LDExIEBAIHN0YXRpYyBsb25nIF9fZ2V0X3Vz
ZXJfcGFnZXNfbG9ja2VkKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLAogCXJldHVybiBpID8gOiAt
RUZBVUxUOwogfQogCi1sb25nIGdldF91c2VyX3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFza19zdHJ1
Y3QgKnRzaywgc3RydWN0IG1tX3N0cnVjdCAqbW0sCi0JCQkgICB1bnNpZ25lZCBsb25nIHN0YXJ0
LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAotCQkJICAgdW5zaWduZWQgaW50IGd1cF9mbGFncywg
c3RydWN0IHBhZ2UgKipwYWdlcywKLQkJCSAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMs
IGludCAqbG9ja2VkKQorc3RhdGljIGxvbmcgX19nZXRfdXNlcl9wYWdlc19yZW1vdGUoc3RydWN0
IHRhc2tfc3RydWN0ICp0c2ssCisJCQkJICAgIHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAorCQkJCSAg
ICB1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAorCQkJCSAgICB1
bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkJCSAgICBzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2bWFzLCBpbnQgKmxvY2tlZCkKIHsKIAlyZXR1cm4gMDsKIH0K
QEAgLTE4NjQsMTMgKzIwMzksMTcgQEAgc3RhdGljIGlubGluZSBwdGVfdCBndXBfZ2V0X3B0ZShw
dGVfdCAqcHRlcCkKICNlbmRpZiAvKiBDT05GSUdfR1VQX0dFVF9QVEVfTE9XX0hJR0ggKi8KIAog
c3RhdGljIHZvaWQgX19tYXliZV91bnVzZWQgdW5kb19kZXZfcGFnZW1hcChpbnQgKm5yLCBpbnQg
bnJfc3RhcnQsCisJCQkJCSAgICB1bnNpZ25lZCBpbnQgZmxhZ3MsCiAJCQkJCSAgICBzdHJ1Y3Qg
cGFnZSAqKnBhZ2VzKQogewogCXdoaWxlICgoKm5yKSAtIG5yX3N0YXJ0KSB7CiAJCXN0cnVjdCBw
YWdlICpwYWdlID0gcGFnZXNbLS0oKm5yKV07CiAKIAkJQ2xlYXJQYWdlUmVmZXJlbmNlZChwYWdl
KTsKLQkJcHV0X3BhZ2UocGFnZSk7CisJCWlmIChmbGFncyAmIEZPTExfUElOKQorCQkJdW5waW5f
dXNlcl9wYWdlKHBhZ2UpOworCQllbHNlCisJCQlwdXRfcGFnZShwYWdlKTsKIAl9CiB9CiAKQEAg
LTE5MDMsNyArMjA4Miw3IEBAIHN0YXRpYyBpbnQgZ3VwX3B0ZV9yYW5nZShwbWRfdCBwbWQsIHVu
c2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBlbmQsCiAKIAkJCXBnbWFwID0gZ2V0X2Rl
dl9wYWdlbWFwKHB0ZV9wZm4ocHRlKSwgcGdtYXApOwogCQkJaWYgKHVubGlrZWx5KCFwZ21hcCkp
IHsKLQkJCQl1bmRvX2Rldl9wYWdlbWFwKG5yLCBucl9zdGFydCwgcGFnZXMpOworCQkJCXVuZG9f
ZGV2X3BhZ2VtYXAobnIsIG5yX3N0YXJ0LCBmbGFncywgcGFnZXMpOwogCQkJCWdvdG8gcHRlX3Vu
bWFwOwogCQkJfQogCQl9IGVsc2UgaWYgKHB0ZV9zcGVjaWFsKHB0ZSkpCkBAIC0xOTEyLDcgKzIw
OTEsNyBAQCBzdGF0aWMgaW50IGd1cF9wdGVfcmFuZ2UocG1kX3QgcG1kLCB1bnNpZ25lZCBsb25n
IGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAogCQlWTV9CVUdfT04oIXBmbl92YWxpZChwdGVfcGZu
KHB0ZSkpKTsKIAkJcGFnZSA9IHB0ZV9wYWdlKHB0ZSk7CiAKLQkJaGVhZCA9IHRyeV9nZXRfY29t
cG91bmRfaGVhZChwYWdlLCAxKTsKKwkJaGVhZCA9IHRyeV9ncmFiX2NvbXBvdW5kX2hlYWQocGFn
ZSwgMSwgZmxhZ3MpOwogCQlpZiAoIWhlYWQpCiAJCQlnb3RvIHB0ZV91bm1hcDsKIApAQCAtMTk1
Nyw3ICsyMTM2LDggQEAgc3RhdGljIGludCBndXBfcHRlX3JhbmdlKHBtZF90IHBtZCwgdW5zaWdu
ZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIGVuZCwKIAogI2lmIGRlZmluZWQoQ09ORklHX0FS
Q0hfSEFTX1BURV9ERVZNQVApICYmIGRlZmluZWQoQ09ORklHX1RSQU5TUEFSRU5UX0hVR0VQQUdF
KQogc3RhdGljIGludCBfX2d1cF9kZXZpY2VfaHVnZSh1bnNpZ25lZCBsb25nIHBmbiwgdW5zaWdu
ZWQgbG9uZyBhZGRyLAotCQl1bnNpZ25lZCBsb25nIGVuZCwgc3RydWN0IHBhZ2UgKipwYWdlcywg
aW50ICpucikKKwkJCSAgICAgdW5zaWduZWQgbG9uZyBlbmQsIHVuc2lnbmVkIGludCBmbGFncywK
KwkJCSAgICAgc3RydWN0IHBhZ2UgKipwYWdlcywgaW50ICpucikKIHsKIAlpbnQgbnJfc3RhcnQg
PSAqbnI7CiAJc3RydWN0IGRldl9wYWdlbWFwICpwZ21hcCA9IE5VTEw7CkBAIC0xOTY3LDEyICsy
MTQ3LDE1IEBAIHN0YXRpYyBpbnQgX19ndXBfZGV2aWNlX2h1Z2UodW5zaWduZWQgbG9uZyBwZm4s
IHVuc2lnbmVkIGxvbmcgYWRkciwKIAogCQlwZ21hcCA9IGdldF9kZXZfcGFnZW1hcChwZm4sIHBn
bWFwKTsKIAkJaWYgKHVubGlrZWx5KCFwZ21hcCkpIHsKLQkJCXVuZG9fZGV2X3BhZ2VtYXAobnIs
IG5yX3N0YXJ0LCBwYWdlcyk7CisJCQl1bmRvX2Rldl9wYWdlbWFwKG5yLCBucl9zdGFydCwgZmxh
Z3MsIHBhZ2VzKTsKIAkJCXJldHVybiAwOwogCQl9CiAJCVNldFBhZ2VSZWZlcmVuY2VkKHBhZ2Up
OwogCQlwYWdlc1sqbnJdID0gcGFnZTsKLQkJZ2V0X3BhZ2UocGFnZSk7CisJCWlmICh1bmxpa2Vs
eSghdHJ5X2dyYWJfcGFnZShwYWdlLCBmbGFncykpKSB7CisJCQl1bmRvX2Rldl9wYWdlbWFwKG5y
LCBucl9zdGFydCwgZmxhZ3MsIHBhZ2VzKTsKKwkJCXJldHVybiAwOworCQl9CiAJCSgqbnIpKys7
CiAJCXBmbisrOwogCX0gd2hpbGUgKGFkZHIgKz0gUEFHRV9TSVpFLCBhZGRyICE9IGVuZCk7CkBA
IC0xOTgzLDQ4ICsyMTY2LDUyIEBAIHN0YXRpYyBpbnQgX19ndXBfZGV2aWNlX2h1Z2UodW5zaWdu
ZWQgbG9uZyBwZm4sIHVuc2lnbmVkIGxvbmcgYWRkciwKIH0KIAogc3RhdGljIGludCBfX2d1cF9k
ZXZpY2VfaHVnZV9wbWQocG1kX3Qgb3JpZywgcG1kX3QgKnBtZHAsIHVuc2lnbmVkIGxvbmcgYWRk
ciwKLQkJdW5zaWduZWQgbG9uZyBlbmQsIHN0cnVjdCBwYWdlICoqcGFnZXMsIGludCAqbnIpCisJ
CQkJIHVuc2lnbmVkIGxvbmcgZW5kLCB1bnNpZ25lZCBpbnQgZmxhZ3MsCisJCQkJIHN0cnVjdCBw
YWdlICoqcGFnZXMsIGludCAqbnIpCiB7CiAJdW5zaWduZWQgbG9uZyBmYXVsdF9wZm47CiAJaW50
IG5yX3N0YXJ0ID0gKm5yOwogCiAJZmF1bHRfcGZuID0gcG1kX3BmbihvcmlnKSArICgoYWRkciAm
IH5QTURfTUFTSykgPj4gUEFHRV9TSElGVCk7Ci0JaWYgKCFfX2d1cF9kZXZpY2VfaHVnZShmYXVs
dF9wZm4sIGFkZHIsIGVuZCwgcGFnZXMsIG5yKSkKKwlpZiAoIV9fZ3VwX2RldmljZV9odWdlKGZh
dWx0X3BmbiwgYWRkciwgZW5kLCBmbGFncywgcGFnZXMsIG5yKSkKIAkJcmV0dXJuIDA7CiAKIAlp
ZiAodW5saWtlbHkocG1kX3ZhbChvcmlnKSAhPSBwbWRfdmFsKCpwbWRwKSkpIHsKLQkJdW5kb19k
ZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIHBhZ2VzKTsKKwkJdW5kb19kZXZfcGFnZW1hcChuciwg
bnJfc3RhcnQsIGZsYWdzLCBwYWdlcyk7CiAJCXJldHVybiAwOwogCX0KIAlyZXR1cm4gMTsKIH0K
IAogc3RhdGljIGludCBfX2d1cF9kZXZpY2VfaHVnZV9wdWQocHVkX3Qgb3JpZywgcHVkX3QgKnB1
ZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKLQkJdW5zaWduZWQgbG9uZyBlbmQsIHN0cnVjdCBwYWdl
ICoqcGFnZXMsIGludCAqbnIpCisJCQkJIHVuc2lnbmVkIGxvbmcgZW5kLCB1bnNpZ25lZCBpbnQg
ZmxhZ3MsCisJCQkJIHN0cnVjdCBwYWdlICoqcGFnZXMsIGludCAqbnIpCiB7CiAJdW5zaWduZWQg
bG9uZyBmYXVsdF9wZm47CiAJaW50IG5yX3N0YXJ0ID0gKm5yOwogCiAJZmF1bHRfcGZuID0gcHVk
X3BmbihvcmlnKSArICgoYWRkciAmIH5QVURfTUFTSykgPj4gUEFHRV9TSElGVCk7Ci0JaWYgKCFf
X2d1cF9kZXZpY2VfaHVnZShmYXVsdF9wZm4sIGFkZHIsIGVuZCwgcGFnZXMsIG5yKSkKKwlpZiAo
IV9fZ3VwX2RldmljZV9odWdlKGZhdWx0X3BmbiwgYWRkciwgZW5kLCBmbGFncywgcGFnZXMsIG5y
KSkKIAkJcmV0dXJuIDA7CiAKIAlpZiAodW5saWtlbHkocHVkX3ZhbChvcmlnKSAhPSBwdWRfdmFs
KCpwdWRwKSkpIHsKLQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIHBhZ2VzKTsKKwkJ
dW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIGZsYWdzLCBwYWdlcyk7CiAJCXJldHVybiAw
OwogCX0KIAlyZXR1cm4gMTsKIH0KICNlbHNlCiBzdGF0aWMgaW50IF9fZ3VwX2RldmljZV9odWdl
X3BtZChwbWRfdCBvcmlnLCBwbWRfdCAqcG1kcCwgdW5zaWduZWQgbG9uZyBhZGRyLAotCQl1bnNp
Z25lZCBsb25nIGVuZCwgc3RydWN0IHBhZ2UgKipwYWdlcywgaW50ICpucikKKwkJCQkgdW5zaWdu
ZWQgbG9uZyBlbmQsIHVuc2lnbmVkIGludCBmbGFncywKKwkJCQkgc3RydWN0IHBhZ2UgKipwYWdl
cywgaW50ICpucikKIHsKIAlCVUlMRF9CVUcoKTsKIAlyZXR1cm4gMDsKIH0KIAogc3RhdGljIGlu
dCBfX2d1cF9kZXZpY2VfaHVnZV9wdWQocHVkX3QgcHVkLCBwdWRfdCAqcHVkcCwgdW5zaWduZWQg
bG9uZyBhZGRyLAotCQl1bnNpZ25lZCBsb25nIGVuZCwgc3RydWN0IHBhZ2UgKipwYWdlcywgaW50
ICpucikKKwkJCQkgdW5zaWduZWQgbG9uZyBlbmQsIHVuc2lnbmVkIGludCBmbGFncywKKwkJCQkg
c3RydWN0IHBhZ2UgKipwYWdlcywgaW50ICpucikKIHsKIAlCVUlMRF9CVUcoKTsKIAlyZXR1cm4g
MDsKQEAgLTIwNDIsOCArMjIyOSwxMSBAQCBzdGF0aWMgaW50IHJlY29yZF9zdWJwYWdlcyhzdHJ1
Y3QgcGFnZSAqcGFnZSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCXJldHVybiBucjsKIH0KIAotc3Rh
dGljIHZvaWQgcHV0X2NvbXBvdW5kX2hlYWQoc3RydWN0IHBhZ2UgKnBhZ2UsIGludCByZWZzKQor
c3RhdGljIHZvaWQgcHV0X2NvbXBvdW5kX2hlYWQoc3RydWN0IHBhZ2UgKnBhZ2UsIGludCByZWZz
LCB1bnNpZ25lZCBpbnQgZmxhZ3MpCiB7CisJaWYgKGZsYWdzICYgRk9MTF9QSU4pCisJCXJlZnMg
Kj0gR1VQX1BJTl9DT1VOVElOR19CSUFTOworCiAJLyogRG8gYSBnZXRfcGFnZSgpIGZpcnN0LCBp
biBjYXNlIHJlZnMgPT0gcGFnZS0+X3JlZmNvdW50ICovCiAJZ2V0X3BhZ2UocGFnZSk7CiAJcGFn
ZV9yZWZfc3ViKHBhZ2UsIHJlZnMpOwpAQCAtMjA4MywxMiArMjI3MywxMiBAQCBzdGF0aWMgaW50
IGd1cF9odWdlcHRlKHB0ZV90ICpwdGVwLCB1bnNpZ25lZCBsb25nIHN6LCB1bnNpZ25lZCBsb25n
IGFkZHIsCiAJcGFnZSA9IGhlYWQgKyAoKGFkZHIgJiAoc3otMSkpID4+IFBBR0VfU0hJRlQpOwog
CXJlZnMgPSByZWNvcmRfc3VicGFnZXMocGFnZSwgYWRkciwgZW5kLCBwYWdlcyArICpucik7CiAK
LQloZWFkID0gdHJ5X2dldF9jb21wb3VuZF9oZWFkKGhlYWQsIHJlZnMpOworCWhlYWQgPSB0cnlf
Z3JhYl9jb21wb3VuZF9oZWFkKGhlYWQsIHJlZnMsIGZsYWdzKTsKIAlpZiAoIWhlYWQpCiAJCXJl
dHVybiAwOwogCiAJaWYgKHVubGlrZWx5KHB0ZV92YWwocHRlKSAhPSBwdGVfdmFsKCpwdGVwKSkp
IHsKLQkJcHV0X2NvbXBvdW5kX2hlYWQoaGVhZCwgcmVmcyk7CisJCXB1dF9jb21wb3VuZF9oZWFk
KGhlYWQsIHJlZnMsIGZsYWdzKTsKIAkJcmV0dXJuIDA7CiAJfQogCkBAIC0yMTM2LDE4ICsyMzI2
LDE5IEBAIHN0YXRpYyBpbnQgZ3VwX2h1Z2VfcG1kKHBtZF90IG9yaWcsIHBtZF90ICpwbWRwLCB1
bnNpZ25lZCBsb25nIGFkZHIsCiAJaWYgKHBtZF9kZXZtYXAob3JpZykpIHsKIAkJaWYgKHVubGlr
ZWx5KGZsYWdzICYgRk9MTF9MT05HVEVSTSkpCiAJCQlyZXR1cm4gMDsKLQkJcmV0dXJuIF9fZ3Vw
X2RldmljZV9odWdlX3BtZChvcmlnLCBwbWRwLCBhZGRyLCBlbmQsIHBhZ2VzLCBucik7CisJCXJl
dHVybiBfX2d1cF9kZXZpY2VfaHVnZV9wbWQob3JpZywgcG1kcCwgYWRkciwgZW5kLCBmbGFncywK
KwkJCQkJICAgICBwYWdlcywgbnIpOwogCX0KIAogCXBhZ2UgPSBwbWRfcGFnZShvcmlnKSArICgo
YWRkciAmIH5QTURfTUFTSykgPj4gUEFHRV9TSElGVCk7CiAJcmVmcyA9IHJlY29yZF9zdWJwYWdl
cyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2VzICsgKm5yKTsKIAotCWhlYWQgPSB0cnlfZ2V0X2NvbXBv
dW5kX2hlYWQocG1kX3BhZ2Uob3JpZyksIHJlZnMpOworCWhlYWQgPSB0cnlfZ3JhYl9jb21wb3Vu
ZF9oZWFkKHBtZF9wYWdlKG9yaWcpLCByZWZzLCBmbGFncyk7CiAJaWYgKCFoZWFkKQogCQlyZXR1
cm4gMDsKIAogCWlmICh1bmxpa2VseShwbWRfdmFsKG9yaWcpICE9IHBtZF92YWwoKnBtZHApKSkg
ewotCQlwdXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZzKTsKKwkJcHV0X2NvbXBvdW5kX2hlYWQo
aGVhZCwgcmVmcywgZmxhZ3MpOwogCQlyZXR1cm4gMDsKIAl9CiAKQEAgLTIxNTcsNyArMjM0OCw4
IEBAIHN0YXRpYyBpbnQgZ3VwX2h1Z2VfcG1kKHBtZF90IG9yaWcsIHBtZF90ICpwbWRwLCB1bnNp
Z25lZCBsb25nIGFkZHIsCiB9CiAKIHN0YXRpYyBpbnQgZ3VwX2h1Z2VfcHVkKHB1ZF90IG9yaWcs
IHB1ZF90ICpwdWRwLCB1bnNpZ25lZCBsb25nIGFkZHIsCi0JCXVuc2lnbmVkIGxvbmcgZW5kLCB1
bnNpZ25lZCBpbnQgZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMsIGludCAqbnIpCisJCQl1bnNp
Z25lZCBsb25nIGVuZCwgdW5zaWduZWQgaW50IGZsYWdzLAorCQkJc3RydWN0IHBhZ2UgKipwYWdl
cywgaW50ICpucikKIHsKIAlzdHJ1Y3QgcGFnZSAqaGVhZCwgKnBhZ2U7CiAJaW50IHJlZnM7CkBA
IC0yMTY4LDE4ICsyMzYwLDE5IEBAIHN0YXRpYyBpbnQgZ3VwX2h1Z2VfcHVkKHB1ZF90IG9yaWcs
IHB1ZF90ICpwdWRwLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJaWYgKHB1ZF9kZXZtYXAob3JpZykp
IHsKIAkJaWYgKHVubGlrZWx5KGZsYWdzICYgRk9MTF9MT05HVEVSTSkpCiAJCQlyZXR1cm4gMDsK
LQkJcmV0dXJuIF9fZ3VwX2RldmljZV9odWdlX3B1ZChvcmlnLCBwdWRwLCBhZGRyLCBlbmQsIHBh
Z2VzLCBucik7CisJCXJldHVybiBfX2d1cF9kZXZpY2VfaHVnZV9wdWQob3JpZywgcHVkcCwgYWRk
ciwgZW5kLCBmbGFncywKKwkJCQkJICAgICBwYWdlcywgbnIpOwogCX0KIAogCXBhZ2UgPSBwdWRf
cGFnZShvcmlnKSArICgoYWRkciAmIH5QVURfTUFTSykgPj4gUEFHRV9TSElGVCk7CiAJcmVmcyA9
IHJlY29yZF9zdWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2VzICsgKm5yKTsKIAotCWhlYWQg
PSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQocHVkX3BhZ2Uob3JpZyksIHJlZnMpOworCWhlYWQgPSB0
cnlfZ3JhYl9jb21wb3VuZF9oZWFkKHB1ZF9wYWdlKG9yaWcpLCByZWZzLCBmbGFncyk7CiAJaWYg
KCFoZWFkKQogCQlyZXR1cm4gMDsKIAogCWlmICh1bmxpa2VseShwdWRfdmFsKG9yaWcpICE9IHB1
ZF92YWwoKnB1ZHApKSkgewotCQlwdXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZzKTsKKwkJcHV0
X2NvbXBvdW5kX2hlYWQoaGVhZCwgcmVmcywgZmxhZ3MpOwogCQlyZXR1cm4gMDsKIAl9CiAKQEAg
LTIyMDMsMTIgKzIzOTYsMTIgQEAgc3RhdGljIGludCBndXBfaHVnZV9wZ2QocGdkX3Qgb3JpZywg
cGdkX3QgKnBnZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlwYWdlID0gcGdkX3BhZ2Uob3JpZykg
KyAoKGFkZHIgJiB+UEdESVJfTUFTSykgPj4gUEFHRV9TSElGVCk7CiAJcmVmcyA9IHJlY29yZF9z
dWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2VzICsgKm5yKTsKIAotCWhlYWQgPSB0cnlfZ2V0
X2NvbXBvdW5kX2hlYWQocGdkX3BhZ2Uob3JpZyksIHJlZnMpOworCWhlYWQgPSB0cnlfZ3JhYl9j
b21wb3VuZF9oZWFkKHBnZF9wYWdlKG9yaWcpLCByZWZzLCBmbGFncyk7CiAJaWYgKCFoZWFkKQog
CQlyZXR1cm4gMDsKIAogCWlmICh1bmxpa2VseShwZ2RfdmFsKG9yaWcpICE9IHBnZF92YWwoKnBn
ZHApKSkgewotCQlwdXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZzKTsKKwkJcHV0X2NvbXBvdW5k
X2hlYWQoaGVhZCwgcmVmcywgZmxhZ3MpOwogCQlyZXR1cm4gMDsKIAl9CiAKQEAgLTIzNzEsNiAr
MjU2NCwxNCBAQCBpbnQgX19nZXRfdXNlcl9wYWdlc19mYXN0KHVuc2lnbmVkIGxvbmcgc3RhcnQs
IGludCBucl9wYWdlcywgaW50IHdyaXRlLAogCXVuc2lnbmVkIGxvbmcgbGVuLCBlbmQ7CiAJdW5z
aWduZWQgbG9uZyBmbGFnczsKIAlpbnQgbnIgPSAwOworCS8qCisJICogSW50ZXJuYWxseSAod2l0
aGluIG1tL2d1cC5jKSwgZ3VwIGZhc3QgdmFyaWFudHMgbXVzdCBzZXQgRk9MTF9HRVQsCisJICog
YmVjYXVzZSBndXAgZmFzdCBpcyBhbHdheXMgYSAicGluIHdpdGggYSArMSBwYWdlIHJlZmNvdW50
IiByZXF1ZXN0LgorCSAqLworCXVuc2lnbmVkIGludCBndXBfZmxhZ3MgPSBGT0xMX0dFVDsKKwor
CWlmICh3cml0ZSkKKwkJZ3VwX2ZsYWdzIHw9IEZPTExfV1JJVEU7CiAKIAlzdGFydCA9IHVudGFn
Z2VkX2FkZHIoc3RhcnQpICYgUEFHRV9NQVNLOwogCWxlbiA9ICh1bnNpZ25lZCBsb25nKSBucl9w
YWdlcyA8PCBQQUdFX1NISUZUOwpAQCAtMjM5Niw3ICsyNTk3LDcgQEAgaW50IF9fZ2V0X3VzZXJf
cGFnZXNfZmFzdCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsIGludCB3cml0ZSwK
IAlpZiAoSVNfRU5BQkxFRChDT05GSUdfSEFWRV9GQVNUX0dVUCkgJiYKIAkgICAgZ3VwX2Zhc3Rf
cGVybWl0dGVkKHN0YXJ0LCBlbmQpKSB7CiAJCWxvY2FsX2lycV9zYXZlKGZsYWdzKTsKLQkJZ3Vw
X3BnZF9yYW5nZShzdGFydCwgZW5kLCB3cml0ZSA/IEZPTExfV1JJVEUgOiAwLCBwYWdlcywgJm5y
KTsKKwkJZ3VwX3BnZF9yYW5nZShzdGFydCwgZW5kLCBndXBfZmxhZ3MsIHBhZ2VzLCAmbnIpOwog
CQlsb2NhbF9pcnFfcmVzdG9yZShmbGFncyk7CiAJfQogCkBAIC0yNDM1LDcgKzI2MzYsNyBAQCBz
dGF0aWMgaW50IGludGVybmFsX2dldF91c2VyX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9uZyBzdGFy
dCwgaW50IG5yX3BhZ2VzLAogCWludCBuciA9IDAsIHJldCA9IDA7CiAKIAlpZiAoV0FSTl9PTl9P
TkNFKGd1cF9mbGFncyAmIH4oRk9MTF9XUklURSB8IEZPTExfTE9OR1RFUk0gfAotCQkJCSAgICAg
ICBGT0xMX0ZPUkNFIHwgRk9MTF9QSU4pKSkKKwkJCQkgICAgICAgRk9MTF9GT1JDRSB8IEZPTExf
UElOIHwgRk9MTF9HRVQpKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKIAlzdGFydCA9IHVudGFnZ2Vk
X2FkZHIoc3RhcnQpICYgUEFHRV9NQVNLOwpAQCAtMjQ3OCwxMSArMjY3OSwxMSBAQCBzdGF0aWMg
aW50IGludGVybmFsX2dldF91c2VyX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9uZyBzdGFydCwgaW50
IG5yX3BhZ2VzLAogCiAvKioKICAqIGdldF91c2VyX3BhZ2VzX2Zhc3QoKSAtIHBpbiB1c2VyIHBh
Z2VzIGluIG1lbW9yeQotICogQHN0YXJ0OglzdGFydGluZyB1c2VyIGFkZHJlc3MKLSAqIEBucl9w
YWdlczoJbnVtYmVyIG9mIHBhZ2VzIGZyb20gc3RhcnQgdG8gcGluCi0gKiBAZ3VwX2ZsYWdzOglm
bGFncyBtb2RpZnlpbmcgcGluIGJlaGF2aW91cgotICogQHBhZ2VzOglhcnJheSB0aGF0IHJlY2Vp
dmVzIHBvaW50ZXJzIHRvIHRoZSBwYWdlcyBwaW5uZWQuCi0gKgkJU2hvdWxkIGJlIGF0IGxlYXN0
IG5yX3BhZ2VzIGxvbmcuCisgKiBAc3RhcnQ6ICAgICAgc3RhcnRpbmcgdXNlciBhZGRyZXNzCisg
KiBAbnJfcGFnZXM6ICAgbnVtYmVyIG9mIHBhZ2VzIGZyb20gc3RhcnQgdG8gcGluCisgKiBAZ3Vw
X2ZsYWdzOiAgZmxhZ3MgbW9kaWZ5aW5nIHBpbiBiZWhhdmlvdXIKKyAqIEBwYWdlczogICAgICBh
cnJheSB0aGF0IHJlY2VpdmVzIHBvaW50ZXJzIHRvIHRoZSBwYWdlcyBwaW5uZWQuCisgKiAgICAg
ICAgICAgICAgU2hvdWxkIGJlIGF0IGxlYXN0IG5yX3BhZ2VzIGxvbmcuCiAgKgogICogQXR0ZW1w
dCB0byBwaW4gdXNlciBwYWdlcyBpbiBtZW1vcnkgd2l0aG91dCB0YWtpbmcgbW0tPm1tYXBfc2Vt
LgogICogSWYgbm90IHN1Y2Nlc3NmdWwsIGl0IHdpbGwgZmFsbCBiYWNrIHRvIHRha2luZyB0aGUg
bG9jayBhbmQKQEAgLTI1MDIsNiArMjcwMywxMyBAQCBpbnQgZ2V0X3VzZXJfcGFnZXNfZmFzdCh1
bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCiAJaWYgKFdBUk5fT05fT05DRShndXBf
ZmxhZ3MgJiBGT0xMX1BJTikpCiAJCXJldHVybiAtRUlOVkFMOwogCisJLyoKKwkgKiBUaGUgY2Fs
bGVyIG1heSBvciBtYXkgbm90IGhhdmUgZXhwbGljaXRseSBzZXQgRk9MTF9HRVQ7IGVpdGhlciB3
YXkgaXMKKwkgKiBPSy4gSG93ZXZlciwgaW50ZXJuYWxseSAod2l0aGluIG1tL2d1cC5jKSwgZ3Vw
IGZhc3QgdmFyaWFudHMgbXVzdCBzZXQKKwkgKiBGT0xMX0dFVCwgYmVjYXVzZSBndXAgZmFzdCBp
cyBhbHdheXMgYSAicGluIHdpdGggYSArMSBwYWdlIHJlZmNvdW50IgorCSAqIHJlcXVlc3QuCisJ
ICovCisJZ3VwX2ZsYWdzIHw9IEZPTExfR0VUOwogCXJldHVybiBpbnRlcm5hbF9nZXRfdXNlcl9w
YWdlc19mYXN0KHN0YXJ0LCBucl9wYWdlcywgZ3VwX2ZsYWdzLCBwYWdlcyk7CiB9CiBFWFBPUlRf
U1lNQk9MX0dQTChnZXRfdXNlcl9wYWdlc19mYXN0KTsKQEAgLTI1MDksOSArMjcxNywxMiBAQCBF
WFBPUlRfU1lNQk9MX0dQTChnZXRfdXNlcl9wYWdlc19mYXN0KTsKIC8qKgogICogcGluX3VzZXJf
cGFnZXNfZmFzdCgpIC0gcGluIHVzZXIgcGFnZXMgaW4gbWVtb3J5IHdpdGhvdXQgdGFraW5nIGxv
Y2tzCiAgKgotICogRm9yIG5vdywgdGhpcyBpcyBhIHBsYWNlaG9sZGVyIGZ1bmN0aW9uLCB1bnRp
bCB2YXJpb3VzIGNhbGwgc2l0ZXMgYXJlCi0gKiBjb252ZXJ0ZWQgdG8gdXNlIHRoZSBjb3JyZWN0
IGdldF91c2VyX3BhZ2VzKigpIG9yIHBpbl91c2VyX3BhZ2VzKigpIEFQSS4gU28sCi0gKiB0aGlz
IGlzIGlkZW50aWNhbCB0byBnZXRfdXNlcl9wYWdlc19mYXN0KCkuCisgKiBOZWFybHkgdGhlIHNh
bWUgYXMgZ2V0X3VzZXJfcGFnZXNfZmFzdCgpLCBleGNlcHQgdGhhdCBGT0xMX1BJTiBpcyBzZXQu
IFNlZQorICogZ2V0X3VzZXJfcGFnZXNfZmFzdCgpIGZvciBkb2N1bWVudGF0aW9uIG9uIHRoZSBm
dW5jdGlvbiBhcmd1bWVudHMsIGJlY2F1c2UKKyAqIHRoZSBhcmd1bWVudHMgaGVyZSBhcmUgaWRl
bnRpY2FsLgorICoKKyAqIEZPTExfUElOIG1lYW5zIHRoYXQgdGhlIHBhZ2VzIG11c3QgYmUgcmVs
ZWFzZWQgdmlhIHVucGluX3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9u
L3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBmb3IgZnVydGhlciBkZXRhaWxzLgogICoKICAqIFRoaXMg
aXMgaW50ZW5kZWQgZm9yIENhc2UgMSAoRElPKSBpbiBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2Vy
X3BhZ2VzLnJzdC4gSXQKICAqIGlzIE5PVCBpbnRlbmRlZCBmb3IgQ2FzZSAyIChSRE1BOiBsb25n
LXRlcm0gcGlucykuCkBAIC0yNTE5LDIxICsyNzMwLDI0IEBAIEVYUE9SVF9TWU1CT0xfR1BMKGdl
dF91c2VyX3BhZ2VzX2Zhc3QpOwogaW50IHBpbl91c2VyX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9u
ZyBzdGFydCwgaW50IG5yX3BhZ2VzLAogCQkJdW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0
IHBhZ2UgKipwYWdlcykKIHsKLQkvKgotCSAqIFRoaXMgaXMgYSBwbGFjZWhvbGRlciwgdW50aWwg
dGhlIHBpbiBmdW5jdGlvbmFsaXR5IGlzIGFjdGl2YXRlZC4KLQkgKiBVbnRpbCB0aGVuLCBqdXN0
IGJlaGF2ZSBsaWtlIHRoZSBjb3JyZXNwb25kaW5nIGdldF91c2VyX3BhZ2VzKigpCi0JICogcm91
dGluZS4KLQkgKi8KLQlyZXR1cm4gZ2V0X3VzZXJfcGFnZXNfZmFzdChzdGFydCwgbnJfcGFnZXMs
IGd1cF9mbGFncywgcGFnZXMpOworCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFs
bHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9HRVQp
KQorCQlyZXR1cm4gLUVJTlZBTDsKKworCWd1cF9mbGFncyB8PSBGT0xMX1BJTjsKKwlyZXR1cm4g
aW50ZXJuYWxfZ2V0X3VzZXJfcGFnZXNfZmFzdChzdGFydCwgbnJfcGFnZXMsIGd1cF9mbGFncywg
cGFnZXMpOwogfQogRVhQT1JUX1NZTUJPTF9HUEwocGluX3VzZXJfcGFnZXNfZmFzdCk7CiAKIC8q
KgogICogcGluX3VzZXJfcGFnZXNfcmVtb3RlKCkgLSBwaW4gcGFnZXMgb2YgYSByZW1vdGUgcHJv
Y2VzcyAodGFzayAhPSBjdXJyZW50KQogICoKLSAqIEZvciBub3csIHRoaXMgaXMgYSBwbGFjZWhv
bGRlciBmdW5jdGlvbiwgdW50aWwgdmFyaW91cyBjYWxsIHNpdGVzIGFyZQotICogY29udmVydGVk
IHRvIHVzZSB0aGUgY29ycmVjdCBnZXRfdXNlcl9wYWdlcyooKSBvciBwaW5fdXNlcl9wYWdlcyoo
KSBBUEkuIFNvLAotICogdGhpcyBpcyBpZGVudGljYWwgdG8gZ2V0X3VzZXJfcGFnZXNfcmVtb3Rl
KCkuCisgKiBOZWFybHkgdGhlIHNhbWUgYXMgZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKCksIGV4Y2Vw
dCB0aGF0IEZPTExfUElOIGlzIHNldC4gU2VlCisgKiBnZXRfdXNlcl9wYWdlc19yZW1vdGUoKSBm
b3IgZG9jdW1lbnRhdGlvbiBvbiB0aGUgZnVuY3Rpb24gYXJndW1lbnRzLCBiZWNhdXNlCisgKiB0
aGUgYXJndW1lbnRzIGhlcmUgYXJlIGlkZW50aWNhbC4KKyAqCisgKiBGT0xMX1BJTiBtZWFucyB0
aGF0IHRoZSBwYWdlcyBtdXN0IGJlIHJlbGVhc2VkIHZpYSB1bnBpbl91c2VyX3BhZ2UoKS4gUGxl
YXNlCisgKiBzZWUgRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QgZm9yIGRldGFp
bHMuCiAgKgogICogVGhpcyBpcyBpbnRlbmRlZCBmb3IgQ2FzZSAxIChESU8pIGluIERvY3VtZW50
YXRpb24vdm0vcGluX3VzZXJfcGFnZXMucnN0LiBJdAogICogaXMgTk9UIGludGVuZGVkIGZvciBD
YXNlIDIgKFJETUE6IGxvbmctdGVybSBwaW5zKS4KQEAgLTI1NDMsMjIgKzI3NTcsMjQgQEAgbG9u
ZyBwaW5fdXNlcl9wYWdlc19yZW1vdGUoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ssIHN0cnVjdCBt
bV9zdHJ1Y3QgKm1tLAogCQkJICAgdW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2Ug
KipwYWdlcywKIAkJCSAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMsIGludCAqbG9ja2Vk
KQogewotCS8qCi0JICogVGhpcyBpcyBhIHBsYWNlaG9sZGVyLCB1bnRpbCB0aGUgcGluIGZ1bmN0
aW9uYWxpdHkgaXMgYWN0aXZhdGVkLgotCSAqIFVudGlsIHRoZW4sIGp1c3QgYmVoYXZlIGxpa2Ug
dGhlIGNvcnJlc3BvbmRpbmcgZ2V0X3VzZXJfcGFnZXMqKCkKLQkgKiByb3V0aW5lLgotCSAqLwot
CXJldHVybiBnZXRfdXNlcl9wYWdlc19yZW1vdGUodHNrLCBtbSwgc3RhcnQsIG5yX3BhZ2VzLCBn
dXBfZmxhZ3MsIHBhZ2VzLAotCQkJCSAgICAgdm1hcywgbG9ja2VkKTsKKwkvKiBGT0xMX0dFVCBh
bmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9PTl9PTkNF
KGd1cF9mbGFncyAmIEZPTExfR0VUKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlndXBfZmxhZ3Mg
fD0gRk9MTF9QSU47CisJcmV0dXJuIF9fZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKHRzaywgbW0sIHN0
YXJ0LCBucl9wYWdlcywgZ3VwX2ZsYWdzLAorCQkJCSAgICAgICBwYWdlcywgdm1hcywgbG9ja2Vk
KTsKIH0KIEVYUE9SVF9TWU1CT0wocGluX3VzZXJfcGFnZXNfcmVtb3RlKTsKIAogLyoqCiAgKiBw
aW5fdXNlcl9wYWdlcygpIC0gcGluIHVzZXIgcGFnZXMgaW4gbWVtb3J5IGZvciB1c2UgYnkgb3Ro
ZXIgZGV2aWNlcwogICoKLSAqIEZvciBub3csIHRoaXMgaXMgYSBwbGFjZWhvbGRlciBmdW5jdGlv
biwgdW50aWwgdmFyaW91cyBjYWxsIHNpdGVzIGFyZQotICogY29udmVydGVkIHRvIHVzZSB0aGUg
Y29ycmVjdCBnZXRfdXNlcl9wYWdlcyooKSBvciBwaW5fdXNlcl9wYWdlcyooKSBBUEkuIFNvLAot
ICogdGhpcyBpcyBpZGVudGljYWwgdG8gZ2V0X3VzZXJfcGFnZXMoKS4KKyAqIE5lYXJseSB0aGUg
c2FtZSBhcyBnZXRfdXNlcl9wYWdlcygpLCBleGNlcHQgdGhhdCBGT0xMX1RPVUNIIGlzIG5vdCBz
ZXQsIGFuZAorICogRk9MTF9QSU4gaXMgc2V0LgorICoKKyAqIEZPTExfUElOIG1lYW5zIHRoYXQg
dGhlIHBhZ2VzIG11c3QgYmUgcmVsZWFzZWQgdmlhIHVucGluX3VzZXJfcGFnZSgpLiBQbGVhc2UK
KyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBmb3IgZGV0YWlscy4K
ICAqCiAgKiBUaGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDEgKERJTykgaW4gRG9jdW1lbnRhdGlv
bi92bS9waW5fdXNlcl9wYWdlcy5yc3QuIEl0CiAgKiBpcyBOT1QgaW50ZW5kZWQgZm9yIENhc2Ug
MiAoUkRNQTogbG9uZy10ZXJtIHBpbnMpLgpAQCAtMjU2NywxMSArMjc4MywxMiBAQCBsb25nIHBp
bl91c2VyX3BhZ2VzKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMs
CiAJCSAgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAogCQkg
ICAgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcykKIHsKLQkvKgotCSAqIFRoaXMgaXMgYSBw
bGFjZWhvbGRlciwgdW50aWwgdGhlIHBpbiBmdW5jdGlvbmFsaXR5IGlzIGFjdGl2YXRlZC4KLQkg
KiBVbnRpbCB0aGVuLCBqdXN0IGJlaGF2ZSBsaWtlIHRoZSBjb3JyZXNwb25kaW5nIGdldF91c2Vy
X3BhZ2VzKigpCi0JICogcm91dGluZS4KLQkgKi8KLQlyZXR1cm4gZ2V0X3VzZXJfcGFnZXMoc3Rh
cnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3MsIHBhZ2VzLCB2bWFzKTsKKwkvKiBGT0xMX0dFVCBhbmQg
Rk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1
cF9mbGFncyAmIEZPTExfR0VUKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlndXBfZmxhZ3MgfD0g
Rk9MTF9QSU47CisJcmV0dXJuIF9fZ3VwX2xvbmd0ZXJtX2xvY2tlZChjdXJyZW50LCBjdXJyZW50
LT5tbSwgc3RhcnQsIG5yX3BhZ2VzLAorCQkJCSAgICAgcGFnZXMsIHZtYXMsIGd1cF9mbGFncyk7
CiB9CiBFWFBPUlRfU1lNQk9MKHBpbl91c2VyX3BhZ2VzKTsKZGlmZiAtLWdpdCBhL21tL2h1Z2Vf
bWVtb3J5LmMgYi9tbS9odWdlX21lbW9yeS5jCmluZGV4IDQxYTBmYmRkYzk2Yi4uY2EyYWU5ZDE2
ZDQ5IDEwMDY0NAotLS0gYS9tbS9odWdlX21lbW9yeS5jCisrKyBiL21tL2h1Z2VfbWVtb3J5LmMK
QEAgLTk0NSw2ICs5NDUsMTEgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19kZXZtYXBfcG1kKHN0cnVj
dCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJICovCiAJV0FSTl9P
TkNFKGZsYWdzICYgRk9MTF9DT1csICJtbTogSW4gZm9sbG93X2Rldm1hcF9wbWQgd2l0aCBGT0xM
X0NPVyBzZXQiKTsKIAorCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhj
bHVzaXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoKGZsYWdzICYgKEZPTExfUElOIHwgRk9MTF9H
RVQpKSA9PQorCQkJIChGT0xMX1BJTiB8IEZPTExfR0VUKSkpCisJCXJldHVybiBOVUxMOworCiAJ
aWYgKGZsYWdzICYgRk9MTF9XUklURSAmJiAhcG1kX3dyaXRlKCpwbWQpKQogCQlyZXR1cm4gTlVM
TDsKIApAQCAtOTYwLDcgKzk2NSw3IEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFwX3BtZChz
dHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCSAqIGRldmlj
ZSBtYXBwZWQgcGFnZXMgY2FuIG9ubHkgYmUgcmV0dXJuZWQgaWYgdGhlCiAJICogY2FsbGVyIHdp
bGwgbWFuYWdlIHRoZSBwYWdlIHJlZmVyZW5jZSBjb3VudC4KIAkgKi8KLQlpZiAoIShmbGFncyAm
IEZPTExfR0VUKSkKKwlpZiAoIShmbGFncyAmIChGT0xMX0dFVCB8IEZPTExfUElOKSkpCiAJCXJl
dHVybiBFUlJfUFRSKC1FRVhJU1QpOwogCiAJcGZuICs9IChhZGRyICYgflBNRF9NQVNLKSA+PiBQ
QUdFX1NISUZUOwpAQCAtOTY4LDcgKzk3Myw4IEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFw
X3BtZChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCWlm
ICghKnBnbWFwKQogCQlyZXR1cm4gRVJSX1BUUigtRUZBVUxUKTsKIAlwYWdlID0gcGZuX3RvX3Bh
Z2UocGZuKTsKLQlnZXRfcGFnZShwYWdlKTsKKwlpZiAoIXRyeV9ncmFiX3BhZ2UocGFnZSwgZmxh
Z3MpKQorCQlwYWdlID0gRVJSX1BUUigtRU5PTUVNKTsKIAogCXJldHVybiBwYWdlOwogfQpAQCAt
MTA4OCw2ICsxMDk0LDExIEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFwX3B1ZChzdHJ1Y3Qg
dm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCWlmIChmbGFncyAmIEZP
TExfV1JJVEUgJiYgIXB1ZF93cml0ZSgqcHVkKSkKIAkJcmV0dXJuIE5VTEw7CiAKKwkvKiBGT0xM
X0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9P
Tl9PTkNFKChmbGFncyAmIChGT0xMX1BJTiB8IEZPTExfR0VUKSkgPT0KKwkJCSAoRk9MTF9QSU4g
fCBGT0xMX0dFVCkpKQorCQlyZXR1cm4gTlVMTDsKKwogCWlmIChwdWRfcHJlc2VudCgqcHVkKSAm
JiBwdWRfZGV2bWFwKCpwdWQpKQogCQkvKiBwYXNzICovOwogCWVsc2UKQEAgLTEwOTksOCArMTEx
MCwxMCBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X2Rldm1hcF9wdWQoc3RydWN0IHZtX2FyZWFfc3Ry
dWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkvKgogCSAqIGRldmljZSBtYXBwZWQgcGFn
ZXMgY2FuIG9ubHkgYmUgcmV0dXJuZWQgaWYgdGhlCiAJICogY2FsbGVyIHdpbGwgbWFuYWdlIHRo
ZSBwYWdlIHJlZmVyZW5jZSBjb3VudC4KKwkgKgorCSAqIEF0IGxlYXN0IG9uZSBvZiBGT0xMX0dF
VCB8IEZPTExfUElOIG11c3QgYmUgc2V0LCBzbyBhc3NlcnQgdGhhdCBoZXJlOgogCSAqLwotCWlm
ICghKGZsYWdzICYgRk9MTF9HRVQpKQorCWlmICghKGZsYWdzICYgKEZPTExfR0VUIHwgRk9MTF9Q
SU4pKSkKIAkJcmV0dXJuIEVSUl9QVFIoLUVFWElTVCk7CiAKIAlwZm4gKz0gKGFkZHIgJiB+UFVE
X01BU0spID4+IFBBR0VfU0hJRlQ7CkBAIC0xMTA4LDcgKzExMjEsOCBAQCBzdHJ1Y3QgcGFnZSAq
Zm9sbG93X2Rldm1hcF9wdWQoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHVuc2lnbmVkIGxv
bmcgYWRkciwKIAlpZiAoISpwZ21hcCkKIAkJcmV0dXJuIEVSUl9QVFIoLUVGQVVMVCk7CiAJcGFn
ZSA9IHBmbl90b19wYWdlKHBmbik7Ci0JZ2V0X3BhZ2UocGFnZSk7CisJaWYgKCF0cnlfZ3JhYl9w
YWdlKHBhZ2UsIGZsYWdzKSkKKwkJcGFnZSA9IEVSUl9QVFIoLUVOT01FTSk7CiAKIAlyZXR1cm4g
cGFnZTsKIH0KQEAgLTE0ODYsNiArMTUwMCwxMCBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X3RyYW5z
X2h1Z2VfcG1kKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogCVZNX0JVR19PTl9QQUdFKCFQ
YWdlSGVhZChwYWdlKSAmJiAhaXNfem9uZV9kZXZpY2VfcGFnZShwYWdlKSwgcGFnZSk7CiAJaWYg
KGZsYWdzICYgRk9MTF9UT1VDSCkKIAkJdG91Y2hfcG1kKHZtYSwgYWRkciwgcG1kLCBmbGFncyk7
CisKKwlpZiAoIXRyeV9ncmFiX3BhZ2UocGFnZSwgZmxhZ3MpKQorCQlyZXR1cm4gRVJSX1BUUigt
RU5PTUVNKTsKKwogCWlmICgoZmxhZ3MgJiBGT0xMX01MT0NLKSAmJiAodm1hLT52bV9mbGFncyAm
IFZNX0xPQ0tFRCkpIHsKIAkJLyoKIAkJICogV2UgZG9uJ3QgbWxvY2soKSBwdGUtbWFwcGVkIFRI
UHMuIFRoaXMgd2F5IHdlIGNhbiBhdm9pZApAQCAtMTUyMiw4ICsxNTQwLDYgQEAgc3RydWN0IHBh
Z2UgKmZvbGxvd190cmFuc19odWdlX3BtZChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIHNr
aXBfbWxvY2s6CiAJcGFnZSArPSAoYWRkciAmIH5IUEFHRV9QTURfTUFTSykgPj4gUEFHRV9TSElG
VDsKIAlWTV9CVUdfT05fUEFHRSghUGFnZUNvbXBvdW5kKHBhZ2UpICYmICFpc196b25lX2Rldmlj
ZV9wYWdlKHBhZ2UpLCBwYWdlKTsKLQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKLQkJZ2V0X3BhZ2Uo
cGFnZSk7CiAKIG91dDoKIAlyZXR1cm4gcGFnZTsKZGlmZiAtLWdpdCBhL21tL2h1Z2V0bGIuYyBi
L21tL2h1Z2V0bGIuYwppbmRleCBhYzY1YmI1ZTM4YWMuLjBlMjFiYmU5ZjAxNyAxMDA2NDQKLS0t
IGEvbW0vaHVnZXRsYi5jCisrKyBiL21tL2h1Z2V0bGIuYwpAQCAtNDMyNiwxOSArNDMyNiw2IEBA
IGxvbmcgZm9sbG93X2h1Z2V0bGJfcGFnZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgc3RydWN0IHZt
X2FyZWFfc3RydWN0ICp2bWEsCiAJCXBmbl9vZmZzZXQgPSAodmFkZHIgJiB+aHVnZV9wYWdlX21h
c2soaCkpID4+IFBBR0VfU0hJRlQ7CiAJCXBhZ2UgPSBwdGVfcGFnZShodWdlX3B0ZXBfZ2V0KHB0
ZSkpOwogCi0JCS8qCi0JCSAqIEluc3RlYWQgb2YgZG9pbmcgJ3RyeV9nZXRfcGFnZSgpJyBiZWxv
dyBpbiB0aGUgc2FtZV9wYWdlCi0JCSAqIGxvb3AsIGp1c3QgY2hlY2sgdGhlIGNvdW50IG9uY2Ug
aGVyZS4KLQkJICovCi0JCWlmICh1bmxpa2VseShwYWdlX2NvdW50KHBhZ2UpIDw9IDApKSB7Ci0J
CQlpZiAocGFnZXMpIHsKLQkJCQlzcGluX3VubG9jayhwdGwpOwotCQkJCXJlbWFpbmRlciA9IDA7
Ci0JCQkJZXJyID0gLUVOT01FTTsKLQkJCQlicmVhazsKLQkJCX0KLQkJfQotCiAJCS8qCiAJCSAq
IElmIHN1YnBhZ2UgaW5mb3JtYXRpb24gbm90IHJlcXVlc3RlZCwgdXBkYXRlIGNvdW50ZXJzCiAJ
CSAqIGFuZCBza2lwIHRoZSBzYW1lX3BhZ2UgbG9vcCBiZWxvdy4KQEAgLTQzNTYsNyArNDM0Mywx
MyBAQCBsb25nIGZvbGxvd19odWdldGxiX3BhZ2Uoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHN0cnVj
dCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogc2FtZV9wYWdlOgogCQlpZiAocGFnZXMpIHsKIAkJCXBh
Z2VzW2ldID0gbWVtX21hcF9vZmZzZXQocGFnZSwgcGZuX29mZnNldCk7Ci0JCQlnZXRfcGFnZShw
YWdlc1tpXSk7CisJCQlpZiAoIXRyeV9ncmFiX3BhZ2UocGFnZXNbaV0sIGZsYWdzKSkgeworCQkJ
CXNwaW5fdW5sb2NrKHB0bCk7CisJCQkJcmVtYWluZGVyID0gMDsKKwkJCQllcnIgPSAtRU5PTUVN
OworCQkJCVdBUk5fT05fT05DRSgxKTsKKwkJCQlicmVhazsKKwkJCX0KIAkJfQogCiAJCWlmICh2
bWFzKQpAQCAtNDkxNiw2ICs0OTA5LDEyIEBAIGZvbGxvd19odWdlX3BtZChzdHJ1Y3QgbW1fc3Ry
dWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyZXNzLAogCXN0cnVjdCBwYWdlICpwYWdlID0gTlVM
TDsKIAlzcGlubG9ja190ICpwdGw7CiAJcHRlX3QgcHRlOworCisJLyogRk9MTF9HRVQgYW5kIEZP
TExfUElOIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuICovCisJaWYgKFdBUk5fT05fT05DRSgoZmxh
Z3MgJiAoRk9MTF9QSU4gfCBGT0xMX0dFVCkpID09CisJCQkgKEZPTExfUElOIHwgRk9MTF9HRVQp
KSkKKwkJcmV0dXJuIE5VTEw7CisKIHJldHJ5OgogCXB0bCA9IHBtZF9sb2NrcHRyKG1tLCBwbWQp
OwogCXNwaW5fbG9jayhwdGwpOwpAQCAtNDkyOCw4ICs0OTI3LDExIEBAIGZvbGxvd19odWdlX3Bt
ZChzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyZXNzLAogCXB0ZSA9IGh1
Z2VfcHRlcF9nZXQoKHB0ZV90ICopcG1kKTsKIAlpZiAocHRlX3ByZXNlbnQocHRlKSkgewogCQlw
YWdlID0gcG1kX3BhZ2UoKnBtZCkgKyAoKGFkZHJlc3MgJiB+UE1EX01BU0spID4+IFBBR0VfU0hJ
RlQpOwotCQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKLQkJCWdldF9wYWdlKHBhZ2UpOworCQlpZiAo
dW5saWtlbHkoIXRyeV9ncmFiX3BhZ2UocGFnZSwgZmxhZ3MpKSkgeworCQkJV0FSTl9PTl9PTkNF
KDEpOworCQkJcGFnZSA9IE5VTEw7CisJCQlnb3RvIG91dDsKKwkJfQogCX0gZWxzZSB7CiAJCWlm
IChpc19odWdldGxiX2VudHJ5X21pZ3JhdGlvbihwdGUpKSB7CiAJCQlzcGluX3VubG9jayhwdGwp
OwpAQCAtNDk1MCw3ICs0OTUyLDcgQEAgc3RydWN0IHBhZ2UgKiBfX3dlYWsKIGZvbGxvd19odWdl
X3B1ZChzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyZXNzLAogCQlwdWRf
dCAqcHVkLCBpbnQgZmxhZ3MpCiB7Ci0JaWYgKGZsYWdzICYgRk9MTF9HRVQpCisJaWYgKGZsYWdz
ICYgKEZPTExfR0VUIHwgRk9MTF9QSU4pKQogCQlyZXR1cm4gTlVMTDsKIAogCXJldHVybiBwdGVf
cGFnZSgqKHB0ZV90ICopcHVkKSArICgoYWRkcmVzcyAmIH5QVURfTUFTSykgPj4gUEFHRV9TSElG
VCk7CkBAIC00OTU5LDcgKzQ5NjEsNyBAQCBmb2xsb3dfaHVnZV9wdWQoc3RydWN0IG1tX3N0cnVj
dCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKIHN0cnVjdCBwYWdlICogX193ZWFrCiBmb2xs
b3dfaHVnZV9wZ2Qoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywg
cGdkX3QgKnBnZCwgaW50IGZsYWdzKQogewotCWlmIChmbGFncyAmIEZPTExfR0VUKQorCWlmIChm
bGFncyAmIChGT0xMX0dFVCB8IEZPTExfUElOKSkKIAkJcmV0dXJuIE5VTEw7CiAKIAlyZXR1cm4g
cHRlX3BhZ2UoKihwdGVfdCAqKXBnZCkgKyAoKGFkZHJlc3MgJiB+UEdESVJfTUFTSykgPj4gUEFH
RV9TSElGVCk7CmRpZmYgLS1naXQgYS9tbS92bXN0YXQuYyBiL21tL3Ztc3RhdC5jCmluZGV4IDc4
ZDUzMzc4ZGI5OS4uYjU2ODA4YmFlMWI0IDEwMDY0NAotLS0gYS9tbS92bXN0YXQuYworKysgYi9t
bS92bXN0YXQuYwpAQCAtMTE2OCw2ICsxMTY4LDggQEAgY29uc3QgY2hhciAqIGNvbnN0IHZtc3Rh
dF90ZXh0W10gPSB7CiAJIm5yX2RpcnRpZWQiLAogCSJucl93cml0dGVuIiwKIAkibnJfa2VybmVs
X21pc2NfcmVjbGFpbWFibGUiLAorCSJucl9mb2xsX3Bpbl9yZXF1ZXN0ZWQiLAorCSJucl9mb2xs
X3Bpbl9yZXR1cm5lZCIsCiAKIAkvKiBlbnVtIHdyaXRlYmFja19zdGF0X2l0ZW0gY291bnRlcnMg
Ki8KIAkibnJfZGlydHlfdGhyZXNob2xkIiwKLS0gCjIuMjQuMAoKX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZHJpLWRldmVsIG1haWxpbmcgbGlzdApkcmkt
ZGV2ZWxAbGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3Jn
L21haWxtYW4vbGlzdGluZm8vZHJpLWRldmVsCg==
