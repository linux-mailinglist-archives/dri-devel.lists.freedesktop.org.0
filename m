Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id B42B3EAC20
	for <lists+dri-devel@lfdr.de>; Thu, 31 Oct 2019 10:04:38 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 32D3D6EDC8;
	Thu, 31 Oct 2019 09:04:22 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from hqemgate15.nvidia.com (hqemgate15.nvidia.com [216.228.121.64])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 9E4096EBB5
 for <dri-devel@lists.freedesktop.org>; Wed, 30 Oct 2019 22:49:41 +0000 (UTC)
Received: from hqpgpgate101.nvidia.com (Not Verified[216.228.121.13]) by
 hqemgate15.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
 id <B5dba138b0002>; Wed, 30 Oct 2019 15:49:48 -0700
Received: from hqmail.nvidia.com ([172.20.161.6])
 by hqpgpgate101.nvidia.com (PGP Universal service);
 Wed, 30 Oct 2019 15:49:41 -0700
X-PGP-Universal: processed;
 by hqpgpgate101.nvidia.com on Wed, 30 Oct 2019 15:49:41 -0700
Received: from HQMAIL101.nvidia.com (172.20.187.10) by HQMAIL101.nvidia.com
 (172.20.187.10) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Wed, 30 Oct
 2019 22:49:40 +0000
Received: from rnnvemgw01.nvidia.com (10.128.109.123) by HQMAIL101.nvidia.com
 (172.20.187.10) with Microsoft SMTP Server (TLS) id 15.0.1473.3 via
 Frontend Transport; Wed, 30 Oct 2019 22:49:39 +0000
Received: from blueforge.nvidia.com (Not Verified[10.110.48.28]) by
 rnnvemgw01.nvidia.com with Trustwave SEG (v7, 5, 8, 10121)
 id <B5dba13820000>; Wed, 30 Oct 2019 15:49:39 -0700
From: John Hubbard <jhubbard@nvidia.com>
To: Andrew Morton <akpm@linux-foundation.org>
Subject: [PATCH 05/19] mm/gup: introduce pin_user_pages*() and FOLL_PIN
Date: Wed, 30 Oct 2019 15:49:16 -0700
Message-ID: <20191030224930.3990755-6-jhubbard@nvidia.com>
X-Mailer: git-send-email 2.23.0
In-Reply-To: <20191030224930.3990755-1-jhubbard@nvidia.com>
References: <20191030224930.3990755-1-jhubbard@nvidia.com>
MIME-Version: 1.0
X-NVConfidentiality: public
X-Mailman-Approved-At: Thu, 31 Oct 2019 09:04:21 +0000
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=nvidia.com; s=n1; 
 t=1572475788; bh=q+XLxTTs3VV9NQYlAIix1/xq2y74kPKr4+k38NlDVWo=;
 h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
 In-Reply-To:References:MIME-Version:X-NVConfidentiality:
 Content-Transfer-Encoding:Content-Type;
 b=nDqCtGuNSvvDejx1vtY8xGgFUondHPHr+I+PvmvPI6LppRpXTXHrtb7uWRivWS9t6
 4gF30LMcvxWujS+tccoegXL9+UAT8EcFEFJUzGwdMv7TO7uBB0pLyNV7K9kp4jNRTU
 KDw+KtQ6QpNILKiYWF7MADvsWEEcuISGTEcz1HM9CeQiMQSGUiott2qrunFLPKNFrY
 Ez3OuvWjeNqJUnEYJmm2FgcNA4VgmPRn9Om7+tLBDnD0yeaO+tuo/gfBWGhIMT+G9z
 nnSdDH5Y49JsX2G0spTf1fTfOpf2z/AbZxhgx3kJL9MUrCsqp58qgzhjBjY4/EhBAc
 W7g6XMs0i1myQ==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Michal Hocko <mhocko@suse.com>, Jan Kara <jack@suse.cz>,
 kvm@vger.kernel.org, linux-doc@vger.kernel.org,
 David Airlie <airlied@linux.ie>, Dave Chinner <david@fromorbit.com>,
 dri-devel@lists.freedesktop.org, LKML <linux-kernel@vger.kernel.org>,
 linux-mm@kvack.org, Paul Mackerras <paulus@samba.org>,
 linux-kselftest@vger.kernel.org, Ira Weiny <ira.weiny@intel.com>,
 Jonathan Corbet <corbet@lwn.net>, linux-rdma@vger.kernel.org,
 Michael Ellerman <mpe@ellerman.id.au>, Christoph Hellwig <hch@infradead.org>,
 Jason Gunthorpe <jgg@ziepe.ca>, Vlastimil Babka <vbabka@suse.cz>,
 =?UTF-8?q?Bj=C3=B6rn=20T=C3=B6pel?= <bjorn.topel@intel.com>,
 linux-media@vger.kernel.org, Shuah Khan <shuah@kernel.org>,
 John Hubbard <jhubbard@nvidia.com>, linux-block@vger.kernel.org,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Al Viro <viro@zeniv.linux.org.uk>, Dan Williams <dan.j.williams@intel.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Magnus Karlsson <magnus.karlsson@intel.com>, Jens Axboe <axboe@kernel.dk>,
 netdev@vger.kernel.org, Alex Williamson <alex.williamson@redhat.com>,
 linux-fsdevel@vger.kernel.org, bpf@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org, "David S . Miller" <davem@davemloft.net>,
 Mike Kravetz <mike.kravetz@oracle.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

SW50cm9kdWNlIHBpbl91c2VyX3BhZ2VzKigpIHZhcmlhdGlvbnMgb2YgZ2V0X3VzZXJfcGFnZXMq
KCkgY2FsbHMsCmFuZCBhbHNvIHBpbl9sb25ndGVybV9wYWdlcyooKSB2YXJpYXRpb25zLgoKVGhl
c2UgdmFyaWFudHMgYWxsIHNldCBGT0xMX1BJTiwgd2hpY2ggaXMgYWxzbyBpbnRyb2R1Y2VkLCBh
bmQKYmFzaWNhbGx5IGRvY3VtZW50ZWQuIChBbiB1cGNvbWluZyBwYXRjaCBwcm92aWRlcyBtb3Jl
IGV4dGVuc2l2ZQpkb2N1bWVudGF0aW9uLikgVGhlIHNlY29uZCBzZXQgKHBpbl9sb25ndGVybSop
IGFsc28gc2V0cwpGT0xMX0xPTkdURVJNOgoKICAgIHBpbl91c2VyX3BhZ2VzKCkKICAgIHBpbl91
c2VyX3BhZ2VzX3JlbW90ZSgpCiAgICBwaW5fdXNlcl9wYWdlc19mYXN0KCkKCiAgICBwaW5fbG9u
Z3Rlcm1fcGFnZXMoKQogICAgcGluX2xvbmd0ZXJtX3BhZ2VzX3JlbW90ZSgpCiAgICBwaW5fbG9u
Z3Rlcm1fcGFnZXNfZmFzdCgpCgpBbGwgcGFnZXMgdGhhdCBhcmUgcGlubmVkIHZpYSB0aGUgYWJv
dmUgY2FsbHMsIG11c3QgYmUgdW5waW5uZWQgdmlhCnB1dF91c2VyX3BhZ2UoKS4KClRoZSB1bmRl
cmx5aW5nIHJ1bGVzIGFyZToKCiogVGhlc2UgYXJlIGd1cC1pbnRlcm5hbCBmbGFncywgc28gdGhl
IGNhbGwgc2l0ZXMgc2hvdWxkIG5vdCBkaXJlY3RseQpzZXQgRk9MTF9QSU4gbm9yIEZPTExfTE9O
R1RFUk0uIFRoYXQgYmVoYXZpb3IgaXMgZW5mb3JjZWQgd2l0aAphc3NlcnRpb25zLCBmb3IgdGhl
IG5ldyBGT0xMX1BJTiBmbGFnLiBIb3dldmVyLCBmb3IgdGhlIHByZS1leGlzdGluZwpGT0xMX0xP
TkdURVJNIGZsYWcsIHdoaWNoIGhhcyBzb21lIGNhbGwgc2l0ZXMgdGhhdCBzdGlsbCBkaXJlY3Rs
eQpzZXQgRk9MTF9MT05HVEVSTSwgdGhlcmUgaXMgbm8gYXNzZXJ0aW9uIHlldC4KCiogQ2FsbCBz
aXRlcyB0aGF0IHdhbnQgdG8gaW5kaWNhdGUgdGhhdCB0aGV5IGFyZSBnb2luZyB0byBkbyBEaXJl
Y3RJTwogICgiRElPIikgb3Igc29tZXRoaW5nIHdpdGggc2ltaWxhciBjaGFyYWN0ZXJpc3RpY3Ms
IHNob3VsZCBjYWxsIGEKICBnZXRfdXNlcl9wYWdlcygpLWxpa2Ugd3JhcHBlciBjYWxsIHRoYXQg
c2V0cyBGT0xMX1BJTi4gVGhlc2Ugd3JhcHBlcnMKICB3aWxsOgogICAgICAgICogU3RhcnQgd2l0
aCAicGluX3VzZXJfcGFnZXMiIGluc3RlYWQgb2YgImdldF91c2VyX3BhZ2VzIi4gVGhhdAogICAg
ICAgICAgbWFrZXMgaXQgZWFzeSB0byBmaW5kIGFuZCBhdWRpdCB0aGUgY2FsbCBzaXRlcy4KICAg
ICAgICAqIFNldCBGT0xMX1BJTgoKKiBGb3IgcGFnZXMgdGhhdCBhcmUgcmVjZWl2ZWQgdmlhIEZP
TExfUElOLCB0aG9zZSBwYWdlcyBtdXN0IGJlIHJldHVybmVkCiAgdmlhIHB1dF91c2VyX3BhZ2Uo
KS4KClNpZ25lZC1vZmYtYnk6IEpvaG4gSHViYmFyZCA8amh1YmJhcmRAbnZpZGlhLmNvbT4KLS0t
CiBpbmNsdWRlL2xpbnV4L21tLmggfCAgNTMgKysrKysrKystCiBtbS9ndXAuYyAgICAgICAgICAg
fCAyODQgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKystLS0tCiAyIGZp
bGVzIGNoYW5nZWQsIDMxMSBpbnNlcnRpb25zKCspLCAyNiBkZWxldGlvbnMoLSkKCmRpZmYgLS1n
aXQgYS9pbmNsdWRlL2xpbnV4L21tLmggYi9pbmNsdWRlL2xpbnV4L21tLmgKaW5kZXggY2MyOTIy
NzNlNmJhLi42MmM4MzhhM2U2YzcgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvbW0uaAorKysg
Yi9pbmNsdWRlL2xpbnV4L21tLmgKQEAgLTE1MjYsOSArMTUyNiwyMyBAQCBsb25nIGdldF91c2Vy
X3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRzaywgc3RydWN0IG1tX3N0cnVjdCAq
bW0sCiAJCQkgICAgdW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBucl9wYWdlcywK
IAkJCSAgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAogCQkJ
ICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMsIGludCAqbG9ja2VkKTsKK2xvbmcgcGlu
X3VzZXJfcGFnZXNfcmVtb3RlKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLCBzdHJ1Y3QgbW1fc3Ry
dWN0ICptbSwKKwkJCSAgIHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFn
ZXMsCisJCQkgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAor
CQkJICAgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcywgaW50ICpsb2NrZWQpOworbG9uZyBw
aW5fbG9uZ3Rlcm1fcGFnZXNfcmVtb3RlKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLCBzdHJ1Y3Qg
bW1fc3RydWN0ICptbSwKKwkJCSAgICAgICB1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBs
b25nIG5yX3BhZ2VzLAorCQkJICAgICAgIHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBw
YWdlICoqcGFnZXMsCisJCQkgICAgICAgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcywgaW50
ICpsb2NrZWQpOwogbG9uZyBnZXRfdXNlcl9wYWdlcyh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNp
Z25lZCBsb25nIG5yX3BhZ2VzLAogCQkJICAgIHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVj
dCBwYWdlICoqcGFnZXMsCiAJCQkgICAgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcyk7Cits
b25nIHBpbl91c2VyX3BhZ2VzKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJf
cGFnZXMsCisJCSAgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2Vz
LAorCQkgICAgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcyk7Citsb25nIHBpbl9sb25ndGVy
bV9wYWdlcyh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAorCQkJ
dW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcywKKwkJCXN0cnVjdCB2
bV9hcmVhX3N0cnVjdCAqKnZtYXMpOwogbG9uZyBnZXRfdXNlcl9wYWdlc19sb2NrZWQodW5zaWdu
ZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBucl9wYWdlcywKIAkJICAgIHVuc2lnbmVkIGlu
dCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMsIGludCAqbG9ja2VkKTsKIGxvbmcgZ2V0
X3VzZXJfcGFnZXNfdW5sb2NrZWQodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBu
cl9wYWdlcywKQEAgLTE1MzYsNiArMTU1MCwxMCBAQCBsb25nIGdldF91c2VyX3BhZ2VzX3VubG9j
a2VkKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCiAKIGludCBn
ZXRfdXNlcl9wYWdlc19mYXN0KHVuc2lnbmVkIGxvbmcgc3RhcnQsIGludCBucl9wYWdlcywKIAkJ
CXVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMpOworaW50IHBpbl91
c2VyX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9uZyBzdGFydCwgaW50IG5yX3BhZ2VzLAorCQkJdW5z
aWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcyk7CitpbnQgcGluX2xvbmd0
ZXJtX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9uZyBzdGFydCwgaW50IG5yX3BhZ2VzLAorCQkJICAg
IHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMpOwogCiBpbnQgYWNj
b3VudF9sb2NrZWRfdm0oc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgcGFnZXMs
IGJvb2wgaW5jKTsKIGludCBfX2FjY291bnRfbG9ja2VkX3ZtKHN0cnVjdCBtbV9zdHJ1Y3QgKm1t
LCB1bnNpZ25lZCBsb25nIHBhZ2VzLCBib29sIGluYywKQEAgLTI1OTQsMTMgKzI2MTIsMTUgQEAg
c3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNp
Z25lZCBsb25nIGFkZHJlc3MsCiAjZGVmaW5lIEZPTExfQU5PTgkweDgwMDAJLyogZG9uJ3QgZG8g
ZmlsZSBtYXBwaW5ncyAqLwogI2RlZmluZSBGT0xMX0xPTkdURVJNCTB4MTAwMDAJLyogbWFwcGlu
ZyBsaWZldGltZSBpcyBpbmRlZmluaXRlOiBzZWUgYmVsb3cgKi8KICNkZWZpbmUgRk9MTF9TUExJ
VF9QTUQJMHgyMDAwMAkvKiBzcGxpdCBodWdlIHBtZCBiZWZvcmUgcmV0dXJuaW5nICovCisjZGVm
aW5lIEZPTExfUElOCTB4NDAwMDAJLyogcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEgcHV0X3Vz
ZXJfcGFnZSgpICovCiAKIC8qCi0gKiBOT1RFIG9uIEZPTExfTE9OR1RFUk06CisgKiBGT0xMX1BJ
TiBhbmQgRk9MTF9MT05HVEVSTSBtYXkgYmUgdXNlZCBpbiB2YXJpb3VzIGNvbWJpbmF0aW9ucyB3
aXRoIGVhY2gKKyAqIG90aGVyLiBIZXJlIGlzIHdoYXQgdGhleSBtZWFuLCBhbmQgaG93IHRvIHVz
ZSB0aGVtOgogICoKICAqIEZPTExfTE9OR1RFUk0gaW5kaWNhdGVzIHRoYXQgdGhlIHBhZ2Ugd2ls
bCBiZSBoZWxkIGZvciBhbiBpbmRlZmluaXRlIHRpbWUKLSAqIHBlcmlvZCBfb2Z0ZW5fIHVuZGVy
IHVzZXJzcGFjZSBjb250cm9sLiAgVGhpcyBpcyBjb250cmFzdGVkIHdpdGgKLSAqIGlvdl9pdGVy
X2dldF9wYWdlcygpIHdoZXJlIHVzYWdlcyB3aGljaCBhcmUgdHJhbnNpZW50LgorICogcGVyaW9k
IF9vZnRlbl8gdW5kZXIgdXNlcnNwYWNlIGNvbnRyb2wuICBUaGlzIGlzIGluIGNvbnRyYXN0IHRv
CisgKiBpb3ZfaXRlcl9nZXRfcGFnZXMoKSwgd2hlcmUgdXNhZ2VzIHdoaWNoIGFyZSB0cmFuc2ll
bnQuCiAgKgogICogRklYTUU6IEZvciBwYWdlcyB3aGljaCBhcmUgcGFydCBvZiBhIGZpbGVzeXN0
ZW0sIG1hcHBpbmdzIGFyZSBzdWJqZWN0IHRvIHRoZQogICogbGlmZXRpbWUgZW5mb3JjZWQgYnkg
dGhlIGZpbGVzeXN0ZW0gYW5kIHdlIG5lZWQgZ3VhcmFudGVlcyB0aGF0IGxvbmd0ZXJtCkBAIC0y
NjE1LDExICsyNjM1LDMyIEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfcGFnZShzdHJ1Y3Qgdm1fYXJl
YV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRyZXNzLAogICogQ3VycmVudGx5IG9ubHkg
Z2V0X3VzZXJfcGFnZXMoKSBhbmQgZ2V0X3VzZXJfcGFnZXNfZmFzdCgpIHN1cHBvcnQgdGhpcyBm
bGFnCiAgKiBhbmQgY2FsbHMgdG8gZ2V0X3VzZXJfcGFnZXNfW3VuXWxvY2tlZCBhcmUgc3BlY2lm
aWNhbGx5IG5vdCBhbGxvd2VkLiAgVGhpcwogICogaXMgZHVlIHRvIGFuIGluY29tcGF0aWJpbGl0
eSB3aXRoIHRoZSBGUyBEQVggY2hlY2sgYW5kCi0gKiBGQVVMVF9GTEFHX0FMTE9XX1JFVFJZCisg
KiBGQVVMVF9GTEFHX0FMTE9XX1JFVFJZLgogICoKLSAqIEluIHRoZSBDTUEgY2FzZTogbG9uZ3Rl
cm0gcGlucyBpbiBhIENNQSByZWdpb24gd291bGQgdW5uZWNlc3NhcmlseSBmcmFnbWVudAotICog
dGhhdCByZWdpb24uICBBbmQgc28gQ01BIGF0dGVtcHRzIHRvIG1pZ3JhdGUgdGhlIHBhZ2UgYmVm
b3JlIHBpbm5pbmcgd2hlbgorICogSW4gdGhlIENNQSBjYXNlOiBsb25nIHRlcm0gcGlucyBpbiBh
IENNQSByZWdpb24gd291bGQgdW5uZWNlc3NhcmlseSBmcmFnbWVudAorICogdGhhdCByZWdpb24u
ICBBbmQgc28sIENNQSBhdHRlbXB0cyB0byBtaWdyYXRlIHRoZSBwYWdlIGJlZm9yZSBwaW5uaW5n
LCB3aGVuCiAgKiBGT0xMX0xPTkdURVJNIGlzIHNwZWNpZmllZC4KKyAqCisgKiBGT0xMX1BJTiBp
bmRpY2F0ZXMgdGhhdCBhIHNwZWNpYWwga2luZCBvZiB0cmFja2luZyAobm90IGp1c3QgcGFnZS0+
X3JlZmNvdW50LAorICogYnV0IGFuIGFkZGl0aW9uYWwgcGluIGNvdW50aW5nIHN5c3RlbSkgd2ls
bCBiZSBpbnZva2VkLiBUaGlzIGlzIGludGVuZGVkIGZvcgorICogYW55dGhpbmcgdGhhdCBnZXRz
IGEgcGFnZSByZWZlcmVuY2UgYW5kIHRoZW4gdG91Y2hlcyBwYWdlIGRhdGEgKGZvciBleGFtcGxl
LAorICogRGlyZWN0IElPKS4gVGhpcyBsZXRzIHRoZSBmaWxlc3lzdGVtIGtub3cgdGhhdCBzb21l
IG5vbi1maWxlLXN5c3RlbSBlbnRpdHkgaXMKKyAqIHBvdGVudGlhbGx5IGNoYW5naW5nIHRoZSBw
YWdlcycgZGF0YS4gSW4gY29udHJhc3QgdG8gRk9MTF9HRVQgKHdob3NlIHBhZ2VzCisgKiBhcmUg
cmVsZWFzZWQgdmlhIHB1dF9wYWdlKCkpLCBGT0xMX1BJTiBwYWdlcyBtdXN0IGJlIHJlbGVhc2Vk
LCB1bHRpbWF0ZWx5LCBieQorICogYSBjYWxsIHRvIHB1dF91c2VyX3BhZ2UoKS4KKyAqCisgKiBG
T0xMX1BJTiBpcyBzaW1pbGFyIHRvIEZPTExfR0VUOiBib3RoIG9mIHRoZXNlIHBpbiBwYWdlcy4g
VGhleSB1c2UgZGlmZmVyZW50CisgKiBhbmQgc2VwYXJhdGUgcmVmY291bnRpbmcgbWVjaGFuaXNt
cywgaG93ZXZlciwgYW5kIHRoYXQgbWVhbnMgdGhhdCBlYWNoIGhhcworICogaXRzIG93biBhY3F1
aXJlIGFuZCByZWxlYXNlIG1lY2hhbmlzbXM6CisgKgorICogICAgIEZPTExfR0VUOiBnZXRfdXNl
cl9wYWdlcyooKSB0byBhY3F1aXJlLCBhbmQgcHV0X3BhZ2UoKSB0byByZWxlYXNlLgorICoKKyAq
ICAgICBGT0xMX1BJTjogcGluX3VzZXJfcGFnZXMqKCkgb3IgcGluX2xvbmd0ZXJtX3BhZ2VzKigp
IHRvIGFjcXVpcmUsIGFuZAorICogICAgICAgICAgICAgICBwdXRfdXNlcl9wYWdlcyB0byByZWxl
YXNlLgorICoKKyAqIEZPTExfUElOIGFuZCBGT0xMX0dFVCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZl
LgorICoKKyAqIFBsZWFzZSBzZWUgRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3Qg
Zm9yIG1vcmUgaW5mb3JtYXRpb24uCiAgKi8KIAogc3RhdGljIGlubGluZSBpbnQgdm1fZmF1bHRf
dG9fZXJybm8odm1fZmF1bHRfdCB2bV9mYXVsdCwgaW50IGZvbGxfZmxhZ3MpCmRpZmYgLS1naXQg
YS9tbS9ndXAuYyBiL21tL2d1cC5jCmluZGV4IDhmYjBkOWNkZmFmNS4uODY5NGJjN2IzZGYzIDEw
MDY0NAotLS0gYS9tbS9ndXAuYworKysgYi9tbS9ndXAuYwpAQCAtMTc5LDYgKzE3OSwxMCBAQCBz
dGF0aWMgc3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlX3B0ZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3Qg
KnZtYSwKIAlzcGlubG9ja190ICpwdGw7CiAJcHRlX3QgKnB0ZXAsIHB0ZTsKIAorCS8qIEZPTExf
R0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09O
X09OQ0UoKGZsYWdzICYgKEZPTExfUElOIHwgRk9MTF9HRVQpKSA9PQorCQkJIChGT0xMX1BJTiB8
IEZPTExfR0VUKSkpCisJCXJldHVybiBFUlJfUFRSKC1FSU5WQUwpOwogcmV0cnk6CiAJaWYgKHVu
bGlrZWx5KHBtZF9iYWQoKnBtZCkpKQogCQlyZXR1cm4gbm9fcGFnZV90YWJsZSh2bWEsIGZsYWdz
KTsKQEAgLTc5MCw3ICs3OTQsNyBAQCBzdGF0aWMgbG9uZyBfX2dldF91c2VyX3BhZ2VzKHN0cnVj
dCB0YXNrX3N0cnVjdCAqdHNrLCBzdHJ1Y3QgbW1fc3RydWN0ICptbSwKIAogCXN0YXJ0ID0gdW50
YWdnZWRfYWRkcihzdGFydCk7CiAKLQlWTV9CVUdfT04oISFwYWdlcyAhPSAhIShndXBfZmxhZ3Mg
JiBGT0xMX0dFVCkpOworCVZNX0JVR19PTighIXBhZ2VzICE9ICEhKGd1cF9mbGFncyAmIChGT0xM
X0dFVCB8IEZPTExfUElOKSkpOwogCiAJLyoKIAkgKiBJZiBGT0xMX0ZPUkNFIGlzIHNldCB0aGVu
IGRvIG5vdCBmb3JjZSBhIGZ1bGwgZmF1bHQgYXMgdGhlIGhpbnRpbmcKQEAgLTEwMTQsNyArMTAx
OCwxNiBAQCBzdGF0aWMgX19hbHdheXNfaW5saW5lIGxvbmcgX19nZXRfdXNlcl9wYWdlc19sb2Nr
ZWQoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ssCiAJCUJVR19PTigqbG9ja2VkICE9IDEpOwogCX0K
IAotCWlmIChwYWdlcykKKwkvKgorCSAqIEZPTExfUElOIGFuZCBGT0xMX0dFVCBhcmUgbXV0dWFs
bHkgZXhjbHVzaXZlLiBUcmFkaXRpb25hbCBiZWhhdmlvcgorCSAqIGlzIHRvIHNldCBGT0xMX0dF
VCBpZiB0aGUgY2FsbGVyIHdhbnRzIHBhZ2VzW10gZmlsbGVkIGluIChidXQgaGFzCisJICogY2Fy
ZWxlc3NseSBmYWlsZWQgdG8gc3BlY2lmeSBGT0xMX0dFVCksIHNvIGtlZXAgZG9pbmcgdGhhdCwg
YnV0IG9ubHkKKwkgKiBmb3IgRk9MTF9HRVQsIG5vdCBmb3IgdGhlIG5ld2VyIEZPTExfUElOLgor
CSAqCisJICogRk9MTF9QSU4gYWx3YXlzIGV4cGVjdHMgcGFnZXMgdG8gYmUgbm9uLW51bGwsIGJ1
dCBubyBuZWVkIHRvIGFzc2VydAorCSAqIHRoYXQgaGVyZSwgYXMgYW55IGZhaWx1cmVzIHdpbGwg
YmUgb2J2aW91cyBlbm91Z2guCisJICovCisJaWYgKHBhZ2VzICYmICEoZmxhZ3MgJiBGT0xMX1BJ
TikpCiAJCWZsYWdzIHw9IEZPTExfR0VUOwogCiAJcGFnZXNfZG9uZSA9IDA7CkBAIC0xMTMzLDYg
KzExNDYsMTIgQEAgc3RhdGljIF9fYWx3YXlzX2lubGluZSBsb25nIF9fZ2V0X3VzZXJfcGFnZXNf
bG9ja2VkKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLAogICogaXMgd3JpdHRlbiB0bywgc2V0X3Bh
Z2VfZGlydHkgKG9yIHNldF9wYWdlX2RpcnR5X2xvY2ssIGFzIGFwcHJvcHJpYXRlKSBtdXN0CiAg
KiBiZSBjYWxsZWQgYWZ0ZXIgdGhlIHBhZ2UgaXMgZmluaXNoZWQgd2l0aCwgYW5kIGJlZm9yZSBw
dXRfcGFnZSBpcyBjYWxsZWQuCiAgKgorICogQSBub3RlIG9uIGd1cF9mbGFnczogRk9MTF9QSU4g
bXVzdCBvbmx5IGJlIHNldCBpbnRlcm5hbGx5IGJ5IHRoZQorICogcGluX3VzZXJfcGFnZSooKSBh
bmQgcGluX2xvbmd0ZXJtXyooKSBBUElzLCBuZXZlciBkaXJlY3RseSBieSB0aGUgY2FsbGVyLgor
ICogVGhhdCdzIGluIG9yZGVyIHRvIGhlbHAgYXZvaWQgbWlzbWF0Y2hlcyB3aGVuIHJlbGVhc2lu
ZyBwYWdlczoKKyAqIGdldF91c2VyX3BhZ2VzKigpIHBhZ2VzIG11c3QgYmUgcmVsZWFzZWQgdmlh
IHB1dF9wYWdlKCksIHdoaWxlCisgKiBwaW5fdXNlcl9wYWdlcyooKSBwYWdlcyBtdXN0IGJlIHJl
bGVhc2VkIHZpYSBwdXRfdXNlcl9wYWdlKCkuCisgKgogICogZ2V0X3VzZXJfcGFnZXMgaXMgdHlw
aWNhbGx5IHVzZWQgZm9yIGZld2VyLWNvcHkgSU8gb3BlcmF0aW9ucywgdG8gZ2V0IGEKICAqIGhh
bmRsZSBvbiB0aGUgbWVtb3J5IGJ5IHNvbWUgbWVhbnMgb3RoZXIgdGhhbiBhY2Nlc3NlcyB2aWEg
dGhlIHVzZXIgdmlydHVhbAogICogYWRkcmVzc2VzLiBUaGUgcGFnZXMgbWF5IGJlIHN1Ym1pdHRl
ZCBmb3IgRE1BIHRvIGRldmljZXMgb3IgYWNjZXNzZWQgdmlhCkBAIC0xMTUxLDYgKzExNzAsMTQg
QEAgbG9uZyBnZXRfdXNlcl9wYWdlc19yZW1vdGUoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ssIHN0
cnVjdCBtbV9zdHJ1Y3QgKm1tLAogCQl1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFn
ZSAqKnBhZ2VzLAogCQlzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2bWFzLCBpbnQgKmxvY2tlZCkK
IHsKKwkvKgorCSAqIEFzIGRldGFpbGVkIGFib3ZlLCBGT0xMX1BJTiBtdXN0IG9ubHkgYmUgc2V0
IGludGVybmFsbHkgYnkgdGhlCisJICogcGluX3VzZXJfcGFnZSooKSBhbmQgcGluX2xvbmd0ZXJt
XyooKSBBUElzLCBuZXZlciBkaXJlY3RseSBieSB0aGUKKwkgKiBjYWxsZXIsIHNvIGVuZm9yY2Ug
dGhhdCB3aXRoIGFuIGFzc2VydGlvbjoKKwkgKi8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFn
cyAmIEZPTExfUElOKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKIAkvKgogCSAqIEZJWE1FOiBDdXJy
ZW50IEZPTExfTE9OR1RFUk0gYmVoYXZpb3IgaXMgaW5jb21wYXRpYmxlIHdpdGgKIAkgKiBGQVVM
VF9GTEFHX0FMTE9XX1JFVFJZIGJlY2F1c2Ugb2YgdGhlIEZTIERBWCBjaGVjayByZXF1aXJlbWVu
dCBvbgpAQCAtMTYwMywxMSArMTYzMCwyNSBAQCBzdGF0aWMgX19hbHdheXNfaW5saW5lIGxvbmcg
X19ndXBfbG9uZ3Rlcm1fbG9ja2VkKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLAogICogYW5kIG1t
IGJlaW5nIG9wZXJhdGVkIG9uIGFyZSB0aGUgY3VycmVudCB0YXNrJ3MgYW5kIGRvbid0IGFsbG93
CiAgKiBwYXNzaW5nIG9mIGEgbG9ja2VkIHBhcmFtZXRlci4gIFdlIGFsc28gb2J2aW91c2x5IGRv
bid0IHBhc3MKICAqIEZPTExfUkVNT1RFIGluIGhlcmUuCisgKgorICogQSBub3RlIG9uIGd1cF9m
bGFnczogRk9MTF9QSU4gc2hvdWxkIG9ubHkgYmUgc2V0IGludGVybmFsbHkgYnkgdGhlCisgKiBw
aW5fdXNlcl9wYWdlKigpIGFuZCBwaW5fbG9uZ3Rlcm1fKigpIEFQSXMsIG5ldmVyIGRpcmVjdGx5
IGJ5IHRoZSBjYWxsZXIuCisgKiBUaGF0J3MgaW4gb3JkZXIgdG8gaGVscCBhdm9pZCBtaXNtYXRj
aGVzIHdoZW4gcmVsZWFzaW5nIHBhZ2VzOgorICogZ2V0X3VzZXJfcGFnZXMqKCkgcGFnZXMgbXVz
dCBiZSByZWxlYXNlZCB2aWEgcHV0X3BhZ2UoKSwgd2hpbGUKKyAqIHBpbl91c2VyX3BhZ2VzKigp
IHBhZ2VzIG11c3QgYmUgcmVsZWFzZWQgdmlhIHB1dF91c2VyX3BhZ2UoKS4KICAqLwogbG9uZyBn
ZXRfdXNlcl9wYWdlcyh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2Vz
LAogCQl1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAogCQlzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2bWFzKQogeworCS8qCisJICogQXMgZGV0YWlsZWQgYWJvdmUs
IEZPTExfUElOIG11c3Qgb25seSBiZSBzZXQgaW50ZXJuYWxseSBieSB0aGUKKwkgKiBwaW5fdXNl
cl9wYWdlKigpIGFuZCBwaW5fbG9uZ3Rlcm1fKigpIEFQSXMsIG5ldmVyIGRpcmVjdGx5IGJ5IHRo
ZQorCSAqIGNhbGxlciwgc28gZW5mb3JjZSB0aGF0IHdpdGggYW4gYXNzZXJ0aW9uOgorCSAqLwor
CWlmIChXQVJOX09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9QSU4pKQorCQlyZXR1cm4gLUVJTlZB
TDsKKwogCXJldHVybiBfX2d1cF9sb25ndGVybV9sb2NrZWQoY3VycmVudCwgY3VycmVudC0+bW0s
IHN0YXJ0LCBucl9wYWdlcywKIAkJCQkgICAgIHBhZ2VzLCB2bWFzLCBndXBfZmxhZ3MgfCBGT0xM
X1RPVUNIKTsKIH0KQEAgLTIzNjYsMjQgKzI0MDcsOSBAQCBzdGF0aWMgaW50IF9fZ3VwX2xvbmd0
ZXJtX3VubG9ja2VkKHVuc2lnbmVkIGxvbmcgc3RhcnQsIGludCBucl9wYWdlcywKIAlyZXR1cm4g
cmV0OwogfQogCi0vKioKLSAqIGdldF91c2VyX3BhZ2VzX2Zhc3QoKSAtIHBpbiB1c2VyIHBhZ2Vz
IGluIG1lbW9yeQotICogQHN0YXJ0OglzdGFydGluZyB1c2VyIGFkZHJlc3MKLSAqIEBucl9wYWdl
czoJbnVtYmVyIG9mIHBhZ2VzIGZyb20gc3RhcnQgdG8gcGluCi0gKiBAZ3VwX2ZsYWdzOglmbGFn
cyBtb2RpZnlpbmcgcGluIGJlaGF2aW91cgotICogQHBhZ2VzOglhcnJheSB0aGF0IHJlY2VpdmVz
IHBvaW50ZXJzIHRvIHRoZSBwYWdlcyBwaW5uZWQuCi0gKgkJU2hvdWxkIGJlIGF0IGxlYXN0IG5y
X3BhZ2VzIGxvbmcuCi0gKgotICogQXR0ZW1wdCB0byBwaW4gdXNlciBwYWdlcyBpbiBtZW1vcnkg
d2l0aG91dCB0YWtpbmcgbW0tPm1tYXBfc2VtLgotICogSWYgbm90IHN1Y2Nlc3NmdWwsIGl0IHdp
bGwgZmFsbCBiYWNrIHRvIHRha2luZyB0aGUgbG9jayBhbmQKLSAqIGNhbGxpbmcgZ2V0X3VzZXJf
cGFnZXMoKS4KLSAqCi0gKiBSZXR1cm5zIG51bWJlciBvZiBwYWdlcyBwaW5uZWQuIFRoaXMgbWF5
IGJlIGZld2VyIHRoYW4gdGhlIG51bWJlcgotICogcmVxdWVzdGVkLiBJZiBucl9wYWdlcyBpcyAw
IG9yIG5lZ2F0aXZlLCByZXR1cm5zIDAuIElmIG5vIHBhZ2VzCi0gKiB3ZXJlIHBpbm5lZCwgcmV0
dXJucyAtZXJybm8uCi0gKi8KLWludCBnZXRfdXNlcl9wYWdlc19mYXN0KHVuc2lnbmVkIGxvbmcg
c3RhcnQsIGludCBucl9wYWdlcywKLQkJCXVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBw
YWdlICoqcGFnZXMpCitzdGF0aWMgaW50IGludGVybmFsX2dldF91c2VyX3BhZ2VzX2Zhc3QodW5z
aWduZWQgbG9uZyBzdGFydCwgaW50IG5yX3BhZ2VzLAorCQkJCQl1bnNpZ25lZCBpbnQgZ3VwX2Zs
YWdzLAorCQkJCQlzdHJ1Y3QgcGFnZSAqKnBhZ2VzKQogewogCXVuc2lnbmVkIGxvbmcgYWRkciwg
bGVuLCBlbmQ7CiAJaW50IG5yID0gMCwgcmV0ID0gMDsKQEAgLTI0MjgsNCArMjQ1NCwyMjIgQEAg
aW50IGdldF91c2VyX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9uZyBzdGFydCwgaW50IG5yX3BhZ2Vz
LAogCiAJcmV0dXJuIHJldDsKIH0KKworLyoqCisgKiBnZXRfdXNlcl9wYWdlc19mYXN0KCkgLSBw
aW4gdXNlciBwYWdlcyBpbiBtZW1vcnkKKyAqIEBzdGFydDoJc3RhcnRpbmcgdXNlciBhZGRyZXNz
CisgKiBAbnJfcGFnZXM6CW51bWJlciBvZiBwYWdlcyBmcm9tIHN0YXJ0IHRvIHBpbgorICogQGd1
cF9mbGFnczoJZmxhZ3MgbW9kaWZ5aW5nIHBpbiBiZWhhdmlvdXIKKyAqIEBwYWdlczoJYXJyYXkg
dGhhdCByZWNlaXZlcyBwb2ludGVycyB0byB0aGUgcGFnZXMgcGlubmVkLgorICoJCVNob3VsZCBi
ZSBhdCBsZWFzdCBucl9wYWdlcyBsb25nLgorICoKKyAqIEF0dGVtcHQgdG8gcGluIHVzZXIgcGFn
ZXMgaW4gbWVtb3J5IHdpdGhvdXQgdGFraW5nIG1tLT5tbWFwX3NlbS4KKyAqIElmIG5vdCBzdWNj
ZXNzZnVsLCBpdCB3aWxsIGZhbGwgYmFjayB0byB0YWtpbmcgdGhlIGxvY2sgYW5kCisgKiBjYWxs
aW5nIGdldF91c2VyX3BhZ2VzKCkuCisgKgorICogQSBub3RlIG9uIGd1cF9mbGFnczogRk9MTF9Q
SU4gbXVzdCBvbmx5IGJlIHNldCBpbnRlcm5hbGx5IGJ5IHRoZQorICogcGluX3VzZXJfcGFnZSoo
KSBhbmQgcGluX2xvbmd0ZXJtXyooKSBBUElzLCBuZXZlciBkaXJlY3RseSBieSB0aGUgY2FsbGVy
LgorICogVGhhdCdzIGluIG9yZGVyIHRvIGhlbHAgYXZvaWQgbWlzbWF0Y2hlcyB3aGVuIHJlbGVh
c2luZyBwYWdlczoKKyAqIGdldF91c2VyX3BhZ2VzKigpIHBhZ2VzIG11c3QgYmUgcmVsZWFzZWQg
dmlhIHB1dF9wYWdlKCksIHdoaWxlCisgKiBwaW5fdXNlcl9wYWdlcyooKSBwYWdlcyBtdXN0IGJl
IHJlbGVhc2VkIHZpYSBwdXRfdXNlcl9wYWdlKCkuCisgKgorICogUmV0dXJucyBudW1iZXIgb2Yg
cGFnZXMgcGlubmVkLiBUaGlzIG1heSBiZSBmZXdlciB0aGFuIHRoZSBudW1iZXIgcmVxdWVzdGVk
LgorICogSWYgbnJfcGFnZXMgaXMgMCBvciBuZWdhdGl2ZSwgcmV0dXJucyAwLiBJZiBubyBwYWdl
cyB3ZXJlIHBpbm5lZCwgcmV0dXJucworICogLWVycm5vLgorICovCitpbnQgZ2V0X3VzZXJfcGFn
ZXNfZmFzdCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCisJCQl1bnNpZ25lZCBp
bnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzKQoreworCS8qCisJICogQXMgZGV0YWls
ZWQgYWJvdmUsIEZPTExfUElOIG11c3Qgb25seSBiZSBzZXQgaW50ZXJuYWxseSBieSB0aGUKKwkg
KiBwaW5fdXNlcl9wYWdlKigpIGFuZCBwaW5fbG9uZ3Rlcm1fKigpIEFQSXMsIG5ldmVyIGRpcmVj
dGx5IGJ5IHRoZQorCSAqIGNhbGxlciwgc28gZW5mb3JjZSB0aGF0OgorCSAqLworCWlmIChXQVJO
X09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9QSU4pKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCXJl
dHVybiBpbnRlcm5hbF9nZXRfdXNlcl9wYWdlc19mYXN0KHN0YXJ0LCBucl9wYWdlcywgZ3VwX2Zs
YWdzLCBwYWdlcyk7Cit9CiBFWFBPUlRfU1lNQk9MX0dQTChnZXRfdXNlcl9wYWdlc19mYXN0KTsK
KworLyoqCisgKiBwaW5fdXNlcl9wYWdlc19mYXN0KCkgLSBwaW4gdXNlciBwYWdlcyBpbiBtZW1v
cnkgd2l0aG91dCB0YWtpbmcgbG9ja3MKKyAqCisgKiBOZWFybHkgdGhlIHNhbWUgYXMgZ2V0X3Vz
ZXJfcGFnZXNfZmFzdCgpLCBleGNlcHQgdGhhdCBGT0xMX1BJTiBpcyBzZXQuIFNlZQorICogZ2V0
X3VzZXJfcGFnZXNfZmFzdCgpIGZvciBkb2N1bWVudGF0aW9uIG9uIHRoZSBmdW5jdGlvbiBhcmd1
bWVudHMsIGJlY2F1c2UKKyAqIHRoZSBhcmd1bWVudHMgaGVyZSBhcmUgaWRlbnRpY2FsLgorICoK
KyAqIEZPTExfUElOIG1lYW5zIHRoYXQgdGhlIHBhZ2VzIG11c3QgYmUgcmVsZWFzZWQgdmlhIHB1
dF91c2VyX3BhZ2UoKS4gUGxlYXNlCisgKiBzZWUgRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9w
YWdlcy5yc3QgZm9yIGZ1cnRoZXIgZGV0YWlscy4KKyAqCisgKiBUaGlzIGlzIGludGVuZGVkIGZv
ciBDYXNlIDEgKERJTykgaW4gRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuIEl0
CisgKiBpcyBOT1QgaW50ZW5kZWQgZm9yIENhc2UgMiAoUkRNQTogbG9uZy10ZXJtIHBpbnMpLgor
ICovCitpbnQgcGluX3VzZXJfcGFnZXNfZmFzdCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJf
cGFnZXMsCisJCQl1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzKQor
eworCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLwor
CWlmIChXQVJOX09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9HRVQpKQorCQlyZXR1cm4gLUVJTlZB
TDsKKworCWd1cF9mbGFncyB8PSBGT0xMX1BJTjsKKwlyZXR1cm4gaW50ZXJuYWxfZ2V0X3VzZXJf
cGFnZXNfZmFzdChzdGFydCwgbnJfcGFnZXMsIGd1cF9mbGFncywgcGFnZXMpOworfQorRVhQT1JU
X1NZTUJPTF9HUEwocGluX3VzZXJfcGFnZXNfZmFzdCk7CisKKy8qKgorICogcGluX2xvbmd0ZXJt
X3BhZ2VzX2Zhc3QoKSAtIHBpbiB1c2VyIHBhZ2VzIGluIG1lbW9yeSB3aXRob3V0IHRha2luZyBs
b2NrcworICoKKyAqIE5lYXJseSB0aGUgc2FtZSBhcyBnZXRfdXNlcl9wYWdlc19mYXN0KCksIGV4
Y2VwdCB0aGF0IEZPTExfUElOIGFuZAorICogRk9MTF9MT05HVEVSTSBhcmUgc2V0LiBTZWUgZ2V0
X3VzZXJfcGFnZXNfZmFzdCgpIGZvciBkb2N1bWVudGF0aW9uIG9uIHRoZQorICogZnVuY3Rpb24g
YXJndW1lbnRzLCBiZWNhdXNlIHRoZSBhcmd1bWVudHMgaGVyZSBhcmUgaWRlbnRpY2FsLgorICoK
KyAqIEZPTExfUElOIG1lYW5zIHRoYXQgdGhlIHBhZ2VzIG11c3QgYmUgcmVsZWFzZWQgdmlhIHB1
dF91c2VyX3BhZ2UoKS4gUGxlYXNlCisgKiBzZWUgRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9w
YWdlcy5yc3QgZm9yIGZ1cnRoZXIgZGV0YWlscy4KKyAqCisgKiBGT0xMX0xPTkdURVJNIG1lYW5z
IHRoYXQgdGhlIHBhZ2VzIGFyZSBiZWluZyBwaW5uZWQgZm9yICJsb25nIHRlcm0iIHVzZSwKKyAq
IHR5cGljYWxseSBieSBhIG5vbi1DUFUgZGV2aWNlLCBhbmQgd2UgY2Fubm90IGJlIHN1cmUgdGhh
dCB3YWl0aW5nIGZvciBhCisgKiBwaW5uZWQgcGFnZSB0byBiZWNvbWUgdW5waW4gd2lsbCBiZSBl
ZmZlY3RpdmUuCisgKgorICogVGhpcyBpcyBpbnRlbmRlZCBmb3IgQ2FzZSAyIChSRE1BOiBsb25n
LXRlcm0gcGlucykgb2YgdGhlIEZPTExfUElOCisgKiBkb2N1bWVudGF0aW9uLgorICovCitpbnQg
cGluX2xvbmd0ZXJtX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9uZyBzdGFydCwgaW50IG5yX3BhZ2Vz
LAorCQkJICAgIHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMpCit7
CisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuICovCisJ
aWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX0dFVCkpCisJCXJldHVybiAtRUlOVkFM
OworCisJZ3VwX2ZsYWdzIHw9IChGT0xMX1BJTiB8IEZPTExfTE9OR1RFUk0pOworCXJldHVybiBp
bnRlcm5hbF9nZXRfdXNlcl9wYWdlc19mYXN0KHN0YXJ0LCBucl9wYWdlcywgZ3VwX2ZsYWdzLCBw
YWdlcyk7Cit9CitFWFBPUlRfU1lNQk9MX0dQTChwaW5fbG9uZ3Rlcm1fcGFnZXNfZmFzdCk7CisK
Ky8qKgorICogcGluX3VzZXJfcGFnZXNfcmVtb3RlKCkgLSBwaW4gcGFnZXMgZm9yICh0eXBpY2Fs
bHkpIHVzZSBieSBEaXJlY3QgSU8sIGFuZAorICogcmV0dXJuIHRoZSBwYWdlcyB0byB0aGUgdXNl
ci4KKyAqCisgKiBOZWFybHkgdGhlIHNhbWUgYXMgZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKCksIGV4
Y2VwdCB0aGF0IEZPTExfUElOIGlzIHNldC4gU2VlCisgKiBnZXRfdXNlcl9wYWdlc19yZW1vdGUo
KSBmb3IgZG9jdW1lbnRhdGlvbiBvbiB0aGUgZnVuY3Rpb24gYXJndW1lbnRzLCBiZWNhdXNlCisg
KiB0aGUgYXJndW1lbnRzIGhlcmUgYXJlIGlkZW50aWNhbC4KKyAqCisgKiBGT0xMX1BJTiBtZWFu
cyB0aGF0IHRoZSBwYWdlcyBtdXN0IGJlIHJlbGVhc2VkIHZpYSBwdXRfdXNlcl9wYWdlKCkuIFBs
ZWFzZQorICogc2VlIERvY3VtZW50YXRpb24vdm0vcGluX3VzZXJfcGFnZXMucnN0IGZvciBkZXRh
aWxzLgorICoKKyAqIFRoaXMgaXMgaW50ZW5kZWQgZm9yIENhc2UgMSAoRElPKSBpbiBEb2N1bWVu
dGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdC4gSXQKKyAqIGlzIE5PVCBpbnRlbmRlZCBmb3Ig
Q2FzZSAyIChSRE1BOiBsb25nLXRlcm0gcGlucykuCisgKi8KK2xvbmcgcGluX3VzZXJfcGFnZXNf
cmVtb3RlKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLCBzdHJ1Y3QgbW1fc3RydWN0ICptbSwKKwkJ
CSAgIHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCisJCQkgICB1
bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkJICAgc3RydWN0
IHZtX2FyZWFfc3RydWN0ICoqdm1hcywgaW50ICpsb2NrZWQpCit7CisJLyogRk9MTF9HRVQgYW5k
IEZPTExfUElOIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuICovCisJaWYgKFdBUk5fT05fT05DRShn
dXBfZmxhZ3MgJiBGT0xMX0dFVCkpCisJCXJldHVybiAtRUlOVkFMOworCisJZ3VwX2ZsYWdzIHw9
IEZPTExfVE9VQ0ggfCBGT0xMX1JFTU9URSB8IEZPTExfUElOOworCisJcmV0dXJuIF9fZ2V0X3Vz
ZXJfcGFnZXNfbG9ja2VkKHRzaywgbW0sIHN0YXJ0LCBucl9wYWdlcywgcGFnZXMsIHZtYXMsCisJ
CQkJICAgICAgIGxvY2tlZCwgZ3VwX2ZsYWdzKTsKK30KK0VYUE9SVF9TWU1CT0wocGluX3VzZXJf
cGFnZXNfcmVtb3RlKTsKKworLyoqCisgKiBwaW5fbG9uZ3Rlcm1fcGFnZXNfcmVtb3RlKCkgLSBw
aW4gcGFnZXMgZm9yICh0eXBpY2FsbHkpIHVzZSBieSBEaXJlY3QgSU8sIGFuZAorICogcmV0dXJu
IHRoZSBwYWdlcyB0byB0aGUgdXNlci4KKyAqCisgKiBOZWFybHkgdGhlIHNhbWUgYXMgZ2V0X3Vz
ZXJfcGFnZXNfcmVtb3RlKCksIGJ1dCBub3RlIHRoYXQgRk9MTF9UT1VDSCBpcyBub3QKKyAqIHNl
dCwgYW5kIEZPTExfUElOIGFuZCBGT0xMX0xPTkdURVJNIGFyZSBzZXQuIFNlZSBnZXRfdXNlcl9w
YWdlc19yZW1vdGUoKSBmb3IKKyAqIGRvY3VtZW50YXRpb24gb24gdGhlIGZ1bmN0aW9uIGFyZ3Vt
ZW50cywgYmVjYXVzZSB0aGUgYXJndW1lbnRzIGhlcmUgYXJlCisgKiBpZGVudGljYWwuCisgKgor
ICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEgcHV0
X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3Bh
Z2VzLnJzdCBmb3IgZnVydGhlciBkZXRhaWxzLgorICoKKyAqIEZPTExfTE9OR1RFUk0gbWVhbnMg
dGhhdCB0aGUgcGFnZXMgYXJlIGJlaW5nIHBpbm5lZCBmb3IgImxvbmcgdGVybSIgdXNlLAorICog
dHlwaWNhbGx5IGJ5IGEgbm9uLUNQVSBkZXZpY2UsIGFuZCB3ZSBjYW5ub3QgYmUgc3VyZSB0aGF0
IHdhaXRpbmcgZm9yIGEKKyAqIHBpbm5lZCBwYWdlIHRvIGJlY29tZSB1bnBpbiB3aWxsIGJlIGVm
ZmVjdGl2ZS4KKyAqCisgKiBUaGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDIgKFJETUE6IGxvbmct
dGVybSBwaW5zKSBpbgorICogRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuCisg
Ki8KK2xvbmcgcGluX2xvbmd0ZXJtX3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRz
aywgc3RydWN0IG1tX3N0cnVjdCAqbW0sCisJCQkgICAgICAgdW5zaWduZWQgbG9uZyBzdGFydCwg
dW5zaWduZWQgbG9uZyBucl9wYWdlcywKKwkJCSAgICAgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdz
LCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkJICAgICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAq
KnZtYXMsIGludCAqbG9ja2VkKQoreworCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0
dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9H
RVQpKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCS8qCisJICogRklYTUU6IGFzIG5vdGVkIGluIHRo
ZSBnZXRfdXNlcl9wYWdlc19yZW1vdGUoKSBpbXBsZW1lbnRhdGlvbiwgaXQKKwkgKiBpcyBub3Qg
eWV0IHBvc3NpYmxlIHRvIHNhZmVseSBzZXQgRk9MTF9MT05HVEVSTSBoZXJlLiBGT0xMX0xPTkdU
RVJNCisJICogbmVlZHMgdG8gYmUgc2V0LCBidXQgZm9yIG5vdyB0aGUgYmVzdCB3ZSBjYW4gZG8g
aXMgYSAiVE9ETyIgaXRlbS4KKwkgKi8KKwlndXBfZmxhZ3MgfD0gRk9MTF9SRU1PVEUgfCBGT0xM
X1BJTjsKKworCXJldHVybiBfX2dldF91c2VyX3BhZ2VzX2xvY2tlZCh0c2ssIG1tLCBzdGFydCwg
bnJfcGFnZXMsIHBhZ2VzLCB2bWFzLAorCQkJCSAgICAgICBsb2NrZWQsIGd1cF9mbGFncyk7Cit9
CitFWFBPUlRfU1lNQk9MKHBpbl9sb25ndGVybV9wYWdlc19yZW1vdGUpOworCisvKioKKyAqIHBp
bl91c2VyX3BhZ2VzKCkgLSBwaW4gdXNlciBwYWdlcyBpbiBtZW1vcnkgZm9yIHVzZSBieSBvdGhl
ciBkZXZpY2VzCisgKgorICogTmVhcmx5IHRoZSBzYW1lIGFzIGdldF91c2VyX3BhZ2VzKCksIGV4
Y2VwdCB0aGF0IEZPTExfVE9VQ0ggaXMgbm90IHNldCwgYW5kCisgKiBGT0xMX1BJTiBpcyBzZXQu
CisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2
aWEgcHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91
c2VyX3BhZ2VzLnJzdCBmb3IgZGV0YWlscy4KKyAqCisgKiBUaGlzIGlzIGludGVuZGVkIGZvciBD
YXNlIDEgKERJTykgaW4gRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuIEl0Cisg
KiBpcyBOT1QgaW50ZW5kZWQgZm9yIENhc2UgMiAoUkRNQTogbG9uZy10ZXJtIHBpbnMpLgorICov
Citsb25nIHBpbl91c2VyX3BhZ2VzKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcg
bnJfcGFnZXMsCisJCSAgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBh
Z2VzLAorCQkgICAgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcykKK3sKKwkvKiBGT0xMX0dF
VCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9PTl9P
TkNFKGd1cF9mbGFncyAmIEZPTExfR0VUKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlndXBfZmxh
Z3MgfD0gRk9MTF9QSU47CisJcmV0dXJuIF9fZ3VwX2xvbmd0ZXJtX2xvY2tlZChjdXJyZW50LCBj
dXJyZW50LT5tbSwgc3RhcnQsIG5yX3BhZ2VzLAorCQkJCSAgICAgcGFnZXMsIHZtYXMsIGd1cF9m
bGFncyk7Cit9CitFWFBPUlRfU1lNQk9MKHBpbl91c2VyX3BhZ2VzKTsKKworLyoqCisgKiBwaW5f
bG9uZ3Rlcm1fcGFnZXMoKSAtIHBpbiB1c2VyIHBhZ2VzIGluIG1lbW9yeSBmb3IgbG9uZy10ZXJt
IHVzZSAoUkRNQSwKKyAqIHR5cGljYWxseSkKKyAqCisgKiBOZWFybHkgdGhlIHNhbWUgYXMgZ2V0
X3VzZXJfcGFnZXMoKSwgZXhjZXB0IHRoYXQgRk9MTF9QSU4gYW5kIEZPTExfTE9OR1RFUk0KKyAq
IGFyZSBzZXQuIFNlZSBnZXRfdXNlcl9wYWdlc19mYXN0KCkgZm9yIGRvY3VtZW50YXRpb24gb24g
dGhlIGZ1bmN0aW9uCisgKiBhcmd1bWVudHMsIGJlY2F1c2UgdGhlIGFyZ3VtZW50cyBoZXJlIGFy
ZSBpZGVudGljYWwuCisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBi
ZSByZWxlYXNlZCB2aWEgcHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0
aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBmb3IgZnVydGhlciBkZXRhaWxzLgorICoKKyAqIEZP
TExfTE9OR1RFUk0gbWVhbnMgdGhhdCB0aGUgcGFnZXMgYXJlIGJlaW5nIHBpbm5lZCBmb3IgImxv
bmcgdGVybSIgdXNlLAorICogdHlwaWNhbGx5IGJ5IGEgbm9uLUNQVSBkZXZpY2UsIGFuZCB3ZSBj
YW5ub3QgYmUgc3VyZSB0aGF0IHdhaXRpbmcgZm9yIGEKKyAqIHBpbm5lZCBwYWdlIHRvIGJlY29t
ZSB1bnBpbiB3aWxsIGJlIGVmZmVjdGl2ZS4KKyAqCisgKiBUaGlzIGlzIGludGVuZGVkIGZvciBD
YXNlIDIgKFJETUE6IGxvbmctdGVybSBwaW5zKSBpbgorICogRG9jdW1lbnRhdGlvbi92bS9waW5f
dXNlcl9wYWdlcy5yc3QuCisgKi8KK2xvbmcgcGluX2xvbmd0ZXJtX3BhZ2VzKHVuc2lnbmVkIGxv
bmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCisJCQl1bnNpZ25lZCBpbnQgZ3VwX2Zs
YWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkJc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1h
cykKK3sKKwkvKiBGT0xMX0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4g
Ki8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfR0VUKSkKKwkJcmV0dXJuIC1F
SU5WQUw7CisKKwlndXBfZmxhZ3MgfD0gRk9MTF9QSU4gfCBGT0xMX0xPTkdURVJNOworCXJldHVy
biBfX2d1cF9sb25ndGVybV9sb2NrZWQoY3VycmVudCwgY3VycmVudC0+bW0sIHN0YXJ0LCBucl9w
YWdlcywKKwkJCQkgICAgIHBhZ2VzLCB2bWFzLCBndXBfZmxhZ3MpOworfQorRVhQT1JUX1NZTUJP
TChwaW5fbG9uZ3Rlcm1fcGFnZXMpOwotLSAKMi4yMy4wCgpfX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fXwpkcmktZGV2ZWwgbWFpbGluZyBsaXN0CmRyaS1kZXZl
bEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFp
bG1hbi9saXN0aW5mby9kcmktZGV2ZWw=
