Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 8DC79FD4AC
	for <lists+dri-devel@lfdr.de>; Fri, 15 Nov 2019 06:54:19 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 2AC3D6E218;
	Fri, 15 Nov 2019 05:54:03 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from hqemgate14.nvidia.com (hqemgate14.nvidia.com [216.228.121.143])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 6C6366E162
 for <dri-devel@lists.freedesktop.org>; Fri, 15 Nov 2019 05:53:55 +0000 (UTC)
Received: from hqpgpgate102.nvidia.com (Not Verified[216.228.121.13]) by
 hqemgate14.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
 id <B5dce3d6d0008>; Thu, 14 Nov 2019 21:53:50 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
 by hqpgpgate102.nvidia.com (PGP Universal service);
 Thu, 14 Nov 2019 21:53:47 -0800
X-PGP-Universal: processed;
 by hqpgpgate102.nvidia.com on Thu, 14 Nov 2019 21:53:47 -0800
Received: from HQMAIL111.nvidia.com (172.20.187.18) by HQMAIL105.nvidia.com
 (172.20.187.12) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Fri, 15 Nov
 2019 05:53:45 +0000
Received: from hqnvemgw03.nvidia.com (10.124.88.68) by HQMAIL111.nvidia.com
 (172.20.187.18) with Microsoft SMTP Server (TLS) id 15.0.1473.3 via Frontend
 Transport; Fri, 15 Nov 2019 05:53:45 +0000
Received: from blueforge.nvidia.com (Not Verified[10.110.48.28]) by
 hqnvemgw03.nvidia.com with Trustwave SEG (v7, 5, 8, 10121)
 id <B5dce3d690000>; Thu, 14 Nov 2019 21:53:45 -0800
From: John Hubbard <jhubbard@nvidia.com>
To: Andrew Morton <akpm@linux-foundation.org>
Subject: [PATCH v5 17/24] mm/gup: track FOLL_PIN pages
Date: Thu, 14 Nov 2019 21:53:33 -0800
Message-ID: <20191115055340.1825745-18-jhubbard@nvidia.com>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20191115055340.1825745-1-jhubbard@nvidia.com>
References: <20191115055340.1825745-1-jhubbard@nvidia.com>
MIME-Version: 1.0
X-NVConfidentiality: public
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=nvidia.com; s=n1; 
 t=1573797230; bh=iNscpvxFP75E8uqI/ZVTkoiyq03hw2tyR7z35LQKCCw=;
 h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
 In-Reply-To:References:MIME-Version:X-NVConfidentiality:
 Content-Type:Content-Transfer-Encoding;
 b=U1hefUrVpG2w6gLoEES36IFcm8R6Z8OiOxkOCftl2tJET6mjd36ppIub1pFUfdbvr
 23xNn206XOfbI76n74VzYg9nY5tbaEoZdyv8GwG5CEFuFHI8p5ZzoTq/b97R3CWaxL
 v07cLzow0a5arE8PdXmPMDmM6zbaWGCKsxwcXDpbYMNyFJXBjAvUSzOp56sXb8JnpI
 5tjFG34mIhtUH/aJ2SRt1lwvQKUiJR1tkznCVBhzX7N0zHZrAG/L9Cy4zAvuBXAcO5
 tZSkhQ+/UvthT6iJZ4D6UaP0FpIQdGYu/BRv5yGoQ5PwoVNbIRQkdvkp8ZZIEt10HL
 8xwuaiw3tejag==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Michal Hocko <mhocko@suse.com>, Jan Kara <jack@suse.cz>,
 kvm@vger.kernel.org, linux-doc@vger.kernel.org,
 David Airlie <airlied@linux.ie>, Dave Chinner <david@fromorbit.com>,
 dri-devel@lists.freedesktop.org, LKML <linux-kernel@vger.kernel.org>,
 linux-mm@kvack.org, Paul Mackerras <paulus@samba.org>,
 linux-kselftest@vger.kernel.org, Ira Weiny <ira.weiny@intel.com>,
 Jonathan Corbet <corbet@lwn.net>, linux-rdma@vger.kernel.org,
 Michael Ellerman <mpe@ellerman.id.au>, Christoph Hellwig <hch@infradead.org>,
 Jason Gunthorpe <jgg@ziepe.ca>, Vlastimil Babka <vbabka@suse.cz>,
 =?UTF-8?q?Bj=C3=B6rn=20T=C3=B6pel?= <bjorn.topel@intel.com>,
 linux-media@vger.kernel.org, Shuah Khan <shuah@kernel.org>,
 John Hubbard <jhubbard@nvidia.com>, linux-block@vger.kernel.org,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Al Viro <viro@zeniv.linux.org.uk>, Dan Williams <dan.j.williams@intel.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Magnus Karlsson <magnus.karlsson@intel.com>, Jens Axboe <axboe@kernel.dk>,
 netdev@vger.kernel.org, Alex Williamson <alex.williamson@redhat.com>,
 linux-fsdevel@vger.kernel.org, bpf@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org, "David S . Miller" <davem@davemloft.net>,
 Mike Kravetz <mike.kravetz@oracle.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

QWRkIHRyYWNraW5nIG9mIHBhZ2VzIHRoYXQgd2VyZSBwaW5uZWQgdmlhIEZPTExfUElOLgoKQXMg
bWVudGlvbmVkIGluIHRoZSBGT0xMX1BJTiBkb2N1bWVudGF0aW9uLCBjYWxsZXJzIHdobyBlZmZl
Y3RpdmVseSBzZXQKRk9MTF9QSU4gYXJlIHJlcXVpcmVkIHRvIHVsdGltYXRlbHkgZnJlZSBzdWNo
IHBhZ2VzIHZpYSBwdXRfdXNlcl9wYWdlKCkuClRoZSBlZmZlY3QgaXMgc2ltaWxhciB0byBGT0xM
X0dFVCwgYW5kIG1heSBiZSB0aG91Z2h0IG9mIGFzICJGT0xMX0dFVApmb3IgRElPIGFuZC9vciBS
RE1BIHVzZSIuCgpQYWdlcyB0aGF0IGhhdmUgYmVlbiBwaW5uZWQgdmlhIEZPTExfUElOIGFyZSBp
ZGVudGlmaWFibGUgdmlhIGEKbmV3IGZ1bmN0aW9uIGNhbGw6CgogICBib29sIHBhZ2VfZG1hX3Bp
bm5lZChzdHJ1Y3QgcGFnZSAqcGFnZSk7CgpXaGF0IHRvIGRvIGluIHJlc3BvbnNlIHRvIGVuY291
bnRlcmluZyBzdWNoIGEgcGFnZSwgaXMgbGVmdCB0byBsYXRlcgpwYXRjaHNldHMuIFRoZXJlIGlz
IGRpc2N1c3Npb24gYWJvdXQgdGhpcyBpbiBbMV0uCgpUaGlzIGFsc28gY2hhbmdlcyBhIEJVR19P
TigpLCB0byBhIFdBUk5fT04oKSwgaW4gZm9sbG93X3BhZ2VfbWFzaygpLgoKU3VnZ2VzdGVkLWJ5
OiBKYW4gS2FyYSA8amFja0BzdXNlLmN6PgpTdWdnZXN0ZWQtYnk6IErDqXLDtG1lIEdsaXNzZSA8
amdsaXNzZUByZWRoYXQuY29tPgpTaWduZWQtb2ZmLWJ5OiBKb2huIEh1YmJhcmQgPGpodWJiYXJk
QG52aWRpYS5jb20+Ci0tLQogRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9waW5fdXNlcl9wYWdlcy5y
c3QgfCAgIDIgKy0KIGluY2x1ZGUvbGludXgvbW0uaCAgICAgICAgICAgICAgICAgICAgICAgIHwg
IDczICsrKy0tCiBpbmNsdWRlL2xpbnV4L21tem9uZS5oICAgICAgICAgICAgICAgICAgICB8ICAg
MiArCiBpbmNsdWRlL2xpbnV4L3BhZ2VfcmVmLmggICAgICAgICAgICAgICAgICB8ICAxMCArCiBt
bS9ndXAuYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMwNyArKysrKysrKysr
KysrKysrLS0tLS0tCiBtbS9odWdlX21lbW9yeS5jICAgICAgICAgICAgICAgICAgICAgICAgICB8
ICA1NCArKystCiBtbS9odWdldGxiLmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAz
OSArKy0KIG1tL3Ztc3RhdC5jICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAyICsK
IDggZmlsZXMgY2hhbmdlZCwgMzkwIGluc2VydGlvbnMoKyksIDk5IGRlbGV0aW9ucygtKQoKZGlm
ZiAtLWdpdCBhL0RvY3VtZW50YXRpb24vY29yZS1hcGkvcGluX3VzZXJfcGFnZXMucnN0IGIvRG9j
dW1lbnRhdGlvbi9jb3JlLWFwaS9waW5fdXNlcl9wYWdlcy5yc3QKaW5kZXggNGYyNjYzN2E1MDA1
Li5iYWEyODhhNDRhNzcgMTAwNjQ0Ci0tLSBhL0RvY3VtZW50YXRpb24vY29yZS1hcGkvcGluX3Vz
ZXJfcGFnZXMucnN0CisrKyBiL0RvY3VtZW50YXRpb24vY29yZS1hcGkvcGluX3VzZXJfcGFnZXMu
cnN0CkBAIC01Myw3ICs1Myw3IEBAIFdoaWNoIGZsYWdzIGFyZSBzZXQgYnkgZWFjaCB3cmFwcGVy
CiBGb3IgdGhlc2UgcGluX3VzZXJfcGFnZXMqKCkgZnVuY3Rpb25zLCBGT0xMX1BJTiBpcyBPUidk
IGluIHdpdGggd2hhdGV2ZXIgZ3VwCiBmbGFncyB0aGUgY2FsbGVyIHByb3ZpZGVzLiBUaGUgY2Fs
bGVyIGlzIHJlcXVpcmVkIHRvIHBhc3MgaW4gYSBub24tbnVsbCBzdHJ1Y3QKIHBhZ2VzKiBhcnJh
eSwgYW5kIHRoZSBmdW5jdGlvbiB0aGVuIHBpbiBwYWdlcyBieSBpbmNyZW1lbnRpbmcgZWFjaCBi
eSBhIHNwZWNpYWwKLXZhbHVlLiBGb3Igbm93LCB0aGF0IHZhbHVlIGlzICsxLCBqdXN0IGxpa2Ug
Z2V0X3VzZXJfcGFnZXMqKCkuOjoKK3ZhbHVlOiBHVVBfUElOX0NPVU5USU5HX0JJQVMuOjoKIAog
IEZ1bmN0aW9uCiAgLS0tLS0tLS0KZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbW0uaCBiL2lu
Y2x1ZGUvbGludXgvbW0uaAppbmRleCA2NTg4ZDJlMDI2MjguLmRiODcyNzY2NDgwZiAxMDA2NDQK
LS0tIGEvaW5jbHVkZS9saW51eC9tbS5oCisrKyBiL2luY2x1ZGUvbGludXgvbW0uaApAQCAtMTA1
NCw2ICsxMDU0LDggQEAgc3RhdGljIGlubGluZSBfX211c3RfY2hlY2sgYm9vbCB0cnlfZ2V0X3Bh
Z2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCiAJcmV0dXJuIHRydWU7CiB9CiAKK19fbXVzdF9jaGVjayBi
b29sIHVzZXJfcGFnZV9yZWZfaW5jKHN0cnVjdCBwYWdlICpwYWdlKTsKKwogc3RhdGljIGlubGlu
ZSB2b2lkIHB1dF9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQogewogCXBhZ2UgPSBjb21wb3VuZF9o
ZWFkKHBhZ2UpOwpAQCAtMTA3MSwyOSArMTA3Myw3MCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgcHV0
X3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCiAJCV9fcHV0X3BhZ2UocGFnZSk7CiB9CiAKLS8qKgot
ICogcHV0X3VzZXJfcGFnZSgpIC0gcmVsZWFzZSBhIGd1cC1waW5uZWQgcGFnZQotICogQHBhZ2U6
ICAgICAgICAgICAgcG9pbnRlciB0byBwYWdlIHRvIGJlIHJlbGVhc2VkCisvKgorICogR1VQX1BJ
Tl9DT1VOVElOR19CSUFTLCBhbmQgdGhlIGFzc29jaWF0ZWQgZnVuY3Rpb25zIHRoYXQgdXNlIGl0
LCBvdmVybG9hZAorICogdGhlIHBhZ2UncyByZWZjb3VudCBzbyB0aGF0IHR3byBzZXBhcmF0ZSBp
dGVtcyBhcmUgdHJhY2tlZDogdGhlIG9yaWdpbmFsIHBhZ2UKKyAqIHJlZmVyZW5jZSBjb3VudCwg
YW5kIGFsc28gYSBuZXcgY291bnQgb2YgaG93IG1hbnkgZ2V0X3VzZXJfcGFnZXMoKSBjYWxscyB3
ZXJlCisgKiBtYWRlIGFnYWluc3QgdGhlIHBhZ2UuICgiZ3VwLXBpbm5lZCIgaXMgYW5vdGhlciB0
ZXJtIGZvciB0aGUgbGF0dGVyKS4KKyAqCisgKiBXaXRoIHRoaXMgc2NoZW1lLCBnZXRfdXNlcl9w
YWdlcygpIGJlY29tZXMgc3BlY2lhbDogc3VjaCBwYWdlcyBhcmUgbWFya2VkCisgKiBhcyBkaXN0
aW5jdCBmcm9tIG5vcm1hbCBwYWdlcy4gQXMgc3VjaCwgdGhlIHB1dF91c2VyX3BhZ2UoKSBjYWxs
IChhbmQgaXRzCisgKiB2YXJpYW50cykgbXVzdCBiZSB1c2VkIGluIG9yZGVyIHRvIHJlbGVhc2Ug
Z3VwLXBpbm5lZCBwYWdlcy4KKyAqCisgKiBDaG9pY2Ugb2YgdmFsdWU6CiAgKgotICogUGFnZXMg
dGhhdCB3ZXJlIHBpbm5lZCB2aWEgcGluX3VzZXJfcGFnZXMqKCkgbXVzdCBiZSByZWxlYXNlZCB2
aWEgZWl0aGVyCi0gKiBwdXRfdXNlcl9wYWdlKCksIG9yIG9uZSBvZiB0aGUgcHV0X3VzZXJfcGFn
ZXMqKCkgcm91dGluZXMuIFRoaXMgaXMgc28gdGhhdAotICogZXZlbnR1YWxseSBzdWNoIHBhZ2Vz
IGNhbiBiZSBzZXBhcmF0ZWx5IHRyYWNrZWQgYW5kIHVuaXF1ZWx5IGhhbmRsZWQuIEluCi0gKiBw
YXJ0aWN1bGFyLCBpbnRlcmFjdGlvbnMgd2l0aCBSRE1BIGFuZCBmaWxlc3lzdGVtcyBuZWVkIHNw
ZWNpYWwgaGFuZGxpbmcuCisgKiBCeSBtYWtpbmcgR1VQX1BJTl9DT1VOVElOR19CSUFTIGEgcG93
ZXIgb2YgdHdvLCBkZWJ1Z2dpbmcgb2YgcGFnZSByZWZlcmVuY2UKKyAqIGNvdW50cyB3aXRoIHJl
c3BlY3QgdG8gZ2V0X3VzZXJfcGFnZXMoKSBhbmQgcHV0X3VzZXJfcGFnZSgpIGJlY29tZXMgc2lt
cGxlciwKKyAqIGR1ZSB0byB0aGUgZmFjdCB0aGF0IGFkZGluZyBhbiBldmVuIHBvd2VyIG9mIHR3
byB0byB0aGUgcGFnZSByZWZjb3VudCBoYXMKKyAqIHRoZSBlZmZlY3Qgb2YgdXNpbmcgb25seSB0
aGUgdXBwZXIgTiBiaXRzLCBmb3IgdGhlIGNvZGUgdGhhdCBjb3VudHMgdXAgdXNpbmcKKyAqIHRo
ZSBiaWFzIHZhbHVlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGxvd2VyIGJpdHMgYXJlIGxlZnQgZm9y
IHRoZSBleGNsdXNpdmUKKyAqIHVzZSBvZiB0aGUgb3JpZ2luYWwgY29kZSB0aGF0IGluY3JlbWVu
dHMgYW5kIGRlY3JlbWVudHMgYnkgb25lIChvciBhdCBsZWFzdCwKKyAqIGJ5IG11Y2ggc21hbGxl
ciB2YWx1ZXMgdGhhbiB0aGUgYmlhcyB2YWx1ZSkuCiAgKgotICogcHV0X3VzZXJfcGFnZSgpIGFu
ZCBwdXRfcGFnZSgpIGFyZSBub3QgaW50ZXJjaGFuZ2VhYmxlLCBkZXNwaXRlIHRoaXMgZWFybHkK
LSAqIGltcGxlbWVudGF0aW9uIHRoYXQgbWFrZXMgdGhlbSBsb29rIHRoZSBzYW1lLiBwdXRfdXNl
cl9wYWdlKCkgY2FsbHMgbXVzdAotICogYmUgcGVyZmVjdGx5IG1hdGNoZWQgdXAgd2l0aCBwaW4q
KCkgY2FsbHMuCisgKiBPZiBjb3Vyc2UsIG9uY2UgdGhlIGxvd2VyIGJpdHMgb3ZlcmZsb3cgaW50
byB0aGUgdXBwZXIgYml0cyAoYW5kIHRoaXMgaXMKKyAqIE9LLCBiZWNhdXNlIHN1YnRyYWN0aW9u
IHJlY292ZXJzIHRoZSBvcmlnaW5hbCB2YWx1ZXMpLCB0aGVuIHZpc3VhbCBpbnNwZWN0aW9uCisg
KiBubyBsb25nZXIgc3VmZmljZXMgdG8gZGlyZWN0bHkgdmlldyB0aGUgc2VwYXJhdGUgY291bnRz
LiBIb3dldmVyLCBmb3Igbm9ybWFsCisgKiBhcHBsaWNhdGlvbnMgdGhhdCBkb24ndCBoYXZlIGh1
Z2UgcGFnZSByZWZlcmVuY2UgY291bnRzLCB0aGlzIHdvbid0IGJlIGFuCisgKiBpc3N1ZS4KKyAq
CisgKiBMb2NraW5nOiB0aGUgbG9ja2xlc3MgYWxnb3JpdGhtIGRlc2NyaWJlZCBpbiBwYWdlX2Nh
Y2hlX2dldF9zcGVjdWxhdGl2ZSgpCisgKiBhbmQgcGFnZV9jYWNoZV9ndXBfcGluX3NwZWN1bGF0
aXZlKCkgcHJvdmlkZXMgc2FmZSBvcGVyYXRpb24gZm9yCisgKiBnZXRfdXNlcl9wYWdlcyBhbmQg
cGFnZV9ta2NsZWFuIGFuZCBvdGhlciBjYWxscyB0aGF0IHJhY2UgdG8gc2V0IHVwIHBhZ2UKKyAq
IHRhYmxlIGVudHJpZXMuCiAgKi8KLXN0YXRpYyBpbmxpbmUgdm9pZCBwdXRfdXNlcl9wYWdlKHN0
cnVjdCBwYWdlICpwYWdlKQotewotCXB1dF9wYWdlKHBhZ2UpOwotfQorI2RlZmluZSBHVVBfUElO
X0NPVU5USU5HX0JJQVMgKDFVTCA8PCAxMCkKIAordm9pZCBwdXRfdXNlcl9wYWdlKHN0cnVjdCBw
YWdlICpwYWdlKTsKIHZvaWQgcHV0X3VzZXJfcGFnZXNfZGlydHlfbG9jayhzdHJ1Y3QgcGFnZSAq
KnBhZ2VzLCB1bnNpZ25lZCBsb25nIG5wYWdlcywKIAkJCSAgICAgICBib29sIG1ha2VfZGlydHkp
OwotCiB2b2lkIHB1dF91c2VyX3BhZ2VzKHN0cnVjdCBwYWdlICoqcGFnZXMsIHVuc2lnbmVkIGxv
bmcgbnBhZ2VzKTsKIAorLyoqCisgKiBwYWdlX2RtYV9waW5uZWQoKSAtIHJlcG9ydCBpZiBhIHBh
Z2UgaXMgcGlubmVkIGZvciBETUEuCisgKgorICogVGhpcyBmdW5jdGlvbiBjaGVja3MgaWYgYSBw
YWdlIGhhcyBiZWVuIHBpbm5lZCB2aWEgYSBjYWxsIHRvCisgKiBwaW5fdXNlcl9wYWdlcyooKS4K
KyAqCisgKiBUaGUgcmV0dXJuIHZhbHVlIGlzIHBhcnRpYWxseSBmdXp6eTogZmFsc2UgaXMgbm90
IGZ1enp5LCBiZWNhdXNlIGl0IG1lYW5zCisgKiAiZGVmaW5pdGVseSBub3QgcGlubmVkIGZvciBE
TUEiLCBidXQgdHJ1ZSBtZWFucyAicHJvYmFibHkgcGlubmVkIGZvciBETUEsIGJ1dAorICogcG9z
c2libHkgYSBmYWxzZSBwb3NpdGl2ZSBkdWUgdG8gaGF2aW5nIGF0IGxlYXN0IEdVUF9QSU5fQ09V
TlRJTkdfQklBUyB3b3J0aAorICogb2Ygbm9ybWFsIHBhZ2UgcmVmZXJlbmNlcyIuCisgKgorICog
RmFsc2UgcG9zaXRpdmVzIGFyZSBPSywgYmVjYXVzZTogYSkgaXQncyB1bmxpa2VseSBmb3IgYSBw
YWdlIHRvIGdldCB0aGF0IG1hbnkKKyAqIHJlZmNvdW50cywgYW5kIGIpIGFsbCB0aGUgY2FsbGVy
cyBvZiB0aGlzIHJvdXRpbmUgYXJlIGV4cGVjdGVkIHRvIGJlIGFibGUgdG8KKyAqIGRlYWwgZ3Jh
Y2VmdWxseSB3aXRoIGEgZmFsc2UgcG9zaXRpdmUuCisgKgorICogRm9yIG1vcmUgaW5mb3JtYXRp
b24sIHBsZWFzZSBzZWUgRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuCisgKgor
ICogQHBhZ2U6CXBvaW50ZXIgdG8gcGFnZSB0byBiZSBxdWVyaWVkLgorICogQFJldHVybjoJVHJ1
ZSwgaWYgaXQgaXMgbGlrZWx5IHRoYXQgdGhlIHBhZ2UgaGFzIGJlZW4gImRtYS1waW5uZWQiLgor
ICoJCUZhbHNlLCBpZiB0aGUgcGFnZSBpcyBkZWZpbml0ZWx5IG5vdCBkbWEtcGlubmVkLgorICov
CitzdGF0aWMgaW5saW5lIGJvb2wgcGFnZV9kbWFfcGlubmVkKHN0cnVjdCBwYWdlICpwYWdlKQor
eworCXJldHVybiAocGFnZV9yZWZfY291bnQoY29tcG91bmRfaGVhZChwYWdlKSkpID49IEdVUF9Q
SU5fQ09VTlRJTkdfQklBUzsKK30KKwogI2lmIGRlZmluZWQoQ09ORklHX1NQQVJTRU1FTSkgJiYg
IWRlZmluZWQoQ09ORklHX1NQQVJTRU1FTV9WTUVNTUFQKQogI2RlZmluZSBTRUNUSU9OX0lOX1BB
R0VfRkxBR1MKICNlbmRpZgpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9tbXpvbmUuaCBiL2lu
Y2x1ZGUvbGludXgvbW16b25lLmgKaW5kZXggYmRhMjAyODI3NDZiLi4wNDg1Y2JhMzhkMjMgMTAw
NjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvbW16b25lLmgKKysrIGIvaW5jbHVkZS9saW51eC9tbXpv
bmUuaApAQCAtMjQ0LDYgKzI0NCw4IEBAIGVudW0gbm9kZV9zdGF0X2l0ZW0gewogCU5SX0RJUlRJ
RUQsCQkvKiBwYWdlIGRpcnR5aW5ncyBzaW5jZSBib290dXAgKi8KIAlOUl9XUklUVEVOLAkJLyog
cGFnZSB3cml0aW5ncyBzaW5jZSBib290dXAgKi8KIAlOUl9LRVJORUxfTUlTQ19SRUNMQUlNQUJM
RSwJLyogcmVjbGFpbWFibGUgbm9uLXNsYWIga2VybmVsIHBhZ2VzICovCisJTlJfRk9MTF9QSU5f
UkVRVUVTVEVELAkvKiB2aWE6IHBpbl91c2VyX3BhZ2UoKSwgZ3VwIGZsYWc6IEZPTExfUElOICov
CisJTlJfRk9MTF9QSU5fUkVUVVJORUQsCS8qIHBhZ2VzIHJldHVybmVkIHZpYSBwdXRfdXNlcl9w
YWdlKCkgKi8KIAlOUl9WTV9OT0RFX1NUQVRfSVRFTVMKIH07CiAKZGlmZiAtLWdpdCBhL2luY2x1
ZGUvbGludXgvcGFnZV9yZWYuaCBiL2luY2x1ZGUvbGludXgvcGFnZV9yZWYuaAppbmRleCAxNGQx
NGJlYjFmN2YuLmI5Y2JlNTUzZDFlNyAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9wYWdlX3Jl
Zi5oCisrKyBiL2luY2x1ZGUvbGludXgvcGFnZV9yZWYuaApAQCAtMTAyLDYgKzEwMiwxNiBAQCBz
dGF0aWMgaW5saW5lIHZvaWQgcGFnZV9yZWZfc3ViKHN0cnVjdCBwYWdlICpwYWdlLCBpbnQgbnIp
CiAJCV9fcGFnZV9yZWZfbW9kKHBhZ2UsIC1ucik7CiB9CiAKK3N0YXRpYyBpbmxpbmUgaW50IHBh
Z2VfcmVmX3N1Yl9yZXR1cm4oc3RydWN0IHBhZ2UgKnBhZ2UsIGludCBucikKK3sKKwlpbnQgcmV0
ID0gYXRvbWljX3N1Yl9yZXR1cm4obnIsICZwYWdlLT5fcmVmY291bnQpOworCisJaWYgKHBhZ2Vf
cmVmX3RyYWNlcG9pbnRfYWN0aXZlKF9fdHJhY2Vwb2ludF9wYWdlX3JlZl9tb2QpKQorCQlfX3Bh
Z2VfcmVmX21vZChwYWdlLCAtbnIpOworCisJcmV0dXJuIHJldDsKK30KKwogc3RhdGljIGlubGlu
ZSB2b2lkIHBhZ2VfcmVmX2luYyhzdHJ1Y3QgcGFnZSAqcGFnZSkKIHsKIAlhdG9taWNfaW5jKCZw
YWdlLT5fcmVmY291bnQpOwpkaWZmIC0tZ2l0IGEvbW0vZ3VwLmMgYi9tbS9ndXAuYwppbmRleCA4
N2MyOGQ5NGVkMzcuLjc4M2NjNWYyM2M3OSAxMDA2NDQKLS0tIGEvbW0vZ3VwLmMKKysrIGIvbW0v
Z3VwLmMKQEAgLTUxLDYgKzUxLDkzIEBAIHN0YXRpYyBpbmxpbmUgc3RydWN0IHBhZ2UgKnRyeV9n
ZXRfY29tcG91bmRfaGVhZChzdHJ1Y3QgcGFnZSAqcGFnZSwgaW50IHJlZnMpCiAJcmV0dXJuIGhl
YWQ7CiB9CiAKKyNpZmRlZiBDT05GSUdfREVCVUdfVk0KK3N0YXRpYyBpbmxpbmUgdm9pZCBfX3Vw
ZGF0ZV9wcm9jX3Ztc3RhdChzdHJ1Y3QgcGFnZSAqcGFnZSwKKwkJCQkJZW51bSBub2RlX3N0YXRf
aXRlbSBpdGVtLCBpbnQgY291bnQpCit7CisJbW9kX25vZGVfcGFnZV9zdGF0ZShwYWdlX3BnZGF0
KHBhZ2UpLCBpdGVtLCBjb3VudCk7Cit9CisjZWxzZQorc3RhdGljIGlubGluZSB2b2lkIF9fdXBk
YXRlX3Byb2Nfdm1zdGF0KHN0cnVjdCBwYWdlICpwYWdlLAorCQkJCQllbnVtIG5vZGVfc3RhdF9p
dGVtIGl0ZW0sIGludCBjb3VudCkKK3sKK30KKyNlbmRpZgorCisvKioKKyAqIHVzZXJfcGFnZV9y
ZWZfaW5jKCkgLSBtYXJrIGEgcGFnZSBhcyBiZWluZyB1c2VkIGJ5IGdldF91c2VyX3BhZ2VzKEZP
TExfUElOKS4KKyAqCisgKiBAcGFnZToJcG9pbnRlciB0byBwYWdlIHRvIGJlIG1hcmtlZAorICog
QFJldHVybjoJdHJ1ZSBmb3Igc3VjY2VzcywgZmFsc2UgZm9yIGZhaWx1cmUKKyAqLworX19tdXN0
X2NoZWNrIGJvb2wgdXNlcl9wYWdlX3JlZl9pbmMoc3RydWN0IHBhZ2UgKnBhZ2UpCit7CisJcGFn
ZSA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwYWdlLCBHVVBfUElOX0NPVU5USU5HX0JJQVMpOwor
CWlmICghcGFnZSkKKwkJcmV0dXJuIGZhbHNlOworCisJX191cGRhdGVfcHJvY192bXN0YXQocGFn
ZSwgTlJfRk9MTF9QSU5fUkVRVUVTVEVELCAxKTsKKwlyZXR1cm4gdHJ1ZTsKK30KKworI2lmZGVm
IENPTkZJR19ERVZfUEFHRU1BUF9PUFMKK3N0YXRpYyBib29sIF9fcHV0X2Rldm1hcF9tYW5hZ2Vk
X3VzZXJfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKK3sKKwlib29sIGlzX2Rldm1hcCA9IHBhZ2Vf
aXNfZGV2bWFwX21hbmFnZWQocGFnZSk7CisKKwlpZiAoaXNfZGV2bWFwKSB7CisJCWludCBjb3Vu
dCA9IHBhZ2VfcmVmX3N1Yl9yZXR1cm4ocGFnZSwgR1VQX1BJTl9DT1VOVElOR19CSUFTKTsKKwor
CQlfX3VwZGF0ZV9wcm9jX3Ztc3RhdChwYWdlLCBOUl9GT0xMX1BJTl9SRVRVUk5FRCwgMSk7CisJ
CS8qCisJCSAqIGRldm1hcCBwYWdlIHJlZmNvdW50cyBhcmUgMS1iYXNlZCwgcmF0aGVyIHRoYW4g
MC1iYXNlZDogaWYKKwkJICogcmVmY291bnQgaXMgMSwgdGhlbiB0aGUgcGFnZSBpcyBmcmVlIGFu
ZCB0aGUgcmVmY291bnQgaXMKKwkJICogc3RhYmxlIGJlY2F1c2Ugbm9ib2R5IGhvbGRzIGEgcmVm
ZXJlbmNlIG9uIHRoZSBwYWdlLgorCQkgKi8KKwkJaWYgKGNvdW50ID09IDEpCisJCQlmcmVlX2Rl
dm1hcF9tYW5hZ2VkX3BhZ2UocGFnZSk7CisJCWVsc2UgaWYgKCFjb3VudCkKKwkJCV9fcHV0X3Bh
Z2UocGFnZSk7CisJfQorCisJcmV0dXJuIGlzX2Rldm1hcDsKK30KKyNlbHNlCitzdGF0aWMgYm9v
bCBfX3B1dF9kZXZtYXBfbWFuYWdlZF91c2VyX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCit7CisJ
cmV0dXJuIGZhbHNlOworfQorI2VuZGlmIC8qIENPTkZJR19ERVZfUEFHRU1BUF9PUFMgKi8KKwor
LyoqCisgKiBwdXRfdXNlcl9wYWdlKCkgLSByZWxlYXNlIGEgZG1hLXBpbm5lZCBwYWdlCisgKiBA
cGFnZTogICAgICAgICAgICBwb2ludGVyIHRvIHBhZ2UgdG8gYmUgcmVsZWFzZWQKKyAqCisgKiBQ
YWdlcyB0aGF0IHdlcmUgcGlubmVkIHZpYSBwaW5fdXNlcl9wYWdlcyooKSBtdXN0IGJlIHJlbGVh
c2VkIHZpYSBlaXRoZXIKKyAqIHB1dF91c2VyX3BhZ2UoKSwgb3Igb25lIG9mIHRoZSBwdXRfdXNl
cl9wYWdlcyooKSByb3V0aW5lcy4gVGhpcyBpcyBzbyB0aGF0CisgKiBzdWNoIHBhZ2VzIGNhbiBi
ZSBzZXBhcmF0ZWx5IHRyYWNrZWQgYW5kIHVuaXF1ZWx5IGhhbmRsZWQuIEluIHBhcnRpY3VsYXIs
CisgKiBpbnRlcmFjdGlvbnMgd2l0aCBSRE1BIGFuZCBmaWxlc3lzdGVtcyBuZWVkIHNwZWNpYWwg
aGFuZGxpbmcuCisgKi8KK3ZvaWQgcHV0X3VzZXJfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKK3sK
KwlwYWdlID0gY29tcG91bmRfaGVhZChwYWdlKTsKKworCS8qCisJICogRm9yIGRldm1hcCBtYW5h
Z2VkIHBhZ2VzIHdlIG5lZWQgdG8gY2F0Y2ggcmVmY291bnQgdHJhbnNpdGlvbiBmcm9tCisJICog
R1VQX1BJTl9DT1VOVElOR19CSUFTIHRvIDEsIHdoZW4gcmVmY291bnQgcmVhY2ggb25lIGl0IG1l
YW5zIHRoZQorCSAqIHBhZ2UgaXMgZnJlZSBhbmQgd2UgbmVlZCB0byBpbmZvcm0gdGhlIGRldmlj
ZSBkcml2ZXIgdGhyb3VnaAorCSAqIGNhbGxiYWNrLiBTZWUgaW5jbHVkZS9saW51eC9tZW1yZW1h
cC5oIGFuZCBITU0gZm9yIGRldGFpbHMuCisJICovCisJaWYgKF9fcHV0X2Rldm1hcF9tYW5hZ2Vk
X3VzZXJfcGFnZShwYWdlKSkKKwkJcmV0dXJuOworCisJaWYgKHBhZ2VfcmVmX3N1Yl9hbmRfdGVz
dChwYWdlLCBHVVBfUElOX0NPVU5USU5HX0JJQVMpKQorCQlfX3B1dF9wYWdlKHBhZ2UpOworCisJ
X191cGRhdGVfcHJvY192bXN0YXQocGFnZSwgTlJfRk9MTF9QSU5fUkVUVVJORUQsIDEpOworfQor
RVhQT1JUX1NZTUJPTChwdXRfdXNlcl9wYWdlKTsKKwogLyoqCiAgKiBwdXRfdXNlcl9wYWdlc19k
aXJ0eV9sb2NrKCkgLSByZWxlYXNlIGFuZCBvcHRpb25hbGx5IGRpcnR5IGd1cC1waW5uZWQgcGFn
ZXMKICAqIEBwYWdlczogIGFycmF5IG9mIHBhZ2VzIHRvIGJlIG1heWJlIG1hcmtlZCBkaXJ0eSwg
YW5kIGRlZmluaXRlbHkgcmVsZWFzZWQuCkBAIC0yMzcsMTAgKzMyNCwxMSBAQCBzdGF0aWMgc3Ry
dWN0IHBhZ2UgKmZvbGxvd19wYWdlX3B0ZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIAl9
CiAKIAlwYWdlID0gdm1fbm9ybWFsX3BhZ2Uodm1hLCBhZGRyZXNzLCBwdGUpOwotCWlmICghcGFn
ZSAmJiBwdGVfZGV2bWFwKHB0ZSkgJiYgKGZsYWdzICYgRk9MTF9HRVQpKSB7CisJaWYgKCFwYWdl
ICYmIHB0ZV9kZXZtYXAocHRlKSAmJiAoZmxhZ3MgJiAoRk9MTF9HRVQgfCBGT0xMX1BJTikpKSB7
CiAJCS8qCi0JCSAqIE9ubHkgcmV0dXJuIGRldmljZSBtYXBwaW5nIHBhZ2VzIGluIHRoZSBGT0xM
X0dFVCBjYXNlIHNpbmNlCi0JCSAqIHRoZXkgYXJlIG9ubHkgdmFsaWQgd2hpbGUgaG9sZGluZyB0
aGUgcGdtYXAgcmVmZXJlbmNlLgorCQkgKiBPbmx5IHJldHVybiBkZXZpY2UgbWFwcGluZyBwYWdl
cyBpbiB0aGUgRk9MTF9HRVQgb3IgRk9MTF9QSU4KKwkJICogY2FzZSBzaW5jZSB0aGV5IGFyZSBv
bmx5IHZhbGlkIHdoaWxlIGhvbGRpbmcgdGhlIHBnbWFwCisJCSAqIHJlZmVyZW5jZS4KIAkJICov
CiAJCSpwZ21hcCA9IGdldF9kZXZfcGFnZW1hcChwdGVfcGZuKHB0ZSksICpwZ21hcCk7CiAJCWlm
ICgqcGdtYXApCkBAIC0yODMsNiArMzcxLDExIEBAIHN0YXRpYyBzdHJ1Y3QgcGFnZSAqZm9sbG93
X3BhZ2VfcHRlKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogCQkJcGFnZSA9IEVSUl9QVFIo
LUVOT01FTSk7CiAJCQlnb3RvIG91dDsKIAkJfQorCX0gZWxzZSBpZiAoZmxhZ3MgJiBGT0xMX1BJ
TikgeworCQlpZiAodW5saWtlbHkoIXVzZXJfcGFnZV9yZWZfaW5jKHBhZ2UpKSkgeworCQkJcGFn
ZSA9IEVSUl9QVFIoLUVOT01FTSk7CisJCQlnb3RvIG91dDsKKwkJfQogCX0KIAlpZiAoZmxhZ3Mg
JiBGT0xMX1RPVUNIKSB7CiAJCWlmICgoZmxhZ3MgJiBGT0xMX1dSSVRFKSAmJgpAQCAtNTQ0LDgg
KzYzNyw4IEBAIHN0YXRpYyBzdHJ1Y3QgcGFnZSAqZm9sbG93X3BhZ2VfbWFzayhzdHJ1Y3Qgdm1f
YXJlYV9zdHJ1Y3QgKnZtYSwKIAkvKiBtYWtlIHRoaXMgaGFuZGxlIGh1Z2VwZCAqLwogCXBhZ2Ug
PSBmb2xsb3dfaHVnZV9hZGRyKG1tLCBhZGRyZXNzLCBmbGFncyAmIEZPTExfV1JJVEUpOwogCWlm
ICghSVNfRVJSKHBhZ2UpKSB7Ci0JCUJVR19PTihmbGFncyAmIEZPTExfR0VUKTsKLQkJcmV0dXJu
IHBhZ2U7CisJCVdBUk5fT05fT05DRShmbGFncyAmIChGT0xMX0dFVCB8IEZPTExfUElOKSk7CisJ
CXJldHVybiBOVUxMOwogCX0KIAogCXBnZCA9IHBnZF9vZmZzZXQobW0sIGFkZHJlc3MpOwpAQCAt
MTEyNSw2ICsxMjE4LDM2IEBAIHN0YXRpYyBfX2Fsd2F5c19pbmxpbmUgbG9uZyBfX2dldF91c2Vy
X3BhZ2VzX2xvY2tlZChzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRzaywKIAlyZXR1cm4gcGFnZXNfZG9u
ZTsKIH0KIAorc3RhdGljIGxvbmcgX19nZXRfdXNlcl9wYWdlc19yZW1vdGUoc3RydWN0IHRhc2tf
c3RydWN0ICp0c2ssCisJCQkJICAgIHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAorCQkJCSAgICB1bnNp
Z25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAorCQkJCSAgICB1bnNpZ25l
ZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkJCSAgICBzdHJ1Y3Qgdm1f
YXJlYV9zdHJ1Y3QgKip2bWFzLCBpbnQgKmxvY2tlZCkKK3sKKwkvKgorCSAqIFBhcnRzIG9mIEZP
TExfTE9OR1RFUk0gYmVoYXZpb3IgYXJlIGluY29tcGF0aWJsZSB3aXRoCisJICogRkFVTFRfRkxB
R19BTExPV19SRVRSWSBiZWNhdXNlIG9mIHRoZSBGUyBEQVggY2hlY2sgcmVxdWlyZW1lbnQgb24K
KwkgKiB2bWFzLiBIb3dldmVyLCB0aGlzIG9ubHkgY29tZXMgdXAgaWYgbG9ja2VkIGlzIHNldCwg
YW5kIHRoZXJlIGFyZQorCSAqIGNhbGxlcnMgdGhhdCBkbyByZXF1ZXN0IEZPTExfTE9OR1RFUk0s
IGJ1dCBkbyBub3Qgc2V0IGxvY2tlZC4gU28sCisJICogYWxsb3cgd2hhdCB3ZSBjYW4uCisJICov
CisJaWYgKGd1cF9mbGFncyAmIEZPTExfTE9OR1RFUk0pIHsKKwkJaWYgKFdBUk5fT05fT05DRShs
b2NrZWQpKQorCQkJcmV0dXJuIC1FSU5WQUw7CisJCS8qCisJCSAqIFRoaXMgd2lsbCBjaGVjayB0
aGUgdm1hcyAoZXZlbiBpZiBvdXIgdm1hcyBhcmcgaXMgTlVMTCkKKwkJICogYW5kIHJldHVybiAt
RU5PVFNVUFAgaWYgREFYIGlzbid0IGFsbG93ZWQgaW4gdGhpcyBjYXNlOgorCQkgKi8KKwkJcmV0
dXJuIF9fZ3VwX2xvbmd0ZXJtX2xvY2tlZCh0c2ssIG1tLCBzdGFydCwgbnJfcGFnZXMsIHBhZ2Vz
LAorCQkJCQkgICAgIHZtYXMsIGd1cF9mbGFncyB8IEZPTExfVE9VQ0ggfAorCQkJCQkgICAgIEZP
TExfUkVNT1RFKTsKKwl9CisKKwlyZXR1cm4gX19nZXRfdXNlcl9wYWdlc19sb2NrZWQodHNrLCBt
bSwgc3RhcnQsIG5yX3BhZ2VzLCBwYWdlcywgdm1hcywKKwkJCQkgICAgICAgbG9ja2VkLAorCQkJ
CSAgICAgICBndXBfZmxhZ3MgfCBGT0xMX1RPVUNIIHwgRk9MTF9SRU1PVEUpOworfQorCiAvKgog
ICogZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKCkgLSBwaW4gdXNlciBwYWdlcyBpbiBtZW1vcnkKICAq
IEB0c2s6CXRoZSB0YXNrX3N0cnVjdCB0byB1c2UgZm9yIHBhZ2UgZmF1bHQgYWNjb3VudGluZywg
b3IKQEAgLTExOTMsMjggKzEzMTYsOCBAQCBsb25nIGdldF91c2VyX3BhZ2VzX3JlbW90ZShzdHJ1
Y3QgdGFza19zdHJ1Y3QgKnRzaywgc3RydWN0IG1tX3N0cnVjdCAqbW0sCiAJaWYgKFdBUk5fT05f
T05DRShndXBfZmxhZ3MgJiBGT0xMX1BJTikpCiAJCXJldHVybiAtRUlOVkFMOwogCi0JLyoKLQkg
KiBQYXJ0cyBvZiBGT0xMX0xPTkdURVJNIGJlaGF2aW9yIGFyZSBpbmNvbXBhdGlibGUgd2l0aAot
CSAqIEZBVUxUX0ZMQUdfQUxMT1dfUkVUUlkgYmVjYXVzZSBvZiB0aGUgRlMgREFYIGNoZWNrIHJl
cXVpcmVtZW50IG9uCi0JICogdm1hcy4gSG93ZXZlciwgdGhpcyBvbmx5IGNvbWVzIHVwIGlmIGxv
Y2tlZCBpcyBzZXQsIGFuZCB0aGVyZSBhcmUKLQkgKiBjYWxsZXJzIHRoYXQgZG8gcmVxdWVzdCBG
T0xMX0xPTkdURVJNLCBidXQgZG8gbm90IHNldCBsb2NrZWQuIFNvLAotCSAqIGFsbG93IHdoYXQg
d2UgY2FuLgotCSAqLwotCWlmIChndXBfZmxhZ3MgJiBGT0xMX0xPTkdURVJNKSB7Ci0JCWlmIChX
QVJOX09OX09OQ0UobG9ja2VkKSkKLQkJCXJldHVybiAtRUlOVkFMOwotCQkvKgotCQkgKiBUaGlz
IHdpbGwgY2hlY2sgdGhlIHZtYXMgKGV2ZW4gaWYgb3VyIHZtYXMgYXJnIGlzIE5VTEwpCi0JCSAq
IGFuZCByZXR1cm4gLUVOT1RTVVBQIGlmIERBWCBpc24ndCBhbGxvd2VkIGluIHRoaXMgY2FzZToK
LQkJICovCi0JCXJldHVybiBfX2d1cF9sb25ndGVybV9sb2NrZWQodHNrLCBtbSwgc3RhcnQsIG5y
X3BhZ2VzLCBwYWdlcywKLQkJCQkJICAgICB2bWFzLCBndXBfZmxhZ3MgfCBGT0xMX1RPVUNIIHwK
LQkJCQkJICAgICBGT0xMX1JFTU9URSk7Ci0JfQotCi0JcmV0dXJuIF9fZ2V0X3VzZXJfcGFnZXNf
bG9ja2VkKHRzaywgbW0sIHN0YXJ0LCBucl9wYWdlcywgcGFnZXMsIHZtYXMsCi0JCQkJICAgICAg
IGxvY2tlZCwKLQkJCQkgICAgICAgZ3VwX2ZsYWdzIHwgRk9MTF9UT1VDSCB8IEZPTExfUkVNT1RF
KTsKKwlyZXR1cm4gX19nZXRfdXNlcl9wYWdlc19yZW1vdGUodHNrLCBtbSwgc3RhcnQsIG5yX3Bh
Z2VzLCBndXBfZmxhZ3MsCisJCQkJICAgICAgIHBhZ2VzLCB2bWFzLCBsb2NrZWQpOwogfQogRVhQ
T1JUX1NZTUJPTChnZXRfdXNlcl9wYWdlc19yZW1vdGUpOwogCkBAIC0xODQyLDEzICsxOTQ1LDE3
IEBAIHN0YXRpYyBpbmxpbmUgcHRlX3QgZ3VwX2dldF9wdGUocHRlX3QgKnB0ZXApCiAjZW5kaWYg
LyogQ09ORklHX0dVUF9HRVRfUFRFX0xPV19ISUdIICovCiAKIHN0YXRpYyB2b2lkIF9fbWF5YmVf
dW51c2VkIHVuZG9fZGV2X3BhZ2VtYXAoaW50ICpuciwgaW50IG5yX3N0YXJ0LAorCQkJCQkgICAg
dW5zaWduZWQgaW50IGZsYWdzLAogCQkJCQkgICAgc3RydWN0IHBhZ2UgKipwYWdlcykKIHsKIAl3
aGlsZSAoKCpucikgLSBucl9zdGFydCkgewogCQlzdHJ1Y3QgcGFnZSAqcGFnZSA9IHBhZ2VzWy0t
KCpucildOwogCiAJCUNsZWFyUGFnZVJlZmVyZW5jZWQocGFnZSk7Ci0JCXB1dF9wYWdlKHBhZ2Up
OworCQlpZiAoZmxhZ3MgJiBGT0xMX1BJTikKKwkJCXB1dF91c2VyX3BhZ2UocGFnZSk7CisJCWVs
c2UKKwkJCXB1dF9wYWdlKHBhZ2UpOwogCX0KIH0KIApAQCAtMTg4MSw3ICsxOTg4LDcgQEAgc3Rh
dGljIGludCBndXBfcHRlX3JhbmdlKHBtZF90IHBtZCwgdW5zaWduZWQgbG9uZyBhZGRyLCB1bnNp
Z25lZCBsb25nIGVuZCwKIAogCQkJcGdtYXAgPSBnZXRfZGV2X3BhZ2VtYXAocHRlX3BmbihwdGUp
LCBwZ21hcCk7CiAJCQlpZiAodW5saWtlbHkoIXBnbWFwKSkgewotCQkJCXVuZG9fZGV2X3BhZ2Vt
YXAobnIsIG5yX3N0YXJ0LCBwYWdlcyk7CisJCQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3Rh
cnQsIGZsYWdzLCBwYWdlcyk7CiAJCQkJZ290byBwdGVfdW5tYXA7CiAJCQl9CiAJCX0gZWxzZSBp
ZiAocHRlX3NwZWNpYWwocHRlKSkKQEAgLTE4OTAsOSArMTk5NywxNSBAQCBzdGF0aWMgaW50IGd1
cF9wdGVfcmFuZ2UocG1kX3QgcG1kLCB1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcg
ZW5kLAogCQlWTV9CVUdfT04oIXBmbl92YWxpZChwdGVfcGZuKHB0ZSkpKTsKIAkJcGFnZSA9IHB0
ZV9wYWdlKHB0ZSk7CiAKLQkJaGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwYWdlLCAxKTsK
LQkJaWYgKCFoZWFkKQotCQkJZ290byBwdGVfdW5tYXA7CisJCWlmIChmbGFncyAmIEZPTExfUElO
KSB7CisJCQloZWFkID0gcGFnZTsKKwkJCWlmICh1bmxpa2VseSghdXNlcl9wYWdlX3JlZl9pbmMo
aGVhZCkpKQorCQkJCWdvdG8gcHRlX3VubWFwOworCQl9IGVsc2UgeworCQkJaGVhZCA9IHRyeV9n
ZXRfY29tcG91bmRfaGVhZChwYWdlLCAxKTsKKwkJCWlmICghaGVhZCkKKwkJCQlnb3RvIHB0ZV91
bm1hcDsKKwkJfQogCiAJCWlmICh1bmxpa2VseShwdGVfdmFsKHB0ZSkgIT0gcHRlX3ZhbCgqcHRl
cCkpKSB7CiAJCQlwdXRfcGFnZShoZWFkKTsKQEAgLTE5NDYsMTIgKzIwNTksMjAgQEAgc3RhdGlj
IGludCBfX2d1cF9kZXZpY2VfaHVnZSh1bnNpZ25lZCBsb25nIHBmbiwgdW5zaWduZWQgbG9uZyBh
ZGRyLAogCiAJCXBnbWFwID0gZ2V0X2Rldl9wYWdlbWFwKHBmbiwgcGdtYXApOwogCQlpZiAodW5s
aWtlbHkoIXBnbWFwKSkgewotCQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIHBhZ2Vz
KTsKKwkJCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5yX3N0YXJ0LCBmbGFncywgcGFnZXMpOwogCQkJ
cmV0dXJuIDA7CiAJCX0KIAkJU2V0UGFnZVJlZmVyZW5jZWQocGFnZSk7CiAJCXBhZ2VzWypucl0g
PSBwYWdlOwotCQlnZXRfcGFnZShwYWdlKTsKKworCQlpZiAoZmxhZ3MgJiBGT0xMX1BJTikgewor
CQkJaWYgKHVubGlrZWx5KCF1c2VyX3BhZ2VfcmVmX2luYyhwYWdlKSkpIHsKKwkJCQl1bmRvX2Rl
dl9wYWdlbWFwKG5yLCBucl9zdGFydCwgZmxhZ3MsIHBhZ2VzKTsKKwkJCQlyZXR1cm4gMDsKKwkJ
CX0KKwkJfSBlbHNlCisJCQlnZXRfcGFnZShwYWdlKTsKKwogCQkoKm5yKSsrOwogCQlwZm4rKzsK
IAl9IHdoaWxlIChhZGRyICs9IFBBR0VfU0laRSwgYWRkciAhPSBlbmQpOwpAQCAtMTk3Myw3ICsy
MDk0LDcgQEAgc3RhdGljIGludCBfX2d1cF9kZXZpY2VfaHVnZV9wbWQocG1kX3Qgb3JpZywgcG1k
X3QgKnBtZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkJcmV0dXJuIDA7CiAKIAlpZiAodW5saWtl
bHkocG1kX3ZhbChvcmlnKSAhPSBwbWRfdmFsKCpwbWRwKSkpIHsKLQkJdW5kb19kZXZfcGFnZW1h
cChuciwgbnJfc3RhcnQsIHBhZ2VzKTsKKwkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQs
IGZsYWdzLCBwYWdlcyk7CiAJCXJldHVybiAwOwogCX0KIAlyZXR1cm4gMTsKQEAgLTE5OTEsNyAr
MjExMiw3IEBAIHN0YXRpYyBpbnQgX19ndXBfZGV2aWNlX2h1Z2VfcHVkKHB1ZF90IG9yaWcsIHB1
ZF90ICpwdWRwLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJCXJldHVybiAwOwogCiAJaWYgKHVubGlr
ZWx5KHB1ZF92YWwob3JpZykgIT0gcHVkX3ZhbCgqcHVkcCkpKSB7Ci0JCXVuZG9fZGV2X3BhZ2Vt
YXAobnIsIG5yX3N0YXJ0LCBwYWdlcyk7CisJCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5yX3N0YXJ0
LCBmbGFncywgcGFnZXMpOwogCQlyZXR1cm4gMDsKIAl9CiAJcmV0dXJuIDE7CkBAIC0yMDcwLDkg
KzIxOTEsMTYgQEAgc3RhdGljIGludCBndXBfaHVnZXB0ZShwdGVfdCAqcHRlcCwgdW5zaWduZWQg
bG9uZyBzeiwgdW5zaWduZWQgbG9uZyBhZGRyLAogCXBhZ2UgPSBoZWFkICsgKChhZGRyICYgKHN6
LTEpKSA+PiBQQUdFX1NISUZUKTsKIAlyZWZzID0gX19yZWNvcmRfc3VicGFnZXMocGFnZSwgYWRk
ciwgZW5kLCBwYWdlcyArICpucik7CiAKLQloZWFkID0gdHJ5X2dldF9jb21wb3VuZF9oZWFkKGhl
YWQsIHJlZnMpOwotCWlmICghaGVhZCkKLQkJcmV0dXJuIDA7CisJaWYgKGZsYWdzICYgRk9MTF9Q
SU4pIHsKKwkJaGVhZCA9IHBhZ2U7CisJCWlmICh1bmxpa2VseSghdXNlcl9wYWdlX3JlZl9pbmMo
aGVhZCkpKQorCQkJcmV0dXJuIDA7CisJCWhlYWQgPSBwYWdlOworCX0gZWxzZSB7CisJCWhlYWQg
PSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQoaGVhZCwgcmVmcyk7CisJCWlmICghaGVhZCkKKwkJCXJl
dHVybiAwOworCX0KIAogCWlmICh1bmxpa2VseShwdGVfdmFsKHB0ZSkgIT0gcHRlX3ZhbCgqcHRl
cCkpKSB7CiAJCXB1dF9jb21wb3VuZF9oZWFkKGhlYWQsIHJlZnMpOwpAQCAtMjEzMCw5ICsyMjU4
LDE1IEBAIHN0YXRpYyBpbnQgZ3VwX2h1Z2VfcG1kKHBtZF90IG9yaWcsIHBtZF90ICpwbWRwLCB1
bnNpZ25lZCBsb25nIGFkZHIsCiAJcGFnZSA9IHBtZF9wYWdlKG9yaWcpICsgKChhZGRyICYgflBN
RF9NQVNLKSA+PiBQQUdFX1NISUZUKTsKIAlyZWZzID0gX19yZWNvcmRfc3VicGFnZXMocGFnZSwg
YWRkciwgZW5kLCBwYWdlcyArICpucik7CiAKLQloZWFkID0gdHJ5X2dldF9jb21wb3VuZF9oZWFk
KHBtZF9wYWdlKG9yaWcpLCByZWZzKTsKLQlpZiAoIWhlYWQpCi0JCXJldHVybiAwOworCWlmIChm
bGFncyAmIEZPTExfUElOKSB7CisJCWhlYWQgPSBwYWdlOworCQlpZiAodW5saWtlbHkoIXVzZXJf
cGFnZV9yZWZfaW5jKGhlYWQpKSkKKwkJCXJldHVybiAwOworCX0gZWxzZSB7CisJCWhlYWQgPSB0
cnlfZ2V0X2NvbXBvdW5kX2hlYWQocG1kX3BhZ2Uob3JpZyksIHJlZnMpOworCQlpZiAoIWhlYWQp
CisJCQlyZXR1cm4gMDsKKwl9CiAKIAlpZiAodW5saWtlbHkocG1kX3ZhbChvcmlnKSAhPSBwbWRf
dmFsKCpwbWRwKSkpIHsKIAkJcHV0X2NvbXBvdW5kX2hlYWQoaGVhZCwgcmVmcyk7CkBAIC0yMTY0
LDkgKzIyOTgsMTUgQEAgc3RhdGljIGludCBndXBfaHVnZV9wdWQocHVkX3Qgb3JpZywgcHVkX3Qg
KnB1ZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlwYWdlID0gcHVkX3BhZ2Uob3JpZykgKyAoKGFk
ZHIgJiB+UFVEX01BU0spID4+IFBBR0VfU0hJRlQpOwogCXJlZnMgPSBfX3JlY29yZF9zdWJwYWdl
cyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2VzICsgKm5yKTsKIAotCWhlYWQgPSB0cnlfZ2V0X2NvbXBv
dW5kX2hlYWQocHVkX3BhZ2Uob3JpZyksIHJlZnMpOwotCWlmICghaGVhZCkKLQkJcmV0dXJuIDA7
CisJaWYgKGZsYWdzICYgRk9MTF9QSU4pIHsKKwkJaGVhZCA9IHBhZ2U7CisJCWlmICh1bmxpa2Vs
eSghdXNlcl9wYWdlX3JlZl9pbmMoaGVhZCkpKQorCQkJcmV0dXJuIDA7CisJfSBlbHNlIHsKKwkJ
aGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwdWRfcGFnZShvcmlnKSwgcmVmcyk7CisJCWlm
ICghaGVhZCkKKwkJCXJldHVybiAwOworCX0KIAogCWlmICh1bmxpa2VseShwdWRfdmFsKG9yaWcp
ICE9IHB1ZF92YWwoKnB1ZHApKSkgewogCQlwdXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZzKTsK
QEAgLTIxOTMsOSArMjMzMywxNSBAQCBzdGF0aWMgaW50IGd1cF9odWdlX3BnZChwZ2RfdCBvcmln
LCBwZ2RfdCAqcGdkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCXBhZ2UgPSBwZ2RfcGFnZShvcmln
KSArICgoYWRkciAmIH5QR0RJUl9NQVNLKSA+PiBQQUdFX1NISUZUKTsKIAlyZWZzID0gX19yZWNv
cmRfc3VicGFnZXMocGFnZSwgYWRkciwgZW5kLCBwYWdlcyArICpucik7CiAKLQloZWFkID0gdHJ5
X2dldF9jb21wb3VuZF9oZWFkKHBnZF9wYWdlKG9yaWcpLCByZWZzKTsKLQlpZiAoIWhlYWQpCi0J
CXJldHVybiAwOworCWlmIChmbGFncyAmIEZPTExfUElOKSB7CisJCWhlYWQgPSBwYWdlOworCQlp
ZiAodW5saWtlbHkoIXVzZXJfcGFnZV9yZWZfaW5jKGhlYWQpKSkKKwkJCXJldHVybiAwOworCX0g
ZWxzZSB7CisJCWhlYWQgPSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQocGdkX3BhZ2Uob3JpZyksIHJl
ZnMpOworCQlpZiAoIWhlYWQpCisJCQlyZXR1cm4gMDsKKwl9CiAKIAlpZiAodW5saWtlbHkocGdk
X3ZhbChvcmlnKSAhPSBwZ2RfdmFsKCpwZ2RwKSkpIHsKIAkJcHV0X2NvbXBvdW5kX2hlYWQoaGVh
ZCwgcmVmcyk7CkBAIC0yNDk4LDkgKzI2NDQsMTIgQEAgRVhQT1JUX1NZTUJPTF9HUEwoZ2V0X3Vz
ZXJfcGFnZXNfZmFzdCk7CiAvKioKICAqIHBpbl91c2VyX3BhZ2VzX2Zhc3QoKSAtIHBpbiB1c2Vy
IHBhZ2VzIGluIG1lbW9yeSB3aXRob3V0IHRha2luZyBsb2NrcwogICoKLSAqIEZvciBub3csIHRo
aXMgaXMgYSBwbGFjZWhvbGRlciBmdW5jdGlvbiwgdW50aWwgdmFyaW91cyBjYWxsIHNpdGVzIGFy
ZQotICogY29udmVydGVkIHRvIHVzZSB0aGUgY29ycmVjdCBnZXRfdXNlcl9wYWdlcyooKSBvciBw
aW5fdXNlcl9wYWdlcyooKSBBUEkuIFNvLAotICogdGhpcyBpcyBpZGVudGljYWwgdG8gZ2V0X3Vz
ZXJfcGFnZXNfZmFzdCgpLgorICogTmVhcmx5IHRoZSBzYW1lIGFzIGdldF91c2VyX3BhZ2VzX2Zh
c3QoKSwgZXhjZXB0IHRoYXQgRk9MTF9QSU4gaXMgc2V0LiBTZWUKKyAqIGdldF91c2VyX3BhZ2Vz
X2Zhc3QoKSBmb3IgZG9jdW1lbnRhdGlvbiBvbiB0aGUgZnVuY3Rpb24gYXJndW1lbnRzLCBiZWNh
dXNlCisgKiB0aGUgYXJndW1lbnRzIGhlcmUgYXJlIGlkZW50aWNhbC4KKyAqCisgKiBGT0xMX1BJ
TiBtZWFucyB0aGF0IHRoZSBwYWdlcyBtdXN0IGJlIHJlbGVhc2VkIHZpYSB1bnBpbl91c2VyX3Bh
Z2UoKS4gUGxlYXNlCisgKiBzZWUgRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3Qg
Zm9yIGZ1cnRoZXIgZGV0YWlscy4KICAqCiAgKiBUaGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDEg
KERJTykgaW4gRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuIEl0CiAgKiBpcyBO
T1QgaW50ZW5kZWQgZm9yIENhc2UgMiAoUkRNQTogbG9uZy10ZXJtIHBpbnMpLgpAQCAtMjUwOCwy
MSArMjY1NywyNCBAQCBFWFBPUlRfU1lNQk9MX0dQTChnZXRfdXNlcl9wYWdlc19mYXN0KTsKIGlu
dCBwaW5fdXNlcl9wYWdlc19mYXN0KHVuc2lnbmVkIGxvbmcgc3RhcnQsIGludCBucl9wYWdlcywK
IAkJCXVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMpCiB7Ci0JLyoK
LQkgKiBUaGlzIGlzIGEgcGxhY2Vob2xkZXIsIHVudGlsIHRoZSBwaW4gZnVuY3Rpb25hbGl0eSBp
cyBhY3RpdmF0ZWQuCi0JICogVW50aWwgdGhlbiwganVzdCBiZWhhdmUgbGlrZSB0aGUgY29ycmVz
cG9uZGluZyBnZXRfdXNlcl9wYWdlcyooKQotCSAqIHJvdXRpbmUuCi0JICovCi0JcmV0dXJuIGdl
dF91c2VyX3BhZ2VzX2Zhc3Qoc3RhcnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3MsIHBhZ2VzKTsKKwkv
KiBGT0xMX0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlpZiAo
V0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfR0VUKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisK
KwlndXBfZmxhZ3MgfD0gRk9MTF9QSU47CisJcmV0dXJuIGludGVybmFsX2dldF91c2VyX3BhZ2Vz
X2Zhc3Qoc3RhcnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3MsIHBhZ2VzKTsKIH0KIEVYUE9SVF9TWU1C
T0xfR1BMKHBpbl91c2VyX3BhZ2VzX2Zhc3QpOwogCiAvKioKICAqIHBpbl91c2VyX3BhZ2VzX3Jl
bW90ZSgpIC0gcGluIHBhZ2VzIG9mIGEgcmVtb3RlIHByb2Nlc3MgKHRhc2sgIT0gY3VycmVudCkK
ICAqCi0gKiBGb3Igbm93LCB0aGlzIGlzIGEgcGxhY2Vob2xkZXIgZnVuY3Rpb24sIHVudGlsIHZh
cmlvdXMgY2FsbCBzaXRlcyBhcmUKLSAqIGNvbnZlcnRlZCB0byB1c2UgdGhlIGNvcnJlY3QgZ2V0
X3VzZXJfcGFnZXMqKCkgb3IgcGluX3VzZXJfcGFnZXMqKCkgQVBJLiBTbywKLSAqIHRoaXMgaXMg
aWRlbnRpY2FsIHRvIGdldF91c2VyX3BhZ2VzX3JlbW90ZSgpLgorICogTmVhcmx5IHRoZSBzYW1l
IGFzIGdldF91c2VyX3BhZ2VzX3JlbW90ZSgpLCBleGNlcHQgdGhhdCBGT0xMX1BJTiBpcyBzZXQu
IFNlZQorICogZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKCkgZm9yIGRvY3VtZW50YXRpb24gb24gdGhl
IGZ1bmN0aW9uIGFyZ3VtZW50cywgYmVjYXVzZQorICogdGhlIGFyZ3VtZW50cyBoZXJlIGFyZSBp
ZGVudGljYWwuCisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSBy
ZWxlYXNlZCB2aWEgdW5waW5fdXNlcl9wYWdlKCkuIFBsZWFzZQorICogc2VlIERvY3VtZW50YXRp
b24vdm0vcGluX3VzZXJfcGFnZXMucnN0IGZvciBkZXRhaWxzLgogICoKICAqIFRoaXMgaXMgaW50
ZW5kZWQgZm9yIENhc2UgMSAoRElPKSBpbiBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2Vz
LnJzdC4gSXQKICAqIGlzIE5PVCBpbnRlbmRlZCBmb3IgQ2FzZSAyIChSRE1BOiBsb25nLXRlcm0g
cGlucykuCkBAIC0yNTMyLDIyICsyNjg0LDI0IEBAIGxvbmcgcGluX3VzZXJfcGFnZXNfcmVtb3Rl
KHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLCBzdHJ1Y3QgbW1fc3RydWN0ICptbSwKIAkJCSAgIHVu
c2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMsCiAJCQkgICBzdHJ1Y3Qg
dm1fYXJlYV9zdHJ1Y3QgKip2bWFzLCBpbnQgKmxvY2tlZCkKIHsKLQkvKgotCSAqIFRoaXMgaXMg
YSBwbGFjZWhvbGRlciwgdW50aWwgdGhlIHBpbiBmdW5jdGlvbmFsaXR5IGlzIGFjdGl2YXRlZC4K
LQkgKiBVbnRpbCB0aGVuLCBqdXN0IGJlaGF2ZSBsaWtlIHRoZSBjb3JyZXNwb25kaW5nIGdldF91
c2VyX3BhZ2VzKigpCi0JICogcm91dGluZS4KLQkgKi8KLQlyZXR1cm4gZ2V0X3VzZXJfcGFnZXNf
cmVtb3RlKHRzaywgbW0sIHN0YXJ0LCBucl9wYWdlcywgZ3VwX2ZsYWdzLCBwYWdlcywKLQkJCQkg
ICAgIHZtYXMsIGxvY2tlZCk7CisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1YWxs
eSBleGNsdXNpdmUuICovCisJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX0dFVCkp
CisJCXJldHVybiAtRUlOVkFMOworCisJZ3VwX2ZsYWdzIHw9IEZPTExfUElOOworCXJldHVybiBf
X2dldF91c2VyX3BhZ2VzX3JlbW90ZSh0c2ssIG1tLCBzdGFydCwgbnJfcGFnZXMsIGd1cF9mbGFn
cywKKwkJCQkgICAgICAgcGFnZXMsIHZtYXMsIGxvY2tlZCk7CiB9CiBFWFBPUlRfU1lNQk9MKHBp
bl91c2VyX3BhZ2VzX3JlbW90ZSk7CiAKIC8qKgogICogcGluX3VzZXJfcGFnZXMoKSAtIHBpbiB1
c2VyIHBhZ2VzIGluIG1lbW9yeSBmb3IgdXNlIGJ5IG90aGVyIGRldmljZXMKICAqCi0gKiBGb3Ig
bm93LCB0aGlzIGlzIGEgcGxhY2Vob2xkZXIgZnVuY3Rpb24sIHVudGlsIHZhcmlvdXMgY2FsbCBz
aXRlcyBhcmUKLSAqIGNvbnZlcnRlZCB0byB1c2UgdGhlIGNvcnJlY3QgZ2V0X3VzZXJfcGFnZXMq
KCkgb3IgcGluX3VzZXJfcGFnZXMqKCkgQVBJLiBTbywKLSAqIHRoaXMgaXMgaWRlbnRpY2FsIHRv
IGdldF91c2VyX3BhZ2VzKCkuCisgKiBOZWFybHkgdGhlIHNhbWUgYXMgZ2V0X3VzZXJfcGFnZXMo
KSwgZXhjZXB0IHRoYXQgRk9MTF9UT1VDSCBpcyBub3Qgc2V0LCBhbmQKKyAqIEZPTExfUElOIGlz
IHNldC4KKyAqCisgKiBGT0xMX1BJTiBtZWFucyB0aGF0IHRoZSBwYWdlcyBtdXN0IGJlIHJlbGVh
c2VkIHZpYSB1bnBpbl91c2VyX3BhZ2UoKS4gUGxlYXNlCisgKiBzZWUgRG9jdW1lbnRhdGlvbi92
bS9waW5fdXNlcl9wYWdlcy5yc3QgZm9yIGRldGFpbHMuCiAgKgogICogVGhpcyBpcyBpbnRlbmRl
ZCBmb3IgQ2FzZSAxIChESU8pIGluIERvY3VtZW50YXRpb24vdm0vcGluX3VzZXJfcGFnZXMucnN0
LiBJdAogICogaXMgTk9UIGludGVuZGVkIGZvciBDYXNlIDIgKFJETUE6IGxvbmctdGVybSBwaW5z
KS4KQEAgLTI1NTYsMTEgKzI3MTAsMTIgQEAgbG9uZyBwaW5fdXNlcl9wYWdlcyh1bnNpZ25lZCBs
b25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAogCQkgICAgdW5zaWduZWQgaW50IGd1
cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcywKIAkJICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVj
dCAqKnZtYXMpCiB7Ci0JLyoKLQkgKiBUaGlzIGlzIGEgcGxhY2Vob2xkZXIsIHVudGlsIHRoZSBw
aW4gZnVuY3Rpb25hbGl0eSBpcyBhY3RpdmF0ZWQuCi0JICogVW50aWwgdGhlbiwganVzdCBiZWhh
dmUgbGlrZSB0aGUgY29ycmVzcG9uZGluZyBnZXRfdXNlcl9wYWdlcyooKQotCSAqIHJvdXRpbmUu
Ci0JICovCi0JcmV0dXJuIGdldF91c2VyX3BhZ2VzKHN0YXJ0LCBucl9wYWdlcywgZ3VwX2ZsYWdz
LCBwYWdlcywgdm1hcyk7CisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1YWxseSBl
eGNsdXNpdmUuICovCisJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX0dFVCkpCisJ
CXJldHVybiAtRUlOVkFMOworCisJZ3VwX2ZsYWdzIHw9IEZPTExfUElOOworCXJldHVybiBfX2d1
cF9sb25ndGVybV9sb2NrZWQoY3VycmVudCwgY3VycmVudC0+bW0sIHN0YXJ0LCBucl9wYWdlcywK
KwkJCQkgICAgIHBhZ2VzLCB2bWFzLCBndXBfZmxhZ3MpOwogfQogRVhQT1JUX1NZTUJPTChwaW5f
dXNlcl9wYWdlcyk7CmRpZmYgLS1naXQgYS9tbS9odWdlX21lbW9yeS5jIGIvbW0vaHVnZV9tZW1v
cnkuYwppbmRleCAxM2NjOTM3ODUwMDYuLjQwMTBjMjY5ZTllNSAxMDA2NDQKLS0tIGEvbW0vaHVn
ZV9tZW1vcnkuYworKysgYi9tbS9odWdlX21lbW9yeS5jCkBAIC05NDUsNiArOTQ1LDExIEBAIHN0
cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFwX3BtZChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwg
dW5zaWduZWQgbG9uZyBhZGRyLAogCSAqLwogCVdBUk5fT05DRShmbGFncyAmIEZPTExfQ09XLCAi
bW06IEluIGZvbGxvd19kZXZtYXBfcG1kIHdpdGggRk9MTF9DT1cgc2V0Iik7CiAKKwkvKiBGT0xM
X0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9P
Tl9PTkNFKChmbGFncyAmIChGT0xMX1BJTiB8IEZPTExfR0VUKSkgPT0KKwkJCSAoRk9MTF9QSU4g
fCBGT0xMX0dFVCkpKQorCQlyZXR1cm4gTlVMTDsKKwogCWlmIChmbGFncyAmIEZPTExfV1JJVEUg
JiYgIXBtZF93cml0ZSgqcG1kKSkKIAkJcmV0dXJuIE5VTEw7CiAKQEAgLTk2MCw3ICs5NjUsNyBA
QCBzdHJ1Y3QgcGFnZSAqZm9sbG93X2Rldm1hcF9wbWQoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2
bWEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkgKiBkZXZpY2UgbWFwcGVkIHBhZ2VzIGNhbiBvbmx5
IGJlIHJldHVybmVkIGlmIHRoZQogCSAqIGNhbGxlciB3aWxsIG1hbmFnZSB0aGUgcGFnZSByZWZl
cmVuY2UgY291bnQuCiAJICovCi0JaWYgKCEoZmxhZ3MgJiBGT0xMX0dFVCkpCisJaWYgKCEoZmxh
Z3MgJiAoRk9MTF9HRVQgfCBGT0xMX1BJTikpKQogCQlyZXR1cm4gRVJSX1BUUigtRUVYSVNUKTsK
IAogCXBmbiArPSAoYWRkciAmIH5QTURfTUFTSykgPj4gUEFHRV9TSElGVDsKQEAgLTk2OCw3ICs5
NzMsMTggQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19kZXZtYXBfcG1kKHN0cnVjdCB2bV9hcmVhX3N0
cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJaWYgKCEqcGdtYXApCiAJCXJldHVybiBF
UlJfUFRSKC1FRkFVTFQpOwogCXBhZ2UgPSBwZm5fdG9fcGFnZShwZm4pOwotCWdldF9wYWdlKHBh
Z2UpOworCisJaWYgKGZsYWdzICYgRk9MTF9HRVQpCisJCWdldF9wYWdlKHBhZ2UpOworCWVsc2Ug
aWYgKGZsYWdzICYgRk9MTF9QSU4pIHsKKwkJLyoKKwkJICogdXNlcl9wYWdlX3JlZl9pbmMoKSBp
cyBub3QgYWN0dWFsbHkgZXhwZWN0ZWQgdG8gZmFpbCBoZXJlCisJCSAqIGJlY2F1c2Ugd2UgaG9s
ZCB0aGUgcG1kIGxvY2sgc28gbm8gb25lIGNhbiB1bm1hcCB0aGUgcG1kIGFuZAorCQkgKiBmcmVl
IHRoZSBwYWdlIHRoYXQgaXQgcG9pbnRzIHRvLgorCQkgKi8KKwkJaWYgKHVubGlrZWx5KCF1c2Vy
X3BhZ2VfcmVmX2luYyhwYWdlKSkpCisJCQlwYWdlID0gRVJSX1BUUigtRUZBVUxUKTsKKwl9CiAK
IAlyZXR1cm4gcGFnZTsKIH0KQEAgLTEwODgsNiArMTEwNCwxMSBAQCBzdHJ1Y3QgcGFnZSAqZm9s
bG93X2Rldm1hcF9wdWQoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcg
YWRkciwKIAlpZiAoZmxhZ3MgJiBGT0xMX1dSSVRFICYmICFwdWRfd3JpdGUoKnB1ZCkpCiAJCXJl
dHVybiBOVUxMOwogCisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1YWxseSBleGNs
dXNpdmUuICovCisJaWYgKFdBUk5fT05fT05DRSgoZmxhZ3MgJiAoRk9MTF9QSU4gfCBGT0xMX0dF
VCkpID09CisJCQkgKEZPTExfUElOIHwgRk9MTF9HRVQpKSkKKwkJcmV0dXJuIE5VTEw7CisKIAlp
ZiAocHVkX3ByZXNlbnQoKnB1ZCkgJiYgcHVkX2Rldm1hcCgqcHVkKSkKIAkJLyogcGFzcyAqLzsK
IAllbHNlCkBAIC0xMDk5LDggKzExMjAsMTAgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19kZXZtYXBf
cHVkKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJLyoK
IAkgKiBkZXZpY2UgbWFwcGVkIHBhZ2VzIGNhbiBvbmx5IGJlIHJldHVybmVkIGlmIHRoZQogCSAq
IGNhbGxlciB3aWxsIG1hbmFnZSB0aGUgcGFnZSByZWZlcmVuY2UgY291bnQuCisJICoKKwkgKiBB
dCBsZWFzdCBvbmUgb2YgRk9MTF9HRVQgfCBGT0xMX1BJTiBtdXN0IGJlIHNldCwgc28gYXNzZXJ0
IHRoYXQgaGVyZToKIAkgKi8KLQlpZiAoIShmbGFncyAmIEZPTExfR0VUKSkKKwlpZiAoIShmbGFn
cyAmIChGT0xMX0dFVCB8IEZPTExfUElOKSkpCiAJCXJldHVybiBFUlJfUFRSKC1FRVhJU1QpOwog
CiAJcGZuICs9IChhZGRyICYgflBVRF9NQVNLKSA+PiBQQUdFX1NISUZUOwpAQCAtMTEwOCw3ICsx
MTMxLDE4IEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFwX3B1ZChzdHJ1Y3Qgdm1fYXJlYV9z
dHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCWlmICghKnBnbWFwKQogCQlyZXR1cm4g
RVJSX1BUUigtRUZBVUxUKTsKIAlwYWdlID0gcGZuX3RvX3BhZ2UocGZuKTsKLQlnZXRfcGFnZShw
YWdlKTsKKworCWlmIChmbGFncyAmIEZPTExfR0VUKQorCQlnZXRfcGFnZShwYWdlKTsKKwllbHNl
IGlmIChmbGFncyAmIEZPTExfUElOKSB7CisJCS8qCisJCSAqIHVzZXJfcGFnZV9yZWZfaW5jKCkg
aXMgbm90IGFjdHVhbGx5IGV4cGVjdGVkIHRvIGZhaWwgaGVyZQorCQkgKiBiZWNhdXNlIHdlIGhv
bGQgdGhlIHB1ZCBsb2NrIHNvIG5vIG9uZSBjYW4gdW5tYXAgdGhlIHB1ZCBhbmQKKwkJICogZnJl
ZSB0aGUgcGFnZSB0aGF0IGl0IHBvaW50cyB0by4KKwkJICovCisJCWlmICh1bmxpa2VseSghdXNl
cl9wYWdlX3JlZl9pbmMocGFnZSkpKQorCQkJcGFnZSA9IEVSUl9QVFIoLUVGQVVMVCk7CisJfQog
CiAJcmV0dXJuIHBhZ2U7CiB9CkBAIC0xNTIyLDggKzE1NTYsMjAgQEAgc3RydWN0IHBhZ2UgKmZv
bGxvd190cmFuc19odWdlX3BtZChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIHNraXBfbWxv
Y2s6CiAJcGFnZSArPSAoYWRkciAmIH5IUEFHRV9QTURfTUFTSykgPj4gUEFHRV9TSElGVDsKIAlW
TV9CVUdfT05fUEFHRSghUGFnZUNvbXBvdW5kKHBhZ2UpICYmICFpc196b25lX2RldmljZV9wYWdl
KHBhZ2UpLCBwYWdlKTsKKwogCWlmIChmbGFncyAmIEZPTExfR0VUKQogCQlnZXRfcGFnZShwYWdl
KTsKKwllbHNlIGlmIChmbGFncyAmIEZPTExfUElOKSB7CisJCS8qCisJCSAqIHVzZXJfcGFnZV9y
ZWZfaW5jKCkgaXMgbm90IGFjdHVhbGx5IGV4cGVjdGVkIHRvIGZhaWwgaGVyZQorCQkgKiBiZWNh
dXNlIHdlIGhvbGQgdGhlIHBtZCBsb2NrIHNvIG5vIG9uZSBjYW4gdW5tYXAgdGhlIHBtZCBhbmQK
KwkJICogZnJlZSB0aGUgcGFnZSB0aGF0IGl0IHBvaW50cyB0by4KKwkJICovCisJCWlmICh1bmxp
a2VseSghdXNlcl9wYWdlX3JlZl9pbmMocGFnZSkpKSB7CisJCQlXQVJOX09OX09OQ0UoMSk7CisJ
CQlwYWdlID0gTlVMTDsKKwkJfQorCX0KIAogb3V0OgogCXJldHVybiBwYWdlOwpkaWZmIC0tZ2l0
IGEvbW0vaHVnZXRsYi5jIGIvbW0vaHVnZXRsYi5jCmluZGV4IGI0NWE5NTM2M2E4NC4uNWVlODBl
ZWEyNWU1IDEwMDY0NAotLS0gYS9tbS9odWdldGxiLmMKKysrIGIvbW0vaHVnZXRsYi5jCkBAIC00
NDYyLDcgKzQ0NjIsMjIgQEAgbG9uZyBmb2xsb3dfaHVnZXRsYl9wYWdlKHN0cnVjdCBtbV9zdHJ1
Y3QgKm1tLCBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIHNhbWVfcGFnZToKIAkJaWYgKHBh
Z2VzKSB7CiAJCQlwYWdlc1tpXSA9IG1lbV9tYXBfb2Zmc2V0KHBhZ2UsIHBmbl9vZmZzZXQpOwot
CQkJZ2V0X3BhZ2UocGFnZXNbaV0pOworCisJCQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKKwkJCQln
ZXRfcGFnZShwYWdlc1tpXSk7CisJCQllbHNlIGlmIChmbGFncyAmIEZPTExfUElOKSB7CisJCQkJ
LyoKKwkJCQkgKiB1c2VyX3BhZ2VfcmVmX2luYygpIGlzIG5vdCBhY3R1YWxseSBleHBlY3RlZAor
CQkJCSAqIHRvIGZhaWwgaGVyZSBiZWNhdXNlIHdlIGhvbGQgdGhlIHB0bC4KKwkJCQkgKi8KKwkJ
CQlpZiAodW5saWtlbHkoIXVzZXJfcGFnZV9yZWZfaW5jKHBhZ2VzW2ldKSkpIHsKKwkJCQkJc3Bp
bl91bmxvY2socHRsKTsKKwkJCQkJcmVtYWluZGVyID0gMDsKKwkJCQkJZXJyID0gLUVOT01FTTsK
KwkJCQkJV0FSTl9PTl9PTkNFKDEpOworCQkJCQlicmVhazsKKwkJCQl9CisJCQl9CiAJCX0KIAog
CQlpZiAodm1hcykKQEAgLTUwMjIsNiArNTAzNywxMiBAQCBmb2xsb3dfaHVnZV9wbWQoc3RydWN0
IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKIAlzdHJ1Y3QgcGFnZSAqcGFn
ZSA9IE5VTEw7CiAJc3BpbmxvY2tfdCAqcHRsOwogCXB0ZV90IHB0ZTsKKworCS8qIEZPTExfR0VU
IGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09OX09O
Q0UoKGZsYWdzICYgKEZPTExfUElOIHwgRk9MTF9HRVQpKSA9PQorCQkJIChGT0xMX1BJTiB8IEZP
TExfR0VUKSkpCisJCXJldHVybiBOVUxMOworCiByZXRyeToKIAlwdGwgPSBwbWRfbG9ja3B0ciht
bSwgcG1kKTsKIAlzcGluX2xvY2socHRsKTsKQEAgLTUwMzQsOCArNTA1NSwyMCBAQCBmb2xsb3df
aHVnZV9wbWQoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKIAlw
dGUgPSBodWdlX3B0ZXBfZ2V0KChwdGVfdCAqKXBtZCk7CiAJaWYgKHB0ZV9wcmVzZW50KHB0ZSkp
IHsKIAkJcGFnZSA9IHBtZF9wYWdlKCpwbWQpICsgKChhZGRyZXNzICYgflBNRF9NQVNLKSA+PiBQ
QUdFX1NISUZUKTsKKwogCQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKIAkJCWdldF9wYWdlKHBhZ2Up
OworCQllbHNlIGlmIChmbGFncyAmIEZPTExfUElOKSB7CisJCQkvKgorCQkJICogdXNlcl9wYWdl
X3JlZl9pbmMoKSBpcyBub3QgYWN0dWFsbHkgZXhwZWN0ZWQgdG8gZmFpbAorCQkJICogaGVyZSBi
ZWNhdXNlIHdlIGhvbGQgdGhlIHB0bC4KKwkJCSAqLworCQkJaWYgKHVubGlrZWx5KCF1c2VyX3Bh
Z2VfcmVmX2luYyhwYWdlKSkpIHsKKwkJCQlXQVJOX09OX09OQ0UoMSk7CisJCQkJcGFnZSA9IE5V
TEw7CisJCQkJZ290byBvdXQ7CisJCQl9CisJCX0KIAl9IGVsc2UgewogCQlpZiAoaXNfaHVnZXRs
Yl9lbnRyeV9taWdyYXRpb24ocHRlKSkgewogCQkJc3Bpbl91bmxvY2socHRsKTsKQEAgLTUwNTYs
NyArNTA4OSw3IEBAIHN0cnVjdCBwYWdlICogX193ZWFrCiBmb2xsb3dfaHVnZV9wdWQoc3RydWN0
IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKIAkJcHVkX3QgKnB1ZCwgaW50
IGZsYWdzKQogewotCWlmIChmbGFncyAmIEZPTExfR0VUKQorCWlmIChmbGFncyAmIChGT0xMX0dF
VCB8IEZPTExfUElOKSkKIAkJcmV0dXJuIE5VTEw7CiAKIAlyZXR1cm4gcHRlX3BhZ2UoKihwdGVf
dCAqKXB1ZCkgKyAoKGFkZHJlc3MgJiB+UFVEX01BU0spID4+IFBBR0VfU0hJRlQpOwpAQCAtNTA2
NSw3ICs1MDk4LDcgQEAgZm9sbG93X2h1Z2VfcHVkKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNp
Z25lZCBsb25nIGFkZHJlc3MsCiBzdHJ1Y3QgcGFnZSAqIF9fd2VhawogZm9sbG93X2h1Z2VfcGdk
KHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsIHBnZF90ICpwZ2Qs
IGludCBmbGFncykKIHsKLQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKKwlpZiAoZmxhZ3MgJiAoRk9M
TF9HRVQgfCBGT0xMX1BJTikpCiAJCXJldHVybiBOVUxMOwogCiAJcmV0dXJuIHB0ZV9wYWdlKCoo
cHRlX3QgKilwZ2QpICsgKChhZGRyZXNzICYgflBHRElSX01BU0spID4+IFBBR0VfU0hJRlQpOwpk
aWZmIC0tZ2l0IGEvbW0vdm1zdGF0LmMgYi9tbS92bXN0YXQuYwppbmRleCBhODIyMjA0MWJkNDQu
LmZkYWQ0MGNjZGU3YiAxMDA2NDQKLS0tIGEvbW0vdm1zdGF0LmMKKysrIGIvbW0vdm1zdGF0LmMK
QEAgLTExNjcsNiArMTE2Nyw4IEBAIGNvbnN0IGNoYXIgKiBjb25zdCB2bXN0YXRfdGV4dFtdID0g
ewogCSJucl9kaXJ0aWVkIiwKIAkibnJfd3JpdHRlbiIsCiAJIm5yX2tlcm5lbF9taXNjX3JlY2xh
aW1hYmxlIiwKKwkibnJfZm9sbF9waW5fcmVxdWVzdGVkIiwKKwkibnJfZm9sbF9waW5fcmV0dXJu
ZWQiLAogCiAJLyogZW51bSB3cml0ZWJhY2tfc3RhdF9pdGVtIGNvdW50ZXJzICovCiAJIm5yX2Rp
cnR5X3RocmVzaG9sZCIsCi0tIAoyLjI0LjAKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fCmRyaS1kZXZlbCBtYWlsaW5nIGxpc3QKZHJpLWRldmVsQGxpc3Rz
LmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xp
c3RpbmZvL2RyaS1kZXZlbA==
