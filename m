Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 6E344104B50
	for <lists+dri-devel@lfdr.de>; Thu, 21 Nov 2019 08:14:46 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 4554D6EB26;
	Thu, 21 Nov 2019 07:14:13 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from hqemgate16.nvidia.com (hqemgate16.nvidia.com [216.228.121.65])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 530876EB1B
 for <dri-devel@lists.freedesktop.org>; Thu, 21 Nov 2019 07:14:05 +0000 (UTC)
Received: from hqpgpgate101.nvidia.com (Not Verified[216.228.121.13]) by
 hqemgate16.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
 id <B5dd639360001>; Wed, 20 Nov 2019 23:13:58 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
 by hqpgpgate101.nvidia.com (PGP Universal service);
 Wed, 20 Nov 2019 23:13:57 -0800
X-PGP-Universal: processed;
 by hqpgpgate101.nvidia.com on Wed, 20 Nov 2019 23:13:57 -0800
Received: from HQMAIL109.nvidia.com (172.20.187.15) by HQMAIL111.nvidia.com
 (172.20.187.18) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Thu, 21 Nov
 2019 07:13:57 +0000
Received: from hqnvemgw03.nvidia.com (10.124.88.68) by HQMAIL109.nvidia.com
 (172.20.187.15) with Microsoft SMTP Server (TLS) id 15.0.1473.3 via Frontend
 Transport; Thu, 21 Nov 2019 07:13:56 +0000
Received: from blueforge.nvidia.com (Not Verified[10.110.48.28]) by
 hqnvemgw03.nvidia.com with Trustwave SEG (v7, 5, 8, 10121)
 id <B5dd639340008>; Wed, 20 Nov 2019 23:13:56 -0800
From: John Hubbard <jhubbard@nvidia.com>
To: Andrew Morton <akpm@linux-foundation.org>
Subject: [PATCH v7 17/24] mm/gup: track FOLL_PIN pages
Date: Wed, 20 Nov 2019 23:13:47 -0800
Message-ID: <20191121071354.456618-18-jhubbard@nvidia.com>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20191121071354.456618-1-jhubbard@nvidia.com>
References: <20191121071354.456618-1-jhubbard@nvidia.com>
MIME-Version: 1.0
X-NVConfidentiality: public
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=nvidia.com; s=n1; 
 t=1574320438; bh=/mF69U5Ee55lNMclEzShGWvimdKwuQUtkBEknX8WpR0=;
 h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
 In-Reply-To:References:MIME-Version:X-NVConfidentiality:
 Content-Type:Content-Transfer-Encoding;
 b=Sk4m7B4Kiqq/Qu/Ve+OyweWZ6ZplWOdAlLz+JFpswpkkE+ulwAZiYHr8Y//QyvLh7
 dJDhBr+IZsbdQmp/ePuQR+1JrzlpcON2HFCuuV6AjmhQEDMvbtnTACqhiy/s9g9mh7
 ywSuskVecFJPEj7YkDf0KLgWx4MF5F8vqWc94R8jBMdZ0k7LsjxU+Rp+JhZYB9itYi
 arcKQR3dv/7r3MQlhlLwCCr+OT6oUaPyV0gDYvv1RIjdGk3p4kWLROlBHlKXcE+Wux
 s+hAezzRLeYsF8d/Tz+Sn4tUx9Lmzam0WQROHmWopW9zA9Cc+ZdKuupNFH3Rv4IPRp
 HTQrFOmeiCehA==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Michal Hocko <mhocko@suse.com>, Jan Kara <jack@suse.cz>,
 kvm@vger.kernel.org, linux-doc@vger.kernel.org,
 David Airlie <airlied@linux.ie>, Dave Chinner <david@fromorbit.com>,
 dri-devel@lists.freedesktop.org, LKML <linux-kernel@vger.kernel.org>,
 linux-mm@kvack.org, Paul Mackerras <paulus@samba.org>,
 linux-kselftest@vger.kernel.org, Ira Weiny <ira.weiny@intel.com>,
 Jonathan Corbet <corbet@lwn.net>, linux-rdma@vger.kernel.org,
 Michael Ellerman <mpe@ellerman.id.au>, Christoph Hellwig <hch@infradead.org>,
 Jason Gunthorpe <jgg@ziepe.ca>, Vlastimil Babka <vbabka@suse.cz>,
 =?UTF-8?q?Bj=C3=B6rn=20T=C3=B6pel?= <bjorn.topel@intel.com>,
 linux-media@vger.kernel.org, Shuah Khan <shuah@kernel.org>,
 John Hubbard <jhubbard@nvidia.com>, linux-block@vger.kernel.org,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Al Viro <viro@zeniv.linux.org.uk>, Dan Williams <dan.j.williams@intel.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Magnus Karlsson <magnus.karlsson@intel.com>, Jens Axboe <axboe@kernel.dk>,
 netdev@vger.kernel.org, Alex Williamson <alex.williamson@redhat.com>,
 linux-fsdevel@vger.kernel.org, bpf@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org, "David S . Miller" <davem@davemloft.net>,
 Mike Kravetz <mike.kravetz@oracle.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

QWRkIHRyYWNraW5nIG9mIHBhZ2VzIHRoYXQgd2VyZSBwaW5uZWQgdmlhIEZPTExfUElOLgoKQXMg
bWVudGlvbmVkIGluIHRoZSBGT0xMX1BJTiBkb2N1bWVudGF0aW9uLCBjYWxsZXJzIHdobyBlZmZl
Y3RpdmVseSBzZXQKRk9MTF9QSU4gYXJlIHJlcXVpcmVkIHRvIHVsdGltYXRlbHkgZnJlZSBzdWNo
IHBhZ2VzIHZpYSBwdXRfdXNlcl9wYWdlKCkuClRoZSBlZmZlY3QgaXMgc2ltaWxhciB0byBGT0xM
X0dFVCwgYW5kIG1heSBiZSB0aG91Z2h0IG9mIGFzICJGT0xMX0dFVApmb3IgRElPIGFuZC9vciBS
RE1BIHVzZSIuCgpQYWdlcyB0aGF0IGhhdmUgYmVlbiBwaW5uZWQgdmlhIEZPTExfUElOIGFyZSBp
ZGVudGlmaWFibGUgdmlhIGEKbmV3IGZ1bmN0aW9uIGNhbGw6CgogICBib29sIHBhZ2VfZG1hX3Bp
bm5lZChzdHJ1Y3QgcGFnZSAqcGFnZSk7CgpXaGF0IHRvIGRvIGluIHJlc3BvbnNlIHRvIGVuY291
bnRlcmluZyBzdWNoIGEgcGFnZSwgaXMgbGVmdCB0byBsYXRlcgpwYXRjaHNldHMuIFRoZXJlIGlz
IGRpc2N1c3Npb24gYWJvdXQgdGhpcyBpbiBbMV0sIFsyXSwgYW5kIFszXS4KClRoaXMgYWxzbyBj
aGFuZ2VzIGEgQlVHX09OKCksIHRvIGEgV0FSTl9PTigpLCBpbiBmb2xsb3dfcGFnZV9tYXNrKCku
CgpbMV0gU29tZSBzbG93IHByb2dyZXNzIG9uIGdldF91c2VyX3BhZ2VzKCkgKEFwciAyLCAyMDE5
KToKICAgIGh0dHBzOi8vbHduLm5ldC9BcnRpY2xlcy83ODQ1NzQvClsyXSBETUEgYW5kIGdldF91
c2VyX3BhZ2VzKCkgKExQQzogRGVjIDEyLCAyMDE4KToKICAgIGh0dHBzOi8vbHduLm5ldC9BcnRp
Y2xlcy83NzQ0MTEvClszXSBUaGUgdHJvdWJsZSB3aXRoIGdldF91c2VyX3BhZ2VzKCkgKEFwciAz
MCwgMjAxOCk6CiAgICBodHRwczovL2x3bi5uZXQvQXJ0aWNsZXMvNzUzMDI3LwoKU3VnZ2VzdGVk
LWJ5OiBKYW4gS2FyYSA8amFja0BzdXNlLmN6PgpTdWdnZXN0ZWQtYnk6IErDqXLDtG1lIEdsaXNz
ZSA8amdsaXNzZUByZWRoYXQuY29tPgpTaWduZWQtb2ZmLWJ5OiBKb2huIEh1YmJhcmQgPGpodWJi
YXJkQG52aWRpYS5jb20+Ci0tLQogRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9waW5fdXNlcl9wYWdl
cy5yc3QgfCAgIDIgKy0KIGluY2x1ZGUvbGludXgvbW0uaCAgICAgICAgICAgICAgICAgICAgICAg
IHwgMTEzICsrKysrKystCiBpbmNsdWRlL2xpbnV4L21tem9uZS5oICAgICAgICAgICAgICAgICAg
ICB8ICAgMiArCiBpbmNsdWRlL2xpbnV4L3BhZ2VfcmVmLmggICAgICAgICAgICAgICAgICB8ICAx
MCArCiBtbS9ndXAuYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMyMyArKysr
KysrKysrKysrKysrLS0tLS0tCiBtbS9odWdlX21lbW9yeS5jICAgICAgICAgICAgICAgICAgICAg
ICAgICB8ICA0NCArKy0KIG1tL2h1Z2V0bGIuYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IHwgIDM2ICsrLQogbW0vdm1zdGF0LmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAg
IDIgKwogOCBmaWxlcyBjaGFuZ2VkLCA0MjEgaW5zZXJ0aW9ucygrKSwgMTExIGRlbGV0aW9ucygt
KQoKZGlmZiAtLWdpdCBhL0RvY3VtZW50YXRpb24vY29yZS1hcGkvcGluX3VzZXJfcGFnZXMucnN0
IGIvRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9waW5fdXNlcl9wYWdlcy5yc3QKaW5kZXggNGYyNjYz
N2E1MDA1Li5iYWEyODhhNDRhNzcgMTAwNjQ0Ci0tLSBhL0RvY3VtZW50YXRpb24vY29yZS1hcGkv
cGluX3VzZXJfcGFnZXMucnN0CisrKyBiL0RvY3VtZW50YXRpb24vY29yZS1hcGkvcGluX3VzZXJf
cGFnZXMucnN0CkBAIC01Myw3ICs1Myw3IEBAIFdoaWNoIGZsYWdzIGFyZSBzZXQgYnkgZWFjaCB3
cmFwcGVyCiBGb3IgdGhlc2UgcGluX3VzZXJfcGFnZXMqKCkgZnVuY3Rpb25zLCBGT0xMX1BJTiBp
cyBPUidkIGluIHdpdGggd2hhdGV2ZXIgZ3VwCiBmbGFncyB0aGUgY2FsbGVyIHByb3ZpZGVzLiBU
aGUgY2FsbGVyIGlzIHJlcXVpcmVkIHRvIHBhc3MgaW4gYSBub24tbnVsbCBzdHJ1Y3QKIHBhZ2Vz
KiBhcnJheSwgYW5kIHRoZSBmdW5jdGlvbiB0aGVuIHBpbiBwYWdlcyBieSBpbmNyZW1lbnRpbmcg
ZWFjaCBieSBhIHNwZWNpYWwKLXZhbHVlLiBGb3Igbm93LCB0aGF0IHZhbHVlIGlzICsxLCBqdXN0
IGxpa2UgZ2V0X3VzZXJfcGFnZXMqKCkuOjoKK3ZhbHVlOiBHVVBfUElOX0NPVU5USU5HX0JJQVMu
OjoKIAogIEZ1bmN0aW9uCiAgLS0tLS0tLS0KZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbW0u
aCBiL2luY2x1ZGUvbGludXgvbW0uaAppbmRleCA1NjhjYmI4OTVmMDMuLjI1M2VjMmQxNWYzNiAx
MDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9tbS5oCisrKyBiL2luY2x1ZGUvbGludXgvbW0uaApA
QCAtMTA1NCw2ICsxMDU0LDIxIEBAIHN0YXRpYyBpbmxpbmUgX19tdXN0X2NoZWNrIGJvb2wgdHJ5
X2dldF9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQogCXJldHVybiB0cnVlOwogfQogCitfX211c3Rf
Y2hlY2sgYm9vbCB0cnlfcGluX2NvbXBvdW5kX2hlYWQoc3RydWN0IHBhZ2UgKnBhZ2UsIGludCBy
ZWZzKTsKKworLyoqCisgKiB0cnlfcGluX3BhZ2UoKSAtIG1hcmsgYSBwYWdlIGFzIGJlaW5nIHVz
ZWQgYnkgcGluX3VzZXJfcGFnZXMqKCkuCisgKgorICogVGhpcyBpcyB0aGUgRk9MTF9QSU4gY291
bnRlcnBhcnQgdG8gdHJ5X2dldF9wYWdlKCkuCisgKgorICogQHBhZ2U6CXBvaW50ZXIgdG8gcGFn
ZSB0byBiZSBtYXJrZWQKKyAqIEBSZXR1cm46CXRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNlIGZvciBm
YWlsdXJlCisgKi8KK3N0YXRpYyBpbmxpbmUgX19tdXN0X2NoZWNrIGJvb2wgdHJ5X3Bpbl9wYWdl
KHN0cnVjdCBwYWdlICpwYWdlKQoreworCXJldHVybiB0cnlfcGluX2NvbXBvdW5kX2hlYWQocGFn
ZSwgMSk7Cit9CisKIHN0YXRpYyBpbmxpbmUgdm9pZCBwdXRfcGFnZShzdHJ1Y3QgcGFnZSAqcGFn
ZSkKIHsKIAlwYWdlID0gY29tcG91bmRfaGVhZChwYWdlKTsKQEAgLTEwNzEsMjkgKzEwODYsNzAg
QEAgc3RhdGljIGlubGluZSB2b2lkIHB1dF9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQogCQlfX3B1
dF9wYWdlKHBhZ2UpOwogfQogCi0vKioKLSAqIHB1dF91c2VyX3BhZ2UoKSAtIHJlbGVhc2UgYSBn
dXAtcGlubmVkIHBhZ2UKLSAqIEBwYWdlOiAgICAgICAgICAgIHBvaW50ZXIgdG8gcGFnZSB0byBi
ZSByZWxlYXNlZAorLyoKKyAqIEdVUF9QSU5fQ09VTlRJTkdfQklBUywgYW5kIHRoZSBhc3NvY2lh
dGVkIGZ1bmN0aW9ucyB0aGF0IHVzZSBpdCwgb3ZlcmxvYWQKKyAqIHRoZSBwYWdlJ3MgcmVmY291
bnQgc28gdGhhdCB0d28gc2VwYXJhdGUgaXRlbXMgYXJlIHRyYWNrZWQ6IHRoZSBvcmlnaW5hbCBw
YWdlCisgKiByZWZlcmVuY2UgY291bnQsIGFuZCBhbHNvIGEgbmV3IGNvdW50IG9mIGhvdyBtYW55
IHBpbl91c2VyX3BhZ2VzKCkgY2FsbHMgd2VyZQorICogbWFkZSBhZ2FpbnN0IHRoZSBwYWdlLiAo
Imd1cC1waW5uZWQiIGlzIGFub3RoZXIgdGVybSBmb3IgdGhlIGxhdHRlcikuCiAgKgotICogUGFn
ZXMgdGhhdCB3ZXJlIHBpbm5lZCB2aWEgcGluX3VzZXJfcGFnZXMqKCkgbXVzdCBiZSByZWxlYXNl
ZCB2aWEgZWl0aGVyCi0gKiBwdXRfdXNlcl9wYWdlKCksIG9yIG9uZSBvZiB0aGUgcHV0X3VzZXJf
cGFnZXMqKCkgcm91dGluZXMuIFRoaXMgaXMgc28gdGhhdAotICogZXZlbnR1YWxseSBzdWNoIHBh
Z2VzIGNhbiBiZSBzZXBhcmF0ZWx5IHRyYWNrZWQgYW5kIHVuaXF1ZWx5IGhhbmRsZWQuIEluCi0g
KiBwYXJ0aWN1bGFyLCBpbnRlcmFjdGlvbnMgd2l0aCBSRE1BIGFuZCBmaWxlc3lzdGVtcyBuZWVk
IHNwZWNpYWwgaGFuZGxpbmcuCisgKiBXaXRoIHRoaXMgc2NoZW1lLCBwaW5fdXNlcl9wYWdlcygp
IGJlY29tZXMgc3BlY2lhbDogc3VjaCBwYWdlcyBhcmUgbWFya2VkIGFzCisgKiBkaXN0aW5jdCBm
cm9tIG5vcm1hbCBwYWdlcy4gQXMgc3VjaCwgdGhlIHB1dF91c2VyX3BhZ2UoKSBjYWxsIChhbmQg
aXRzCisgKiB2YXJpYW50cykgbXVzdCBiZSB1c2VkIGluIG9yZGVyIHRvIHJlbGVhc2UgZ3VwLXBp
bm5lZCBwYWdlcy4KICAqCi0gKiBwdXRfdXNlcl9wYWdlKCkgYW5kIHB1dF9wYWdlKCkgYXJlIG5v
dCBpbnRlcmNoYW5nZWFibGUsIGRlc3BpdGUgdGhpcyBlYXJseQotICogaW1wbGVtZW50YXRpb24g
dGhhdCBtYWtlcyB0aGVtIGxvb2sgdGhlIHNhbWUuIHB1dF91c2VyX3BhZ2UoKSBjYWxscyBtdXN0
Ci0gKiBiZSBwZXJmZWN0bHkgbWF0Y2hlZCB1cCB3aXRoIHBpbiooKSBjYWxscy4KKyAqIENob2lj
ZSBvZiB2YWx1ZToKKyAqCisgKiBCeSBtYWtpbmcgR1VQX1BJTl9DT1VOVElOR19CSUFTIGEgcG93
ZXIgb2YgdHdvLCBkZWJ1Z2dpbmcgb2YgcGFnZSByZWZlcmVuY2UKKyAqIGNvdW50cyB3aXRoIHJl
c3BlY3QgdG8gcGluX3VzZXJfcGFnZXMoKSBhbmQgcHV0X3VzZXJfcGFnZSgpIGJlY29tZXMgc2lt
cGxlciwKKyAqIGR1ZSB0byB0aGUgZmFjdCB0aGF0IGFkZGluZyBhbiBldmVuIHBvd2VyIG9mIHR3
byB0byB0aGUgcGFnZSByZWZjb3VudCBoYXMgdGhlCisgKiBlZmZlY3Qgb2YgdXNpbmcgb25seSB0
aGUgdXBwZXIgTiBiaXRzLCBmb3IgdGhlIGNvZGUgdGhhdCBjb3VudHMgdXAgdXNpbmcgdGhlCisg
KiBiaWFzIHZhbHVlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGxvd2VyIGJpdHMgYXJlIGxlZnQgZm9y
IHRoZSBleGNsdXNpdmUgdXNlIG9mCisgKiB0aGUgb3JpZ2luYWwgY29kZSB0aGF0IGluY3JlbWVu
dHMgYW5kIGRlY3JlbWVudHMgYnkgb25lIChvciBhdCBsZWFzdCwgYnkgbXVjaAorICogc21hbGxl
ciB2YWx1ZXMgdGhhbiB0aGUgYmlhcyB2YWx1ZSkuCisgKgorICogT2YgY291cnNlLCBvbmNlIHRo
ZSBsb3dlciBiaXRzIG92ZXJmbG93IGludG8gdGhlIHVwcGVyIGJpdHMgKGFuZCB0aGlzIGlzCisg
KiBPSywgYmVjYXVzZSBzdWJ0cmFjdGlvbiByZWNvdmVycyB0aGUgb3JpZ2luYWwgdmFsdWVzKSwg
dGhlbiB2aXN1YWwgaW5zcGVjdGlvbgorICogbm8gbG9uZ2VyIHN1ZmZpY2VzIHRvIGRpcmVjdGx5
IHZpZXcgdGhlIHNlcGFyYXRlIGNvdW50cy4gSG93ZXZlciwgZm9yIG5vcm1hbAorICogYXBwbGlj
YXRpb25zIHRoYXQgZG9uJ3QgaGF2ZSBodWdlIHBhZ2UgcmVmZXJlbmNlIGNvdW50cywgdGhpcyB3
b24ndCBiZSBhbgorICogaXNzdWUuCisgKgorICogTG9ja2luZzogdGhlIGxvY2tsZXNzIGFsZ29y
aXRobSBkZXNjcmliZWQgaW4gcGFnZV9jYWNoZV9nZXRfc3BlY3VsYXRpdmUoKQorICogYW5kIHBh
Z2VfY2FjaGVfZ3VwX3Bpbl9zcGVjdWxhdGl2ZSgpIHByb3ZpZGVzIHNhZmUgb3BlcmF0aW9uIGZv
cgorICogZ2V0X3VzZXJfcGFnZXMgYW5kIHBhZ2VfbWtjbGVhbiBhbmQgb3RoZXIgY2FsbHMgdGhh
dCByYWNlIHRvIHNldCB1cCBwYWdlCisgKiB0YWJsZSBlbnRyaWVzLgogICovCi1zdGF0aWMgaW5s
aW5lIHZvaWQgcHV0X3VzZXJfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKLXsKLQlwdXRfcGFnZShw
YWdlKTsKLX0KKyNkZWZpbmUgR1VQX1BJTl9DT1VOVElOR19CSUFTICgxVUwgPDwgMTApCiAKK3Zv
aWQgcHV0X3VzZXJfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSk7CiB2b2lkIHB1dF91c2VyX3BhZ2Vz
X2RpcnR5X2xvY2soc3RydWN0IHBhZ2UgKipwYWdlcywgdW5zaWduZWQgbG9uZyBucGFnZXMsCiAJ
CQkgICAgICAgYm9vbCBtYWtlX2RpcnR5KTsKLQogdm9pZCBwdXRfdXNlcl9wYWdlcyhzdHJ1Y3Qg
cGFnZSAqKnBhZ2VzLCB1bnNpZ25lZCBsb25nIG5wYWdlcyk7CiAKKy8qKgorICogcGFnZV9kbWFf
cGlubmVkKCkgLSByZXBvcnQgaWYgYSBwYWdlIGlzIHBpbm5lZCBmb3IgRE1BLgorICoKKyAqIFRo
aXMgZnVuY3Rpb24gY2hlY2tzIGlmIGEgcGFnZSBoYXMgYmVlbiBwaW5uZWQgdmlhIGEgY2FsbCB0
bworICogcGluX3VzZXJfcGFnZXMqKCkuCisgKgorICogVGhlIHJldHVybiB2YWx1ZSBpcyBwYXJ0
aWFsbHkgZnV6enk6IGZhbHNlIGlzIG5vdCBmdXp6eSwgYmVjYXVzZSBpdCBtZWFucworICogImRl
ZmluaXRlbHkgbm90IHBpbm5lZCBmb3IgRE1BIiwgYnV0IHRydWUgbWVhbnMgInByb2JhYmx5IHBp
bm5lZCBmb3IgRE1BLCBidXQKKyAqIHBvc3NpYmx5IGEgZmFsc2UgcG9zaXRpdmUgZHVlIHRvIGhh
dmluZyBhdCBsZWFzdCBHVVBfUElOX0NPVU5USU5HX0JJQVMgd29ydGgKKyAqIG9mIG5vcm1hbCBw
YWdlIHJlZmVyZW5jZXMiLgorICoKKyAqIEZhbHNlIHBvc2l0aXZlcyBhcmUgT0ssIGJlY2F1c2U6
IGEpIGl0J3MgdW5saWtlbHkgZm9yIGEgcGFnZSB0byBnZXQgdGhhdCBtYW55CisgKiByZWZjb3Vu
dHMsIGFuZCBiKSBhbGwgdGhlIGNhbGxlcnMgb2YgdGhpcyByb3V0aW5lIGFyZSBleHBlY3RlZCB0
byBiZSBhYmxlIHRvCisgKiBkZWFsIGdyYWNlZnVsbHkgd2l0aCBhIGZhbHNlIHBvc2l0aXZlLgor
ICoKKyAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBwbGVhc2Ugc2VlIERvY3VtZW50YXRpb24vdm0v
cGluX3VzZXJfcGFnZXMucnN0LgorICoKKyAqIEBwYWdlOglwb2ludGVyIHRvIHBhZ2UgdG8gYmUg
cXVlcmllZC4KKyAqIEBSZXR1cm46CVRydWUsIGlmIGl0IGlzIGxpa2VseSB0aGF0IHRoZSBwYWdl
IGhhcyBiZWVuICJkbWEtcGlubmVkIi4KKyAqCQlGYWxzZSwgaWYgdGhlIHBhZ2UgaXMgZGVmaW5p
dGVseSBub3QgZG1hLXBpbm5lZC4KKyAqLworc3RhdGljIGlubGluZSBib29sIHBhZ2VfZG1hX3Bp
bm5lZChzdHJ1Y3QgcGFnZSAqcGFnZSkKK3sKKwlyZXR1cm4gKHBhZ2VfcmVmX2NvdW50KGNvbXBv
dW5kX2hlYWQocGFnZSkpKSA+PSBHVVBfUElOX0NPVU5USU5HX0JJQVM7Cit9CisKICNpZiBkZWZp
bmVkKENPTkZJR19TUEFSU0VNRU0pICYmICFkZWZpbmVkKENPTkZJR19TUEFSU0VNRU1fVk1FTU1B
UCkKICNkZWZpbmUgU0VDVElPTl9JTl9QQUdFX0ZMQUdTCiAjZW5kaWYKQEAgLTI2NzUsNiArMjcz
MSwzMyBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2
bWEsIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKICAqIFBsZWFzZSBzZWUgRG9jdW1lbnRhdGlvbi92
bS9waW5fdXNlcl9wYWdlcy5yc3QgZm9yIG1vcmUgaW5mb3JtYXRpb24uCiAgKi8KIAorLyoqCisg
KiBncmFiX3BhZ2UoKSAtIGVsZXZhdGUgYSBwYWdlJ3MgcmVmY291bnQgYnkgYSBmbGFnLWRlcGVu
ZGVudCBhbW91bnQKKyAqCisgKiBAcGFnZToJcG9pbnRlciB0byBwYWdlIHRvIGJlIGdyYWJiZWQK
KyAqIEBmbGFnczoJZ3VwIGZsYWdzOiB0aGVzZSBhcmUgdGhlIEZPTExfKiBmbGFnIHZhbHVlcy4K
KyAqCisgKiBFaXRoZXIgRk9MTF9QSU4gb3IgRk9MTF9HRVQgKG9yIG5laXRoZXIpIG1heSBiZSBz
ZXQsIGJ1dCBub3QgYm90aCBhdCB0aGUgc2FtZQorICogdGltZS4gKFRoYXQncyB0cnVlIHRocm91
Z2hvdXQgdGhlIGdldF91c2VyX3BhZ2VzKigpIGFuZCBwaW5fdXNlcl9wYWdlcyooKQorICogQVBJ
cy4pIENhc2VzOgorICoKKyAqCUZPTExfR0VUOiBwYWdlJ3MgcmVmY291bnQgd2lsbCBiZSBpbmNy
ZW1lbnRlZCBieSAxLgorICoJRk9MTF9QSU46IHBhZ2UncyByZWZjb3VudCB3aWxsIGJlIGluY3Jl
bWVudGVkIGJ5IEdVUF9QSU5fQ09VTlRJTkdfQklBUy4KKyAqCisgKiBAUmV0dXJuOiB0cnVlIGZv
ciBmb3Igc3VjY2VzcywgZmFsc2UgZm9yIGZhaWx1cmUuIElmIG5laXRoZXIgRk9MTF9HRVQgbm9y
CisgKiBGT0xMX1BJTiBpcyBzZXQsIHRoYXQncyBhbHNvIGNvbnNpZGVyZWQgInN1Y2Nlc3MiLCBl
dmVuIHRob3VnaCBub3RoaW5nIGlzCisgKiBkb25lOiBubyBwYWdlIHJlZmNvdW50IGNoYW5nZXMg
YXJlIG1hZGUgaW4gdGhhdCBjYXNlLgorICovCitzdGF0aWMgaW5saW5lIGJvb2wgZ3JhYl9wYWdl
KHN0cnVjdCBwYWdlICpwYWdlLCB1bnNpZ25lZCBpbnQgZmxhZ3MpCit7CisJaWYgKGZsYWdzICYg
Rk9MTF9HRVQpCisJCWdldF9wYWdlKHBhZ2UpOworCWVsc2UgaWYgKGZsYWdzICYgRk9MTF9QSU4p
CisJCXJldHVybiB0cnlfcGluX3BhZ2UocGFnZSk7CisKKwlyZXR1cm4gdHJ1ZTsKK30KKwogc3Rh
dGljIGlubGluZSBpbnQgdm1fZmF1bHRfdG9fZXJybm8odm1fZmF1bHRfdCB2bV9mYXVsdCwgaW50
IGZvbGxfZmxhZ3MpCiB7CiAJaWYgKHZtX2ZhdWx0ICYgVk1fRkFVTFRfT09NKQpkaWZmIC0tZ2l0
IGEvaW5jbHVkZS9saW51eC9tbXpvbmUuaCBiL2luY2x1ZGUvbGludXgvbW16b25lLmgKaW5kZXgg
YmRhMjAyODI3NDZiLi4wNDg1Y2JhMzhkMjMgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvbW16
b25lLmgKKysrIGIvaW5jbHVkZS9saW51eC9tbXpvbmUuaApAQCAtMjQ0LDYgKzI0NCw4IEBAIGVu
dW0gbm9kZV9zdGF0X2l0ZW0gewogCU5SX0RJUlRJRUQsCQkvKiBwYWdlIGRpcnR5aW5ncyBzaW5j
ZSBib290dXAgKi8KIAlOUl9XUklUVEVOLAkJLyogcGFnZSB3cml0aW5ncyBzaW5jZSBib290dXAg
Ki8KIAlOUl9LRVJORUxfTUlTQ19SRUNMQUlNQUJMRSwJLyogcmVjbGFpbWFibGUgbm9uLXNsYWIg
a2VybmVsIHBhZ2VzICovCisJTlJfRk9MTF9QSU5fUkVRVUVTVEVELAkvKiB2aWE6IHBpbl91c2Vy
X3BhZ2UoKSwgZ3VwIGZsYWc6IEZPTExfUElOICovCisJTlJfRk9MTF9QSU5fUkVUVVJORUQsCS8q
IHBhZ2VzIHJldHVybmVkIHZpYSBwdXRfdXNlcl9wYWdlKCkgKi8KIAlOUl9WTV9OT0RFX1NUQVRf
SVRFTVMKIH07CiAKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvcGFnZV9yZWYuaCBiL2luY2x1
ZGUvbGludXgvcGFnZV9yZWYuaAppbmRleCAxNGQxNGJlYjFmN2YuLmI5Y2JlNTUzZDFlNyAxMDA2
NDQKLS0tIGEvaW5jbHVkZS9saW51eC9wYWdlX3JlZi5oCisrKyBiL2luY2x1ZGUvbGludXgvcGFn
ZV9yZWYuaApAQCAtMTAyLDYgKzEwMiwxNiBAQCBzdGF0aWMgaW5saW5lIHZvaWQgcGFnZV9yZWZf
c3ViKHN0cnVjdCBwYWdlICpwYWdlLCBpbnQgbnIpCiAJCV9fcGFnZV9yZWZfbW9kKHBhZ2UsIC1u
cik7CiB9CiAKK3N0YXRpYyBpbmxpbmUgaW50IHBhZ2VfcmVmX3N1Yl9yZXR1cm4oc3RydWN0IHBh
Z2UgKnBhZ2UsIGludCBucikKK3sKKwlpbnQgcmV0ID0gYXRvbWljX3N1Yl9yZXR1cm4obnIsICZw
YWdlLT5fcmVmY291bnQpOworCisJaWYgKHBhZ2VfcmVmX3RyYWNlcG9pbnRfYWN0aXZlKF9fdHJh
Y2Vwb2ludF9wYWdlX3JlZl9tb2QpKQorCQlfX3BhZ2VfcmVmX21vZChwYWdlLCAtbnIpOworCisJ
cmV0dXJuIHJldDsKK30KKwogc3RhdGljIGlubGluZSB2b2lkIHBhZ2VfcmVmX2luYyhzdHJ1Y3Qg
cGFnZSAqcGFnZSkKIHsKIAlhdG9taWNfaW5jKCZwYWdlLT5fcmVmY291bnQpOwpkaWZmIC0tZ2l0
IGEvbW0vZ3VwLmMgYi9tbS9ndXAuYwppbmRleCBmNzJkN2ExNjM1YjQuLmIwNjQzNDE4NWUzMyAx
MDA2NDQKLS0tIGEvbW0vZ3VwLmMKKysrIGIvbW0vZ3VwLmMKQEAgLTUxLDYgKzUxLDk2IEBAIHN0
YXRpYyBpbmxpbmUgc3RydWN0IHBhZ2UgKnRyeV9nZXRfY29tcG91bmRfaGVhZChzdHJ1Y3QgcGFn
ZSAqcGFnZSwgaW50IHJlZnMpCiAJcmV0dXJuIGhlYWQ7CiB9CiAKKyNpZmRlZiBDT05GSUdfREVC
VUdfVk0KK3N0YXRpYyBpbmxpbmUgdm9pZCBfX3VwZGF0ZV9wcm9jX3Ztc3RhdChzdHJ1Y3QgcGFn
ZSAqcGFnZSwKKwkJCQkJZW51bSBub2RlX3N0YXRfaXRlbSBpdGVtLCBpbnQgY291bnQpCit7CisJ
bW9kX25vZGVfcGFnZV9zdGF0ZShwYWdlX3BnZGF0KHBhZ2UpLCBpdGVtLCBjb3VudCk7Cit9Cisj
ZWxzZQorc3RhdGljIGlubGluZSB2b2lkIF9fdXBkYXRlX3Byb2Nfdm1zdGF0KHN0cnVjdCBwYWdl
ICpwYWdlLAorCQkJCQllbnVtIG5vZGVfc3RhdF9pdGVtIGl0ZW0sIGludCBjb3VudCkKK3sKK30K
KyNlbmRpZgorCisvKioKKyAqIHRyeV9waW5fY29tcG91bmRfaGVhZCgpIC0gbWFyayBhIGNvbXBv
dW5kIHBhZ2UgYXMgYmVpbmcgdXNlZCBieQorICogcGluX3VzZXJfcGFnZXMqKCkuCisgKgorICog
VGhpcyBpcyB0aGUgRk9MTF9QSU4gY291bnRlcnBhcnQgdG8gdHJ5X2dldF9jb21wb3VuZF9oZWFk
KCkuCisgKgorICogQHBhZ2U6CXBvaW50ZXIgdG8gcGFnZSB0byBiZSBtYXJrZWQKKyAqIEBSZXR1
cm46CXRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNlIGZvciBmYWlsdXJlCisgKi8KK19fbXVzdF9jaGVj
ayBib29sIHRyeV9waW5fY29tcG91bmRfaGVhZChzdHJ1Y3QgcGFnZSAqcGFnZSwgaW50IHJlZnMp
Cit7CisJcGFnZSA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwYWdlLCBHVVBfUElOX0NPVU5USU5H
X0JJQVMgKiByZWZzKTsKKwlpZiAoIXBhZ2UpCisJCXJldHVybiBmYWxzZTsKKworCV9fdXBkYXRl
X3Byb2Nfdm1zdGF0KHBhZ2UsIE5SX0ZPTExfUElOX1JFUVVFU1RFRCwgcmVmcyk7CisJcmV0dXJu
IHRydWU7Cit9CisKKyNpZmRlZiBDT05GSUdfREVWX1BBR0VNQVBfT1BTCitzdGF0aWMgYm9vbCBf
X3B1dF9kZXZtYXBfbWFuYWdlZF91c2VyX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCit7CisJYm9v
bCBpc19kZXZtYXAgPSBwYWdlX2lzX2Rldm1hcF9tYW5hZ2VkKHBhZ2UpOworCisJaWYgKGlzX2Rl
dm1hcCkgeworCQlpbnQgY291bnQgPSBwYWdlX3JlZl9zdWJfcmV0dXJuKHBhZ2UsIEdVUF9QSU5f
Q09VTlRJTkdfQklBUyk7CisKKwkJX191cGRhdGVfcHJvY192bXN0YXQocGFnZSwgTlJfRk9MTF9Q
SU5fUkVUVVJORUQsIDEpOworCQkvKgorCQkgKiBkZXZtYXAgcGFnZSByZWZjb3VudHMgYXJlIDEt
YmFzZWQsIHJhdGhlciB0aGFuIDAtYmFzZWQ6IGlmCisJCSAqIHJlZmNvdW50IGlzIDEsIHRoZW4g
dGhlIHBhZ2UgaXMgZnJlZSBhbmQgdGhlIHJlZmNvdW50IGlzCisJCSAqIHN0YWJsZSBiZWNhdXNl
IG5vYm9keSBob2xkcyBhIHJlZmVyZW5jZSBvbiB0aGUgcGFnZS4KKwkJICovCisJCWlmIChjb3Vu
dCA9PSAxKQorCQkJZnJlZV9kZXZtYXBfbWFuYWdlZF9wYWdlKHBhZ2UpOworCQllbHNlIGlmICgh
Y291bnQpCisJCQlfX3B1dF9wYWdlKHBhZ2UpOworCX0KKworCXJldHVybiBpc19kZXZtYXA7Cit9
CisjZWxzZQorc3RhdGljIGJvb2wgX19wdXRfZGV2bWFwX21hbmFnZWRfdXNlcl9wYWdlKHN0cnVj
dCBwYWdlICpwYWdlKQoreworCXJldHVybiBmYWxzZTsKK30KKyNlbmRpZiAvKiBDT05GSUdfREVW
X1BBR0VNQVBfT1BTICovCisKKy8qKgorICogcHV0X3VzZXJfcGFnZSgpIC0gcmVsZWFzZSBhIGRt
YS1waW5uZWQgcGFnZQorICogQHBhZ2U6ICAgICAgICAgICAgcG9pbnRlciB0byBwYWdlIHRvIGJl
IHJlbGVhc2VkCisgKgorICogUGFnZXMgdGhhdCB3ZXJlIHBpbm5lZCB2aWEgcGluX3VzZXJfcGFn
ZXMqKCkgbXVzdCBiZSByZWxlYXNlZCB2aWEgZWl0aGVyCisgKiBwdXRfdXNlcl9wYWdlKCksIG9y
IG9uZSBvZiB0aGUgcHV0X3VzZXJfcGFnZXMqKCkgcm91dGluZXMuIFRoaXMgaXMgc28gdGhhdAor
ICogc3VjaCBwYWdlcyBjYW4gYmUgc2VwYXJhdGVseSB0cmFja2VkIGFuZCB1bmlxdWVseSBoYW5k
bGVkLiBJbiBwYXJ0aWN1bGFyLAorICogaW50ZXJhY3Rpb25zIHdpdGggUkRNQSBhbmQgZmlsZXN5
c3RlbXMgbmVlZCBzcGVjaWFsIGhhbmRsaW5nLgorICovCit2b2lkIHB1dF91c2VyX3BhZ2Uoc3Ry
dWN0IHBhZ2UgKnBhZ2UpCit7CisJcGFnZSA9IGNvbXBvdW5kX2hlYWQocGFnZSk7CisKKwkvKgor
CSAqIEZvciBkZXZtYXAgbWFuYWdlZCBwYWdlcyB3ZSBuZWVkIHRvIGNhdGNoIHJlZmNvdW50IHRy
YW5zaXRpb24gZnJvbQorCSAqIEdVUF9QSU5fQ09VTlRJTkdfQklBUyB0byAxLCB3aGVuIHJlZmNv
dW50IHJlYWNoIG9uZSBpdCBtZWFucyB0aGUKKwkgKiBwYWdlIGlzIGZyZWUgYW5kIHdlIG5lZWQg
dG8gaW5mb3JtIHRoZSBkZXZpY2UgZHJpdmVyIHRocm91Z2gKKwkgKiBjYWxsYmFjay4gU2VlIGlu
Y2x1ZGUvbGludXgvbWVtcmVtYXAuaCBhbmQgSE1NIGZvciBkZXRhaWxzLgorCSAqLworCWlmIChf
X3B1dF9kZXZtYXBfbWFuYWdlZF91c2VyX3BhZ2UocGFnZSkpCisJCXJldHVybjsKKworCWlmIChw
YWdlX3JlZl9zdWJfYW5kX3Rlc3QocGFnZSwgR1VQX1BJTl9DT1VOVElOR19CSUFTKSkKKwkJX19w
dXRfcGFnZShwYWdlKTsKKworCV9fdXBkYXRlX3Byb2Nfdm1zdGF0KHBhZ2UsIE5SX0ZPTExfUElO
X1JFVFVSTkVELCAxKTsKK30KK0VYUE9SVF9TWU1CT0wocHV0X3VzZXJfcGFnZSk7CisKIC8qKgog
ICogcHV0X3VzZXJfcGFnZXNfZGlydHlfbG9jaygpIC0gcmVsZWFzZSBhbmQgb3B0aW9uYWxseSBk
aXJ0eSBndXAtcGlubmVkIHBhZ2VzCiAgKiBAcGFnZXM6ICBhcnJheSBvZiBwYWdlcyB0byBiZSBt
YXliZSBtYXJrZWQgZGlydHksIGFuZCBkZWZpbml0ZWx5IHJlbGVhc2VkLgpAQCAtMjM3LDEwICsz
MjcsMTEgQEAgc3RhdGljIHN0cnVjdCBwYWdlICpmb2xsb3dfcGFnZV9wdGUoc3RydWN0IHZtX2Fy
ZWFfc3RydWN0ICp2bWEsCiAJfQogCiAJcGFnZSA9IHZtX25vcm1hbF9wYWdlKHZtYSwgYWRkcmVz
cywgcHRlKTsKLQlpZiAoIXBhZ2UgJiYgcHRlX2Rldm1hcChwdGUpICYmIChmbGFncyAmIEZPTExf
R0VUKSkgeworCWlmICghcGFnZSAmJiBwdGVfZGV2bWFwKHB0ZSkgJiYgKGZsYWdzICYgKEZPTExf
R0VUIHwgRk9MTF9QSU4pKSkgewogCQkvKgotCQkgKiBPbmx5IHJldHVybiBkZXZpY2UgbWFwcGlu
ZyBwYWdlcyBpbiB0aGUgRk9MTF9HRVQgY2FzZSBzaW5jZQotCQkgKiB0aGV5IGFyZSBvbmx5IHZh
bGlkIHdoaWxlIGhvbGRpbmcgdGhlIHBnbWFwIHJlZmVyZW5jZS4KKwkJICogT25seSByZXR1cm4g
ZGV2aWNlIG1hcHBpbmcgcGFnZXMgaW4gdGhlIEZPTExfR0VUIG9yIEZPTExfUElOCisJCSAqIGNh
c2Ugc2luY2UgdGhleSBhcmUgb25seSB2YWxpZCB3aGlsZSBob2xkaW5nIHRoZSBwZ21hcAorCQkg
KiByZWZlcmVuY2UuCiAJCSAqLwogCQkqcGdtYXAgPSBnZXRfZGV2X3BhZ2VtYXAocHRlX3Bmbihw
dGUpLCAqcGdtYXApOwogCQlpZiAoKnBnbWFwKQpAQCAtMjgzLDYgKzM3NCwxMSBAQCBzdGF0aWMg
c3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlX3B0ZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwK
IAkJCXBhZ2UgPSBFUlJfUFRSKC1FTk9NRU0pOwogCQkJZ290byBvdXQ7CiAJCX0KKwl9IGVsc2Ug
aWYgKGZsYWdzICYgRk9MTF9QSU4pIHsKKwkJaWYgKHVubGlrZWx5KCF0cnlfcGluX3BhZ2UocGFn
ZSkpKSB7CisJCQlwYWdlID0gRVJSX1BUUigtRU5PTUVNKTsKKwkJCWdvdG8gb3V0OworCQl9CiAJ
fQogCWlmIChmbGFncyAmIEZPTExfVE9VQ0gpIHsKIAkJaWYgKChmbGFncyAmIEZPTExfV1JJVEUp
ICYmCkBAIC01NDQsOCArNjQwLDggQEAgc3RhdGljIHN0cnVjdCBwYWdlICpmb2xsb3dfcGFnZV9t
YXNrKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogCS8qIG1ha2UgdGhpcyBoYW5kbGUgaHVn
ZXBkICovCiAJcGFnZSA9IGZvbGxvd19odWdlX2FkZHIobW0sIGFkZHJlc3MsIGZsYWdzICYgRk9M
TF9XUklURSk7CiAJaWYgKCFJU19FUlIocGFnZSkpIHsKLQkJQlVHX09OKGZsYWdzICYgRk9MTF9H
RVQpOwotCQlyZXR1cm4gcGFnZTsKKwkJV0FSTl9PTl9PTkNFKGZsYWdzICYgKEZPTExfR0VUIHwg
Rk9MTF9QSU4pKTsKKwkJcmV0dXJuIE5VTEw7CiAJfQogCiAJcGdkID0gcGdkX29mZnNldChtbSwg
YWRkcmVzcyk7CkBAIC0xMTI1LDYgKzEyMjEsMzYgQEAgc3RhdGljIF9fYWx3YXlzX2lubGluZSBs
b25nIF9fZ2V0X3VzZXJfcGFnZXNfbG9ja2VkKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLAogCXJl
dHVybiBwYWdlc19kb25lOwogfQogCitzdGF0aWMgbG9uZyBfX2dldF91c2VyX3BhZ2VzX3JlbW90
ZShzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRzaywKKwkJCQkgICAgc3RydWN0IG1tX3N0cnVjdCAqbW0s
CisJCQkJICAgIHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCisJ
CQkJICAgIHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMsCisJCQkJ
ICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMsIGludCAqbG9ja2VkKQoreworCS8qCisJ
ICogUGFydHMgb2YgRk9MTF9MT05HVEVSTSBiZWhhdmlvciBhcmUgaW5jb21wYXRpYmxlIHdpdGgK
KwkgKiBGQVVMVF9GTEFHX0FMTE9XX1JFVFJZIGJlY2F1c2Ugb2YgdGhlIEZTIERBWCBjaGVjayBy
ZXF1aXJlbWVudCBvbgorCSAqIHZtYXMuIEhvd2V2ZXIsIHRoaXMgb25seSBjb21lcyB1cCBpZiBs
b2NrZWQgaXMgc2V0LCBhbmQgdGhlcmUgYXJlCisJICogY2FsbGVycyB0aGF0IGRvIHJlcXVlc3Qg
Rk9MTF9MT05HVEVSTSwgYnV0IGRvIG5vdCBzZXQgbG9ja2VkLiBTbywKKwkgKiBhbGxvdyB3aGF0
IHdlIGNhbi4KKwkgKi8KKwlpZiAoZ3VwX2ZsYWdzICYgRk9MTF9MT05HVEVSTSkgeworCQlpZiAo
V0FSTl9PTl9PTkNFKGxvY2tlZCkpCisJCQlyZXR1cm4gLUVJTlZBTDsKKwkJLyoKKwkJICogVGhp
cyB3aWxsIGNoZWNrIHRoZSB2bWFzIChldmVuIGlmIG91ciB2bWFzIGFyZyBpcyBOVUxMKQorCQkg
KiBhbmQgcmV0dXJuIC1FTk9UU1VQUCBpZiBEQVggaXNuJ3QgYWxsb3dlZCBpbiB0aGlzIGNhc2U6
CisJCSAqLworCQlyZXR1cm4gX19ndXBfbG9uZ3Rlcm1fbG9ja2VkKHRzaywgbW0sIHN0YXJ0LCBu
cl9wYWdlcywgcGFnZXMsCisJCQkJCSAgICAgdm1hcywgZ3VwX2ZsYWdzIHwgRk9MTF9UT1VDSCB8
CisJCQkJCSAgICAgRk9MTF9SRU1PVEUpOworCX0KKworCXJldHVybiBfX2dldF91c2VyX3BhZ2Vz
X2xvY2tlZCh0c2ssIG1tLCBzdGFydCwgbnJfcGFnZXMsIHBhZ2VzLCB2bWFzLAorCQkJCSAgICAg
ICBsb2NrZWQsCisJCQkJICAgICAgIGd1cF9mbGFncyB8IEZPTExfVE9VQ0ggfCBGT0xMX1JFTU9U
RSk7Cit9CisKIC8qCiAgKiBnZXRfdXNlcl9wYWdlc19yZW1vdGUoKSAtIHBpbiB1c2VyIHBhZ2Vz
IGluIG1lbW9yeQogICogQHRzazoJdGhlIHRhc2tfc3RydWN0IHRvIHVzZSBmb3IgcGFnZSBmYXVs
dCBhY2NvdW50aW5nLCBvcgpAQCAtMTE5MywyOCArMTMxOSw4IEBAIGxvbmcgZ2V0X3VzZXJfcGFn
ZXNfcmVtb3RlKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLCBzdHJ1Y3QgbW1fc3RydWN0ICptbSwK
IAlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfUElOKSkKIAkJcmV0dXJuIC1FSU5W
QUw7CiAKLQkvKgotCSAqIFBhcnRzIG9mIEZPTExfTE9OR1RFUk0gYmVoYXZpb3IgYXJlIGluY29t
cGF0aWJsZSB3aXRoCi0JICogRkFVTFRfRkxBR19BTExPV19SRVRSWSBiZWNhdXNlIG9mIHRoZSBG
UyBEQVggY2hlY2sgcmVxdWlyZW1lbnQgb24KLQkgKiB2bWFzLiBIb3dldmVyLCB0aGlzIG9ubHkg
Y29tZXMgdXAgaWYgbG9ja2VkIGlzIHNldCwgYW5kIHRoZXJlIGFyZQotCSAqIGNhbGxlcnMgdGhh
dCBkbyByZXF1ZXN0IEZPTExfTE9OR1RFUk0sIGJ1dCBkbyBub3Qgc2V0IGxvY2tlZC4gU28sCi0J
ICogYWxsb3cgd2hhdCB3ZSBjYW4uCi0JICovCi0JaWYgKGd1cF9mbGFncyAmIEZPTExfTE9OR1RF
Uk0pIHsKLQkJaWYgKFdBUk5fT05fT05DRShsb2NrZWQpKQotCQkJcmV0dXJuIC1FSU5WQUw7Ci0J
CS8qCi0JCSAqIFRoaXMgd2lsbCBjaGVjayB0aGUgdm1hcyAoZXZlbiBpZiBvdXIgdm1hcyBhcmcg
aXMgTlVMTCkKLQkJICogYW5kIHJldHVybiAtRU5PVFNVUFAgaWYgREFYIGlzbid0IGFsbG93ZWQg
aW4gdGhpcyBjYXNlOgotCQkgKi8KLQkJcmV0dXJuIF9fZ3VwX2xvbmd0ZXJtX2xvY2tlZCh0c2ss
IG1tLCBzdGFydCwgbnJfcGFnZXMsIHBhZ2VzLAotCQkJCQkgICAgIHZtYXMsIGd1cF9mbGFncyB8
IEZPTExfVE9VQ0ggfAotCQkJCQkgICAgIEZPTExfUkVNT1RFKTsKLQl9Ci0KLQlyZXR1cm4gX19n
ZXRfdXNlcl9wYWdlc19sb2NrZWQodHNrLCBtbSwgc3RhcnQsIG5yX3BhZ2VzLCBwYWdlcywgdm1h
cywKLQkJCQkgICAgICAgbG9ja2VkLAotCQkJCSAgICAgICBndXBfZmxhZ3MgfCBGT0xMX1RPVUNI
IHwgRk9MTF9SRU1PVEUpOworCXJldHVybiBfX2dldF91c2VyX3BhZ2VzX3JlbW90ZSh0c2ssIG1t
LCBzdGFydCwgbnJfcGFnZXMsIGd1cF9mbGFncywKKwkJCQkgICAgICAgcGFnZXMsIHZtYXMsIGxv
Y2tlZCk7CiB9CiBFWFBPUlRfU1lNQk9MKGdldF91c2VyX3BhZ2VzX3JlbW90ZSk7CiAKQEAgLTE4
NDIsMTMgKzE5NDgsMTcgQEAgc3RhdGljIGlubGluZSBwdGVfdCBndXBfZ2V0X3B0ZShwdGVfdCAq
cHRlcCkKICNlbmRpZiAvKiBDT05GSUdfR1VQX0dFVF9QVEVfTE9XX0hJR0ggKi8KIAogc3RhdGlj
IHZvaWQgX19tYXliZV91bnVzZWQgdW5kb19kZXZfcGFnZW1hcChpbnQgKm5yLCBpbnQgbnJfc3Rh
cnQsCisJCQkJCSAgICB1bnNpZ25lZCBpbnQgZmxhZ3MsCiAJCQkJCSAgICBzdHJ1Y3QgcGFnZSAq
KnBhZ2VzKQogewogCXdoaWxlICgoKm5yKSAtIG5yX3N0YXJ0KSB7CiAJCXN0cnVjdCBwYWdlICpw
YWdlID0gcGFnZXNbLS0oKm5yKV07CiAKIAkJQ2xlYXJQYWdlUmVmZXJlbmNlZChwYWdlKTsKLQkJ
cHV0X3BhZ2UocGFnZSk7CisJCWlmIChmbGFncyAmIEZPTExfUElOKQorCQkJcHV0X3VzZXJfcGFn
ZShwYWdlKTsKKwkJZWxzZQorCQkJcHV0X3BhZ2UocGFnZSk7CiAJfQogfQogCkBAIC0xODgxLDcg
KzE5OTEsNyBAQCBzdGF0aWMgaW50IGd1cF9wdGVfcmFuZ2UocG1kX3QgcG1kLCB1bnNpZ25lZCBs
b25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAogCiAJCQlwZ21hcCA9IGdldF9kZXZfcGFnZW1h
cChwdGVfcGZuKHB0ZSksIHBnbWFwKTsKIAkJCWlmICh1bmxpa2VseSghcGdtYXApKSB7Ci0JCQkJ
dW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIHBhZ2VzKTsKKwkJCQl1bmRvX2Rldl9wYWdl
bWFwKG5yLCBucl9zdGFydCwgZmxhZ3MsIHBhZ2VzKTsKIAkJCQlnb3RvIHB0ZV91bm1hcDsKIAkJ
CX0KIAkJfSBlbHNlIGlmIChwdGVfc3BlY2lhbChwdGUpKQpAQCAtMTg5MCw5ICsyMDAwLDE1IEBA
IHN0YXRpYyBpbnQgZ3VwX3B0ZV9yYW5nZShwbWRfdCBwbWQsIHVuc2lnbmVkIGxvbmcgYWRkciwg
dW5zaWduZWQgbG9uZyBlbmQsCiAJCVZNX0JVR19PTighcGZuX3ZhbGlkKHB0ZV9wZm4ocHRlKSkp
OwogCQlwYWdlID0gcHRlX3BhZ2UocHRlKTsKIAotCQloZWFkID0gdHJ5X2dldF9jb21wb3VuZF9o
ZWFkKHBhZ2UsIDEpOwotCQlpZiAoIWhlYWQpCi0JCQlnb3RvIHB0ZV91bm1hcDsKKwkJaWYgKGZs
YWdzICYgRk9MTF9QSU4pIHsKKwkJCWhlYWQgPSBwYWdlOworCQkJaWYgKHVubGlrZWx5KCF0cnlf
cGluX3BhZ2UoaGVhZCkpKQorCQkJCWdvdG8gcHRlX3VubWFwOworCQl9IGVsc2UgeworCQkJaGVh
ZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwYWdlLCAxKTsKKwkJCWlmICghaGVhZCkKKwkJCQln
b3RvIHB0ZV91bm1hcDsKKwkJfQogCiAJCWlmICh1bmxpa2VseShwdGVfdmFsKHB0ZSkgIT0gcHRl
X3ZhbCgqcHRlcCkpKSB7CiAJCQlwdXRfcGFnZShoZWFkKTsKQEAgLTE5NDYsMTIgKzIwNjIsMjAg
QEAgc3RhdGljIGludCBfX2d1cF9kZXZpY2VfaHVnZSh1bnNpZ25lZCBsb25nIHBmbiwgdW5zaWdu
ZWQgbG9uZyBhZGRyLAogCiAJCXBnbWFwID0gZ2V0X2Rldl9wYWdlbWFwKHBmbiwgcGdtYXApOwog
CQlpZiAodW5saWtlbHkoIXBnbWFwKSkgewotCQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3Rh
cnQsIHBhZ2VzKTsKKwkJCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5yX3N0YXJ0LCBmbGFncywgcGFn
ZXMpOwogCQkJcmV0dXJuIDA7CiAJCX0KIAkJU2V0UGFnZVJlZmVyZW5jZWQocGFnZSk7CiAJCXBh
Z2VzWypucl0gPSBwYWdlOwotCQlnZXRfcGFnZShwYWdlKTsKKworCQlpZiAoZmxhZ3MgJiBGT0xM
X1BJTikgeworCQkJaWYgKHVubGlrZWx5KCF0cnlfcGluX3BhZ2UocGFnZSkpKSB7CisJCQkJdW5k
b19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIGZsYWdzLCBwYWdlcyk7CisJCQkJcmV0dXJuIDA7
CisJCQl9CisJCX0gZWxzZQorCQkJZ2V0X3BhZ2UocGFnZSk7CisKIAkJKCpucikrKzsKIAkJcGZu
Kys7CiAJfSB3aGlsZSAoYWRkciArPSBQQUdFX1NJWkUsIGFkZHIgIT0gZW5kKTsKQEAgLTE5NzMs
NyArMjA5Nyw3IEBAIHN0YXRpYyBpbnQgX19ndXBfZGV2aWNlX2h1Z2VfcG1kKHBtZF90IG9yaWcs
IHBtZF90ICpwbWRwLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJCXJldHVybiAwOwogCiAJaWYgKHVu
bGlrZWx5KHBtZF92YWwob3JpZykgIT0gcG1kX3ZhbCgqcG1kcCkpKSB7Ci0JCXVuZG9fZGV2X3Bh
Z2VtYXAobnIsIG5yX3N0YXJ0LCBwYWdlcyk7CisJCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5yX3N0
YXJ0LCBmbGFncywgcGFnZXMpOwogCQlyZXR1cm4gMDsKIAl9CiAJcmV0dXJuIDE7CkBAIC0xOTkx
LDcgKzIxMTUsNyBAQCBzdGF0aWMgaW50IF9fZ3VwX2RldmljZV9odWdlX3B1ZChwdWRfdCBvcmln
LCBwdWRfdCAqcHVkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCQlyZXR1cm4gMDsKIAogCWlmICh1
bmxpa2VseShwdWRfdmFsKG9yaWcpICE9IHB1ZF92YWwoKnB1ZHApKSkgewotCQl1bmRvX2Rldl9w
YWdlbWFwKG5yLCBucl9zdGFydCwgcGFnZXMpOworCQl1bmRvX2Rldl9wYWdlbWFwKG5yLCBucl9z
dGFydCwgZmxhZ3MsIHBhZ2VzKTsKIAkJcmV0dXJuIDA7CiAJfQogCXJldHVybiAxOwpAQCAtMjAx
NCw4ICsyMTM4LDggQEAgc3RhdGljIGludCBfX2d1cF9kZXZpY2VfaHVnZV9wdWQocHVkX3QgcHVk
LCBwdWRfdCAqcHVkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogfQogI2VuZGlmCiAKLXN0YXRpYyBp
bnQgX19yZWNvcmRfc3VicGFnZXMoc3RydWN0IHBhZ2UgKnBhZ2UsIHVuc2lnbmVkIGxvbmcgYWRk
ciwKLQkJCSAgICAgdW5zaWduZWQgbG9uZyBlbmQsIHN0cnVjdCBwYWdlICoqcGFnZXMpCitzdGF0
aWMgaW50IHJlY29yZF9zdWJwYWdlcyhzdHJ1Y3QgcGFnZSAqcGFnZSwgdW5zaWduZWQgbG9uZyBh
ZGRyLAorCQkJICAgdW5zaWduZWQgbG9uZyBlbmQsIHN0cnVjdCBwYWdlICoqcGFnZXMpCiB7CiAJ
aW50IG5yOwogCkBAIC0yMDI1LDEyICsyMTQ5LDMxIEBAIHN0YXRpYyBpbnQgX19yZWNvcmRfc3Vi
cGFnZXMoc3RydWN0IHBhZ2UgKnBhZ2UsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlyZXR1cm4gbnI7
CiB9CiAKLXN0YXRpYyB2b2lkIHB1dF9jb21wb3VuZF9oZWFkKHN0cnVjdCBwYWdlICpwYWdlLCBp
bnQgcmVmcykKK3N0YXRpYyBib29sIGdyYWJfY29tcG91bmRfaGVhZChzdHJ1Y3QgcGFnZSAqaGVh
ZCwgaW50IHJlZnMsIHVuc2lnbmVkIGludCBmbGFncykKIHsKKwlpZiAoZmxhZ3MgJiBGT0xMX1BJ
TikgeworCQlpZiAodW5saWtlbHkoIXRyeV9waW5fY29tcG91bmRfaGVhZChoZWFkLCByZWZzKSkp
CisJCQlyZXR1cm4gZmFsc2U7CisJfSBlbHNlIHsKKwkJaGVhZCA9IHRyeV9nZXRfY29tcG91bmRf
aGVhZChoZWFkLCByZWZzKTsKKwkJaWYgKCFoZWFkKQorCQkJcmV0dXJuIGZhbHNlOworCX0KKwor
CXJldHVybiB0cnVlOworfQorCitzdGF0aWMgdm9pZCBwdXRfY29tcG91bmRfaGVhZChzdHJ1Y3Qg
cGFnZSAqcGFnZSwgaW50IHJlZnMsIHVuc2lnbmVkIGludCBmbGFncykKK3sKKwlzdHJ1Y3QgcGFn
ZSAqaGVhZCA9IGNvbXBvdW5kX2hlYWQocGFnZSk7CisKKwlpZiAoZmxhZ3MgJiBGT0xMX1BJTikK
KwkJcmVmcyAqPSBHVVBfUElOX0NPVU5USU5HX0JJQVM7CisKIAkvKiBEbyBhIGdldF9wYWdlKCkg
Zmlyc3QsIGluIGNhc2UgcmVmcyA9PSBwYWdlLT5fcmVmY291bnQgKi8KLQlnZXRfcGFnZShwYWdl
KTsKLQlwYWdlX3JlZl9zdWIocGFnZSwgcmVmcyk7Ci0JcHV0X3BhZ2UocGFnZSk7CisJZ2V0X3Bh
Z2UoaGVhZCk7CisJcGFnZV9yZWZfc3ViKGhlYWQsIHJlZnMpOworCXB1dF9wYWdlKGhlYWQpOwog
fQogCiAjaWZkZWYgQ09ORklHX0FSQ0hfSEFTX0hVR0VQRApAQCAtMjA2NCwxNCArMjIwNywxMyBA
QCBzdGF0aWMgaW50IGd1cF9odWdlcHRlKHB0ZV90ICpwdGVwLCB1bnNpZ25lZCBsb25nIHN6LCB1
bnNpZ25lZCBsb25nIGFkZHIsCiAKIAloZWFkID0gcHRlX3BhZ2UocHRlKTsKIAlwYWdlID0gaGVh
ZCArICgoYWRkciAmIChzei0xKSkgPj4gUEFHRV9TSElGVCk7Ci0JcmVmcyA9IF9fcmVjb3JkX3N1
YnBhZ2VzKHBhZ2UsIGFkZHIsIGVuZCwgcGFnZXMgKyAqbnIpOworCXJlZnMgPSByZWNvcmRfc3Vi
cGFnZXMocGFnZSwgYWRkciwgZW5kLCBwYWdlcyArICpucik7CiAKLQloZWFkID0gdHJ5X2dldF9j
b21wb3VuZF9oZWFkKGhlYWQsIHJlZnMpOwotCWlmICghaGVhZCkKKwlpZiAoIWdyYWJfY29tcG91
bmRfaGVhZChoZWFkLCByZWZzLCBmbGFncykpCiAJCXJldHVybiAwOwogCiAJaWYgKHVubGlrZWx5
KHB0ZV92YWwocHRlKSAhPSBwdGVfdmFsKCpwdGVwKSkpIHsKLQkJcHV0X2NvbXBvdW5kX2hlYWQo
aGVhZCwgcmVmcyk7CisJCXB1dF9jb21wb3VuZF9oZWFkKGhlYWQsIHJlZnMsIGZsYWdzKTsKIAkJ
cmV0dXJuIDA7CiAJfQogCkBAIC0yMTI0LDE0ICsyMjY2LDE0IEBAIHN0YXRpYyBpbnQgZ3VwX2h1
Z2VfcG1kKHBtZF90IG9yaWcsIHBtZF90ICpwbWRwLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJfQog
CiAJcGFnZSA9IHBtZF9wYWdlKG9yaWcpICsgKChhZGRyICYgflBNRF9NQVNLKSA+PiBQQUdFX1NI
SUZUKTsKLQlyZWZzID0gX19yZWNvcmRfc3VicGFnZXMocGFnZSwgYWRkciwgZW5kLCBwYWdlcyAr
ICpucik7CisJcmVmcyA9IHJlY29yZF9zdWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2VzICsg
Km5yKTsKIAotCWhlYWQgPSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQocG1kX3BhZ2Uob3JpZyksIHJl
ZnMpOwotCWlmICghaGVhZCkKKwloZWFkID0gcG1kX3BhZ2Uob3JpZyk7CisJaWYgKCFncmFiX2Nv
bXBvdW5kX2hlYWQoaGVhZCwgcmVmcywgZmxhZ3MpKQogCQlyZXR1cm4gMDsKIAogCWlmICh1bmxp
a2VseShwbWRfdmFsKG9yaWcpICE9IHBtZF92YWwoKnBtZHApKSkgewotCQlwdXRfY29tcG91bmRf
aGVhZChoZWFkLCByZWZzKTsKKwkJcHV0X2NvbXBvdW5kX2hlYWQoaGVhZCwgcmVmcywgZmxhZ3Mp
OwogCQlyZXR1cm4gMDsKIAl9CiAKQEAgLTIxNTgsMTQgKzIzMDAsMTQgQEAgc3RhdGljIGludCBn
dXBfaHVnZV9wdWQocHVkX3Qgb3JpZywgcHVkX3QgKnB1ZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwK
IAl9CiAKIAlwYWdlID0gcHVkX3BhZ2Uob3JpZykgKyAoKGFkZHIgJiB+UFVEX01BU0spID4+IFBB
R0VfU0hJRlQpOwotCXJlZnMgPSBfX3JlY29yZF9zdWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBh
Z2VzICsgKm5yKTsKKwlyZWZzID0gcmVjb3JkX3N1YnBhZ2VzKHBhZ2UsIGFkZHIsIGVuZCwgcGFn
ZXMgKyAqbnIpOwogCi0JaGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwdWRfcGFnZShvcmln
KSwgcmVmcyk7Ci0JaWYgKCFoZWFkKQorCWhlYWQgPSBwdWRfcGFnZShvcmlnKTsKKwlpZiAoIWdy
YWJfY29tcG91bmRfaGVhZChoZWFkLCByZWZzLCBmbGFncykpCiAJCXJldHVybiAwOwogCiAJaWYg
KHVubGlrZWx5KHB1ZF92YWwob3JpZykgIT0gcHVkX3ZhbCgqcHVkcCkpKSB7Ci0JCXB1dF9jb21w
b3VuZF9oZWFkKGhlYWQsIHJlZnMpOworCQlwdXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZzLCBm
bGFncyk7CiAJCXJldHVybiAwOwogCX0KIApAQCAtMjE4NywxNCArMjMyOSwxNCBAQCBzdGF0aWMg
aW50IGd1cF9odWdlX3BnZChwZ2RfdCBvcmlnLCBwZ2RfdCAqcGdkcCwgdW5zaWduZWQgbG9uZyBh
ZGRyLAogCUJVSUxEX0JVR19PTihwZ2RfZGV2bWFwKG9yaWcpKTsKIAogCXBhZ2UgPSBwZ2RfcGFn
ZShvcmlnKSArICgoYWRkciAmIH5QR0RJUl9NQVNLKSA+PiBQQUdFX1NISUZUKTsKLQlyZWZzID0g
X19yZWNvcmRfc3VicGFnZXMocGFnZSwgYWRkciwgZW5kLCBwYWdlcyArICpucik7CisJcmVmcyA9
IHJlY29yZF9zdWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2VzICsgKm5yKTsKIAotCWhlYWQg
PSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQocGdkX3BhZ2Uob3JpZyksIHJlZnMpOwotCWlmICghaGVh
ZCkKKwloZWFkID0gcGdkX3BhZ2Uob3JpZyk7CisJaWYgKCFncmFiX2NvbXBvdW5kX2hlYWQoaGVh
ZCwgcmVmcywgZmxhZ3MpKQogCQlyZXR1cm4gMDsKIAogCWlmICh1bmxpa2VseShwZ2RfdmFsKG9y
aWcpICE9IHBnZF92YWwoKnBnZHApKSkgewotCQlwdXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZz
KTsKKwkJcHV0X2NvbXBvdW5kX2hlYWQoaGVhZCwgcmVmcywgZmxhZ3MpOwogCQlyZXR1cm4gMDsK
IAl9CiAKQEAgLTI0OTQsOSArMjYzNiwxMiBAQCBFWFBPUlRfU1lNQk9MX0dQTChnZXRfdXNlcl9w
YWdlc19mYXN0KTsKIC8qKgogICogcGluX3VzZXJfcGFnZXNfZmFzdCgpIC0gcGluIHVzZXIgcGFn
ZXMgaW4gbWVtb3J5IHdpdGhvdXQgdGFraW5nIGxvY2tzCiAgKgotICogRm9yIG5vdywgdGhpcyBp
cyBhIHBsYWNlaG9sZGVyIGZ1bmN0aW9uLCB1bnRpbCB2YXJpb3VzIGNhbGwgc2l0ZXMgYXJlCi0g
KiBjb252ZXJ0ZWQgdG8gdXNlIHRoZSBjb3JyZWN0IGdldF91c2VyX3BhZ2VzKigpIG9yIHBpbl91
c2VyX3BhZ2VzKigpIEFQSS4gU28sCi0gKiB0aGlzIGlzIGlkZW50aWNhbCB0byBnZXRfdXNlcl9w
YWdlc19mYXN0KCkuCisgKiBOZWFybHkgdGhlIHNhbWUgYXMgZ2V0X3VzZXJfcGFnZXNfZmFzdCgp
LCBleGNlcHQgdGhhdCBGT0xMX1BJTiBpcyBzZXQuIFNlZQorICogZ2V0X3VzZXJfcGFnZXNfZmFz
dCgpIGZvciBkb2N1bWVudGF0aW9uIG9uIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMsIGJlY2F1c2UK
KyAqIHRoZSBhcmd1bWVudHMgaGVyZSBhcmUgaWRlbnRpY2FsLgorICoKKyAqIEZPTExfUElOIG1l
YW5zIHRoYXQgdGhlIHBhZ2VzIG11c3QgYmUgcmVsZWFzZWQgdmlhIHVucGluX3VzZXJfcGFnZSgp
LiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBmb3Ig
ZnVydGhlciBkZXRhaWxzLgogICoKICAqIFRoaXMgaXMgaW50ZW5kZWQgZm9yIENhc2UgMSAoRElP
KSBpbiBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdC4gSXQKICAqIGlzIE5PVCBp
bnRlbmRlZCBmb3IgQ2FzZSAyIChSRE1BOiBsb25nLXRlcm0gcGlucykuCkBAIC0yNTA0LDIxICsy
NjQ5LDI0IEBAIEVYUE9SVF9TWU1CT0xfR1BMKGdldF91c2VyX3BhZ2VzX2Zhc3QpOwogaW50IHBp
bl91c2VyX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9uZyBzdGFydCwgaW50IG5yX3BhZ2VzLAogCQkJ
dW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcykKIHsKLQkvKgotCSAq
IFRoaXMgaXMgYSBwbGFjZWhvbGRlciwgdW50aWwgdGhlIHBpbiBmdW5jdGlvbmFsaXR5IGlzIGFj
dGl2YXRlZC4KLQkgKiBVbnRpbCB0aGVuLCBqdXN0IGJlaGF2ZSBsaWtlIHRoZSBjb3JyZXNwb25k
aW5nIGdldF91c2VyX3BhZ2VzKigpCi0JICogcm91dGluZS4KLQkgKi8KLQlyZXR1cm4gZ2V0X3Vz
ZXJfcGFnZXNfZmFzdChzdGFydCwgbnJfcGFnZXMsIGd1cF9mbGFncywgcGFnZXMpOworCS8qIEZP
TExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJO
X09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9HRVQpKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCWd1
cF9mbGFncyB8PSBGT0xMX1BJTjsKKwlyZXR1cm4gaW50ZXJuYWxfZ2V0X3VzZXJfcGFnZXNfZmFz
dChzdGFydCwgbnJfcGFnZXMsIGd1cF9mbGFncywgcGFnZXMpOwogfQogRVhQT1JUX1NZTUJPTF9H
UEwocGluX3VzZXJfcGFnZXNfZmFzdCk7CiAKIC8qKgogICogcGluX3VzZXJfcGFnZXNfcmVtb3Rl
KCkgLSBwaW4gcGFnZXMgb2YgYSByZW1vdGUgcHJvY2VzcyAodGFzayAhPSBjdXJyZW50KQogICoK
LSAqIEZvciBub3csIHRoaXMgaXMgYSBwbGFjZWhvbGRlciBmdW5jdGlvbiwgdW50aWwgdmFyaW91
cyBjYWxsIHNpdGVzIGFyZQotICogY29udmVydGVkIHRvIHVzZSB0aGUgY29ycmVjdCBnZXRfdXNl
cl9wYWdlcyooKSBvciBwaW5fdXNlcl9wYWdlcyooKSBBUEkuIFNvLAotICogdGhpcyBpcyBpZGVu
dGljYWwgdG8gZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKCkuCisgKiBOZWFybHkgdGhlIHNhbWUgYXMg
Z2V0X3VzZXJfcGFnZXNfcmVtb3RlKCksIGV4Y2VwdCB0aGF0IEZPTExfUElOIGlzIHNldC4gU2Vl
CisgKiBnZXRfdXNlcl9wYWdlc19yZW1vdGUoKSBmb3IgZG9jdW1lbnRhdGlvbiBvbiB0aGUgZnVu
Y3Rpb24gYXJndW1lbnRzLCBiZWNhdXNlCisgKiB0aGUgYXJndW1lbnRzIGhlcmUgYXJlIGlkZW50
aWNhbC4KKyAqCisgKiBGT0xMX1BJTiBtZWFucyB0aGF0IHRoZSBwYWdlcyBtdXN0IGJlIHJlbGVh
c2VkIHZpYSB1bnBpbl91c2VyX3BhZ2UoKS4gUGxlYXNlCisgKiBzZWUgRG9jdW1lbnRhdGlvbi92
bS9waW5fdXNlcl9wYWdlcy5yc3QgZm9yIGRldGFpbHMuCiAgKgogICogVGhpcyBpcyBpbnRlbmRl
ZCBmb3IgQ2FzZSAxIChESU8pIGluIERvY3VtZW50YXRpb24vdm0vcGluX3VzZXJfcGFnZXMucnN0
LiBJdAogICogaXMgTk9UIGludGVuZGVkIGZvciBDYXNlIDIgKFJETUE6IGxvbmctdGVybSBwaW5z
KS4KQEAgLTI1MjgsMjIgKzI2NzYsMjQgQEAgbG9uZyBwaW5fdXNlcl9wYWdlc19yZW1vdGUoc3Ry
dWN0IHRhc2tfc3RydWN0ICp0c2ssIHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAogCQkJICAgdW5zaWdu
ZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcywKIAkJCSAgIHN0cnVjdCB2bV9h
cmVhX3N0cnVjdCAqKnZtYXMsIGludCAqbG9ja2VkKQogewotCS8qCi0JICogVGhpcyBpcyBhIHBs
YWNlaG9sZGVyLCB1bnRpbCB0aGUgcGluIGZ1bmN0aW9uYWxpdHkgaXMgYWN0aXZhdGVkLgotCSAq
IFVudGlsIHRoZW4sIGp1c3QgYmVoYXZlIGxpa2UgdGhlIGNvcnJlc3BvbmRpbmcgZ2V0X3VzZXJf
cGFnZXMqKCkKLQkgKiByb3V0aW5lLgotCSAqLwotCXJldHVybiBnZXRfdXNlcl9wYWdlc19yZW1v
dGUodHNrLCBtbSwgc3RhcnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3MsIHBhZ2VzLAotCQkJCSAgICAg
dm1hcywgbG9ja2VkKTsKKwkvKiBGT0xMX0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4
Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfR0VUKSkKKwkJ
cmV0dXJuIC1FSU5WQUw7CisKKwlndXBfZmxhZ3MgfD0gRk9MTF9QSU47CisJcmV0dXJuIF9fZ2V0
X3VzZXJfcGFnZXNfcmVtb3RlKHRzaywgbW0sIHN0YXJ0LCBucl9wYWdlcywgZ3VwX2ZsYWdzLAor
CQkJCSAgICAgICBwYWdlcywgdm1hcywgbG9ja2VkKTsKIH0KIEVYUE9SVF9TWU1CT0wocGluX3Vz
ZXJfcGFnZXNfcmVtb3RlKTsKIAogLyoqCiAgKiBwaW5fdXNlcl9wYWdlcygpIC0gcGluIHVzZXIg
cGFnZXMgaW4gbWVtb3J5IGZvciB1c2UgYnkgb3RoZXIgZGV2aWNlcwogICoKLSAqIEZvciBub3cs
IHRoaXMgaXMgYSBwbGFjZWhvbGRlciBmdW5jdGlvbiwgdW50aWwgdmFyaW91cyBjYWxsIHNpdGVz
IGFyZQotICogY29udmVydGVkIHRvIHVzZSB0aGUgY29ycmVjdCBnZXRfdXNlcl9wYWdlcyooKSBv
ciBwaW5fdXNlcl9wYWdlcyooKSBBUEkuIFNvLAotICogdGhpcyBpcyBpZGVudGljYWwgdG8gZ2V0
X3VzZXJfcGFnZXMoKS4KKyAqIE5lYXJseSB0aGUgc2FtZSBhcyBnZXRfdXNlcl9wYWdlcygpLCBl
eGNlcHQgdGhhdCBGT0xMX1RPVUNIIGlzIG5vdCBzZXQsIGFuZAorICogRk9MTF9QSU4gaXMgc2V0
LgorICoKKyAqIEZPTExfUElOIG1lYW5zIHRoYXQgdGhlIHBhZ2VzIG11c3QgYmUgcmVsZWFzZWQg
dmlhIHVucGluX3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bp
bl91c2VyX3BhZ2VzLnJzdCBmb3IgZGV0YWlscy4KICAqCiAgKiBUaGlzIGlzIGludGVuZGVkIGZv
ciBDYXNlIDEgKERJTykgaW4gRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuIEl0
CiAgKiBpcyBOT1QgaW50ZW5kZWQgZm9yIENhc2UgMiAoUkRNQTogbG9uZy10ZXJtIHBpbnMpLgpA
QCAtMjU1MiwxMSArMjcwMiwxMiBAQCBsb25nIHBpbl91c2VyX3BhZ2VzKHVuc2lnbmVkIGxvbmcg
c3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCiAJCSAgICB1bnNpZ25lZCBpbnQgZ3VwX2Zs
YWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAogCQkgICAgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoq
dm1hcykKIHsKLQkvKgotCSAqIFRoaXMgaXMgYSBwbGFjZWhvbGRlciwgdW50aWwgdGhlIHBpbiBm
dW5jdGlvbmFsaXR5IGlzIGFjdGl2YXRlZC4KLQkgKiBVbnRpbCB0aGVuLCBqdXN0IGJlaGF2ZSBs
aWtlIHRoZSBjb3JyZXNwb25kaW5nIGdldF91c2VyX3BhZ2VzKigpCi0JICogcm91dGluZS4KLQkg
Ki8KLQlyZXR1cm4gZ2V0X3VzZXJfcGFnZXMoc3RhcnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3MsIHBh
Z2VzLCB2bWFzKTsKKwkvKiBGT0xMX0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1
c2l2ZS4gKi8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfR0VUKSkKKwkJcmV0
dXJuIC1FSU5WQUw7CisKKwlndXBfZmxhZ3MgfD0gRk9MTF9QSU47CisJcmV0dXJuIF9fZ3VwX2xv
bmd0ZXJtX2xvY2tlZChjdXJyZW50LCBjdXJyZW50LT5tbSwgc3RhcnQsIG5yX3BhZ2VzLAorCQkJ
CSAgICAgcGFnZXMsIHZtYXMsIGd1cF9mbGFncyk7CiB9CiBFWFBPUlRfU1lNQk9MKHBpbl91c2Vy
X3BhZ2VzKTsKZGlmZiAtLWdpdCBhL21tL2h1Z2VfbWVtb3J5LmMgYi9tbS9odWdlX21lbW9yeS5j
CmluZGV4IDEzY2M5Mzc4NTAwNi4uOTgxYTllYTBiODNmIDEwMDY0NAotLS0gYS9tbS9odWdlX21l
bW9yeS5jCisrKyBiL21tL2h1Z2VfbWVtb3J5LmMKQEAgLTk0NSw2ICs5NDUsMTEgQEAgc3RydWN0
IHBhZ2UgKmZvbGxvd19kZXZtYXBfcG1kKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNp
Z25lZCBsb25nIGFkZHIsCiAJICovCiAJV0FSTl9PTkNFKGZsYWdzICYgRk9MTF9DT1csICJtbTog
SW4gZm9sbG93X2Rldm1hcF9wbWQgd2l0aCBGT0xMX0NPVyBzZXQiKTsKIAorCS8qIEZPTExfR0VU
IGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09OX09O
Q0UoKGZsYWdzICYgKEZPTExfUElOIHwgRk9MTF9HRVQpKSA9PQorCQkJIChGT0xMX1BJTiB8IEZP
TExfR0VUKSkpCisJCXJldHVybiBOVUxMOworCiAJaWYgKGZsYWdzICYgRk9MTF9XUklURSAmJiAh
cG1kX3dyaXRlKCpwbWQpKQogCQlyZXR1cm4gTlVMTDsKIApAQCAtOTYwLDcgKzk2NSw3IEBAIHN0
cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFwX3BtZChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwg
dW5zaWduZWQgbG9uZyBhZGRyLAogCSAqIGRldmljZSBtYXBwZWQgcGFnZXMgY2FuIG9ubHkgYmUg
cmV0dXJuZWQgaWYgdGhlCiAJICogY2FsbGVyIHdpbGwgbWFuYWdlIHRoZSBwYWdlIHJlZmVyZW5j
ZSBjb3VudC4KIAkgKi8KLQlpZiAoIShmbGFncyAmIEZPTExfR0VUKSkKKwlpZiAoIShmbGFncyAm
IChGT0xMX0dFVCB8IEZPTExfUElOKSkpCiAJCXJldHVybiBFUlJfUFRSKC1FRVhJU1QpOwogCiAJ
cGZuICs9IChhZGRyICYgflBNRF9NQVNLKSA+PiBQQUdFX1NISUZUOwpAQCAtOTY4LDcgKzk3Mywx
NCBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X2Rldm1hcF9wbWQoc3RydWN0IHZtX2FyZWFfc3RydWN0
ICp2bWEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlpZiAoISpwZ21hcCkKIAkJcmV0dXJuIEVSUl9Q
VFIoLUVGQVVMVCk7CiAJcGFnZSA9IHBmbl90b19wYWdlKHBmbik7Ci0JZ2V0X3BhZ2UocGFnZSk7
CisKKwkvKgorCSAqIGdyYWJfcGFnZSgpIGlzIG5vdCBhY3R1YWxseSBleHBlY3RlZCB0byBmYWls
IGhlcmUgYmVjYXVzZSB3ZSBob2xkIHRoZQorCSAqIHBtZCBsb2NrLCBzbyBubyBvbmUgY2FuIHVu
bWFwIHRoZSBwbWQgYW5kIGZyZWUgdGhlIHBhZ2UgdGhhdCBpdAorCSAqIHBvaW50cyB0by4KKwkg
Ki8KKwlpZiAoIWdyYWJfcGFnZShwYWdlLCBmbGFncykpCisJCXBhZ2UgPSBFUlJfUFRSKC1FRkFV
TFQpOwogCiAJcmV0dXJuIHBhZ2U7CiB9CkBAIC0xMDg4LDYgKzExMDAsMTEgQEAgc3RydWN0IHBh
Z2UgKmZvbGxvd19kZXZtYXBfcHVkKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25l
ZCBsb25nIGFkZHIsCiAJaWYgKGZsYWdzICYgRk9MTF9XUklURSAmJiAhcHVkX3dyaXRlKCpwdWQp
KQogCQlyZXR1cm4gTlVMTDsKIAorCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFs
bHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoKGZsYWdzICYgKEZPTExfUElOIHwg
Rk9MTF9HRVQpKSA9PQorCQkJIChGT0xMX1BJTiB8IEZPTExfR0VUKSkpCisJCXJldHVybiBOVUxM
OworCiAJaWYgKHB1ZF9wcmVzZW50KCpwdWQpICYmIHB1ZF9kZXZtYXAoKnB1ZCkpCiAJCS8qIHBh
c3MgKi87CiAJZWxzZQpAQCAtMTA5OSw4ICsxMTE2LDEwIEBAIHN0cnVjdCBwYWdlICpmb2xsb3df
ZGV2bWFwX3B1ZChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRy
LAogCS8qCiAJICogZGV2aWNlIG1hcHBlZCBwYWdlcyBjYW4gb25seSBiZSByZXR1cm5lZCBpZiB0
aGUKIAkgKiBjYWxsZXIgd2lsbCBtYW5hZ2UgdGhlIHBhZ2UgcmVmZXJlbmNlIGNvdW50LgorCSAq
CisJICogQXQgbGVhc3Qgb25lIG9mIEZPTExfR0VUIHwgRk9MTF9QSU4gbXVzdCBiZSBzZXQsIHNv
IGFzc2VydCB0aGF0IGhlcmU6CiAJICovCi0JaWYgKCEoZmxhZ3MgJiBGT0xMX0dFVCkpCisJaWYg
KCEoZmxhZ3MgJiAoRk9MTF9HRVQgfCBGT0xMX1BJTikpKQogCQlyZXR1cm4gRVJSX1BUUigtRUVY
SVNUKTsKIAogCXBmbiArPSAoYWRkciAmIH5QVURfTUFTSykgPj4gUEFHRV9TSElGVDsKQEAgLTEx
MDgsNyArMTEyNywxNCBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X2Rldm1hcF9wdWQoc3RydWN0IHZt
X2FyZWFfc3RydWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlpZiAoISpwZ21hcCkKIAkJ
cmV0dXJuIEVSUl9QVFIoLUVGQVVMVCk7CiAJcGFnZSA9IHBmbl90b19wYWdlKHBmbik7Ci0JZ2V0
X3BhZ2UocGFnZSk7CisKKwkvKgorCSAqIGdyYWJfcGFnZSgpIGlzIG5vdCBhY3R1YWxseSBleHBl
Y3RlZCB0byBmYWlsIGhlcmUgYmVjYXVzZSB3ZSBob2xkIHRoZQorCSAqIHBtZCBsb2NrLCBzbyBu
byBvbmUgY2FuIHVubWFwIHRoZSBwbWQgYW5kIGZyZWUgdGhlIHBhZ2UgdGhhdCBpdAorCSAqIHBv
aW50cyB0by4KKwkgKi8KKwlpZiAoIWdyYWJfcGFnZShwYWdlLCBmbGFncykpCisJCXBhZ2UgPSBF
UlJfUFRSKC1FRkFVTFQpOwogCiAJcmV0dXJuIHBhZ2U7CiB9CkBAIC0xNTIyLDggKzE1NDgsMTQg
QEAgc3RydWN0IHBhZ2UgKmZvbGxvd190cmFuc19odWdlX3BtZChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1
Y3QgKnZtYSwKIHNraXBfbWxvY2s6CiAJcGFnZSArPSAoYWRkciAmIH5IUEFHRV9QTURfTUFTSykg
Pj4gUEFHRV9TSElGVDsKIAlWTV9CVUdfT05fUEFHRSghUGFnZUNvbXBvdW5kKHBhZ2UpICYmICFp
c196b25lX2RldmljZV9wYWdlKHBhZ2UpLCBwYWdlKTsKLQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkK
LQkJZ2V0X3BhZ2UocGFnZSk7CisKKwkvKgorCSAqIGdyYWJfcGFnZSgpIGlzIG5vdCBhY3R1YWxs
eSBleHBlY3RlZCB0byBmYWlsIGhlcmUgYmVjYXVzZSB3ZSBob2xkIHRoZQorCSAqIHBtZCBsb2Nr
LCBzbyBubyBvbmUgY2FuIHVubWFwIHRoZSBwbWQgYW5kIGZyZWUgdGhlIHBhZ2UgdGhhdCBpdAor
CSAqIHBvaW50cyB0by4KKwkgKi8KKwlpZiAoIWdyYWJfcGFnZShwYWdlLCBmbGFncykpCisJCXBh
Z2UgPSBFUlJfUFRSKC1FRkFVTFQpOwogCiBvdXQ6CiAJcmV0dXJuIHBhZ2U7CmRpZmYgLS1naXQg
YS9tbS9odWdldGxiLmMgYi9tbS9odWdldGxiLmMKaW5kZXggYjQ1YTk1MzYzYTg0Li5lYWMzMzEw
ZDYyZjUgMTAwNjQ0Ci0tLSBhL21tL2h1Z2V0bGIuYworKysgYi9tbS9odWdldGxiLmMKQEAgLTQ0
NjIsNyArNDQ2MiwxOSBAQCBsb25nIGZvbGxvd19odWdldGxiX3BhZ2Uoc3RydWN0IG1tX3N0cnVj
dCAqbW0sIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLAogc2FtZV9wYWdlOgogCQlpZiAocGFn
ZXMpIHsKIAkJCXBhZ2VzW2ldID0gbWVtX21hcF9vZmZzZXQocGFnZSwgcGZuX29mZnNldCk7Ci0J
CQlnZXRfcGFnZShwYWdlc1tpXSk7CisKKwkJCS8qCisJCQkgKiBncmFiX3BhZ2UoKSBpcyBub3Qg
YWN0dWFsbHkgZXhwZWN0ZWQgdG8gZmFpbCBoZXJlCisJCQkgKiBiZWNhdXNlIHdlIGhvbGQgdGhl
IHBtZCBsb2NrLCBzbyBubyBvbmUgY2FuIHVubWFwIHRoZQorCQkJICogcG1kIGFuZCBmcmVlIHRo
ZSBwYWdlIHRoYXQgaXQgcG9pbnRzIHRvLgorCQkJICovCisJCQlpZiAoIWdyYWJfcGFnZShwYWdl
c1tpXSwgZmxhZ3MpKSB7CisJCQkJc3Bpbl91bmxvY2socHRsKTsKKwkJCQlyZW1haW5kZXIgPSAw
OworCQkJCWVyciA9IC1FTk9NRU07CisJCQkJV0FSTl9PTl9PTkNFKDEpOworCQkJCWJyZWFrOwor
CQkJfQogCQl9CiAKIAkJaWYgKHZtYXMpCkBAIC01MDIyLDYgKzUwMzQsMTIgQEAgZm9sbG93X2h1
Z2VfcG1kKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsCiAJc3Ry
dWN0IHBhZ2UgKnBhZ2UgPSBOVUxMOwogCXNwaW5sb2NrX3QgKnB0bDsKIAlwdGVfdCBwdGU7CisK
KwkvKiBGT0xMX0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlp
ZiAoV0FSTl9PTl9PTkNFKChmbGFncyAmIChGT0xMX1BJTiB8IEZPTExfR0VUKSkgPT0KKwkJCSAo
Rk9MTF9QSU4gfCBGT0xMX0dFVCkpKQorCQlyZXR1cm4gTlVMTDsKKwogcmV0cnk6CiAJcHRsID0g
cG1kX2xvY2twdHIobW0sIHBtZCk7CiAJc3Bpbl9sb2NrKHB0bCk7CkBAIC01MDM0LDggKzUwNTIs
MjAgQEAgZm9sbG93X2h1Z2VfcG1kKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25n
IGFkZHJlc3MsCiAJcHRlID0gaHVnZV9wdGVwX2dldCgocHRlX3QgKilwbWQpOwogCWlmIChwdGVf
cHJlc2VudChwdGUpKSB7CiAJCXBhZ2UgPSBwbWRfcGFnZSgqcG1kKSArICgoYWRkcmVzcyAmIH5Q
TURfTUFTSykgPj4gUEFHRV9TSElGVCk7CisKIAkJaWYgKGZsYWdzICYgRk9MTF9HRVQpCiAJCQln
ZXRfcGFnZShwYWdlKTsKKwkJZWxzZSBpZiAoZmxhZ3MgJiBGT0xMX1BJTikgeworCQkJLyoKKwkJ
CSAqIHRyeV9waW5fcGFnZSgpIGlzIG5vdCBhY3R1YWxseSBleHBlY3RlZCB0byBmYWlsCisJCQkg
KiBoZXJlIGJlY2F1c2Ugd2UgaG9sZCB0aGUgcHRsLgorCQkJICovCisJCQlpZiAodW5saWtlbHko
IXRyeV9waW5fcGFnZShwYWdlKSkpIHsKKwkJCQlXQVJOX09OX09OQ0UoMSk7CisJCQkJcGFnZSA9
IE5VTEw7CisJCQkJZ290byBvdXQ7CisJCQl9CisJCX0KIAl9IGVsc2UgewogCQlpZiAoaXNfaHVn
ZXRsYl9lbnRyeV9taWdyYXRpb24ocHRlKSkgewogCQkJc3Bpbl91bmxvY2socHRsKTsKQEAgLTUw
NTYsNyArNTA4Niw3IEBAIHN0cnVjdCBwYWdlICogX193ZWFrCiBmb2xsb3dfaHVnZV9wdWQoc3Ry
dWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKIAkJcHVkX3QgKnB1ZCwg
aW50IGZsYWdzKQogewotCWlmIChmbGFncyAmIEZPTExfR0VUKQorCWlmIChmbGFncyAmIChGT0xM
X0dFVCB8IEZPTExfUElOKSkKIAkJcmV0dXJuIE5VTEw7CiAKIAlyZXR1cm4gcHRlX3BhZ2UoKihw
dGVfdCAqKXB1ZCkgKyAoKGFkZHJlc3MgJiB+UFVEX01BU0spID4+IFBBR0VfU0hJRlQpOwpAQCAt
NTA2NSw3ICs1MDk1LDcgQEAgZm9sbG93X2h1Z2VfcHVkKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1
bnNpZ25lZCBsb25nIGFkZHJlc3MsCiBzdHJ1Y3QgcGFnZSAqIF9fd2VhawogZm9sbG93X2h1Z2Vf
cGdkKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsIHBnZF90ICpw
Z2QsIGludCBmbGFncykKIHsKLQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKKwlpZiAoZmxhZ3MgJiAo
Rk9MTF9HRVQgfCBGT0xMX1BJTikpCiAJCXJldHVybiBOVUxMOwogCiAJcmV0dXJuIHB0ZV9wYWdl
KCoocHRlX3QgKilwZ2QpICsgKChhZGRyZXNzICYgflBHRElSX01BU0spID4+IFBBR0VfU0hJRlQp
OwpkaWZmIC0tZ2l0IGEvbW0vdm1zdGF0LmMgYi9tbS92bXN0YXQuYwppbmRleCBhODIyMjA0MWJk
NDQuLmZkYWQ0MGNjZGU3YiAxMDA2NDQKLS0tIGEvbW0vdm1zdGF0LmMKKysrIGIvbW0vdm1zdGF0
LmMKQEAgLTExNjcsNiArMTE2Nyw4IEBAIGNvbnN0IGNoYXIgKiBjb25zdCB2bXN0YXRfdGV4dFtd
ID0gewogCSJucl9kaXJ0aWVkIiwKIAkibnJfd3JpdHRlbiIsCiAJIm5yX2tlcm5lbF9taXNjX3Jl
Y2xhaW1hYmxlIiwKKwkibnJfZm9sbF9waW5fcmVxdWVzdGVkIiwKKwkibnJfZm9sbF9waW5fcmV0
dXJuZWQiLAogCiAJLyogZW51bSB3cml0ZWJhY2tfc3RhdF9pdGVtIGNvdW50ZXJzICovCiAJIm5y
X2RpcnR5X3RocmVzaG9sZCIsCi0tIAoyLjI0LjAKCl9fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fCmRyaS1kZXZlbCBtYWlsaW5nIGxpc3QKZHJpLWRldmVsQGxp
c3RzLmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFu
L2xpc3RpbmZvL2RyaS1kZXZlbA==
