Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 078F5122E61
	for <lists+dri-devel@lfdr.de>; Tue, 17 Dec 2019 15:19:14 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id EE0D56E9F2;
	Tue, 17 Dec 2019 14:19:11 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from hqnvemgate24.nvidia.com (hqnvemgate24.nvidia.com
 [216.228.121.143])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 4AEAB6E9F2
 for <dri-devel@lists.freedesktop.org>; Tue, 17 Dec 2019 14:19:10 +0000 (UTC)
Received: from hqpgpgate102.nvidia.com (Not Verified[216.228.121.13]) by
 hqnvemgate24.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
 id <B5df8e3c10000>; Tue, 17 Dec 2019 06:18:41 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
 by hqpgpgate102.nvidia.com (PGP Universal service);
 Tue, 17 Dec 2019 06:19:09 -0800
X-PGP-Universal: processed;
 by hqpgpgate102.nvidia.com on Tue, 17 Dec 2019 06:19:09 -0800
Received: from HQMAIL109.nvidia.com (172.20.187.15) by HQMAIL111.nvidia.com
 (172.20.187.18) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Tue, 17 Dec
 2019 14:19:08 +0000
Received: from hqnvemgw03.nvidia.com (10.124.88.68) by HQMAIL109.nvidia.com
 (172.20.187.15) with Microsoft SMTP Server (TLS) id 15.0.1473.3 via Frontend
 Transport; Tue, 17 Dec 2019 14:19:08 +0000
Received: from blueforge.nvidia.com (Not Verified[10.110.48.28]) by
 hqnvemgw03.nvidia.com with Trustwave SEG (v7, 5, 8, 10121)
 id <B5df8e3dc0003>; Tue, 17 Dec 2019 06:19:08 -0800
From: John Hubbard <jhubbard@nvidia.com>
To: Andrew Morton <akpm@linux-foundation.org>
Subject: [PATCH v12 23/25] mm/gup: track FOLL_PIN pages
Date: Tue, 17 Dec 2019 06:19:01 -0800
Message-ID: <20191217141901.874702-1-jhubbard@nvidia.com>
X-Mailer: git-send-email 2.24.1
In-Reply-To: <20191216222537.491123-24-jhubbard@nvidia.com>
References: <20191216222537.491123-24-jhubbard@nvidia.com>
MIME-Version: 1.0
X-NVConfidentiality: public
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=nvidia.com; s=n1;
 t=1576592322; bh=yGQVJwNlSJBZkkGESibGSwk1A1nVPlKXUKCwPcdq6AM=;
 h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
 In-Reply-To:References:MIME-Version:X-NVConfidentiality:
 Content-Type:Content-Transfer-Encoding;
 b=ZZLMZamMD21aoPrWrEcmKeIS0qIZj46aJhBcUQNXygYrBsUEoFoahkvFVmx5sIdft
 pki+5FCkduLq753MXK5hV9Cfz+VKOWADO13PqmIWL5i4X32+H8WkuyKufI8D6AZQy1
 p0O/84KwqbMdVFy9lBy32HYUGcsVqHpgOvpKWcXw81VmRNfc/7jmH+fx9/8O14EsAo
 aQJOgWkOq2f9Rk1I9UvQs9rq/2AvhPqys8pApACoCPV0mIqnTTD2SblddeKfD9ashq
 NpPYmK/Aw7TObbJq30Q/ZnfSzvCJ62IeNf4NZ1cS3M/zSz5M6zkgncx16T7YJtEl47
 VQx0X2PHxtzwA==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Michal Hocko <mhocko@suse.com>, Jan Kara <jack@suse.cz>,
 kvm@vger.kernel.org, linux-doc@vger.kernel.org,
 David Airlie <airlied@linux.ie>, Dave Chinner <david@fromorbit.com>,
 dri-devel@lists.freedesktop.org, LKML <linux-kernel@vger.kernel.org>,
 linux-mm@kvack.org, Paul Mackerras <paulus@samba.org>,
 linux-kselftest@vger.kernel.org, Ira Weiny <ira.weiny@intel.com>,
 Jonathan Corbet <corbet@lwn.net>, linux-rdma@vger.kernel.org,
 Michael Ellerman <mpe@ellerman.id.au>, Christoph Hellwig <hch@infradead.org>,
 Jason Gunthorpe <jgg@ziepe.ca>, Vlastimil Babka <vbabka@suse.cz>,
 =?UTF-8?q?Bj=C3=B6rn=20T=C3=B6pel?= <bjorn.topel@intel.com>,
 linux-media@vger.kernel.org, Shuah Khan <shuah@kernel.org>,
 John Hubbard <jhubbard@nvidia.com>, linux-block@vger.kernel.org,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Al Viro <viro@zeniv.linux.org.uk>, Dan Williams <dan.j.williams@intel.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Magnus Karlsson <magnus.karlsson@intel.com>, Jens Axboe <axboe@kernel.dk>,
 netdev@vger.kernel.org, Alex Williamson <alex.williamson@redhat.com>,
 linux-fsdevel@vger.kernel.org, bpf@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org, "David S . Miller" <davem@davemloft.net>,
 "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>,
 Mike Kravetz <mike.kravetz@oracle.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

QWRkIHRyYWNraW5nIG9mIHBhZ2VzIHRoYXQgd2VyZSBwaW5uZWQgdmlhIEZPTExfUElOLgoKQXMg
bWVudGlvbmVkIGluIHRoZSBGT0xMX1BJTiBkb2N1bWVudGF0aW9uLCBjYWxsZXJzIHdobyBlZmZl
Y3RpdmVseSBzZXQKRk9MTF9QSU4gYXJlIHJlcXVpcmVkIHRvIHVsdGltYXRlbHkgZnJlZSBzdWNo
IHBhZ2VzIHZpYSB1bnBpbl91c2VyX3BhZ2UoKS4KVGhlIGVmZmVjdCBpcyBzaW1pbGFyIHRvIEZP
TExfR0VULCBhbmQgbWF5IGJlIHRob3VnaHQgb2YgYXMgIkZPTExfR0VUCmZvciBESU8gYW5kL29y
IFJETUEgdXNlIi4KClBhZ2VzIHRoYXQgaGF2ZSBiZWVuIHBpbm5lZCB2aWEgRk9MTF9QSU4gYXJl
IGlkZW50aWZpYWJsZSB2aWEgYQpuZXcgZnVuY3Rpb24gY2FsbDoKCiAgIGJvb2wgcGFnZV9kbWFf
cGlubmVkKHN0cnVjdCBwYWdlICpwYWdlKTsKCldoYXQgdG8gZG8gaW4gcmVzcG9uc2UgdG8gZW5j
b3VudGVyaW5nIHN1Y2ggYSBwYWdlLCBpcyBsZWZ0IHRvIGxhdGVyCnBhdGNoc2V0cy4gVGhlcmUg
aXMgZGlzY3Vzc2lvbiBhYm91dCB0aGlzIGluIFsxXSwgWzJdLCBhbmQgWzNdLgoKVGhpcyBhbHNv
IGNoYW5nZXMgYSBCVUdfT04oKSwgdG8gYSBXQVJOX09OKCksIGluIGZvbGxvd19wYWdlX21hc2so
KS4KClsxXSBTb21lIHNsb3cgcHJvZ3Jlc3Mgb24gZ2V0X3VzZXJfcGFnZXMoKSAoQXByIDIsIDIw
MTkpOgogICAgaHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzc4NDU3NC8KWzJdIERNQSBhbmQgZ2V0
X3VzZXJfcGFnZXMoKSAoTFBDOiBEZWMgMTIsIDIwMTgpOgogICAgaHR0cHM6Ly9sd24ubmV0L0Fy
dGljbGVzLzc3NDQxMS8KWzNdIFRoZSB0cm91YmxlIHdpdGggZ2V0X3VzZXJfcGFnZXMoKSAoQXBy
IDMwLCAyMDE4KToKICAgIGh0dHBzOi8vbHduLm5ldC9BcnRpY2xlcy83NTMwMjcvCgpSZXZpZXdl
ZC1ieTogSmFuIEthcmEgPGphY2tAc3VzZS5jej4KU3VnZ2VzdGVkLWJ5OiBKYW4gS2FyYSA8amFj
a0BzdXNlLmN6PgpTdWdnZXN0ZWQtYnk6IErDqXLDtG1lIEdsaXNzZSA8amdsaXNzZUByZWRoYXQu
Y29tPgpDYzogS2lyaWxsIEEuIFNodXRlbW92IDxraXJpbGwuc2h1dGVtb3ZAbGludXguaW50ZWwu
Y29tPgpTaWduZWQtb2ZmLWJ5OiBKb2huIEh1YmJhcmQgPGpodWJiYXJkQG52aWRpYS5jb20+Ci0t
LQoKSGksCgpUaGUga2J1aWxkIHRlc3Qgcm9ib3Qgbm90aWNlZCB0aGF0IHRyeV9waW5fY29tcG91
bmRfaGVhZCgpIGNhbiBiZQpkZWNsYXJlZCBzdGF0aWMsIGluIG1tL2d1cC5jLiBUaGlzIHVwZGF0
ZWQgcGF0Y2ggZG9lcyB0aGF0LgoKdGhhbmtzLApKb2huIEh1YmJhcmQKTlZJRElBCgogRG9jdW1l
bnRhdGlvbi9jb3JlLWFwaS9waW5fdXNlcl9wYWdlcy5yc3QgfCAgIDIgKy0KIGluY2x1ZGUvbGlu
dXgvbW0uaCAgICAgICAgICAgICAgICAgICAgICAgIHwgIDgzICsrKystCiBpbmNsdWRlL2xpbnV4
L21tem9uZS5oICAgICAgICAgICAgICAgICAgICB8ICAgMiArCiBpbmNsdWRlL2xpbnV4L3BhZ2Vf
cmVmLmggICAgICAgICAgICAgICAgICB8ICAxMCArCiBtbS9ndXAuYyAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICB8IDQxMCArKysrKysrKysrKysrKysrKy0tLS0tCiBtbS9odWdlX21l
bW9yeS5jICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAyOSArLQogbW0vaHVnZXRsYi5jICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgMzggKy0KIG1tL3Ztc3RhdC5jICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIHwgICAyICsKIDggZmlsZXMgY2hhbmdlZCwgNDQwIGluc2Vy
dGlvbnMoKyksIDEzNiBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9uL2Nv
cmUtYXBpL3Bpbl91c2VyX3BhZ2VzLnJzdCBiL0RvY3VtZW50YXRpb24vY29yZS1hcGkvcGluX3Vz
ZXJfcGFnZXMucnN0CmluZGV4IDFkNDkwMTU1ZWNkNy4uMmRiMTRkZjFmMmQ3IDEwMDY0NAotLS0g
YS9Eb2N1bWVudGF0aW9uL2NvcmUtYXBpL3Bpbl91c2VyX3BhZ2VzLnJzdAorKysgYi9Eb2N1bWVu
dGF0aW9uL2NvcmUtYXBpL3Bpbl91c2VyX3BhZ2VzLnJzdApAQCAtNTMsNyArNTMsNyBAQCBXaGlj
aCBmbGFncyBhcmUgc2V0IGJ5IGVhY2ggd3JhcHBlcgogRm9yIHRoZXNlIHBpbl91c2VyX3BhZ2Vz
KigpIGZ1bmN0aW9ucywgRk9MTF9QSU4gaXMgT1InZCBpbiB3aXRoIHdoYXRldmVyIGd1cAogZmxh
Z3MgdGhlIGNhbGxlciBwcm92aWRlcy4gVGhlIGNhbGxlciBpcyByZXF1aXJlZCB0byBwYXNzIGlu
IGEgbm9uLW51bGwgc3RydWN0CiBwYWdlcyogYXJyYXksIGFuZCB0aGUgZnVuY3Rpb24gdGhlbiBw
aW4gcGFnZXMgYnkgaW5jcmVtZW50aW5nIGVhY2ggYnkgYSBzcGVjaWFsCi12YWx1ZS4gRm9yIG5v
dywgdGhhdCB2YWx1ZSBpcyArMSwganVzdCBsaWtlIGdldF91c2VyX3BhZ2VzKigpLjo6Cit2YWx1
ZTogR1VQX1BJTl9DT1VOVElOR19CSUFTLjo6CiAKICBGdW5jdGlvbgogIC0tLS0tLS0tCmRpZmYg
LS1naXQgYS9pbmNsdWRlL2xpbnV4L21tLmggYi9pbmNsdWRlL2xpbnV4L21tLmgKaW5kZXggNmEx
YTM1N2U3ZDg2Li5iYjQ0YzRkMmFkYTcgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvbW0uaAor
KysgYi9pbmNsdWRlL2xpbnV4L21tLmgKQEAgLTEwMTYsNiArMTAxNiw4IEBAIHN0YXRpYyBpbmxp
bmUgdm9pZCBnZXRfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKIAlwYWdlX3JlZl9pbmMocGFnZSk7
CiB9CiAKK2Jvb2wgX19tdXN0X2NoZWNrIHRyeV9ncmFiX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2Us
IHVuc2lnbmVkIGludCBmbGFncyk7CisKIHN0YXRpYyBpbmxpbmUgX19tdXN0X2NoZWNrIGJvb2wg
dHJ5X2dldF9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQogewogCXBhZ2UgPSBjb21wb3VuZF9oZWFk
KHBhZ2UpOwpAQCAtMTA0NCwyOSArMTA0Niw4MCBAQCBzdGF0aWMgaW5saW5lIHZvaWQgcHV0X3Bh
Z2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCiAJCV9fcHV0X3BhZ2UocGFnZSk7CiB9CiAKLS8qKgotICog
dW5waW5fdXNlcl9wYWdlKCkgLSByZWxlYXNlIGEgZ3VwLXBpbm5lZCBwYWdlCi0gKiBAcGFnZTog
ICAgICAgICAgICBwb2ludGVyIHRvIHBhZ2UgdG8gYmUgcmVsZWFzZWQKKy8qCisgKiBHVVBfUElO
X0NPVU5USU5HX0JJQVMsIGFuZCB0aGUgYXNzb2NpYXRlZCBmdW5jdGlvbnMgdGhhdCB1c2UgaXQs
IG92ZXJsb2FkCisgKiB0aGUgcGFnZSdzIHJlZmNvdW50IHNvIHRoYXQgdHdvIHNlcGFyYXRlIGl0
ZW1zIGFyZSB0cmFja2VkOiB0aGUgb3JpZ2luYWwgcGFnZQorICogcmVmZXJlbmNlIGNvdW50LCBh
bmQgYWxzbyBhIG5ldyBjb3VudCBvZiBob3cgbWFueSBwaW5fdXNlcl9wYWdlcygpIGNhbGxzIHdl
cmUKKyAqIG1hZGUgYWdhaW5zdCB0aGUgcGFnZS4gKCJndXAtcGlubmVkIiBpcyBhbm90aGVyIHRl
cm0gZm9yIHRoZSBsYXR0ZXIpLgorICoKKyAqIFdpdGggdGhpcyBzY2hlbWUsIHBpbl91c2VyX3Bh
Z2VzKCkgYmVjb21lcyBzcGVjaWFsOiBzdWNoIHBhZ2VzIGFyZSBtYXJrZWQgYXMKKyAqIGRpc3Rp
bmN0IGZyb20gbm9ybWFsIHBhZ2VzLiBBcyBzdWNoLCB0aGUgdW5waW5fdXNlcl9wYWdlKCkgY2Fs
bCAoYW5kIGl0cworICogdmFyaWFudHMpIG11c3QgYmUgdXNlZCBpbiBvcmRlciB0byByZWxlYXNl
IGd1cC1waW5uZWQgcGFnZXMuCisgKgorICogQ2hvaWNlIG9mIHZhbHVlOgorICoKKyAqIEJ5IG1h
a2luZyBHVVBfUElOX0NPVU5USU5HX0JJQVMgYSBwb3dlciBvZiB0d28sIGRlYnVnZ2luZyBvZiBw
YWdlIHJlZmVyZW5jZQorICogY291bnRzIHdpdGggcmVzcGVjdCB0byBwaW5fdXNlcl9wYWdlcygp
IGFuZCB1bnBpbl91c2VyX3BhZ2UoKSBiZWNvbWVzCisgKiBzaW1wbGVyLCBkdWUgdG8gdGhlIGZh
Y3QgdGhhdCBhZGRpbmcgYW4gZXZlbiBwb3dlciBvZiB0d28gdG8gdGhlIHBhZ2UKKyAqIHJlZmNv
dW50IGhhcyB0aGUgZWZmZWN0IG9mIHVzaW5nIG9ubHkgdGhlIHVwcGVyIE4gYml0cywgZm9yIHRo
ZSBjb2RlIHRoYXQKKyAqIGNvdW50cyB1cCB1c2luZyB0aGUgYmlhcyB2YWx1ZS4gVGhpcyBtZWFu
cyB0aGF0IHRoZSBsb3dlciBiaXRzIGFyZSBsZWZ0IGZvcgorICogdGhlIGV4Y2x1c2l2ZSB1c2Ug
b2YgdGhlIG9yaWdpbmFsIGNvZGUgdGhhdCBpbmNyZW1lbnRzIGFuZCBkZWNyZW1lbnRzIGJ5IG9u
ZQorICogKG9yIGF0IGxlYXN0LCBieSBtdWNoIHNtYWxsZXIgdmFsdWVzIHRoYW4gdGhlIGJpYXMg
dmFsdWUpLgogICoKLSAqIFBhZ2VzIHRoYXQgd2VyZSBwaW5uZWQgdmlhIHBpbl91c2VyX3BhZ2Vz
KigpIG11c3QgYmUgcmVsZWFzZWQgdmlhIGVpdGhlcgotICogdW5waW5fdXNlcl9wYWdlKCksIG9y
IG9uZSBvZiB0aGUgdW5waW5fdXNlcl9wYWdlcyooKSByb3V0aW5lcy4gVGhpcyBpcyBzbwotICog
dGhhdCBldmVudHVhbGx5IHN1Y2ggcGFnZXMgY2FuIGJlIHNlcGFyYXRlbHkgdHJhY2tlZCBhbmQg
dW5pcXVlbHkgaGFuZGxlZC4gSW4KLSAqIHBhcnRpY3VsYXIsIGludGVyYWN0aW9ucyB3aXRoIFJE
TUEgYW5kIGZpbGVzeXN0ZW1zIG5lZWQgc3BlY2lhbCBoYW5kbGluZy4KKyAqIE9mIGNvdXJzZSwg
b25jZSB0aGUgbG93ZXIgYml0cyBvdmVyZmxvdyBpbnRvIHRoZSB1cHBlciBiaXRzIChhbmQgdGhp
cyBpcworICogT0ssIGJlY2F1c2Ugc3VidHJhY3Rpb24gcmVjb3ZlcnMgdGhlIG9yaWdpbmFsIHZh
bHVlcyksIHRoZW4gdmlzdWFsIGluc3BlY3Rpb24KKyAqIG5vIGxvbmdlciBzdWZmaWNlcyB0byBk
aXJlY3RseSB2aWV3IHRoZSBzZXBhcmF0ZSBjb3VudHMuIEhvd2V2ZXIsIGZvciBub3JtYWwKKyAq
IGFwcGxpY2F0aW9ucyB0aGF0IGRvbid0IGhhdmUgaHVnZSBwYWdlIHJlZmVyZW5jZSBjb3VudHMs
IHRoaXMgd29uJ3QgYmUgYW4KKyAqIGlzc3VlLgogICoKLSAqIHVucGluX3VzZXJfcGFnZSgpIGFu
ZCBwdXRfcGFnZSgpIGFyZSBub3QgaW50ZXJjaGFuZ2VhYmxlLCBkZXNwaXRlIHRoaXMgZWFybHkK
LSAqIGltcGxlbWVudGF0aW9uIHRoYXQgbWFrZXMgdGhlbSBsb29rIHRoZSBzYW1lLiB1bnBpbl91
c2VyX3BhZ2UoKSBjYWxscyBtdXN0Ci0gKiBiZSBwZXJmZWN0bHkgbWF0Y2hlZCB1cCB3aXRoIHBp
biooKSBjYWxscy4KKyAqIExvY2tpbmc6IHRoZSBsb2NrbGVzcyBhbGdvcml0aG0gZGVzY3JpYmVk
IGluIHBhZ2VfY2FjaGVfZ2V0X3NwZWN1bGF0aXZlKCkKKyAqIGFuZCBwYWdlX2NhY2hlX2d1cF9w
aW5fc3BlY3VsYXRpdmUoKSBwcm92aWRlcyBzYWZlIG9wZXJhdGlvbiBmb3IKKyAqIGdldF91c2Vy
X3BhZ2VzIGFuZCBwYWdlX21rY2xlYW4gYW5kIG90aGVyIGNhbGxzIHRoYXQgcmFjZSB0byBzZXQg
dXAgcGFnZQorICogdGFibGUgZW50cmllcy4KICAqLwotc3RhdGljIGlubGluZSB2b2lkIHVucGlu
X3VzZXJfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKLXsKLQlwdXRfcGFnZShwYWdlKTsKLX0KKyNk
ZWZpbmUgR1VQX1BJTl9DT1VOVElOR19CSUFTICgxVSA8PCAxMCkKIAordm9pZCB1bnBpbl91c2Vy
X3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpOwogdm9pZCB1bnBpbl91c2VyX3BhZ2VzX2RpcnR5X2xv
Y2soc3RydWN0IHBhZ2UgKipwYWdlcywgdW5zaWduZWQgbG9uZyBucGFnZXMsCiAJCQkJIGJvb2wg
bWFrZV9kaXJ0eSk7Ci0KIHZvaWQgdW5waW5fdXNlcl9wYWdlcyhzdHJ1Y3QgcGFnZSAqKnBhZ2Vz
LCB1bnNpZ25lZCBsb25nIG5wYWdlcyk7CiAKKy8qKgorICogcGFnZV9kbWFfcGlubmVkKCkgLSBy
ZXBvcnQgaWYgYSBwYWdlIGlzIHBpbm5lZCBmb3IgRE1BLgorICoKKyAqIFRoaXMgZnVuY3Rpb24g
Y2hlY2tzIGlmIGEgcGFnZSBoYXMgYmVlbiBwaW5uZWQgdmlhIGEgY2FsbCB0bworICogcGluX3Vz
ZXJfcGFnZXMqKCkuCisgKgorICogVGhlIHJldHVybiB2YWx1ZSBpcyBwYXJ0aWFsbHkgZnV6enk6
IGZhbHNlIGlzIG5vdCBmdXp6eSwgYmVjYXVzZSBpdCBtZWFucworICogImRlZmluaXRlbHkgbm90
IHBpbm5lZCBmb3IgRE1BIiwgYnV0IHRydWUgbWVhbnMgInByb2JhYmx5IHBpbm5lZCBmb3IgRE1B
LCBidXQKKyAqIHBvc3NpYmx5IGEgZmFsc2UgcG9zaXRpdmUgZHVlIHRvIGhhdmluZyBhdCBsZWFz
dCBHVVBfUElOX0NPVU5USU5HX0JJQVMgd29ydGgKKyAqIG9mIG5vcm1hbCBwYWdlIHJlZmVyZW5j
ZXMiLgorICoKKyAqIEZhbHNlIHBvc2l0aXZlcyBhcmUgT0ssIGJlY2F1c2U6IGEpIGl0J3MgdW5s
aWtlbHkgZm9yIGEgcGFnZSB0byBnZXQgdGhhdCBtYW55CisgKiByZWZjb3VudHMsIGFuZCBiKSBh
bGwgdGhlIGNhbGxlcnMgb2YgdGhpcyByb3V0aW5lIGFyZSBleHBlY3RlZCB0byBiZSBhYmxlIHRv
CisgKiBkZWFsIGdyYWNlZnVsbHkgd2l0aCBhIGZhbHNlIHBvc2l0aXZlLgorICoKKyAqIEZvciBt
b3JlIGluZm9ybWF0aW9uLCBwbGVhc2Ugc2VlIERvY3VtZW50YXRpb24vdm0vcGluX3VzZXJfcGFn
ZXMucnN0LgorICoKKyAqIEBwYWdlOglwb2ludGVyIHRvIHBhZ2UgdG8gYmUgcXVlcmllZC4KKyAq
IEBSZXR1cm46CVRydWUsIGlmIGl0IGlzIGxpa2VseSB0aGF0IHRoZSBwYWdlIGhhcyBiZWVuICJk
bWEtcGlubmVkIi4KKyAqCQlGYWxzZSwgaWYgdGhlIHBhZ2UgaXMgZGVmaW5pdGVseSBub3QgZG1h
LXBpbm5lZC4KKyAqLworc3RhdGljIGlubGluZSBib29sIHBhZ2VfZG1hX3Bpbm5lZChzdHJ1Y3Qg
cGFnZSAqcGFnZSkKK3sKKwkvKgorCSAqIHBhZ2VfcmVmX2NvdW50KCkgaXMgc2lnbmVkLiBJZiB0
aGF0IHJlZmNvdW50IG92ZXJmbG93cywgdGhlbgorCSAqIHBhZ2VfcmVmX2NvdW50KCkgcmV0dXJu
cyBhIG5lZ2F0aXZlIHZhbHVlLCBhbmQgY2FsbGVycyB3aWxsIGF2b2lkCisJICogZnVydGhlciBp
bmNyZW1lbnRpbmcgdGhlIHJlZmNvdW50LgorCSAqCisJICogSGVyZSwgZm9yIHRoYXQgb3ZlcmZs
b3cgY2FzZSwgdXNlIHRoZSBzaWduZWQgYml0IHRvIGNvdW50IGEgbGl0dGxlCisJICogYml0IGhp
Z2hlciB2aWEgdW5zaWduZWQgbWF0aCwgYW5kIHRodXMgc3RpbGwgZ2V0IGFuIGFjY3VyYXRlIHJl
c3VsdAorCSAqIGZyb20gcGFnZV9kbWFfcGlubmVkKCkuCisJICovCisJcmV0dXJuICgodW5zaWdu
ZWQgaW50KXBhZ2VfcmVmX2NvdW50KGNvbXBvdW5kX2hlYWQocGFnZSkpKSA+PQorCQlHVVBfUElO
X0NPVU5USU5HX0JJQVM7Cit9CisKICNpZiBkZWZpbmVkKENPTkZJR19TUEFSU0VNRU0pICYmICFk
ZWZpbmVkKENPTkZJR19TUEFSU0VNRU1fVk1FTU1BUCkKICNkZWZpbmUgU0VDVElPTl9JTl9QQUdF
X0ZMQUdTCiAjZW5kaWYKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvbW16b25lLmggYi9pbmNs
dWRlL2xpbnV4L21tem9uZS5oCmluZGV4IDg5ZDhmZjA2YzljZS4uYTc0MThmN2E0NGRhIDEwMDY0
NAotLS0gYS9pbmNsdWRlL2xpbnV4L21tem9uZS5oCisrKyBiL2luY2x1ZGUvbGludXgvbW16b25l
LmgKQEAgLTI0NCw2ICsyNDQsOCBAQCBlbnVtIG5vZGVfc3RhdF9pdGVtIHsKIAlOUl9ESVJUSUVE
LAkJLyogcGFnZSBkaXJ0eWluZ3Mgc2luY2UgYm9vdHVwICovCiAJTlJfV1JJVFRFTiwJCS8qIHBh
Z2Ugd3JpdGluZ3Mgc2luY2UgYm9vdHVwICovCiAJTlJfS0VSTkVMX01JU0NfUkVDTEFJTUFCTEUs
CS8qIHJlY2xhaW1hYmxlIG5vbi1zbGFiIGtlcm5lbCBwYWdlcyAqLworCU5SX0ZPTExfUElOX1JF
UVVFU1RFRCwJLyogdmlhOiBwaW5fdXNlcl9wYWdlKCksIGd1cCBmbGFnOiBGT0xMX1BJTiAqLwor
CU5SX0ZPTExfUElOX1JFVFVSTkVELAkvKiBwYWdlcyByZXR1cm5lZCB2aWEgdW5waW5fdXNlcl9w
YWdlKCkgKi8KIAlOUl9WTV9OT0RFX1NUQVRfSVRFTVMKIH07CiAKZGlmZiAtLWdpdCBhL2luY2x1
ZGUvbGludXgvcGFnZV9yZWYuaCBiL2luY2x1ZGUvbGludXgvcGFnZV9yZWYuaAppbmRleCAxNGQx
NGJlYjFmN2YuLmI5Y2JlNTUzZDFlNyAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9wYWdlX3Jl
Zi5oCisrKyBiL2luY2x1ZGUvbGludXgvcGFnZV9yZWYuaApAQCAtMTAyLDYgKzEwMiwxNiBAQCBz
dGF0aWMgaW5saW5lIHZvaWQgcGFnZV9yZWZfc3ViKHN0cnVjdCBwYWdlICpwYWdlLCBpbnQgbnIp
CiAJCV9fcGFnZV9yZWZfbW9kKHBhZ2UsIC1ucik7CiB9CiAKK3N0YXRpYyBpbmxpbmUgaW50IHBh
Z2VfcmVmX3N1Yl9yZXR1cm4oc3RydWN0IHBhZ2UgKnBhZ2UsIGludCBucikKK3sKKwlpbnQgcmV0
ID0gYXRvbWljX3N1Yl9yZXR1cm4obnIsICZwYWdlLT5fcmVmY291bnQpOworCisJaWYgKHBhZ2Vf
cmVmX3RyYWNlcG9pbnRfYWN0aXZlKF9fdHJhY2Vwb2ludF9wYWdlX3JlZl9tb2QpKQorCQlfX3Bh
Z2VfcmVmX21vZChwYWdlLCAtbnIpOworCisJcmV0dXJuIHJldDsKK30KKwogc3RhdGljIGlubGlu
ZSB2b2lkIHBhZ2VfcmVmX2luYyhzdHJ1Y3QgcGFnZSAqcGFnZSkKIHsKIAlhdG9taWNfaW5jKCZw
YWdlLT5fcmVmY291bnQpOwpkaWZmIC0tZ2l0IGEvbW0vZ3VwLmMgYi9tbS9ndXAuYwppbmRleCA3
M2FlZGNlZmE0YmQuLjM5YjJmNjgzYmQyZSAxMDA2NDQKLS0tIGEvbW0vZ3VwLmMKKysrIGIvbW0v
Z3VwLmMKQEAgLTM2LDYgKzM2LDIwIEBAIHN0YXRpYyBfX2Fsd2F5c19pbmxpbmUgbG9uZyBfX2d1
cF9sb25ndGVybV9sb2NrZWQoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ssCiAJCQkJCQkgIHN0cnVj
dCBwYWdlICoqcGFnZXMsCiAJCQkJCQkgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMsCiAJ
CQkJCQkgIHVuc2lnbmVkIGludCBmbGFncyk7CisKKyNpZmRlZiBDT05GSUdfREVCVUdfVk0KK3N0
YXRpYyBpbmxpbmUgdm9pZCBfX3VwZGF0ZV9wcm9jX3Ztc3RhdChzdHJ1Y3QgcGFnZSAqcGFnZSwK
KwkJCQkJZW51bSBub2RlX3N0YXRfaXRlbSBpdGVtLCBpbnQgY291bnQpCit7CisJbW9kX25vZGVf
cGFnZV9zdGF0ZShwYWdlX3BnZGF0KHBhZ2UpLCBpdGVtLCBjb3VudCk7Cit9CisjZWxzZQorc3Rh
dGljIGlubGluZSB2b2lkIF9fdXBkYXRlX3Byb2Nfdm1zdGF0KHN0cnVjdCBwYWdlICpwYWdlLAor
CQkJCQllbnVtIG5vZGVfc3RhdF9pdGVtIGl0ZW0sIGludCBjb3VudCkKK3sKK30KKyNlbmRpZgor
CiAvKgogICogUmV0dXJuIHRoZSBjb21wb3VuZCBoZWFkIHBhZ2Ugd2l0aCByZWYgYXBwcm9wcmlh
dGVseSBpbmNyZW1lbnRlZCwKICAqIG9yIE5VTEwgaWYgdGhhdCBmYWlsZWQuCkBAIC01MSw2ICs2
NSwxNTcgQEAgc3RhdGljIGlubGluZSBzdHJ1Y3QgcGFnZSAqdHJ5X2dldF9jb21wb3VuZF9oZWFk
KHN0cnVjdCBwYWdlICpwYWdlLCBpbnQgcmVmcykKIAlyZXR1cm4gaGVhZDsKIH0KIAorLyoqCisg
KiB0cnlfcGluX2NvbXBvdW5kX2hlYWQoKSAtIG1hcmsgYSBjb21wb3VuZCBwYWdlIGFzIGJlaW5n
IHVzZWQgYnkKKyAqIHBpbl91c2VyX3BhZ2VzKigpLgorICoKKyAqIFRoaXMgaXMgdGhlIEZPTExf
UElOIGNvdW50ZXJwYXJ0IHRvIHRyeV9nZXRfY29tcG91bmRfaGVhZCgpLgorICoKKyAqIEBwYWdl
Oglwb2ludGVyIHRvIHBhZ2UgdG8gYmUgbWFya2VkCisgKiBAUmV0dXJuOgl0aGUgY29tcG91bmQg
aGVhZCBwYWdlLCB3aXRoIHJlZiBhcHByb3ByaWF0ZWx5IGluY3JlbWVudGVkLAorICogb3IgTlVM
TCB1cG9uIGZhaWx1cmUuCisgKi8KK3N0YXRpYyBfX211c3RfY2hlY2sgc3RydWN0IHBhZ2UgKnRy
eV9waW5fY29tcG91bmRfaGVhZChzdHJ1Y3QgcGFnZSAqcGFnZSwKKwkJCQkJCSAgICAgICBpbnQg
cmVmcykKK3sKKwlzdHJ1Y3QgcGFnZSAqaGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwYWdl
LAorCQkJCQkJICBHVVBfUElOX0NPVU5USU5HX0JJQVMgKiByZWZzKTsKKwlpZiAoIWhlYWQpCisJ
CXJldHVybiBOVUxMOworCisJX191cGRhdGVfcHJvY192bXN0YXQocGFnZSwgTlJfRk9MTF9QSU5f
UkVRVUVTVEVELCByZWZzKTsKKwlyZXR1cm4gaGVhZDsKK30KKworLyoKKyAqIHRyeV9ncmFiX2Nv
bXBvdW5kX2hlYWQoKSAtIGF0dGVtcHQgdG8gZWxldmF0ZSBhIHBhZ2UncyByZWZjb3VudCwgYnkg
YQorICogZmxhZ3MtZGVwZW5kZW50IGFtb3VudC4KKyAqCisgKiAiZ3JhYiIgbmFtZXMgaW4gdGhp
cyBmaWxlIG1lYW4sICJsb29rIGF0IGZsYWdzIHRvIGRlY2lkZSB3aGV0aGVyIHRvIHVzZQorICog
Rk9MTF9QSU4gb3IgRk9MTF9HRVQgYmVoYXZpb3IsIHdoZW4gaW5jcmVtZW50aW5nIHRoZSBwYWdl
J3MgcmVmY291bnQuCisgKgorICogRWl0aGVyIEZPTExfUElOIG9yIEZPTExfR0VUIChvciBuZWl0
aGVyKSBtdXN0IGJlIHNldCwgYnV0IG5vdCBib3RoIGF0IHRoZQorICogc2FtZSB0aW1lLiAoVGhh
dCdzIHRydWUgdGhyb3VnaG91dCB0aGUgZ2V0X3VzZXJfcGFnZXMqKCkgYW5kCisgKiBwaW5fdXNl
cl9wYWdlcyooKSBBUElzLikgQ2FzZXM6CisgKgorICogICAgRk9MTF9HRVQ6IHBhZ2UncyByZWZj
b3VudCB3aWxsIGJlIGluY3JlbWVudGVkIGJ5IDEuCisgKiAgICBGT0xMX1BJTjogcGFnZSdzIHJl
ZmNvdW50IHdpbGwgYmUgaW5jcmVtZW50ZWQgYnkgR1VQX1BJTl9DT1VOVElOR19CSUFTLgorICoK
KyAqIFJldHVybjogaGVhZCBwYWdlICh3aXRoIHJlZmNvdW50IGFwcHJvcHJpYXRlbHkgaW5jcmVt
ZW50ZWQpIGZvciBzdWNjZXNzLCBvcgorICogTlVMTCB1cG9uIGZhaWx1cmUuIElmIG5laXRoZXIg
Rk9MTF9HRVQgbm9yIEZPTExfUElOIHdhcyBzZXQsIHRoYXQncworICogY29uc2lkZXJlZCBmYWls
dXJlLCBhbmQgZnVydGhlcm1vcmUsIGEgbGlrZWx5IGJ1ZyBpbiB0aGUgY2FsbGVyLCBzbyBhIHdh
cm5pbmcKKyAqIGlzIGFsc28gZW1pdHRlZC4KKyAqLworc3RhdGljIF9fbWF5YmVfdW51c2VkIHN0
cnVjdCBwYWdlICp0cnlfZ3JhYl9jb21wb3VuZF9oZWFkKHN0cnVjdCBwYWdlICpwYWdlLAorCQkJ
CQkJCSAgaW50IHJlZnMsCisJCQkJCQkJICB1bnNpZ25lZCBpbnQgZmxhZ3MpCit7CisJaWYgKGZs
YWdzICYgRk9MTF9HRVQpCisJCXJldHVybiB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQocGFnZSwgcmVm
cyk7CisJZWxzZSBpZiAoZmxhZ3MgJiBGT0xMX1BJTikKKwkJcmV0dXJuIHRyeV9waW5fY29tcG91
bmRfaGVhZChwYWdlLCByZWZzKTsKKworCVdBUk5fT05fT05DRSgxKTsKKwlyZXR1cm4gTlVMTDsK
K30KKworLyoqCisgKiB0cnlfZ3JhYl9wYWdlKCkgLSBlbGV2YXRlIGEgcGFnZSdzIHJlZmNvdW50
IGJ5IGEgZmxhZy1kZXBlbmRlbnQgYW1vdW50CisgKgorICogVGhpcyBtaWdodCBub3QgZG8gYW55
dGhpbmcgYXQgYWxsLCBkZXBlbmRpbmcgb24gdGhlIGZsYWdzIGFyZ3VtZW50LgorICoKKyAqICJn
cmFiIiBuYW1lcyBpbiB0aGlzIGZpbGUgbWVhbiwgImxvb2sgYXQgZmxhZ3MgdG8gZGVjaWRlIHdo
ZXRoZXIgdG8gdXNlCisgKiBGT0xMX1BJTiBvciBGT0xMX0dFVCBiZWhhdmlvciwgd2hlbiBpbmNy
ZW1lbnRpbmcgdGhlIHBhZ2UncyByZWZjb3VudC4KKyAqCisgKiBAcGFnZTogICAgcG9pbnRlciB0
byBwYWdlIHRvIGJlIGdyYWJiZWQKKyAqIEBmbGFnczogICBndXAgZmxhZ3M6IHRoZXNlIGFyZSB0
aGUgRk9MTF8qIGZsYWcgdmFsdWVzLgorICoKKyAqIEVpdGhlciBGT0xMX1BJTiBvciBGT0xMX0dF
VCAob3IgbmVpdGhlcikgbWF5IGJlIHNldCwgYnV0IG5vdCBib3RoIGF0IHRoZSBzYW1lCisgKiB0
aW1lLiBDYXNlczoKKyAqCisgKiAgICBGT0xMX0dFVDogcGFnZSdzIHJlZmNvdW50IHdpbGwgYmUg
aW5jcmVtZW50ZWQgYnkgMS4KKyAqICAgIEZPTExfUElOOiBwYWdlJ3MgcmVmY291bnQgd2lsbCBi
ZSBpbmNyZW1lbnRlZCBieSBHVVBfUElOX0NPVU5USU5HX0JJQVMuCisgKgorICogUmV0dXJuOiB0
cnVlIGZvciBzdWNjZXNzLCBvciBpZiBubyBhY3Rpb24gd2FzIHJlcXVpcmVkIChpZiBuZWl0aGVy
IEZPTExfUElOCisgKiBub3IgRk9MTF9HRVQgd2FzIHNldCwgbm90aGluZyBpcyBkb25lKS4gRmFs
c2UgZm9yIGZhaWx1cmU6IEZPTExfR0VUIG9yCisgKiBGT0xMX1BJTiB3YXMgc2V0LCBidXQgdGhl
IHBhZ2UgY291bGQgbm90IGJlIGdyYWJiZWQuCisgKi8KK2Jvb2wgX19tdXN0X2NoZWNrIHRyeV9n
cmFiX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UsIHVuc2lnbmVkIGludCBmbGFncykKK3sKKwlpZiAo
ZmxhZ3MgJiBGT0xMX0dFVCkKKwkJcmV0dXJuIHRyeV9nZXRfcGFnZShwYWdlKTsKKwllbHNlIGlm
IChmbGFncyAmIEZPTExfUElOKSB7CisJCXBhZ2UgPSBjb21wb3VuZF9oZWFkKHBhZ2UpOworCQlX
QVJOX09OX09OQ0UoZmxhZ3MgJiBGT0xMX0dFVCk7CisKKwkJaWYgKFdBUk5fT05fT05DRShwYWdl
X3JlZl9jb3VudChwYWdlKSA8PSAwKSkKKwkJCXJldHVybiBmYWxzZTsKKworCQlwYWdlX3JlZl9h
ZGQocGFnZSwgR1VQX1BJTl9DT1VOVElOR19CSUFTKTsKKwkJX191cGRhdGVfcHJvY192bXN0YXQo
cGFnZSwgTlJfRk9MTF9QSU5fUkVRVUVTVEVELCAxKTsKKwl9CisKKwlyZXR1cm4gdHJ1ZTsKK30K
KworI2lmZGVmIENPTkZJR19ERVZfUEFHRU1BUF9PUFMKK3N0YXRpYyBib29sIF9fdW5waW5fZGV2
bWFwX21hbmFnZWRfdXNlcl9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQoreworCWJvb2wgaXNfZGV2
bWFwID0gcGFnZV9pc19kZXZtYXBfbWFuYWdlZChwYWdlKTsKKworCWlmIChpc19kZXZtYXApIHsK
KwkJaW50IGNvdW50ID0gcGFnZV9yZWZfc3ViX3JldHVybihwYWdlLCBHVVBfUElOX0NPVU5USU5H
X0JJQVMpOworCisJCV9fdXBkYXRlX3Byb2Nfdm1zdGF0KHBhZ2UsIE5SX0ZPTExfUElOX1JFVFVS
TkVELCAxKTsKKwkJLyoKKwkJICogZGV2bWFwIHBhZ2UgcmVmY291bnRzIGFyZSAxLWJhc2VkLCBy
YXRoZXIgdGhhbiAwLWJhc2VkOiBpZgorCQkgKiByZWZjb3VudCBpcyAxLCB0aGVuIHRoZSBwYWdl
IGlzIGZyZWUgYW5kIHRoZSByZWZjb3VudCBpcworCQkgKiBzdGFibGUgYmVjYXVzZSBub2JvZHkg
aG9sZHMgYSByZWZlcmVuY2Ugb24gdGhlIHBhZ2UuCisJCSAqLworCQlpZiAoY291bnQgPT0gMSkK
KwkJCWZyZWVfZGV2bWFwX21hbmFnZWRfcGFnZShwYWdlKTsKKwkJZWxzZSBpZiAoIWNvdW50KQor
CQkJX19wdXRfcGFnZShwYWdlKTsKKwl9CisKKwlyZXR1cm4gaXNfZGV2bWFwOworfQorI2Vsc2UK
K3N0YXRpYyBib29sIF9fdW5waW5fZGV2bWFwX21hbmFnZWRfdXNlcl9wYWdlKHN0cnVjdCBwYWdl
ICpwYWdlKQoreworCXJldHVybiBmYWxzZTsKK30KKyNlbmRpZiAvKiBDT05GSUdfREVWX1BBR0VN
QVBfT1BTICovCisKKy8qKgorICogdW5waW5fdXNlcl9wYWdlKCkgLSByZWxlYXNlIGEgZG1hLXBp
bm5lZCBwYWdlCisgKiBAcGFnZTogICAgICAgICAgICBwb2ludGVyIHRvIHBhZ2UgdG8gYmUgcmVs
ZWFzZWQKKyAqCisgKiBQYWdlcyB0aGF0IHdlcmUgcGlubmVkIHZpYSBwaW5fdXNlcl9wYWdlcyoo
KSBtdXN0IGJlIHJlbGVhc2VkIHZpYSBlaXRoZXIKKyAqIHVucGluX3VzZXJfcGFnZSgpLCBvciBv
bmUgb2YgdGhlIHVucGluX3VzZXJfcGFnZXMqKCkgcm91dGluZXMuIFRoaXMgaXMgc28KKyAqIHRo
YXQgc3VjaCBwYWdlcyBjYW4gYmUgc2VwYXJhdGVseSB0cmFja2VkIGFuZCB1bmlxdWVseSBoYW5k
bGVkLiBJbgorICogcGFydGljdWxhciwgaW50ZXJhY3Rpb25zIHdpdGggUkRNQSBhbmQgZmlsZXN5
c3RlbXMgbmVlZCBzcGVjaWFsIGhhbmRsaW5nLgorICovCit2b2lkIHVucGluX3VzZXJfcGFnZShz
dHJ1Y3QgcGFnZSAqcGFnZSkKK3sKKwlwYWdlID0gY29tcG91bmRfaGVhZChwYWdlKTsKKworCS8q
CisJICogRm9yIGRldm1hcCBtYW5hZ2VkIHBhZ2VzIHdlIG5lZWQgdG8gY2F0Y2ggcmVmY291bnQg
dHJhbnNpdGlvbiBmcm9tCisJICogR1VQX1BJTl9DT1VOVElOR19CSUFTIHRvIDEsIHdoZW4gcmVm
Y291bnQgcmVhY2ggb25lIGl0IG1lYW5zIHRoZQorCSAqIHBhZ2UgaXMgZnJlZSBhbmQgd2UgbmVl
ZCB0byBpbmZvcm0gdGhlIGRldmljZSBkcml2ZXIgdGhyb3VnaAorCSAqIGNhbGxiYWNrLiBTZWUg
aW5jbHVkZS9saW51eC9tZW1yZW1hcC5oIGFuZCBITU0gZm9yIGRldGFpbHMuCisJICovCisJaWYg
KF9fdW5waW5fZGV2bWFwX21hbmFnZWRfdXNlcl9wYWdlKHBhZ2UpKQorCQlyZXR1cm47CisKKwlp
ZiAocGFnZV9yZWZfc3ViX2FuZF90ZXN0KHBhZ2UsIEdVUF9QSU5fQ09VTlRJTkdfQklBUykpCisJ
CV9fcHV0X3BhZ2UocGFnZSk7CisKKwlfX3VwZGF0ZV9wcm9jX3Ztc3RhdChwYWdlLCBOUl9GT0xM
X1BJTl9SRVRVUk5FRCwgMSk7Cit9CitFWFBPUlRfU1lNQk9MKHVucGluX3VzZXJfcGFnZSk7CisK
IC8qKgogICogdW5waW5fdXNlcl9wYWdlc19kaXJ0eV9sb2NrKCkgLSByZWxlYXNlIGFuZCBvcHRp
b25hbGx5IGRpcnR5IGd1cC1waW5uZWQgcGFnZXMKICAqIEBwYWdlczogIGFycmF5IG9mIHBhZ2Vz
IHRvIGJlIG1heWJlIG1hcmtlZCBkaXJ0eSwgYW5kIGRlZmluaXRlbHkgcmVsZWFzZWQuCkBAIC0y
MzcsMTAgKzQwMiwxMSBAQCBzdGF0aWMgc3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlX3B0ZShzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIAl9CiAKIAlwYWdlID0gdm1fbm9ybWFsX3BhZ2Uodm1h
LCBhZGRyZXNzLCBwdGUpOwotCWlmICghcGFnZSAmJiBwdGVfZGV2bWFwKHB0ZSkgJiYgKGZsYWdz
ICYgRk9MTF9HRVQpKSB7CisJaWYgKCFwYWdlICYmIHB0ZV9kZXZtYXAocHRlKSAmJiAoZmxhZ3Mg
JiAoRk9MTF9HRVQgfCBGT0xMX1BJTikpKSB7CiAJCS8qCi0JCSAqIE9ubHkgcmV0dXJuIGRldmlj
ZSBtYXBwaW5nIHBhZ2VzIGluIHRoZSBGT0xMX0dFVCBjYXNlIHNpbmNlCi0JCSAqIHRoZXkgYXJl
IG9ubHkgdmFsaWQgd2hpbGUgaG9sZGluZyB0aGUgcGdtYXAgcmVmZXJlbmNlLgorCQkgKiBPbmx5
IHJldHVybiBkZXZpY2UgbWFwcGluZyBwYWdlcyBpbiB0aGUgRk9MTF9HRVQgb3IgRk9MTF9QSU4K
KwkJICogY2FzZSBzaW5jZSB0aGV5IGFyZSBvbmx5IHZhbGlkIHdoaWxlIGhvbGRpbmcgdGhlIHBn
bWFwCisJCSAqIHJlZmVyZW5jZS4KIAkJICovCiAJCSpwZ21hcCA9IGdldF9kZXZfcGFnZW1hcChw
dGVfcGZuKHB0ZSksICpwZ21hcCk7CiAJCWlmICgqcGdtYXApCkBAIC0yNzgsMTEgKzQ0NCwxMCBA
QCBzdGF0aWMgc3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlX3B0ZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1
Y3QgKnZtYSwKIAkJZ290byByZXRyeTsKIAl9CiAKLQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkgewot
CQlpZiAodW5saWtlbHkoIXRyeV9nZXRfcGFnZShwYWdlKSkpIHsKLQkJCXBhZ2UgPSBFUlJfUFRS
KC1FTk9NRU0pOwotCQkJZ290byBvdXQ7Ci0JCX0KKwkvKiB0cnlfZ3JhYl9wYWdlKCkgZG9lcyBu
b3RoaW5nIHVubGVzcyBGT0xMX0dFVCBvciBGT0xMX1BJTiBpcyBzZXQuICovCisJaWYgKHVubGlr
ZWx5KCF0cnlfZ3JhYl9wYWdlKHBhZ2UsIGZsYWdzKSkpIHsKKwkJcGFnZSA9IEVSUl9QVFIoLUVO
T01FTSk7CisJCWdvdG8gb3V0OwogCX0KIAlpZiAoZmxhZ3MgJiBGT0xMX1RPVUNIKSB7CiAJCWlm
ICgoZmxhZ3MgJiBGT0xMX1dSSVRFKSAmJgpAQCAtNTQ0LDcgKzcwOSw3IEBAIHN0YXRpYyBzdHJ1
Y3QgcGFnZSAqZm9sbG93X3BhZ2VfbWFzayhzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIAkv
KiBtYWtlIHRoaXMgaGFuZGxlIGh1Z2VwZCAqLwogCXBhZ2UgPSBmb2xsb3dfaHVnZV9hZGRyKG1t
LCBhZGRyZXNzLCBmbGFncyAmIEZPTExfV1JJVEUpOwogCWlmICghSVNfRVJSKHBhZ2UpKSB7Ci0J
CUJVR19PTihmbGFncyAmIEZPTExfR0VUKTsKKwkJV0FSTl9PTl9PTkNFKGZsYWdzICYgKEZPTExf
R0VUIHwgRk9MTF9QSU4pKTsKIAkJcmV0dXJuIHBhZ2U7CiAJfQogCkBAIC0xMTMxLDYgKzEyOTYs
MzYgQEAgc3RhdGljIF9fYWx3YXlzX2lubGluZSBsb25nIF9fZ2V0X3VzZXJfcGFnZXNfbG9ja2Vk
KHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLAogCXJldHVybiBwYWdlc19kb25lOwogfQogCitzdGF0
aWMgbG9uZyBfX2dldF91c2VyX3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRzaywK
KwkJCQkgICAgc3RydWN0IG1tX3N0cnVjdCAqbW0sCisJCQkJICAgIHVuc2lnbmVkIGxvbmcgc3Rh
cnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCisJCQkJICAgIHVuc2lnbmVkIGludCBndXBfZmxh
Z3MsIHN0cnVjdCBwYWdlICoqcGFnZXMsCisJCQkJICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAq
KnZtYXMsIGludCAqbG9ja2VkKQoreworCS8qCisJICogUGFydHMgb2YgRk9MTF9MT05HVEVSTSBi
ZWhhdmlvciBhcmUgaW5jb21wYXRpYmxlIHdpdGgKKwkgKiBGQVVMVF9GTEFHX0FMTE9XX1JFVFJZ
IGJlY2F1c2Ugb2YgdGhlIEZTIERBWCBjaGVjayByZXF1aXJlbWVudCBvbgorCSAqIHZtYXMuIEhv
d2V2ZXIsIHRoaXMgb25seSBjb21lcyB1cCBpZiBsb2NrZWQgaXMgc2V0LCBhbmQgdGhlcmUgYXJl
CisJICogY2FsbGVycyB0aGF0IGRvIHJlcXVlc3QgRk9MTF9MT05HVEVSTSwgYnV0IGRvIG5vdCBz
ZXQgbG9ja2VkLiBTbywKKwkgKiBhbGxvdyB3aGF0IHdlIGNhbi4KKwkgKi8KKwlpZiAoZ3VwX2Zs
YWdzICYgRk9MTF9MT05HVEVSTSkgeworCQlpZiAoV0FSTl9PTl9PTkNFKGxvY2tlZCkpCisJCQly
ZXR1cm4gLUVJTlZBTDsKKwkJLyoKKwkJICogVGhpcyB3aWxsIGNoZWNrIHRoZSB2bWFzIChldmVu
IGlmIG91ciB2bWFzIGFyZyBpcyBOVUxMKQorCQkgKiBhbmQgcmV0dXJuIC1FTk9UU1VQUCBpZiBE
QVggaXNuJ3QgYWxsb3dlZCBpbiB0aGlzIGNhc2U6CisJCSAqLworCQlyZXR1cm4gX19ndXBfbG9u
Z3Rlcm1fbG9ja2VkKHRzaywgbW0sIHN0YXJ0LCBucl9wYWdlcywgcGFnZXMsCisJCQkJCSAgICAg
dm1hcywgZ3VwX2ZsYWdzIHwgRk9MTF9UT1VDSCB8CisJCQkJCSAgICAgRk9MTF9SRU1PVEUpOwor
CX0KKworCXJldHVybiBfX2dldF91c2VyX3BhZ2VzX2xvY2tlZCh0c2ssIG1tLCBzdGFydCwgbnJf
cGFnZXMsIHBhZ2VzLCB2bWFzLAorCQkJCSAgICAgICBsb2NrZWQsCisJCQkJICAgICAgIGd1cF9m
bGFncyB8IEZPTExfVE9VQ0ggfCBGT0xMX1JFTU9URSk7Cit9CisKIC8qCiAgKiBnZXRfdXNlcl9w
YWdlc19yZW1vdGUoKSAtIHBpbiB1c2VyIHBhZ2VzIGluIG1lbW9yeQogICogQHRzazoJdGhlIHRh
c2tfc3RydWN0IHRvIHVzZSBmb3IgcGFnZSBmYXVsdCBhY2NvdW50aW5nLCBvcgpAQCAtMTIwNSwy
OCArMTQwMCw4IEBAIGxvbmcgZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKHN0cnVjdCB0YXNrX3N0cnVj
dCAqdHNrLCBzdHJ1Y3QgbW1fc3RydWN0ICptbSwKIAlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFn
cyAmIEZPTExfUElOKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKLQkvKgotCSAqIFBhcnRzIG9mIEZP
TExfTE9OR1RFUk0gYmVoYXZpb3IgYXJlIGluY29tcGF0aWJsZSB3aXRoCi0JICogRkFVTFRfRkxB
R19BTExPV19SRVRSWSBiZWNhdXNlIG9mIHRoZSBGUyBEQVggY2hlY2sgcmVxdWlyZW1lbnQgb24K
LQkgKiB2bWFzLiBIb3dldmVyLCB0aGlzIG9ubHkgY29tZXMgdXAgaWYgbG9ja2VkIGlzIHNldCwg
YW5kIHRoZXJlIGFyZQotCSAqIGNhbGxlcnMgdGhhdCBkbyByZXF1ZXN0IEZPTExfTE9OR1RFUk0s
IGJ1dCBkbyBub3Qgc2V0IGxvY2tlZC4gU28sCi0JICogYWxsb3cgd2hhdCB3ZSBjYW4uCi0JICov
Ci0JaWYgKGd1cF9mbGFncyAmIEZPTExfTE9OR1RFUk0pIHsKLQkJaWYgKFdBUk5fT05fT05DRShs
b2NrZWQpKQotCQkJcmV0dXJuIC1FSU5WQUw7Ci0JCS8qCi0JCSAqIFRoaXMgd2lsbCBjaGVjayB0
aGUgdm1hcyAoZXZlbiBpZiBvdXIgdm1hcyBhcmcgaXMgTlVMTCkKLQkJICogYW5kIHJldHVybiAt
RU5PVFNVUFAgaWYgREFYIGlzbid0IGFsbG93ZWQgaW4gdGhpcyBjYXNlOgotCQkgKi8KLQkJcmV0
dXJuIF9fZ3VwX2xvbmd0ZXJtX2xvY2tlZCh0c2ssIG1tLCBzdGFydCwgbnJfcGFnZXMsIHBhZ2Vz
LAotCQkJCQkgICAgIHZtYXMsIGd1cF9mbGFncyB8IEZPTExfVE9VQ0ggfAotCQkJCQkgICAgIEZP
TExfUkVNT1RFKTsKLQl9Ci0KLQlyZXR1cm4gX19nZXRfdXNlcl9wYWdlc19sb2NrZWQodHNrLCBt
bSwgc3RhcnQsIG5yX3BhZ2VzLCBwYWdlcywgdm1hcywKLQkJCQkgICAgICAgbG9ja2VkLAotCQkJ
CSAgICAgICBndXBfZmxhZ3MgfCBGT0xMX1RPVUNIIHwgRk9MTF9SRU1PVEUpOworCXJldHVybiBf
X2dldF91c2VyX3BhZ2VzX3JlbW90ZSh0c2ssIG1tLCBzdGFydCwgbnJfcGFnZXMsIGd1cF9mbGFn
cywKKwkJCQkgICAgICAgcGFnZXMsIHZtYXMsIGxvY2tlZCk7CiB9CiBFWFBPUlRfU1lNQk9MKGdl
dF91c2VyX3BhZ2VzX3JlbW90ZSk7CiAKQEAgLTE0MjEsMTAgKzE1OTYsMTEgQEAgc3RhdGljIGxv
bmcgX19nZXRfdXNlcl9wYWdlc19sb2NrZWQoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ssCiAJcmV0
dXJuIGkgPyA6IC1FRkFVTFQ7CiB9CiAKLWxvbmcgZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKHN0cnVj
dCB0YXNrX3N0cnVjdCAqdHNrLCBzdHJ1Y3QgbW1fc3RydWN0ICptbSwKLQkJCSAgIHVuc2lnbmVk
IGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCi0JCQkgICB1bnNpZ25lZCBpbnQg
Z3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAotCQkJICAgc3RydWN0IHZtX2FyZWFfc3Ry
dWN0ICoqdm1hcywgaW50ICpsb2NrZWQpCitzdGF0aWMgbG9uZyBfX2dldF91c2VyX3BhZ2VzX3Jl
bW90ZShzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRzaywKKwkJCQkgICAgc3RydWN0IG1tX3N0cnVjdCAq
bW0sCisJCQkJICAgIHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMs
CisJCQkJICAgIHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMsCisJ
CQkJICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMsIGludCAqbG9ja2VkKQogewogCXJl
dHVybiAwOwogfQpAQCAtMTg2NCwxMyArMjA0MCwxNyBAQCBzdGF0aWMgaW5saW5lIHB0ZV90IGd1
cF9nZXRfcHRlKHB0ZV90ICpwdGVwKQogI2VuZGlmIC8qIENPTkZJR19HVVBfR0VUX1BURV9MT1df
SElHSCAqLwogCiBzdGF0aWMgdm9pZCBfX21heWJlX3VudXNlZCB1bmRvX2Rldl9wYWdlbWFwKGlu
dCAqbnIsIGludCBucl9zdGFydCwKKwkJCQkJICAgIHVuc2lnbmVkIGludCBmbGFncywKIAkJCQkJ
ICAgIHN0cnVjdCBwYWdlICoqcGFnZXMpCiB7CiAJd2hpbGUgKCgqbnIpIC0gbnJfc3RhcnQpIHsK
IAkJc3RydWN0IHBhZ2UgKnBhZ2UgPSBwYWdlc1stLSgqbnIpXTsKIAogCQlDbGVhclBhZ2VSZWZl
cmVuY2VkKHBhZ2UpOwotCQlwdXRfcGFnZShwYWdlKTsKKwkJaWYgKGZsYWdzICYgRk9MTF9QSU4p
CisJCQl1bnBpbl91c2VyX3BhZ2UocGFnZSk7CisJCWVsc2UKKwkJCXB1dF9wYWdlKHBhZ2UpOwog
CX0KIH0KIApAQCAtMTkwMyw3ICsyMDgzLDcgQEAgc3RhdGljIGludCBndXBfcHRlX3JhbmdlKHBt
ZF90IHBtZCwgdW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIGVuZCwKIAogCQkJcGdt
YXAgPSBnZXRfZGV2X3BhZ2VtYXAocHRlX3BmbihwdGUpLCBwZ21hcCk7CiAJCQlpZiAodW5saWtl
bHkoIXBnbWFwKSkgewotCQkJCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5yX3N0YXJ0LCBwYWdlcyk7
CisJCQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIGZsYWdzLCBwYWdlcyk7CiAJCQkJ
Z290byBwdGVfdW5tYXA7CiAJCQl9CiAJCX0gZWxzZSBpZiAocHRlX3NwZWNpYWwocHRlKSkKQEAg
LTE5MTIsNyArMjA5Miw3IEBAIHN0YXRpYyBpbnQgZ3VwX3B0ZV9yYW5nZShwbWRfdCBwbWQsIHVu
c2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBlbmQsCiAJCVZNX0JVR19PTighcGZuX3Zh
bGlkKHB0ZV9wZm4ocHRlKSkpOwogCQlwYWdlID0gcHRlX3BhZ2UocHRlKTsKIAotCQloZWFkID0g
dHJ5X2dldF9jb21wb3VuZF9oZWFkKHBhZ2UsIDEpOworCQloZWFkID0gdHJ5X2dyYWJfY29tcG91
bmRfaGVhZChwYWdlLCAxLCBmbGFncyk7CiAJCWlmICghaGVhZCkKIAkJCWdvdG8gcHRlX3VubWFw
OwogCkBAIC0xOTU3LDcgKzIxMzcsOCBAQCBzdGF0aWMgaW50IGd1cF9wdGVfcmFuZ2UocG1kX3Qg
cG1kLCB1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAogCiAjaWYgZGVmaW5l
ZChDT05GSUdfQVJDSF9IQVNfUFRFX0RFVk1BUCkgJiYgZGVmaW5lZChDT05GSUdfVFJBTlNQQVJF
TlRfSFVHRVBBR0UpCiBzdGF0aWMgaW50IF9fZ3VwX2RldmljZV9odWdlKHVuc2lnbmVkIGxvbmcg
cGZuLCB1bnNpZ25lZCBsb25nIGFkZHIsCi0JCXVuc2lnbmVkIGxvbmcgZW5kLCBzdHJ1Y3QgcGFn
ZSAqKnBhZ2VzLCBpbnQgKm5yKQorCQkJICAgICB1bnNpZ25lZCBsb25nIGVuZCwgdW5zaWduZWQg
aW50IGZsYWdzLAorCQkJICAgICBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLCBpbnQgKm5yKQogewogCWlu
dCBucl9zdGFydCA9ICpucjsKIAlzdHJ1Y3QgZGV2X3BhZ2VtYXAgKnBnbWFwID0gTlVMTDsKQEAg
LTE5NjcsMTIgKzIxNDgsMTUgQEAgc3RhdGljIGludCBfX2d1cF9kZXZpY2VfaHVnZSh1bnNpZ25l
ZCBsb25nIHBmbiwgdW5zaWduZWQgbG9uZyBhZGRyLAogCiAJCXBnbWFwID0gZ2V0X2Rldl9wYWdl
bWFwKHBmbiwgcGdtYXApOwogCQlpZiAodW5saWtlbHkoIXBnbWFwKSkgewotCQkJdW5kb19kZXZf
cGFnZW1hcChuciwgbnJfc3RhcnQsIHBhZ2VzKTsKKwkJCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5y
X3N0YXJ0LCBmbGFncywgcGFnZXMpOwogCQkJcmV0dXJuIDA7CiAJCX0KIAkJU2V0UGFnZVJlZmVy
ZW5jZWQocGFnZSk7CiAJCXBhZ2VzWypucl0gPSBwYWdlOwotCQlnZXRfcGFnZShwYWdlKTsKKwkJ
aWYgKHVubGlrZWx5KCF0cnlfZ3JhYl9wYWdlKHBhZ2UsIGZsYWdzKSkpIHsKKwkJCXVuZG9fZGV2
X3BhZ2VtYXAobnIsIG5yX3N0YXJ0LCBmbGFncywgcGFnZXMpOworCQkJcmV0dXJuIDA7CisJCX0K
IAkJKCpucikrKzsKIAkJcGZuKys7CiAJfSB3aGlsZSAoYWRkciArPSBQQUdFX1NJWkUsIGFkZHIg
IT0gZW5kKTsKQEAgLTE5ODMsNDggKzIxNjcsNTIgQEAgc3RhdGljIGludCBfX2d1cF9kZXZpY2Vf
aHVnZSh1bnNpZ25lZCBsb25nIHBmbiwgdW5zaWduZWQgbG9uZyBhZGRyLAogfQogCiBzdGF0aWMg
aW50IF9fZ3VwX2RldmljZV9odWdlX3BtZChwbWRfdCBvcmlnLCBwbWRfdCAqcG1kcCwgdW5zaWdu
ZWQgbG9uZyBhZGRyLAotCQl1bnNpZ25lZCBsb25nIGVuZCwgc3RydWN0IHBhZ2UgKipwYWdlcywg
aW50ICpucikKKwkJCQkgdW5zaWduZWQgbG9uZyBlbmQsIHVuc2lnbmVkIGludCBmbGFncywKKwkJ
CQkgc3RydWN0IHBhZ2UgKipwYWdlcywgaW50ICpucikKIHsKIAl1bnNpZ25lZCBsb25nIGZhdWx0
X3BmbjsKIAlpbnQgbnJfc3RhcnQgPSAqbnI7CiAKIAlmYXVsdF9wZm4gPSBwbWRfcGZuKG9yaWcp
ICsgKChhZGRyICYgflBNRF9NQVNLKSA+PiBQQUdFX1NISUZUKTsKLQlpZiAoIV9fZ3VwX2Rldmlj
ZV9odWdlKGZhdWx0X3BmbiwgYWRkciwgZW5kLCBwYWdlcywgbnIpKQorCWlmICghX19ndXBfZGV2
aWNlX2h1Z2UoZmF1bHRfcGZuLCBhZGRyLCBlbmQsIGZsYWdzLCBwYWdlcywgbnIpKQogCQlyZXR1
cm4gMDsKIAogCWlmICh1bmxpa2VseShwbWRfdmFsKG9yaWcpICE9IHBtZF92YWwoKnBtZHApKSkg
ewotCQl1bmRvX2Rldl9wYWdlbWFwKG5yLCBucl9zdGFydCwgcGFnZXMpOworCQl1bmRvX2Rldl9w
YWdlbWFwKG5yLCBucl9zdGFydCwgZmxhZ3MsIHBhZ2VzKTsKIAkJcmV0dXJuIDA7CiAJfQogCXJl
dHVybiAxOwogfQogCiBzdGF0aWMgaW50IF9fZ3VwX2RldmljZV9odWdlX3B1ZChwdWRfdCBvcmln
LCBwdWRfdCAqcHVkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAotCQl1bnNpZ25lZCBsb25nIGVuZCwg
c3RydWN0IHBhZ2UgKipwYWdlcywgaW50ICpucikKKwkJCQkgdW5zaWduZWQgbG9uZyBlbmQsIHVu
c2lnbmVkIGludCBmbGFncywKKwkJCQkgc3RydWN0IHBhZ2UgKipwYWdlcywgaW50ICpucikKIHsK
IAl1bnNpZ25lZCBsb25nIGZhdWx0X3BmbjsKIAlpbnQgbnJfc3RhcnQgPSAqbnI7CiAKIAlmYXVs
dF9wZm4gPSBwdWRfcGZuKG9yaWcpICsgKChhZGRyICYgflBVRF9NQVNLKSA+PiBQQUdFX1NISUZU
KTsKLQlpZiAoIV9fZ3VwX2RldmljZV9odWdlKGZhdWx0X3BmbiwgYWRkciwgZW5kLCBwYWdlcywg
bnIpKQorCWlmICghX19ndXBfZGV2aWNlX2h1Z2UoZmF1bHRfcGZuLCBhZGRyLCBlbmQsIGZsYWdz
LCBwYWdlcywgbnIpKQogCQlyZXR1cm4gMDsKIAogCWlmICh1bmxpa2VseShwdWRfdmFsKG9yaWcp
ICE9IHB1ZF92YWwoKnB1ZHApKSkgewotCQl1bmRvX2Rldl9wYWdlbWFwKG5yLCBucl9zdGFydCwg
cGFnZXMpOworCQl1bmRvX2Rldl9wYWdlbWFwKG5yLCBucl9zdGFydCwgZmxhZ3MsIHBhZ2VzKTsK
IAkJcmV0dXJuIDA7CiAJfQogCXJldHVybiAxOwogfQogI2Vsc2UKIHN0YXRpYyBpbnQgX19ndXBf
ZGV2aWNlX2h1Z2VfcG1kKHBtZF90IG9yaWcsIHBtZF90ICpwbWRwLCB1bnNpZ25lZCBsb25nIGFk
ZHIsCi0JCXVuc2lnbmVkIGxvbmcgZW5kLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLCBpbnQgKm5yKQor
CQkJCSB1bnNpZ25lZCBsb25nIGVuZCwgdW5zaWduZWQgaW50IGZsYWdzLAorCQkJCSBzdHJ1Y3Qg
cGFnZSAqKnBhZ2VzLCBpbnQgKm5yKQogewogCUJVSUxEX0JVRygpOwogCXJldHVybiAwOwogfQog
CiBzdGF0aWMgaW50IF9fZ3VwX2RldmljZV9odWdlX3B1ZChwdWRfdCBwdWQsIHB1ZF90ICpwdWRw
LCB1bnNpZ25lZCBsb25nIGFkZHIsCi0JCXVuc2lnbmVkIGxvbmcgZW5kLCBzdHJ1Y3QgcGFnZSAq
KnBhZ2VzLCBpbnQgKm5yKQorCQkJCSB1bnNpZ25lZCBsb25nIGVuZCwgdW5zaWduZWQgaW50IGZs
YWdzLAorCQkJCSBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLCBpbnQgKm5yKQogewogCUJVSUxEX0JVRygp
OwogCXJldHVybiAwOwpAQCAtMjA0Miw4ICsyMjMwLDExIEBAIHN0YXRpYyBpbnQgcmVjb3JkX3N1
YnBhZ2VzKHN0cnVjdCBwYWdlICpwYWdlLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJcmV0dXJuIG5y
OwogfQogCi1zdGF0aWMgdm9pZCBwdXRfY29tcG91bmRfaGVhZChzdHJ1Y3QgcGFnZSAqcGFnZSwg
aW50IHJlZnMpCitzdGF0aWMgdm9pZCBwdXRfY29tcG91bmRfaGVhZChzdHJ1Y3QgcGFnZSAqcGFn
ZSwgaW50IHJlZnMsIHVuc2lnbmVkIGludCBmbGFncykKIHsKKwlpZiAoZmxhZ3MgJiBGT0xMX1BJ
TikKKwkJcmVmcyAqPSBHVVBfUElOX0NPVU5USU5HX0JJQVM7CisKIAkvKiBEbyBhIGdldF9wYWdl
KCkgZmlyc3QsIGluIGNhc2UgcmVmcyA9PSBwYWdlLT5fcmVmY291bnQgKi8KIAlnZXRfcGFnZShw
YWdlKTsKIAlwYWdlX3JlZl9zdWIocGFnZSwgcmVmcyk7CkBAIC0yMDgzLDEyICsyMjc0LDEyIEBA
IHN0YXRpYyBpbnQgZ3VwX2h1Z2VwdGUocHRlX3QgKnB0ZXAsIHVuc2lnbmVkIGxvbmcgc3osIHVu
c2lnbmVkIGxvbmcgYWRkciwKIAlwYWdlID0gaGVhZCArICgoYWRkciAmIChzei0xKSkgPj4gUEFH
RV9TSElGVCk7CiAJcmVmcyA9IHJlY29yZF9zdWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2Vz
ICsgKm5yKTsKIAotCWhlYWQgPSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQoaGVhZCwgcmVmcyk7CisJ
aGVhZCA9IHRyeV9ncmFiX2NvbXBvdW5kX2hlYWQoaGVhZCwgcmVmcywgZmxhZ3MpOwogCWlmICgh
aGVhZCkKIAkJcmV0dXJuIDA7CiAKIAlpZiAodW5saWtlbHkocHRlX3ZhbChwdGUpICE9IHB0ZV92
YWwoKnB0ZXApKSkgewotCQlwdXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZzKTsKKwkJcHV0X2Nv
bXBvdW5kX2hlYWQoaGVhZCwgcmVmcywgZmxhZ3MpOwogCQlyZXR1cm4gMDsKIAl9CiAKQEAgLTIx
MzYsMTggKzIzMjcsMTkgQEAgc3RhdGljIGludCBndXBfaHVnZV9wbWQocG1kX3Qgb3JpZywgcG1k
X3QgKnBtZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlpZiAocG1kX2Rldm1hcChvcmlnKSkgewog
CQlpZiAodW5saWtlbHkoZmxhZ3MgJiBGT0xMX0xPTkdURVJNKSkKIAkJCXJldHVybiAwOwotCQly
ZXR1cm4gX19ndXBfZGV2aWNlX2h1Z2VfcG1kKG9yaWcsIHBtZHAsIGFkZHIsIGVuZCwgcGFnZXMs
IG5yKTsKKwkJcmV0dXJuIF9fZ3VwX2RldmljZV9odWdlX3BtZChvcmlnLCBwbWRwLCBhZGRyLCBl
bmQsIGZsYWdzLAorCQkJCQkgICAgIHBhZ2VzLCBucik7CiAJfQogCiAJcGFnZSA9IHBtZF9wYWdl
KG9yaWcpICsgKChhZGRyICYgflBNRF9NQVNLKSA+PiBQQUdFX1NISUZUKTsKIAlyZWZzID0gcmVj
b3JkX3N1YnBhZ2VzKHBhZ2UsIGFkZHIsIGVuZCwgcGFnZXMgKyAqbnIpOwogCi0JaGVhZCA9IHRy
eV9nZXRfY29tcG91bmRfaGVhZChwbWRfcGFnZShvcmlnKSwgcmVmcyk7CisJaGVhZCA9IHRyeV9n
cmFiX2NvbXBvdW5kX2hlYWQocG1kX3BhZ2Uob3JpZyksIHJlZnMsIGZsYWdzKTsKIAlpZiAoIWhl
YWQpCiAJCXJldHVybiAwOwogCiAJaWYgKHVubGlrZWx5KHBtZF92YWwob3JpZykgIT0gcG1kX3Zh
bCgqcG1kcCkpKSB7Ci0JCXB1dF9jb21wb3VuZF9oZWFkKGhlYWQsIHJlZnMpOworCQlwdXRfY29t
cG91bmRfaGVhZChoZWFkLCByZWZzLCBmbGFncyk7CiAJCXJldHVybiAwOwogCX0KIApAQCAtMjE1
Nyw3ICsyMzQ5LDggQEAgc3RhdGljIGludCBndXBfaHVnZV9wbWQocG1kX3Qgb3JpZywgcG1kX3Qg
KnBtZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKIH0KIAogc3RhdGljIGludCBndXBfaHVnZV9wdWQo
cHVkX3Qgb3JpZywgcHVkX3QgKnB1ZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKLQkJdW5zaWduZWQg
bG9uZyBlbmQsIHVuc2lnbmVkIGludCBmbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcywgaW50ICpu
cikKKwkJCXVuc2lnbmVkIGxvbmcgZW5kLCB1bnNpZ25lZCBpbnQgZmxhZ3MsCisJCQlzdHJ1Y3Qg
cGFnZSAqKnBhZ2VzLCBpbnQgKm5yKQogewogCXN0cnVjdCBwYWdlICpoZWFkLCAqcGFnZTsKIAlp
bnQgcmVmczsKQEAgLTIxNjgsMTggKzIzNjEsMTkgQEAgc3RhdGljIGludCBndXBfaHVnZV9wdWQo
cHVkX3Qgb3JpZywgcHVkX3QgKnB1ZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlpZiAocHVkX2Rl
dm1hcChvcmlnKSkgewogCQlpZiAodW5saWtlbHkoZmxhZ3MgJiBGT0xMX0xPTkdURVJNKSkKIAkJ
CXJldHVybiAwOwotCQlyZXR1cm4gX19ndXBfZGV2aWNlX2h1Z2VfcHVkKG9yaWcsIHB1ZHAsIGFk
ZHIsIGVuZCwgcGFnZXMsIG5yKTsKKwkJcmV0dXJuIF9fZ3VwX2RldmljZV9odWdlX3B1ZChvcmln
LCBwdWRwLCBhZGRyLCBlbmQsIGZsYWdzLAorCQkJCQkgICAgIHBhZ2VzLCBucik7CiAJfQogCiAJ
cGFnZSA9IHB1ZF9wYWdlKG9yaWcpICsgKChhZGRyICYgflBVRF9NQVNLKSA+PiBQQUdFX1NISUZU
KTsKIAlyZWZzID0gcmVjb3JkX3N1YnBhZ2VzKHBhZ2UsIGFkZHIsIGVuZCwgcGFnZXMgKyAqbnIp
OwogCi0JaGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwdWRfcGFnZShvcmlnKSwgcmVmcyk7
CisJaGVhZCA9IHRyeV9ncmFiX2NvbXBvdW5kX2hlYWQocHVkX3BhZ2Uob3JpZyksIHJlZnMsIGZs
YWdzKTsKIAlpZiAoIWhlYWQpCiAJCXJldHVybiAwOwogCiAJaWYgKHVubGlrZWx5KHB1ZF92YWwo
b3JpZykgIT0gcHVkX3ZhbCgqcHVkcCkpKSB7Ci0JCXB1dF9jb21wb3VuZF9oZWFkKGhlYWQsIHJl
ZnMpOworCQlwdXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZzLCBmbGFncyk7CiAJCXJldHVybiAw
OwogCX0KIApAQCAtMjIwMywxMiArMjM5NywxMiBAQCBzdGF0aWMgaW50IGd1cF9odWdlX3BnZChw
Z2RfdCBvcmlnLCBwZ2RfdCAqcGdkcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCXBhZ2UgPSBwZ2Rf
cGFnZShvcmlnKSArICgoYWRkciAmIH5QR0RJUl9NQVNLKSA+PiBQQUdFX1NISUZUKTsKIAlyZWZz
ID0gcmVjb3JkX3N1YnBhZ2VzKHBhZ2UsIGFkZHIsIGVuZCwgcGFnZXMgKyAqbnIpOwogCi0JaGVh
ZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwZ2RfcGFnZShvcmlnKSwgcmVmcyk7CisJaGVhZCA9
IHRyeV9ncmFiX2NvbXBvdW5kX2hlYWQocGdkX3BhZ2Uob3JpZyksIHJlZnMsIGZsYWdzKTsKIAlp
ZiAoIWhlYWQpCiAJCXJldHVybiAwOwogCiAJaWYgKHVubGlrZWx5KHBnZF92YWwob3JpZykgIT0g
cGdkX3ZhbCgqcGdkcCkpKSB7Ci0JCXB1dF9jb21wb3VuZF9oZWFkKGhlYWQsIHJlZnMpOworCQlw
dXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZzLCBmbGFncyk7CiAJCXJldHVybiAwOwogCX0KIApA
QCAtMjM3MSw2ICsyNTY1LDE0IEBAIGludCBfX2dldF91c2VyX3BhZ2VzX2Zhc3QodW5zaWduZWQg
bG9uZyBzdGFydCwgaW50IG5yX3BhZ2VzLCBpbnQgd3JpdGUsCiAJdW5zaWduZWQgbG9uZyBsZW4s
IGVuZDsKIAl1bnNpZ25lZCBsb25nIGZsYWdzOwogCWludCBuciA9IDA7CisJLyoKKwkgKiBJbnRl
cm5hbGx5ICh3aXRoaW4gbW0vZ3VwLmMpLCBndXAgZmFzdCB2YXJpYW50cyBtdXN0IHNldCBGT0xM
X0dFVCwKKwkgKiBiZWNhdXNlIGd1cCBmYXN0IGlzIGFsd2F5cyBhICJwaW4gd2l0aCBhICsxIHBh
Z2UgcmVmY291bnQiIHJlcXVlc3QuCisJICovCisJdW5zaWduZWQgaW50IGd1cF9mbGFncyA9IEZP
TExfR0VUOworCisJaWYgKHdyaXRlKQorCQlndXBfZmxhZ3MgfD0gRk9MTF9XUklURTsKIAogCXN0
YXJ0ID0gdW50YWdnZWRfYWRkcihzdGFydCkgJiBQQUdFX01BU0s7CiAJbGVuID0gKHVuc2lnbmVk
IGxvbmcpIG5yX3BhZ2VzIDw8IFBBR0VfU0hJRlQ7CkBAIC0yMzk2LDcgKzI1OTgsNyBAQCBpbnQg
X19nZXRfdXNlcl9wYWdlc19mYXN0KHVuc2lnbmVkIGxvbmcgc3RhcnQsIGludCBucl9wYWdlcywg
aW50IHdyaXRlLAogCWlmIChJU19FTkFCTEVEKENPTkZJR19IQVZFX0ZBU1RfR1VQKSAmJgogCSAg
ICBndXBfZmFzdF9wZXJtaXR0ZWQoc3RhcnQsIGVuZCkpIHsKIAkJbG9jYWxfaXJxX3NhdmUoZmxh
Z3MpOwotCQlndXBfcGdkX3JhbmdlKHN0YXJ0LCBlbmQsIHdyaXRlID8gRk9MTF9XUklURSA6IDAs
IHBhZ2VzLCAmbnIpOworCQlndXBfcGdkX3JhbmdlKHN0YXJ0LCBlbmQsIGd1cF9mbGFncywgcGFn
ZXMsICZucik7CiAJCWxvY2FsX2lycV9yZXN0b3JlKGZsYWdzKTsKIAl9CiAKQEAgLTI0MzUsNyAr
MjYzNyw3IEBAIHN0YXRpYyBpbnQgaW50ZXJuYWxfZ2V0X3VzZXJfcGFnZXNfZmFzdCh1bnNpZ25l
ZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCiAJaW50IG5yID0gMCwgcmV0ID0gMDsKIAogCWlm
IChXQVJOX09OX09OQ0UoZ3VwX2ZsYWdzICYgfihGT0xMX1dSSVRFIHwgRk9MTF9MT05HVEVSTSB8
Ci0JCQkJICAgICAgIEZPTExfRk9SQ0UgfCBGT0xMX1BJTikpKQorCQkJCSAgICAgICBGT0xMX0ZP
UkNFIHwgRk9MTF9QSU4gfCBGT0xMX0dFVCkpKQogCQlyZXR1cm4gLUVJTlZBTDsKIAogCXN0YXJ0
ID0gdW50YWdnZWRfYWRkcihzdGFydCkgJiBQQUdFX01BU0s7CkBAIC0yNDc4LDExICsyNjgwLDEx
IEBAIHN0YXRpYyBpbnQgaW50ZXJuYWxfZ2V0X3VzZXJfcGFnZXNfZmFzdCh1bnNpZ25lZCBsb25n
IHN0YXJ0LCBpbnQgbnJfcGFnZXMsCiAKIC8qKgogICogZ2V0X3VzZXJfcGFnZXNfZmFzdCgpIC0g
cGluIHVzZXIgcGFnZXMgaW4gbWVtb3J5Ci0gKiBAc3RhcnQ6CXN0YXJ0aW5nIHVzZXIgYWRkcmVz
cwotICogQG5yX3BhZ2VzOgludW1iZXIgb2YgcGFnZXMgZnJvbSBzdGFydCB0byBwaW4KLSAqIEBn
dXBfZmxhZ3M6CWZsYWdzIG1vZGlmeWluZyBwaW4gYmVoYXZpb3VyCi0gKiBAcGFnZXM6CWFycmF5
IHRoYXQgcmVjZWl2ZXMgcG9pbnRlcnMgdG8gdGhlIHBhZ2VzIHBpbm5lZC4KLSAqCQlTaG91bGQg
YmUgYXQgbGVhc3QgbnJfcGFnZXMgbG9uZy4KKyAqIEBzdGFydDogICAgICBzdGFydGluZyB1c2Vy
IGFkZHJlc3MKKyAqIEBucl9wYWdlczogICBudW1iZXIgb2YgcGFnZXMgZnJvbSBzdGFydCB0byBw
aW4KKyAqIEBndXBfZmxhZ3M6ICBmbGFncyBtb2RpZnlpbmcgcGluIGJlaGF2aW91cgorICogQHBh
Z2VzOiAgICAgIGFycmF5IHRoYXQgcmVjZWl2ZXMgcG9pbnRlcnMgdG8gdGhlIHBhZ2VzIHBpbm5l
ZC4KKyAqICAgICAgICAgICAgICBTaG91bGQgYmUgYXQgbGVhc3QgbnJfcGFnZXMgbG9uZy4KICAq
CiAgKiBBdHRlbXB0IHRvIHBpbiB1c2VyIHBhZ2VzIGluIG1lbW9yeSB3aXRob3V0IHRha2luZyBt
bS0+bW1hcF9zZW0uCiAgKiBJZiBub3Qgc3VjY2Vzc2Z1bCwgaXQgd2lsbCBmYWxsIGJhY2sgdG8g
dGFraW5nIHRoZSBsb2NrIGFuZApAQCAtMjUwMiw2ICsyNzA0LDEzIEBAIGludCBnZXRfdXNlcl9w
YWdlc19mYXN0KHVuc2lnbmVkIGxvbmcgc3RhcnQsIGludCBucl9wYWdlcywKIAlpZiAoV0FSTl9P
Tl9PTkNFKGd1cF9mbGFncyAmIEZPTExfUElOKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKKwkvKgor
CSAqIFRoZSBjYWxsZXIgbWF5IG9yIG1heSBub3QgaGF2ZSBleHBsaWNpdGx5IHNldCBGT0xMX0dF
VDsgZWl0aGVyIHdheSBpcworCSAqIE9LLiBIb3dldmVyLCBpbnRlcm5hbGx5ICh3aXRoaW4gbW0v
Z3VwLmMpLCBndXAgZmFzdCB2YXJpYW50cyBtdXN0IHNldAorCSAqIEZPTExfR0VULCBiZWNhdXNl
IGd1cCBmYXN0IGlzIGFsd2F5cyBhICJwaW4gd2l0aCBhICsxIHBhZ2UgcmVmY291bnQiCisJICog
cmVxdWVzdC4KKwkgKi8KKwlndXBfZmxhZ3MgfD0gRk9MTF9HRVQ7CiAJcmV0dXJuIGludGVybmFs
X2dldF91c2VyX3BhZ2VzX2Zhc3Qoc3RhcnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3MsIHBhZ2VzKTsK
IH0KIEVYUE9SVF9TWU1CT0xfR1BMKGdldF91c2VyX3BhZ2VzX2Zhc3QpOwpAQCAtMjUwOSw5ICsy
NzE4LDEyIEBAIEVYUE9SVF9TWU1CT0xfR1BMKGdldF91c2VyX3BhZ2VzX2Zhc3QpOwogLyoqCiAg
KiBwaW5fdXNlcl9wYWdlc19mYXN0KCkgLSBwaW4gdXNlciBwYWdlcyBpbiBtZW1vcnkgd2l0aG91
dCB0YWtpbmcgbG9ja3MKICAqCi0gKiBGb3Igbm93LCB0aGlzIGlzIGEgcGxhY2Vob2xkZXIgZnVu
Y3Rpb24sIHVudGlsIHZhcmlvdXMgY2FsbCBzaXRlcyBhcmUKLSAqIGNvbnZlcnRlZCB0byB1c2Ug
dGhlIGNvcnJlY3QgZ2V0X3VzZXJfcGFnZXMqKCkgb3IgcGluX3VzZXJfcGFnZXMqKCkgQVBJLiBT
bywKLSAqIHRoaXMgaXMgaWRlbnRpY2FsIHRvIGdldF91c2VyX3BhZ2VzX2Zhc3QoKS4KKyAqIE5l
YXJseSB0aGUgc2FtZSBhcyBnZXRfdXNlcl9wYWdlc19mYXN0KCksIGV4Y2VwdCB0aGF0IEZPTExf
UElOIGlzIHNldC4gU2VlCisgKiBnZXRfdXNlcl9wYWdlc19mYXN0KCkgZm9yIGRvY3VtZW50YXRp
b24gb24gdGhlIGZ1bmN0aW9uIGFyZ3VtZW50cywgYmVjYXVzZQorICogdGhlIGFyZ3VtZW50cyBo
ZXJlIGFyZSBpZGVudGljYWwuCisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMg
bXVzdCBiZSByZWxlYXNlZCB2aWEgdW5waW5fdXNlcl9wYWdlKCkuIFBsZWFzZQorICogc2VlIERv
Y3VtZW50YXRpb24vdm0vcGluX3VzZXJfcGFnZXMucnN0IGZvciBmdXJ0aGVyIGRldGFpbHMuCiAg
KgogICogVGhpcyBpcyBpbnRlbmRlZCBmb3IgQ2FzZSAxIChESU8pIGluIERvY3VtZW50YXRpb24v
dm0vcGluX3VzZXJfcGFnZXMucnN0LiBJdAogICogaXMgTk9UIGludGVuZGVkIGZvciBDYXNlIDIg
KFJETUE6IGxvbmctdGVybSBwaW5zKS4KQEAgLTI1MTksMjEgKzI3MzEsMjQgQEAgRVhQT1JUX1NZ
TUJPTF9HUEwoZ2V0X3VzZXJfcGFnZXNfZmFzdCk7CiBpbnQgcGluX3VzZXJfcGFnZXNfZmFzdCh1
bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCiAJCQl1bnNpZ25lZCBpbnQgZ3VwX2Zs
YWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzKQogewotCS8qCi0JICogVGhpcyBpcyBhIHBsYWNlaG9s
ZGVyLCB1bnRpbCB0aGUgcGluIGZ1bmN0aW9uYWxpdHkgaXMgYWN0aXZhdGVkLgotCSAqIFVudGls
IHRoZW4sIGp1c3QgYmVoYXZlIGxpa2UgdGhlIGNvcnJlc3BvbmRpbmcgZ2V0X3VzZXJfcGFnZXMq
KCkKLQkgKiByb3V0aW5lLgotCSAqLwotCXJldHVybiBnZXRfdXNlcl9wYWdlc19mYXN0KHN0YXJ0
LCBucl9wYWdlcywgZ3VwX2ZsYWdzLCBwYWdlcyk7CisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElO
IGFyZSBtdXR1YWxseSBleGNsdXNpdmUuICovCisJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3Mg
JiBGT0xMX0dFVCkpCisJCXJldHVybiAtRUlOVkFMOworCisJZ3VwX2ZsYWdzIHw9IEZPTExfUElO
OworCXJldHVybiBpbnRlcm5hbF9nZXRfdXNlcl9wYWdlc19mYXN0KHN0YXJ0LCBucl9wYWdlcywg
Z3VwX2ZsYWdzLCBwYWdlcyk7CiB9CiBFWFBPUlRfU1lNQk9MX0dQTChwaW5fdXNlcl9wYWdlc19m
YXN0KTsKIAogLyoqCiAgKiBwaW5fdXNlcl9wYWdlc19yZW1vdGUoKSAtIHBpbiBwYWdlcyBvZiBh
IHJlbW90ZSBwcm9jZXNzICh0YXNrICE9IGN1cnJlbnQpCiAgKgotICogRm9yIG5vdywgdGhpcyBp
cyBhIHBsYWNlaG9sZGVyIGZ1bmN0aW9uLCB1bnRpbCB2YXJpb3VzIGNhbGwgc2l0ZXMgYXJlCi0g
KiBjb252ZXJ0ZWQgdG8gdXNlIHRoZSBjb3JyZWN0IGdldF91c2VyX3BhZ2VzKigpIG9yIHBpbl91
c2VyX3BhZ2VzKigpIEFQSS4gU28sCi0gKiB0aGlzIGlzIGlkZW50aWNhbCB0byBnZXRfdXNlcl9w
YWdlc19yZW1vdGUoKS4KKyAqIE5lYXJseSB0aGUgc2FtZSBhcyBnZXRfdXNlcl9wYWdlc19yZW1v
dGUoKSwgZXhjZXB0IHRoYXQgRk9MTF9QSU4gaXMgc2V0LiBTZWUKKyAqIGdldF91c2VyX3BhZ2Vz
X3JlbW90ZSgpIGZvciBkb2N1bWVudGF0aW9uIG9uIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMsIGJl
Y2F1c2UKKyAqIHRoZSBhcmd1bWVudHMgaGVyZSBhcmUgaWRlbnRpY2FsLgorICoKKyAqIEZPTExf
UElOIG1lYW5zIHRoYXQgdGhlIHBhZ2VzIG11c3QgYmUgcmVsZWFzZWQgdmlhIHVucGluX3VzZXJf
cGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJz
dCBmb3IgZGV0YWlscy4KICAqCiAgKiBUaGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDEgKERJTykg
aW4gRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuIEl0CiAgKiBpcyBOT1QgaW50
ZW5kZWQgZm9yIENhc2UgMiAoUkRNQTogbG9uZy10ZXJtIHBpbnMpLgpAQCAtMjU0MywyMiArMjc1
OCwyNCBAQCBsb25nIHBpbl91c2VyX3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRz
aywgc3RydWN0IG1tX3N0cnVjdCAqbW0sCiAJCQkgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBz
dHJ1Y3QgcGFnZSAqKnBhZ2VzLAogCQkJICAgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcywg
aW50ICpsb2NrZWQpCiB7Ci0JLyoKLQkgKiBUaGlzIGlzIGEgcGxhY2Vob2xkZXIsIHVudGlsIHRo
ZSBwaW4gZnVuY3Rpb25hbGl0eSBpcyBhY3RpdmF0ZWQuCi0JICogVW50aWwgdGhlbiwganVzdCBi
ZWhhdmUgbGlrZSB0aGUgY29ycmVzcG9uZGluZyBnZXRfdXNlcl9wYWdlcyooKQotCSAqIHJvdXRp
bmUuCi0JICovCi0JcmV0dXJuIGdldF91c2VyX3BhZ2VzX3JlbW90ZSh0c2ssIG1tLCBzdGFydCwg
bnJfcGFnZXMsIGd1cF9mbGFncywgcGFnZXMsCi0JCQkJICAgICB2bWFzLCBsb2NrZWQpOworCS8q
IEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChX
QVJOX09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9HRVQpKQorCQlyZXR1cm4gLUVJTlZBTDsKKwor
CWd1cF9mbGFncyB8PSBGT0xMX1BJTjsKKwlyZXR1cm4gX19nZXRfdXNlcl9wYWdlc19yZW1vdGUo
dHNrLCBtbSwgc3RhcnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3MsCisJCQkJICAgICAgIHBhZ2VzLCB2
bWFzLCBsb2NrZWQpOwogfQogRVhQT1JUX1NZTUJPTChwaW5fdXNlcl9wYWdlc19yZW1vdGUpOwog
CiAvKioKICAqIHBpbl91c2VyX3BhZ2VzKCkgLSBwaW4gdXNlciBwYWdlcyBpbiBtZW1vcnkgZm9y
IHVzZSBieSBvdGhlciBkZXZpY2VzCiAgKgotICogRm9yIG5vdywgdGhpcyBpcyBhIHBsYWNlaG9s
ZGVyIGZ1bmN0aW9uLCB1bnRpbCB2YXJpb3VzIGNhbGwgc2l0ZXMgYXJlCi0gKiBjb252ZXJ0ZWQg
dG8gdXNlIHRoZSBjb3JyZWN0IGdldF91c2VyX3BhZ2VzKigpIG9yIHBpbl91c2VyX3BhZ2VzKigp
IEFQSS4gU28sCi0gKiB0aGlzIGlzIGlkZW50aWNhbCB0byBnZXRfdXNlcl9wYWdlcygpLgorICog
TmVhcmx5IHRoZSBzYW1lIGFzIGdldF91c2VyX3BhZ2VzKCksIGV4Y2VwdCB0aGF0IEZPTExfVE9V
Q0ggaXMgbm90IHNldCwgYW5kCisgKiBGT0xMX1BJTiBpcyBzZXQuCisgKgorICogRk9MTF9QSU4g
bWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEgdW5waW5fdXNlcl9wYWdl
KCkuIFBsZWFzZQorICogc2VlIERvY3VtZW50YXRpb24vdm0vcGluX3VzZXJfcGFnZXMucnN0IGZv
ciBkZXRhaWxzLgogICoKICAqIFRoaXMgaXMgaW50ZW5kZWQgZm9yIENhc2UgMSAoRElPKSBpbiBE
b2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdC4gSXQKICAqIGlzIE5PVCBpbnRlbmRl
ZCBmb3IgQ2FzZSAyIChSRE1BOiBsb25nLXRlcm0gcGlucykuCkBAIC0yNTY3LDExICsyNzg0LDEy
IEBAIGxvbmcgcGluX3VzZXJfcGFnZXModW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9u
ZyBucl9wYWdlcywKIAkJICAgIHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoq
cGFnZXMsCiAJCSAgICBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2bWFzKQogewotCS8qCi0JICog
VGhpcyBpcyBhIHBsYWNlaG9sZGVyLCB1bnRpbCB0aGUgcGluIGZ1bmN0aW9uYWxpdHkgaXMgYWN0
aXZhdGVkLgotCSAqIFVudGlsIHRoZW4sIGp1c3QgYmVoYXZlIGxpa2UgdGhlIGNvcnJlc3BvbmRp
bmcgZ2V0X3VzZXJfcGFnZXMqKCkKLQkgKiByb3V0aW5lLgotCSAqLwotCXJldHVybiBnZXRfdXNl
cl9wYWdlcyhzdGFydCwgbnJfcGFnZXMsIGd1cF9mbGFncywgcGFnZXMsIHZtYXMpOworCS8qIEZP
TExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJO
X09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9HRVQpKQorCQlyZXR1cm4gLUVJTlZBTDsKKworCWd1
cF9mbGFncyB8PSBGT0xMX1BJTjsKKwlyZXR1cm4gX19ndXBfbG9uZ3Rlcm1fbG9ja2VkKGN1cnJl
bnQsIGN1cnJlbnQtPm1tLCBzdGFydCwgbnJfcGFnZXMsCisJCQkJICAgICBwYWdlcywgdm1hcywg
Z3VwX2ZsYWdzKTsKIH0KIEVYUE9SVF9TWU1CT0wocGluX3VzZXJfcGFnZXMpOwpkaWZmIC0tZ2l0
IGEvbW0vaHVnZV9tZW1vcnkuYyBiL21tL2h1Z2VfbWVtb3J5LmMKaW5kZXggNDFhMGZiZGRjOTZi
Li5hNzE2NDZhNGM0ZDQgMTAwNjQ0Ci0tLSBhL21tL2h1Z2VfbWVtb3J5LmMKKysrIGIvbW0vaHVn
ZV9tZW1vcnkuYwpAQCAtOTQ1LDYgKzk0NSwxMSBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X2Rldm1h
cF9wbWQoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkg
Ki8KIAlXQVJOX09OQ0UoZmxhZ3MgJiBGT0xMX0NPVywgIm1tOiBJbiBmb2xsb3dfZGV2bWFwX3Bt
ZCB3aXRoIEZPTExfQ09XIHNldCIpOwogCisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBt
dXR1YWxseSBleGNsdXNpdmUuICovCisJaWYgKFdBUk5fT05fT05DRSgoZmxhZ3MgJiAoRk9MTF9Q
SU4gfCBGT0xMX0dFVCkpID09CisJCQkgKEZPTExfUElOIHwgRk9MTF9HRVQpKSkKKwkJcmV0dXJu
IE5VTEw7CisKIAlpZiAoZmxhZ3MgJiBGT0xMX1dSSVRFICYmICFwbWRfd3JpdGUoKnBtZCkpCiAJ
CXJldHVybiBOVUxMOwogCkBAIC05NjAsNyArOTY1LDcgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19k
ZXZtYXBfcG1kKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIs
CiAJICogZGV2aWNlIG1hcHBlZCBwYWdlcyBjYW4gb25seSBiZSByZXR1cm5lZCBpZiB0aGUKIAkg
KiBjYWxsZXIgd2lsbCBtYW5hZ2UgdGhlIHBhZ2UgcmVmZXJlbmNlIGNvdW50LgogCSAqLwotCWlm
ICghKGZsYWdzICYgRk9MTF9HRVQpKQorCWlmICghKGZsYWdzICYgKEZPTExfR0VUIHwgRk9MTF9Q
SU4pKSkKIAkJcmV0dXJuIEVSUl9QVFIoLUVFWElTVCk7CiAKIAlwZm4gKz0gKGFkZHIgJiB+UE1E
X01BU0spID4+IFBBR0VfU0hJRlQ7CkBAIC05NjgsNyArOTczLDggQEAgc3RydWN0IHBhZ2UgKmZv
bGxvd19kZXZtYXBfcG1kKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25n
IGFkZHIsCiAJaWYgKCEqcGdtYXApCiAJCXJldHVybiBFUlJfUFRSKC1FRkFVTFQpOwogCXBhZ2Ug
PSBwZm5fdG9fcGFnZShwZm4pOwotCWdldF9wYWdlKHBhZ2UpOworCWlmICghdHJ5X2dyYWJfcGFn
ZShwYWdlLCBmbGFncykpCisJCXBhZ2UgPSBFUlJfUFRSKC1FTk9NRU0pOwogCiAJcmV0dXJuIHBh
Z2U7CiB9CkBAIC0xMDg4LDYgKzEwOTQsMTEgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19kZXZtYXBf
cHVkKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJaWYg
KGZsYWdzICYgRk9MTF9XUklURSAmJiAhcHVkX3dyaXRlKCpwdWQpKQogCQlyZXR1cm4gTlVMTDsK
IAorCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiAqLwor
CWlmIChXQVJOX09OX09OQ0UoKGZsYWdzICYgKEZPTExfUElOIHwgRk9MTF9HRVQpKSA9PQorCQkJ
IChGT0xMX1BJTiB8IEZPTExfR0VUKSkpCisJCXJldHVybiBOVUxMOworCiAJaWYgKHB1ZF9wcmVz
ZW50KCpwdWQpICYmIHB1ZF9kZXZtYXAoKnB1ZCkpCiAJCS8qIHBhc3MgKi87CiAJZWxzZQpAQCAt
MTA5OSw4ICsxMTEwLDEwIEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFwX3B1ZChzdHJ1Y3Qg
dm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCS8qCiAJICogZGV2aWNl
IG1hcHBlZCBwYWdlcyBjYW4gb25seSBiZSByZXR1cm5lZCBpZiB0aGUKIAkgKiBjYWxsZXIgd2ls
bCBtYW5hZ2UgdGhlIHBhZ2UgcmVmZXJlbmNlIGNvdW50LgorCSAqCisJICogQXQgbGVhc3Qgb25l
IG9mIEZPTExfR0VUIHwgRk9MTF9QSU4gbXVzdCBiZSBzZXQsIHNvIGFzc2VydCB0aGF0IGhlcmU6
CiAJICovCi0JaWYgKCEoZmxhZ3MgJiBGT0xMX0dFVCkpCisJaWYgKCEoZmxhZ3MgJiAoRk9MTF9H
RVQgfCBGT0xMX1BJTikpKQogCQlyZXR1cm4gRVJSX1BUUigtRUVYSVNUKTsKIAogCXBmbiArPSAo
YWRkciAmIH5QVURfTUFTSykgPj4gUEFHRV9TSElGVDsKQEAgLTExMDgsNyArMTEyMSw4IEBAIHN0
cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFwX3B1ZChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwg
dW5zaWduZWQgbG9uZyBhZGRyLAogCWlmICghKnBnbWFwKQogCQlyZXR1cm4gRVJSX1BUUigtRUZB
VUxUKTsKIAlwYWdlID0gcGZuX3RvX3BhZ2UocGZuKTsKLQlnZXRfcGFnZShwYWdlKTsKKwlpZiAo
IXRyeV9ncmFiX3BhZ2UocGFnZSwgZmxhZ3MpKQorCQlwYWdlID0gRVJSX1BUUigtRU5PTUVNKTsK
IAogCXJldHVybiBwYWdlOwogfQpAQCAtMTQ4NCw4ICsxNDk4LDEzIEBAIHN0cnVjdCBwYWdlICpm
b2xsb3dfdHJhbnNfaHVnZV9wbWQoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiAKIAlwYWdl
ID0gcG1kX3BhZ2UoKnBtZCk7CiAJVk1fQlVHX09OX1BBR0UoIVBhZ2VIZWFkKHBhZ2UpICYmICFp
c196b25lX2RldmljZV9wYWdlKHBhZ2UpLCBwYWdlKTsKKworCWlmICghdHJ5X2dyYWJfcGFnZShw
YWdlLCBmbGFncykpCisJCXJldHVybiBFUlJfUFRSKC1FTk9NRU0pOworCiAJaWYgKGZsYWdzICYg
Rk9MTF9UT1VDSCkKIAkJdG91Y2hfcG1kKHZtYSwgYWRkciwgcG1kLCBmbGFncyk7CisKIAlpZiAo
KGZsYWdzICYgRk9MTF9NTE9DSykgJiYgKHZtYS0+dm1fZmxhZ3MgJiBWTV9MT0NLRUQpKSB7CiAJ
CS8qCiAJCSAqIFdlIGRvbid0IG1sb2NrKCkgcHRlLW1hcHBlZCBUSFBzLiBUaGlzIHdheSB3ZSBj
YW4gYXZvaWQKQEAgLTE1MjIsOCArMTU0MSw2IEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfdHJhbnNf
aHVnZV9wbWQoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiBza2lwX21sb2NrOgogCXBhZ2Ug
Kz0gKGFkZHIgJiB+SFBBR0VfUE1EX01BU0spID4+IFBBR0VfU0hJRlQ7CiAJVk1fQlVHX09OX1BB
R0UoIVBhZ2VDb21wb3VuZChwYWdlKSAmJiAhaXNfem9uZV9kZXZpY2VfcGFnZShwYWdlKSwgcGFn
ZSk7Ci0JaWYgKGZsYWdzICYgRk9MTF9HRVQpCi0JCWdldF9wYWdlKHBhZ2UpOwogCiBvdXQ6CiAJ
cmV0dXJuIHBhZ2U7CmRpZmYgLS1naXQgYS9tbS9odWdldGxiLmMgYi9tbS9odWdldGxiLmMKaW5k
ZXggYWM2NWJiNWUzOGFjLi4wZTIxYmJlOWYwMTcgMTAwNjQ0Ci0tLSBhL21tL2h1Z2V0bGIuYwor
KysgYi9tbS9odWdldGxiLmMKQEAgLTQzMjYsMTkgKzQzMjYsNiBAQCBsb25nIGZvbGxvd19odWdl
dGxiX3BhZ2Uoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1h
LAogCQlwZm5fb2Zmc2V0ID0gKHZhZGRyICYgfmh1Z2VfcGFnZV9tYXNrKGgpKSA+PiBQQUdFX1NI
SUZUOwogCQlwYWdlID0gcHRlX3BhZ2UoaHVnZV9wdGVwX2dldChwdGUpKTsKIAotCQkvKgotCQkg
KiBJbnN0ZWFkIG9mIGRvaW5nICd0cnlfZ2V0X3BhZ2UoKScgYmVsb3cgaW4gdGhlIHNhbWVfcGFn
ZQotCQkgKiBsb29wLCBqdXN0IGNoZWNrIHRoZSBjb3VudCBvbmNlIGhlcmUuCi0JCSAqLwotCQlp
ZiAodW5saWtlbHkocGFnZV9jb3VudChwYWdlKSA8PSAwKSkgewotCQkJaWYgKHBhZ2VzKSB7Ci0J
CQkJc3Bpbl91bmxvY2socHRsKTsKLQkJCQlyZW1haW5kZXIgPSAwOwotCQkJCWVyciA9IC1FTk9N
RU07Ci0JCQkJYnJlYWs7Ci0JCQl9Ci0JCX0KLQogCQkvKgogCQkgKiBJZiBzdWJwYWdlIGluZm9y
bWF0aW9uIG5vdCByZXF1ZXN0ZWQsIHVwZGF0ZSBjb3VudGVycwogCQkgKiBhbmQgc2tpcCB0aGUg
c2FtZV9wYWdlIGxvb3AgYmVsb3cuCkBAIC00MzU2LDcgKzQzNDMsMTMgQEAgbG9uZyBmb2xsb3df
aHVnZXRsYl9wYWdlKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3Qg
KnZtYSwKIHNhbWVfcGFnZToKIAkJaWYgKHBhZ2VzKSB7CiAJCQlwYWdlc1tpXSA9IG1lbV9tYXBf
b2Zmc2V0KHBhZ2UsIHBmbl9vZmZzZXQpOwotCQkJZ2V0X3BhZ2UocGFnZXNbaV0pOworCQkJaWYg
KCF0cnlfZ3JhYl9wYWdlKHBhZ2VzW2ldLCBmbGFncykpIHsKKwkJCQlzcGluX3VubG9jayhwdGwp
OworCQkJCXJlbWFpbmRlciA9IDA7CisJCQkJZXJyID0gLUVOT01FTTsKKwkJCQlXQVJOX09OX09O
Q0UoMSk7CisJCQkJYnJlYWs7CisJCQl9CiAJCX0KIAogCQlpZiAodm1hcykKQEAgLTQ5MTYsNiAr
NDkwOSwxMiBAQCBmb2xsb3dfaHVnZV9wbWQoc3RydWN0IG1tX3N0cnVjdCAqbW0sIHVuc2lnbmVk
IGxvbmcgYWRkcmVzcywKIAlzdHJ1Y3QgcGFnZSAqcGFnZSA9IE5VTEw7CiAJc3BpbmxvY2tfdCAq
cHRsOwogCXB0ZV90IHB0ZTsKKworCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFs
bHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoKGZsYWdzICYgKEZPTExfUElOIHwg
Rk9MTF9HRVQpKSA9PQorCQkJIChGT0xMX1BJTiB8IEZPTExfR0VUKSkpCisJCXJldHVybiBOVUxM
OworCiByZXRyeToKIAlwdGwgPSBwbWRfbG9ja3B0cihtbSwgcG1kKTsKIAlzcGluX2xvY2socHRs
KTsKQEAgLTQ5MjgsOCArNDkyNywxMSBAQCBmb2xsb3dfaHVnZV9wbWQoc3RydWN0IG1tX3N0cnVj
dCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKIAlwdGUgPSBodWdlX3B0ZXBfZ2V0KChwdGVf
dCAqKXBtZCk7CiAJaWYgKHB0ZV9wcmVzZW50KHB0ZSkpIHsKIAkJcGFnZSA9IHBtZF9wYWdlKCpw
bWQpICsgKChhZGRyZXNzICYgflBNRF9NQVNLKSA+PiBQQUdFX1NISUZUKTsKLQkJaWYgKGZsYWdz
ICYgRk9MTF9HRVQpCi0JCQlnZXRfcGFnZShwYWdlKTsKKwkJaWYgKHVubGlrZWx5KCF0cnlfZ3Jh
Yl9wYWdlKHBhZ2UsIGZsYWdzKSkpIHsKKwkJCVdBUk5fT05fT05DRSgxKTsKKwkJCXBhZ2UgPSBO
VUxMOworCQkJZ290byBvdXQ7CisJCX0KIAl9IGVsc2UgewogCQlpZiAoaXNfaHVnZXRsYl9lbnRy
eV9taWdyYXRpb24ocHRlKSkgewogCQkJc3Bpbl91bmxvY2socHRsKTsKQEAgLTQ5NTAsNyArNDk1
Miw3IEBAIHN0cnVjdCBwYWdlICogX193ZWFrCiBmb2xsb3dfaHVnZV9wdWQoc3RydWN0IG1tX3N0
cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKIAkJcHVkX3QgKnB1ZCwgaW50IGZsYWdz
KQogewotCWlmIChmbGFncyAmIEZPTExfR0VUKQorCWlmIChmbGFncyAmIChGT0xMX0dFVCB8IEZP
TExfUElOKSkKIAkJcmV0dXJuIE5VTEw7CiAKIAlyZXR1cm4gcHRlX3BhZ2UoKihwdGVfdCAqKXB1
ZCkgKyAoKGFkZHJlc3MgJiB+UFVEX01BU0spID4+IFBBR0VfU0hJRlQpOwpAQCAtNDk1OSw3ICs0
OTYxLDcgQEAgZm9sbG93X2h1Z2VfcHVkKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBs
b25nIGFkZHJlc3MsCiBzdHJ1Y3QgcGFnZSAqIF9fd2VhawogZm9sbG93X2h1Z2VfcGdkKHN0cnVj
dCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsIHBnZF90ICpwZ2QsIGludCBm
bGFncykKIHsKLQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKKwlpZiAoZmxhZ3MgJiAoRk9MTF9HRVQg
fCBGT0xMX1BJTikpCiAJCXJldHVybiBOVUxMOwogCiAJcmV0dXJuIHB0ZV9wYWdlKCoocHRlX3Qg
KilwZ2QpICsgKChhZGRyZXNzICYgflBHRElSX01BU0spID4+IFBBR0VfU0hJRlQpOwpkaWZmIC0t
Z2l0IGEvbW0vdm1zdGF0LmMgYi9tbS92bXN0YXQuYwppbmRleCA3OGQ1MzM3OGRiOTkuLmI1Njgw
OGJhZTFiNCAxMDA2NDQKLS0tIGEvbW0vdm1zdGF0LmMKKysrIGIvbW0vdm1zdGF0LmMKQEAgLTEx
NjgsNiArMTE2OCw4IEBAIGNvbnN0IGNoYXIgKiBjb25zdCB2bXN0YXRfdGV4dFtdID0gewogCSJu
cl9kaXJ0aWVkIiwKIAkibnJfd3JpdHRlbiIsCiAJIm5yX2tlcm5lbF9taXNjX3JlY2xhaW1hYmxl
IiwKKwkibnJfZm9sbF9waW5fcmVxdWVzdGVkIiwKKwkibnJfZm9sbF9waW5fcmV0dXJuZWQiLAog
CiAJLyogZW51bSB3cml0ZWJhY2tfc3RhdF9pdGVtIGNvdW50ZXJzICovCiAJIm5yX2RpcnR5X3Ro
cmVzaG9sZCIsCi0tIAoyLjI0LjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fCmRyaS1kZXZlbCBtYWlsaW5nIGxpc3QKZHJpLWRldmVsQGxpc3RzLmZyZWVk
ZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xpc3RpbmZv
L2RyaS1kZXZlbAo=
