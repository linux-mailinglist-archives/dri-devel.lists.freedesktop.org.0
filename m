Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 8C3CDFA848
	for <lists+dri-devel@lfdr.de>; Wed, 13 Nov 2019 05:28:31 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 5234A6EC79;
	Wed, 13 Nov 2019 04:28:24 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from hqemgate15.nvidia.com (hqemgate15.nvidia.com [216.228.121.64])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 309F16EC66
 for <dri-devel@lists.freedesktop.org>; Wed, 13 Nov 2019 04:27:18 +0000 (UTC)
Received: from hqpgpgate101.nvidia.com (Not Verified[216.228.121.13]) by
 hqemgate15.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
 id <B5dcb86200003>; Tue, 12 Nov 2019 20:27:13 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
 by hqpgpgate101.nvidia.com (PGP Universal service);
 Tue, 12 Nov 2019 20:27:13 -0800
X-PGP-Universal: processed;
 by hqpgpgate101.nvidia.com on Tue, 12 Nov 2019 20:27:13 -0800
Received: from HQMAIL101.nvidia.com (172.20.187.10) by HQMAIL101.nvidia.com
 (172.20.187.10) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Wed, 13 Nov
 2019 04:27:12 +0000
Received: from hqnvemgw03.nvidia.com (10.124.88.68) by HQMAIL101.nvidia.com
 (172.20.187.10) with Microsoft SMTP Server (TLS) id 15.0.1473.3 via Frontend
 Transport; Wed, 13 Nov 2019 04:27:12 +0000
Received: from blueforge.nvidia.com (Not Verified[10.110.48.28]) by
 hqnvemgw03.nvidia.com with Trustwave SEG (v7, 5, 8, 10121)
 id <B5dcb86200005>; Tue, 12 Nov 2019 20:27:12 -0800
From: John Hubbard <jhubbard@nvidia.com>
To: Andrew Morton <akpm@linux-foundation.org>
Subject: [PATCH v4 09/23] mm/gup: introduce pin_user_pages*() and FOLL_PIN
Date: Tue, 12 Nov 2019 20:26:56 -0800
Message-ID: <20191113042710.3997854-10-jhubbard@nvidia.com>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20191113042710.3997854-1-jhubbard@nvidia.com>
References: <20191113042710.3997854-1-jhubbard@nvidia.com>
MIME-Version: 1.0
X-NVConfidentiality: public
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=nvidia.com; s=n1; 
 t=1573619233; bh=xjqUbumjh3HM3dLGo8KsNqD0t0Elhw1U3LT8otVP76c=;
 h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
 In-Reply-To:References:MIME-Version:X-NVConfidentiality:
 Content-Type:Content-Transfer-Encoding;
 b=UaxNTzkiyTNOUmKez4heq2ZnAh9Bm1AdSbkAEuvxMOu0n8xc74+YKXAUdCQDH5G4i
 ZAQzrIt/DULwfZuFYJe2RnDeyB2wILWPxrecSUUO0sOSV4y0IasVRnZfQzjmxa2BcO
 hVv5jJR+lglBIx0xA3eGDNfINbt7IHqd7E4gtEH128AUZlSIX+umy6ijo/0DyXpJ3m
 N0jQN4/7P2K6zCcg+gPaCca7dVFzIQnfBbcDL84N4ZoQgAKmDYvM59IPRqz0Pb5hJg
 FYEkz6UfBJdqGkArIF9mW0L3A+Mekx9QJ9MzaZc6HCeHGzq3+v3KA9zZ7yOf0TG6Uw
 ojJmVYAz//GTg==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Michal Hocko <mhocko@suse.com>, Jan Kara <jack@suse.cz>,
 kvm@vger.kernel.org, linux-doc@vger.kernel.org,
 David Airlie <airlied@linux.ie>, Dave Chinner <david@fromorbit.com>,
 dri-devel@lists.freedesktop.org, LKML <linux-kernel@vger.kernel.org>,
 linux-mm@kvack.org, Paul Mackerras <paulus@samba.org>,
 linux-kselftest@vger.kernel.org, Ira Weiny <ira.weiny@intel.com>,
 Jonathan Corbet <corbet@lwn.net>, linux-rdma@vger.kernel.org,
 Michael Ellerman <mpe@ellerman.id.au>, Mike Rapoport <rppt@linux.ibm.com>,
 Christoph Hellwig <hch@infradead.org>, Jason Gunthorpe <jgg@ziepe.ca>,
 Vlastimil Babka <vbabka@suse.cz>,
 =?UTF-8?q?Bj=C3=B6rn=20T=C3=B6pel?= <bjorn.topel@intel.com>,
 linux-media@vger.kernel.org, Shuah Khan <shuah@kernel.org>,
 John Hubbard <jhubbard@nvidia.com>, linux-block@vger.kernel.org,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Al Viro <viro@zeniv.linux.org.uk>, Dan Williams <dan.j.williams@intel.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Magnus Karlsson <magnus.karlsson@intel.com>, Jens Axboe <axboe@kernel.dk>,
 netdev@vger.kernel.org, Alex Williamson <alex.williamson@redhat.com>,
 linux-fsdevel@vger.kernel.org, bpf@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org, "David S . Miller" <davem@davemloft.net>,
 Mike Kravetz <mike.kravetz@oracle.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

SW50cm9kdWNlIHBpbl91c2VyX3BhZ2VzKigpIHZhcmlhdGlvbnMgb2YgZ2V0X3VzZXJfcGFnZXMq
KCkgY2FsbHMsCmFuZCBhbHNvIHBpbl9sb25ndGVybV9wYWdlcyooKSB2YXJpYXRpb25zLgoKVGhl
c2UgdmFyaWFudHMgYWxsIHNldCBGT0xMX1BJTiwgd2hpY2ggaXMgYWxzbyBpbnRyb2R1Y2VkLCBh
bmQKdGhvcm91Z2hseSBkb2N1bWVudGVkLgoKVGhlIHBpbl9sb25ndGVybSooKSB2YXJpYW50cyBh
bHNvIHNldCBGT0xMX0xPTkdURVJNLCBpbiBhZGRpdGlvbgp0byBGT0xMX1BJTjoKCiAgICBwaW5f
dXNlcl9wYWdlcygpCiAgICBwaW5fdXNlcl9wYWdlc19yZW1vdGUoKQogICAgcGluX3VzZXJfcGFn
ZXNfZmFzdCgpCgogICAgcGluX2xvbmd0ZXJtX3BhZ2VzKCkKICAgIHBpbl9sb25ndGVybV9wYWdl
c19yZW1vdGUoKQogICAgcGluX2xvbmd0ZXJtX3BhZ2VzX2Zhc3QoKQoKQWxsIHBhZ2VzIHRoYXQg
YXJlIHBpbm5lZCB2aWEgdGhlIGFib3ZlIGNhbGxzLCBtdXN0IGJlIHVucGlubmVkIHZpYQpwdXRf
dXNlcl9wYWdlKCkuCgpUaGUgdW5kZXJseWluZyBydWxlcyBhcmU6CgoqIFRoZXNlIGFyZSBndXAt
aW50ZXJuYWwgZmxhZ3MsIHNvIHRoZSBjYWxsIHNpdGVzIHNob3VsZCBub3QgZGlyZWN0bHkKc2V0
IEZPTExfUElOIG5vciBGT0xMX0xPTkdURVJNLiBUaGF0IGJlaGF2aW9yIGlzIGVuZm9yY2VkIHdp
dGgKYXNzZXJ0aW9ucywgZm9yIHRoZSBuZXcgRk9MTF9QSU4gZmxhZy4gSG93ZXZlciwgZm9yIHRo
ZSBwcmUtZXhpc3RpbmcKRk9MTF9MT05HVEVSTSBmbGFnLCB3aGljaCBoYXMgc29tZSBjYWxsIHNp
dGVzIHRoYXQgc3RpbGwgZGlyZWN0bHkKc2V0IEZPTExfTE9OR1RFUk0sIHRoZXJlIGlzIG5vIGFz
c2VydGlvbiB5ZXQuCgoqIENhbGwgc2l0ZXMgdGhhdCB3YW50IHRvIGluZGljYXRlIHRoYXQgdGhl
eSBhcmUgZ29pbmcgdG8gZG8gRGlyZWN0SU8KICAoIkRJTyIpIG9yIHNvbWV0aGluZyB3aXRoIHNp
bWlsYXIgY2hhcmFjdGVyaXN0aWNzLCBzaG91bGQgY2FsbCBhCiAgZ2V0X3VzZXJfcGFnZXMoKS1s
aWtlIHdyYXBwZXIgY2FsbCB0aGF0IHNldHMgRk9MTF9QSU4uIFRoZXNlIHdyYXBwZXJzCiAgd2ls
bDoKICAgICAgICAqIFN0YXJ0IHdpdGggInBpbl91c2VyX3BhZ2VzIiBpbnN0ZWFkIG9mICJnZXRf
dXNlcl9wYWdlcyIuIFRoYXQKICAgICAgICAgIG1ha2VzIGl0IGVhc3kgdG8gZmluZCBhbmQgYXVk
aXQgdGhlIGNhbGwgc2l0ZXMuCiAgICAgICAgKiBTZXQgRk9MTF9QSU4KCiogRm9yIHBhZ2VzIHRo
YXQgYXJlIHJlY2VpdmVkIHZpYSBGT0xMX1BJTiwgdGhvc2UgcGFnZXMgbXVzdCBiZSByZXR1cm5l
ZAogIHZpYSBwdXRfdXNlcl9wYWdlKCkuCgpUaGFua3MgdG8gSmFuIEthcmEgYW5kIFZsYXN0aW1p
bCBCYWJrYSBmb3IgZXhwbGFpbmluZyB0aGUgNCBjYXNlcwppbiB0aGlzIGRvY3VtZW50YXRpb24u
IChJJ3ZlIHJld29yZGVkIGl0IGFuZCBleHBhbmRlZCB1cG9uIGl0LikKClJldmlld2VkLWJ5OiBN
aWtlIFJhcG9wb3J0IDxycHB0QGxpbnV4LmlibS5jb20+ICAjIERvY3VtZW50YXRpb24KUmV2aWV3
ZWQtYnk6IErDqXLDtG1lIEdsaXNzZSA8amdsaXNzZUByZWRoYXQuY29tPgpDYzogSm9uYXRoYW4g
Q29yYmV0IDxjb3JiZXRAbHduLm5ldD4KQ2M6IElyYSBXZWlueSA8aXJhLndlaW55QGludGVsLmNv
bT4KU2lnbmVkLW9mZi1ieTogSm9obiBIdWJiYXJkIDxqaHViYmFyZEBudmlkaWEuY29tPgotLS0K
IERvY3VtZW50YXRpb24vY29yZS1hcGkvaW5kZXgucnN0ICAgICAgICAgIHwgICAxICsKIERvY3Vt
ZW50YXRpb24vY29yZS1hcGkvcGluX3VzZXJfcGFnZXMucnN0IHwgMjE4ICsrKysrKysrKysrKysr
KysrCiBpbmNsdWRlL2xpbnV4L21tLmggICAgICAgICAgICAgICAgICAgICAgICB8ICA3NSArKysr
Ky0KIG1tL2d1cC5jICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMjc1ICsrKysr
KysrKysrKysrKysrKysrLS0KIDQgZmlsZXMgY2hhbmdlZCwgNTM1IGluc2VydGlvbnMoKyksIDM0
IGRlbGV0aW9ucygtKQogY3JlYXRlIG1vZGUgMTAwNjQ0IERvY3VtZW50YXRpb24vY29yZS1hcGkv
cGluX3VzZXJfcGFnZXMucnN0CgpkaWZmIC0tZ2l0IGEvRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9p
bmRleC5yc3QgYi9Eb2N1bWVudGF0aW9uL2NvcmUtYXBpL2luZGV4LnJzdAppbmRleCBhYjBlYWUx
YzE1M2EuLjQxM2Y3ZDdjODY0MiAxMDA2NDQKLS0tIGEvRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9p
bmRleC5yc3QKKysrIGIvRG9jdW1lbnRhdGlvbi9jb3JlLWFwaS9pbmRleC5yc3QKQEAgLTMxLDYg
KzMxLDcgQEAgQ29yZSB1dGlsaXRpZXMKICAgIGdlbmVyaWMtcmFkaXgtdHJlZQogICAgbWVtb3J5
LWFsbG9jYXRpb24KICAgIG1tLWFwaQorICAgcGluX3VzZXJfcGFnZXMKICAgIGdmcF9tYXNrLWZy
b20tZnMtaW8KICAgIHRpbWVrZWVwaW5nCiAgICBib290LXRpbWUtbW0KZGlmZiAtLWdpdCBhL0Rv
Y3VtZW50YXRpb24vY29yZS1hcGkvcGluX3VzZXJfcGFnZXMucnN0IGIvRG9jdW1lbnRhdGlvbi9j
b3JlLWFwaS9waW5fdXNlcl9wYWdlcy5yc3QKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAw
MDAwMDAwMDAwLi5jZTgxOWU3MDk0MzUKLS0tIC9kZXYvbnVsbAorKysgYi9Eb2N1bWVudGF0aW9u
L2NvcmUtYXBpL3Bpbl91c2VyX3BhZ2VzLnJzdApAQCAtMCwwICsxLDIxOCBAQAorLi4gU1BEWC1M
aWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAKKworPT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQorcGluX3VzZXJfcGFnZXMoKSBhbmQgcmVsYXRlZCBj
YWxscworPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PQorCisuLiBjb250ZW50czo6IDpsb2NhbDoKKworT3ZlcnZpZXcKKz09PT09PT09CisKK1RoaXMg
ZG9jdW1lbnQgZGVzY3JpYmVzIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOiA6OgorCisgcGluX3Vz
ZXJfcGFnZXMKKyBwaW5fdXNlcl9wYWdlc19mYXN0CisgcGluX3VzZXJfcGFnZXNfcmVtb3RlCisK
KyBwaW5fbG9uZ3Rlcm1fcGFnZXMKKyBwaW5fbG9uZ3Rlcm1fcGFnZXNfZmFzdAorIHBpbl9sb25n
dGVybV9wYWdlc19yZW1vdGUKKworQmFzaWMgZGVzY3JpcHRpb24gb2YgRk9MTF9QSU4KKz09PT09
PT09PT09PT09PT09PT09PT09PT09PT09CisKK0ZPTExfUElOIGFuZCBGT0xMX0xPTkdURVJNIGFy
ZSBmbGFncyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIGdldF91c2VyX3BhZ2VzKigpCisoImd1
cCIpIGZhbWlseSBvZiBmdW5jdGlvbnMuIEZPTExfUElOIGhhcyBzaWduaWZpY2FudCBpbnRlcmFj
dGlvbnMgYW5kCitpbnRlcmRlcGVuZGVuY2llcyB3aXRoIEZPTExfTE9OR1RFUk0sIHNvIGJvdGgg
YXJlIGNvdmVyZWQgaGVyZS4KKworQm90aCBGT0xMX1BJTiBhbmQgRk9MTF9MT05HVEVSTSBhcmUg
aW50ZXJuYWwgdG8gZ3VwLCBtZWFuaW5nIHRoYXQgbmVpdGhlcgorRk9MTF9QSU4gbm9yIEZPTExf
TE9OR1RFUk0gc2hvdWxkIG5vdCBhcHBlYXIgYXQgdGhlIGd1cCBjYWxsIHNpdGVzLiBUaGlzIGFs
bG93cwordGhlIGFzc29jaWF0ZWQgd3JhcHBlciBmdW5jdGlvbnMgIChwaW5fdXNlcl9wYWdlcygp
IGFuZCBvdGhlcnMpIHRvIHNldCB0aGUKK2NvcnJlY3QgY29tYmluYXRpb24gb2YgdGhlc2UgZmxh
Z3MsIGFuZCB0byBjaGVjayBmb3IgcHJvYmxlbXMgYXMgd2VsbC4KKworRk9MTF9QSU4gYW5kIEZP
TExfR0VUIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgZm9yIGEgZ2l2ZW4gZ3VwIGNhbGwuIEhvd2V2
ZXIsCittdWx0aXBsZSB0aHJlYWRzIGFuZCBjYWxsIHNpdGVzIGFyZSBmcmVlIHRvIHBpbiB0aGUg
c2FtZSBzdHJ1Y3QgcGFnZXMsIHZpYSBib3RoCitGT0xMX1BJTiBhbmQgRk9MTF9HRVQuIEl0J3Mg
anVzdCB0aGUgY2FsbCBzaXRlIHRoYXQgbmVlZHMgdG8gY2hvb3NlIG9uZSBvciB0aGUKK290aGVy
LCBub3QgdGhlIHN0cnVjdCBwYWdlKHMpLgorCitUaGUgRk9MTF9QSU4gaW1wbGVtZW50YXRpb24g
aXMgbmVhcmx5IHRoZSBzYW1lIGFzIEZPTExfR0VULCBleGNlcHQgdGhhdCBGT0xMX1BJTgordXNl
cyBhIGRpZmZlcmVudCByZWZlcmVuY2UgY291bnRpbmcgdGVjaG5pcXVlLgorCitGT0xMX1BJTiBp
cyBhIHByZXJlcXVpc2l0ZSB0byBGT0xMX0xPTkdUR0VSTS4gQW5vdGhlciB3YXkgb2Ygc2F5aW5n
IHRoYXQgaXMsCitGT0xMX0xPTkdURVJNIGlzIGEgc3BlY2lmaWMgY2FzZSwgbW9yZSByZXN0cmlj
dGl2ZSBjYXNlIG9mIEZPTExfUElOLgorCitXaGljaCBmbGFncyBhcmUgc2V0IGJ5IGVhY2ggd3Jh
cHBlcgorPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KKworT25seSBGT0xMX1BJ
TiBhbmQgRk9MTF9MT05HVEVSTSBhcmUgY292ZXJlZCBoZXJlLiBUaGVzZSBmbGFncyBhcmUgYWRk
ZWQgdG8KK3doYXRldmVyIGZsYWdzIHRoZSBjYWxsZXIgcHJvdmlkZXM6OgorCisgRnVuY3Rpb24g
ICAgICAgICAgICAgICAgICAgIGd1cCBmbGFncyAoRk9MTF9QSU4gb3IgRk9MTF9MT05HVEVSTSBv
bmx5KQorIC0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0KKyBwaW5fdXNlcl9wYWdlcyAgICAgICAgICAgICAgRk9MTF9Q
SU4KKyBwaW5fdXNlcl9wYWdlc19mYXN0ICAgICAgICAgRk9MTF9QSU4KKyBwaW5fdXNlcl9wYWdl
c19yZW1vdGUgICAgICAgRk9MTF9QSU4KKworIHBpbl9sb25ndGVybV9wYWdlcyAgICAgICAgICBG
T0xMX1BJTiB8IEZPTExfTE9OR1RFUk0KKyBwaW5fbG9uZ3Rlcm1fcGFnZXNfZmFzdCAgICAgRk9M
TF9QSU4gfCBGT0xMX0xPTkdURVJNCisgcGluX2xvbmd0ZXJtX3BhZ2VzX3JlbW90ZSAgIEZPTExf
UElOIHwgRk9MTF9MT05HVEVSTQorCitUcmFja2luZyBkbWEtcGlubmVkIHBhZ2VzCis9PT09PT09
PT09PT09PT09PT09PT09PT09CisKK1NvbWUgb2YgdGhlIGtleSBkZXNpZ24gY29uc3RyYWludHMs
IGFuZCBzb2x1dGlvbnMsIGZvciB0cmFja2luZyBkbWEtcGlubmVkCitwYWdlczoKKworKiBBbiBh
Y3R1YWwgcmVmZXJlbmNlIGNvdW50LCBwZXIgc3RydWN0IHBhZ2UsIGlzIHJlcXVpcmVkLiBUaGlz
IGlzIGJlY2F1c2UKKyAgbXVsdGlwbGUgcHJvY2Vzc2VzIG1heSBwaW4gYW5kIHVucGluIGEgcGFn
ZS4KKworKiBGYWxzZSBwb3NpdGl2ZXMgKHJlcG9ydGluZyB0aGF0IGEgcGFnZSBpcyBkbWEtcGlu
bmVkLCB3aGVuIGluIGZhY3QgaXQgaXMgbm90KQorICBhcmUgYWNjZXB0YWJsZSwgYnV0IGZhbHNl
IG5lZ2F0aXZlcyBhcmUgbm90LgorCisqIHN0cnVjdCBwYWdlIG1heSBub3QgYmUgaW5jcmVhc2Vk
IGluIHNpemUgZm9yIHRoaXMsIGFuZCBhbGwgZmllbGRzIGFyZSBhbHJlYWR5CisgIHVzZWQuCisK
KyogR2l2ZW4gdGhlIGFib3ZlLCB3ZSBjYW4gb3ZlcmxvYWQgdGhlIHBhZ2UtPl9yZWZjb3VudCBm
aWVsZCBieSB1c2luZywgc29ydCBvZiwKKyAgdGhlIHVwcGVyIGJpdHMgaW4gdGhhdCBmaWVsZCBm
b3IgYSBkbWEtcGlubmVkIGNvdW50LiAiU29ydCBvZiIsIG1lYW5zIHRoYXQsCisgIHJhdGhlciB0
aGFuIGRpdmlkaW5nIHBhZ2UtPl9yZWZjb3VudCBpbnRvIGJpdCBmaWVsZHMsIHdlIHNpbXBsZSBh
ZGQgYSBtZWRpdW0tCisgIGxhcmdlIHZhbHVlIChHVVBfUElOX0NPVU5USU5HX0JJQVMsIGluaXRp
YWxseSBjaG9zZW4gdG8gYmUgMTAyNDogMTAgYml0cykgdG8KKyAgcGFnZS0+X3JlZmNvdW50LiBU
aGlzIHByb3ZpZGVzIGZ1enp5IGJlaGF2aW9yOiBpZiBhIHBhZ2UgaGFzIGdldF9wYWdlKCkgY2Fs
bGVkCisgIG9uIGl0IDEwMjQgdGltZXMsIHRoZW4gaXQgd2lsbCBhcHBlYXIgdG8gaGF2ZSBhIHNp
bmdsZSBkbWEtcGlubmVkIGNvdW50LgorICBBbmQgYWdhaW4sIHRoYXQncyBhY2NlcHRhYmxlLgor
CitUaGlzIGFsc28gbGVhZHMgdG8gbGltaXRhdGlvbnM6IHRoZXJlIGFyZSBvbmx5IDMxLTEwPT0y
MSBiaXRzIGF2YWlsYWJsZSBmb3IgYQorY291bnRlciB0aGF0IGluY3JlbWVudHMgMTAgYml0cyBh
dCBhIHRpbWUuCisKK1RPRE86IGZvciAxR0IgYW5kIGxhcmdlciBodWdlIHBhZ2VzLCB0aGlzIGlz
IGN1dHRpbmcgaXQgY2xvc2UuIFRoYXQncyBiZWNhdXNlCit3aGVuIHBpbl91c2VyX3BhZ2VzKCkg
Zm9sbG93cyBzdWNoIHBhZ2VzLCBpdCBpbmNyZW1lbnRzIHRoZSBoZWFkIHBhZ2UgYnkgIjEiCiso
d2hlcmUgIjEiIHVzZWQgdG8gbWVhbiAiKzEiIGZvciBnZXRfdXNlcl9wYWdlcygpLCBidXQgbm93
IG1lYW5zICIrMTAyNCIgZm9yCitwaW5fdXNlcl9wYWdlcygpKSBmb3IgZWFjaCB0YWlsIHBhZ2Uu
IFNvIGlmIHlvdSBoYXZlIGEgMUdCIGh1Z2UgcGFnZToKKworKiBUaGVyZSBhcmUgMjU2SyAoMTgg
Yml0cykgd29ydGggb2YgNCBLQiB0YWlsIHBhZ2VzLgorKiBUaGVyZSBhcmUgMjEgYml0cyBhdmFp
bGFibGUgdG8gY291bnQgdXAgdmlhIEdVUF9QSU5fQ09VTlRJTkdfQklBUyAodGhhdCBpcywKKyAg
MTAgYml0cyBhdCBhIHRpbWUpCisqIFRoZXJlIGFyZSAyMSAtIDE4ID09IDMgYml0cyBhdmFpbGFi
bGUgdG8gY291bnQuIEV4Y2VwdCB0aGF0IHRoZXJlIGFyZW4ndCwKKyAgYmVjYXVzZSB5b3UgbmVl
ZCB0byBhbGxvdyBmb3IgYSBmZXcgbm9ybWFsIGdldF9wYWdlKCkgY2FsbHMgb24gdGhlIGhlYWQg
cGFnZSwKKyAgYXMgd2VsbC4gRm9ydHVuYXRlbHksIHRoZSBhcHByb2FjaCBvZiB1c2luZyBhZGRp
dGlvbiwgcmF0aGVyIHRoYW4gImhhcmQiCisgIGJpdGZpZWxkcywgd2l0aGluIHBhZ2UtPl9yZWZj
b3VudCwgYWxsb3dzIGZvciBzaGFyaW5nIHRoZXNlIGJpdHMgZ3JhY2VmdWxseS4KKyAgQnV0IHdl
J3JlIHN0aWxsIGxvb2tpbmcgYXQgYWJvdXQgOCByZWZlcmVuY2VzLgorCitUaGlzLCBob3dldmVy
LCBpcyBhIG1pc3NpbmcgZmVhdHVyZSBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSwgYmVjYXVzZSBp
dCdzIGVhc2lseQorc29sdmVkIGJ5IGFkZHJlc3NpbmcgYW4gb2J2aW91cyBpbmVmZmljaWVuY3kg
aW4gdGhlIG9yaWdpbmFsIGdldF91c2VyX3BhZ2VzKCkKK2FwcHJvYWNoIG9mIHJldHJpZXZpbmcg
cGFnZXM6IHN0b3AgdHJlYXRpbmcgYWxsIHRoZSBwYWdlcyBhcyBpZiB0aGV5IHdlcmUKK1BBR0Vf
U0laRS4gUmV0cmlldmUgaHVnZSBwYWdlcyBhcyBodWdlIHBhZ2VzLiBUaGUgY2FsbGVycyBuZWVk
IHRvIGJlIGF3YXJlIG9mCit0aGlzLCBzbyBzb21lIHdvcmsgaXMgcmVxdWlyZWQuIE9uY2UgdGhh
dCdzIGluIHBsYWNlLCB0aGlzIGxpbWl0YXRpb24gbW9zdGx5CitkaXNhcHBlYXJzIGZyb20gdmll
dywgYmVjYXVzZSB0aGVyZSB3aWxsIGJlIGFtcGxlIHJlZmNvdW50aW5nIHJhbmdlIGF2YWlsYWJs
ZS4KKworKiBDYWxsZXJzIG11c3Qgc3BlY2lmaWNhbGx5IHJlcXVlc3QgImRtYS1waW5uZWQgdHJh
Y2tpbmcgb2YgcGFnZXMiLiBJbiBvdGhlcgorICB3b3JkcywganVzdCBjYWxsaW5nIGdldF91c2Vy
X3BhZ2VzKCkgd2lsbCBub3Qgc3VmZmljZTsgYSBuZXcgc2V0IG9mIGZ1bmN0aW9ucywKKyAgcGlu
X3VzZXJfcGFnZSgpIGFuZCByZWxhdGVkLCBtdXN0IGJlIHVzZWQuCisKK0ZPTExfUElOLCBGT0xM
X0dFVCwgRk9MTF9MT05HVEVSTTogd2hlbiB0byB1c2Ugd2hpY2ggZmxhZ3MKKz09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KKworVGhhbmtz
IHRvIEphbiBLYXJhLCBWbGFzdGltaWwgQmFia2EgYW5kIHNldmVyYWwgb3RoZXIgLW1tIHBlb3Bs
ZSwgZm9yIGRlc2NyaWJpbmcKK3RoZXNlIGNhdGVnb3JpZXM6CisKK0NBU0UgMTogRGlyZWN0IElP
IChESU8pCistLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQorVGhlcmUgYXJlIEdVUCByZWZlcmVuY2Vz
IHRvIHBhZ2VzIHRoYXQgYXJlIHNlcnZpbmcKK2FzIERJTyBidWZmZXJzLiBUaGVzZSBidWZmZXJz
IGFyZSBuZWVkZWQgZm9yIGEgcmVsYXRpdmVseSBzaG9ydCB0aW1lIChzbyB0aGV5CithcmUgbm90
ICJsb25nIHRlcm0iKS4gTm8gc3BlY2lhbCBzeW5jaHJvbml6YXRpb24gd2l0aCBwYWdlX21rY2xl
YW4oKSBvcgorbXVubWFwKCkgaXMgcHJvdmlkZWQuIFRoZXJlZm9yZSwgZmxhZ3MgdG8gc2V0IGF0
IHRoZSBjYWxsIHNpdGUgYXJlOiA6OgorCisgICAgRk9MTF9QSU4KKworLi4uYnV0IHJhdGhlciB0
aGFuIHNldHRpbmcgRk9MTF9QSU4gZGlyZWN0bHksIGNhbGwgc2l0ZXMgc2hvdWxkIHVzZSBvbmUg
b2YKK3RoZSBwaW5fdXNlcl9wYWdlcyooKSByb3V0aW5lcyB0aGF0IHNldCBGT0xMX1BJTi4KKwor
Q0FTRSAyOiBSRE1BCistLS0tLS0tLS0tLS0KK1RoZXJlIGFyZSBHVVAgcmVmZXJlbmNlcyB0byBw
YWdlcyB0aGF0IGFyZSBzZXJ2aW5nIGFzIERNQQorYnVmZmVycy4gVGhlc2UgYnVmZmVycyBhcmUg
bmVlZGVkIGZvciBhIGxvbmcgdGltZSAoImxvbmcgdGVybSIpLiBObyBzcGVjaWFsCitzeW5jaHJv
bml6YXRpb24gd2l0aCBwYWdlX21rY2xlYW4oKSBvciBtdW5tYXAoKSBpcyBwcm92aWRlZC4gVGhl
cmVmb3JlLCBmbGFncwordG8gc2V0IGF0IHRoZSBjYWxsIHNpdGUgYXJlOiA6OgorCisgICAgRk9M
TF9QSU4gfCBGT0xMX0xPTkdURVJNCisKK05PVEU6IFNvbWUgcGFnZXMsIHN1Y2ggYXMgREFYIHBh
Z2VzLCBjYW5ub3QgYmUgcGlubmVkIHdpdGggbG9uZ3Rlcm0gcGlucy4gVGhhdCdzCitiZWNhdXNl
IERBWCBwYWdlcyBkbyBub3QgaGF2ZSBhIHNlcGFyYXRlIHBhZ2UgY2FjaGUsIGFuZCBzbyAicGlu
bmluZyIgaW1wbGllcworbG9ja2luZyBkb3duIGZpbGUgc3lzdGVtIGJsb2Nrcywgd2hpY2ggaXMg
bm90ICh5ZXQpIHN1cHBvcnRlZCBpbiB0aGF0IHdheS4KKworQ0FTRSAzOiBIYXJkd2FyZSB3aXRo
IHBhZ2UgZmF1bHRpbmcgc3VwcG9ydAorLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLQorSGVyZSwgYSB3ZWxsLXdyaXR0ZW4gZHJpdmVyIGRvZXNuJ3Qgbm9ybWFsbHkg
bmVlZCB0byBwaW4gcGFnZXMgYXQgYWxsLiBIb3dldmVyLAoraWYgdGhlIGRyaXZlciBkb2VzIGNo
b29zZSB0byBkbyBzbywgaXQgY2FuIHJlZ2lzdGVyIE1NVSBub3RpZmllcnMgZm9yIHRoZSByYW5n
ZSwKK2FuZCB3aWxsIGJlIGNhbGxlZCBiYWNrIHVwb24gaW52YWxpZGF0aW9uLiBFaXRoZXIgd2F5
IChhdm9pZGluZyBwYWdlIHBpbm5pbmcsIG9yCit1c2luZyBNTVUgbm90aWZpZXJzIHRvIHVucGlu
IHVwb24gcmVxdWVzdCksIHRoZXJlIGlzIHByb3BlciBzeW5jaHJvbml6YXRpb24gd2l0aAorYm90
aCBmaWxlc3lzdGVtIGFuZCBtbSAocGFnZV9ta2NsZWFuKCksIG11bm1hcCgpLCBldGMpLgorCitU
aGVyZWZvcmUsIG5laXRoZXIgZmxhZyBuZWVkcyB0byBiZSBzZXQuCisKK0luIHRoaXMgY2FzZSwg
aWRlYWxseSwgbmVpdGhlciBnZXRfdXNlcl9wYWdlcygpIG5vciBwaW5fdXNlcl9wYWdlcygpIHNo
b3VsZCBiZQorY2FsbGVkLiBJbnN0ZWFkLCB0aGUgc29mdHdhcmUgc2hvdWxkIGJlIHdyaXR0ZW4g
c28gdGhhdCBpdCBkb2VzIG5vdCBwaW4gcGFnZXMuCitUaGlzIGFsbG93cyBtbSBhbmQgZmlsZXN5
c3RlbXMgdG8gb3BlcmF0ZSBtb3JlIGVmZmljaWVudGx5IGFuZCByZWxpYWJseS4KKworQ0FTRSA0
OiBQaW5uaW5nIGZvciBzdHJ1Y3QgcGFnZSBtYW5pcHVsYXRpb24gb25seQorLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQorSGVyZSwgbm9ybWFsIEdVUCBj
YWxscyBhcmUgc3VmZmljaWVudCwgc28gbmVpdGhlciBmbGFnIG5lZWRzIHRvIGJlIHNldC4KKwor
cGFnZV9kbWFfcGlubmVkKCk6IHRoZSB3aG9sZSBwb2ludCBvZiBwaW5uaW5nCis9PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KKworVGhlIHdob2xlIHBvaW50IG9m
IG1hcmtpbmcgcGFnZXMgYXMgIkRNQS1waW5uZWQiIG9yICJndXAtcGlubmVkIiBpcyB0byBiZSBh
YmxlCit0byBxdWVyeSwgImlzIHRoaXMgcGFnZSBETUEtcGlubmVkPyIgVGhhdCBhbGxvd3MgY29k
ZSBzdWNoIGFzIHBhZ2VfbWtjbGVhbigpCisoYW5kIGZpbGUgc3lzdGVtIHdyaXRlYmFjayBjb2Rl
IGluIGdlbmVyYWwpIHRvIG1ha2UgaW5mb3JtZWQgZGVjaXNpb25zIGFib3V0Cit3aGF0IHRvIGRv
IHdoZW4gYSBwYWdlIGNhbm5vdCBiZSB1bm1hcHBlZCBkdWUgdG8gc3VjaCBwaW5zLgorCitXaGF0
IHRvIGRvIGluIHRob3NlIGNhc2VzIGlzIHRoZSBzdWJqZWN0IG9mIGEgeWVhcnMtbG9uZyBzZXJp
ZXMgb2YgZGlzY3Vzc2lvbnMKK2FuZCBkZWJhdGVzIChzZWUgdGhlIFJlZmVyZW5jZXMgYXQgdGhl
IGVuZCBvZiB0aGlzIGRvY3VtZW50KS4gSXQncyBhIFRPRE8gaXRlbQoraGVyZTogZmlsbCBpbiB0
aGUgZGV0YWlscyBvbmNlIHRoYXQncyB3b3JrZWQgb3V0LiBNZWFud2hpbGUsIGl0J3Mgc2FmZSB0
byBzYXkKK3RoYXQgaGF2aW5nIHRoaXMgYXZhaWxhYmxlOiA6OgorCisgICAgICAgIHN0YXRpYyBp
bmxpbmUgYm9vbCBwYWdlX2RtYV9waW5uZWQoc3RydWN0IHBhZ2UgKnBhZ2UpCisKKy4uLmlzIGEg
cHJlcmVxdWlzaXRlIHRvIHNvbHZpbmcgdGhlIGxvbmctcnVubmluZyBndXArRE1BIHByb2JsZW0u
CisKK0Fub3RoZXIgd2F5IG9mIHRoaW5raW5nIGFib3V0IEZPTExfR0VULCBGT0xMX1BJTiwgYW5k
IEZPTExfTE9OR1RFUk0KKz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT0KKworQW5vdGhlciB3YXkgb2YgdGhpbmtpbmcgYWJv
dXQgdGhlc2UgZmxhZ3MgaXMgYXMgYSBwcm9ncmVzc2lvbiBvZiByZXN0cmljdGlvbnM6CitGT0xM
X0dFVCBpcyBmb3Igc3RydWN0IHBhZ2UgbWFuaXB1bGF0aW9uLCB3aXRob3V0IGFmZmVjdGluZyB0
aGUgZGF0YSB0aGF0IHRoZQorc3RydWN0IHBhZ2UgcmVmZXJzIHRvLiBGT0xMX1BJTiBpcyBhICpy
ZXBsYWNlbWVudCogZm9yIEZPTExfR0VULCBhbmQgaXMgZm9yCitzaG9ydCB0ZXJtIHBpbnMgb24g
cGFnZXMgd2hvc2UgZGF0YSAqd2lsbCogZ2V0IGFjY2Vzc2VkLiBBcyBzdWNoLCBGT0xMX1BJTiBp
cworYSAibW9yZSBzZXZlcmUiIGZvcm0gb2YgcGlubmluZy4gQW5kIGZpbmFsbHksIEZPTExfTE9O
R1RFUk0gaXMgYW4gZXZlbiBtb3JlCityZXN0cmljdGl2ZSBjYXNlIHRoYXQgaGFzIEZPTExfUElO
IGFzIGEgcHJlcmVxdWlzaXRlOiB0aGlzIGlzIGZvciBwYWdlcyB0aGF0Cit3aWxsIGJlIHBpbm5l
ZCBsb25ndGVybSwgYW5kIHdob3NlIGRhdGEgd2lsbCBiZSBhY2Nlc3NlZC4KKworVW5pdCB0ZXN0
aW5nCis9PT09PT09PT09PT0KK1RoaXMgZmlsZTo6CisKKyB0b29scy90ZXN0aW5nL3NlbGZ0ZXN0
cy92bS9ndXBfYmVuY2htYXJrLmMKKworaGFzIHRoZSBmb2xsb3dpbmcgbmV3IGNhbGxzIHRvIGV4
ZXJjaXNlIHRoZSBuZXcgcGluKigpIHdyYXBwZXIgZnVuY3Rpb25zOgorCisqIFBJTl9GQVNUX0JF
TkNITUFSSyAoLi9ndXBfYmVuY2htYXJrIC1hKQorKiBQSU5fTE9OR1RFUk1fQkVOQ0hNQVJLICgu
L2d1cF9iZW5jaG1hcmsgLWEpCisqIFBJTl9CRU5DSE1BUksgKC4vZ3VwX2JlbmNobWFyayAtYSkK
KworWW91IGNhbiBtb25pdG9yIGhvdyBtYW55IHRvdGFsIGRtYS1waW5uZWQgcGFnZXMgaGF2ZSBi
ZWVuIGFjcXVpcmVkIGFuZCByZWxlYXNlZAorc2luY2UgdGhlIHN5c3RlbSB3YXMgYm9vdGVkLCB2
aWEgdHdvIG5ldyAvcHJvYy92bXN0YXQgZW50cmllczogOjoKKworICAgIC9wcm9jL3Ztc3RhdC9u
cl9mb2xsX3Bpbl9yZXF1ZXN0ZWQKKyAgICAvcHJvYy92bXN0YXQvbnJfZm9sbF9waW5fcmVxdWVz
dGVkCisKK1Rob3NlIGFyZSBib3RoIGdvaW5nIHRvIHNob3cgemVybywgdW5sZXNzIENPTkZJR19E
RUJVR19WTSBpcyBzZXQuIFRoaXMgaXMKK2JlY2F1c2UgdGhlcmUgaXMgYSBub3RpY2VhYmxlIHBl
cmZvcm1hbmNlIGRyb3AgaW4gcHV0X3VzZXJfcGFnZSgpLCB3aGVuIHRoZXkKK2FyZSBhY3RpdmF0
ZWQuCisKK1JlZmVyZW5jZXMKKz09PT09PT09PT0KKworKiBgU29tZSBzbG93IHByb2dyZXNzIG9u
IGdldF91c2VyX3BhZ2VzKCkgKEFwciAyLCAyMDE5KSA8aHR0cHM6Ly9sd24ubmV0L0FydGljbGVz
Lzc4NDU3NC8+YF8KKyogYERNQSBhbmQgZ2V0X3VzZXJfcGFnZXMoKSAoTFBDOiBEZWMgMTIsIDIw
MTgpIDxodHRwczovL2x3bi5uZXQvQXJ0aWNsZXMvNzc0NDExLz5gXworKiBgVGhlIHRyb3VibGUg
d2l0aCBnZXRfdXNlcl9wYWdlcygpIChBcHIgMzAsIDIwMTgpIDxodHRwczovL2x3bi5uZXQvQXJ0
aWNsZXMvNzUzMDI3Lz5gXworCitKb2huIEh1YmJhcmQsIE9jdG9iZXIsIDIwMTkKZGlmZiAtLWdp
dCBhL2luY2x1ZGUvbGludXgvbW0uaCBiL2luY2x1ZGUvbGludXgvbW0uaAppbmRleCA5NjIyODM3
NjEzOWMuLmMzNTFlMWIwYjRiNyAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9tbS5oCisrKyBi
L2luY2x1ZGUvbGludXgvbW0uaApAQCAtMTA3NSwxNiArMTA3NSwxNSBAQCBzdGF0aWMgaW5saW5l
IHZvaWQgcHV0X3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCiAgKiBwdXRfdXNlcl9wYWdlKCkgLSBy
ZWxlYXNlIGEgZ3VwLXBpbm5lZCBwYWdlCiAgKiBAcGFnZTogICAgICAgICAgICBwb2ludGVyIHRv
IHBhZ2UgdG8gYmUgcmVsZWFzZWQKICAqCi0gKiBQYWdlcyB0aGF0IHdlcmUgcGlubmVkIHZpYSBn
ZXRfdXNlcl9wYWdlcyooKSBtdXN0IGJlIHJlbGVhc2VkIHZpYQotICogZWl0aGVyIHB1dF91c2Vy
X3BhZ2UoKSwgb3Igb25lIG9mIHRoZSBwdXRfdXNlcl9wYWdlcyooKSByb3V0aW5lcwotICogYmVs
b3cuIFRoaXMgaXMgc28gdGhhdCBldmVudHVhbGx5LCBwYWdlcyB0aGF0IGFyZSBwaW5uZWQgdmlh
Ci0gKiBnZXRfdXNlcl9wYWdlcyooKSBjYW4gYmUgc2VwYXJhdGVseSB0cmFja2VkIGFuZCB1bmlx
dWVseSBoYW5kbGVkLiBJbgotICogcGFydGljdWxhciwgaW50ZXJhY3Rpb25zIHdpdGggUkRNQSBh
bmQgZmlsZXN5c3RlbXMgbmVlZCBzcGVjaWFsCi0gKiBoYW5kbGluZy4KKyAqIFBhZ2VzIHRoYXQg
d2VyZSBwaW5uZWQgdmlhIGVpdGhlciBwaW5fdXNlcl9wYWdlcyooKSBvciBwaW5fbG9uZ3Rlcm1f
cGFnZXMqKCkKKyAqIG11c3QgYmUgcmVsZWFzZWQgdmlhIGVpdGhlciBwdXRfdXNlcl9wYWdlKCks
IG9yIG9uZSBvZiB0aGUgcHV0X3VzZXJfcGFnZXMqKCkKKyAqIHJvdXRpbmVzLiBUaGlzIGlzIHNv
IHRoYXQgZXZlbnR1YWxseSBzdWNoIHBhZ2VzIGNhbiBiZSBzZXBhcmF0ZWx5IHRyYWNrZWQgYW5k
CisgKiB1bmlxdWVseSBoYW5kbGVkLiBJbiBwYXJ0aWN1bGFyLCBpbnRlcmFjdGlvbnMgd2l0aCBS
RE1BIGFuZCBmaWxlc3lzdGVtcyBuZWVkCisgKiBzcGVjaWFsIGhhbmRsaW5nLgogICoKICAqIHB1
dF91c2VyX3BhZ2UoKSBhbmQgcHV0X3BhZ2UoKSBhcmUgbm90IGludGVyY2hhbmdlYWJsZSwgZGVz
cGl0ZSB0aGlzIGVhcmx5CiAgKiBpbXBsZW1lbnRhdGlvbiB0aGF0IG1ha2VzIHRoZW0gbG9vayB0
aGUgc2FtZS4gcHV0X3VzZXJfcGFnZSgpIGNhbGxzIG11c3QKLSAqIGJlIHBlcmZlY3RseSBtYXRj
aGVkIHVwIHdpdGggZ2V0X3VzZXJfcGFnZSgpIGNhbGxzLgorICogYmUgcGVyZmVjdGx5IG1hdGNo
ZWQgdXAgd2l0aCBwaW4qKCkgY2FsbHMuCiAgKi8KIHN0YXRpYyBpbmxpbmUgdm9pZCBwdXRfdXNl
cl9wYWdlKHN0cnVjdCBwYWdlICpwYWdlKQogewpAQCAtMTU0Miw5ICsxNTQxLDIzIEBAIGxvbmcg
Z2V0X3VzZXJfcGFnZXNfcmVtb3RlKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLCBzdHJ1Y3QgbW1f
c3RydWN0ICptbSwKIAkJCSAgICB1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5y
X3BhZ2VzLAogCQkJICAgIHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFn
ZXMsCiAJCQkgICAgc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcywgaW50ICpsb2NrZWQpOwor
bG9uZyBwaW5fdXNlcl9wYWdlc19yZW1vdGUoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ssIHN0cnVj
dCBtbV9zdHJ1Y3QgKm1tLAorCQkJICAgdW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9u
ZyBucl9wYWdlcywKKwkJCSAgIHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoq
cGFnZXMsCisJCQkgICBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2bWFzLCBpbnQgKmxvY2tlZCk7
Citsb25nIHBpbl9sb25ndGVybV9wYWdlc19yZW1vdGUoc3RydWN0IHRhc2tfc3RydWN0ICp0c2ss
IHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLAorCQkJICAgICAgIHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVu
c2lnbmVkIGxvbmcgbnJfcGFnZXMsCisJCQkgICAgICAgdW5zaWduZWQgaW50IGd1cF9mbGFncywg
c3RydWN0IHBhZ2UgKipwYWdlcywKKwkJCSAgICAgICBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2
bWFzLCBpbnQgKmxvY2tlZCk7CiBsb25nIGdldF91c2VyX3BhZ2VzKHVuc2lnbmVkIGxvbmcgc3Rh
cnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFnZXMsCiAJCQkgICAgdW5zaWduZWQgaW50IGd1cF9mbGFn
cywgc3RydWN0IHBhZ2UgKipwYWdlcywKIAkJCSAgICBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2
bWFzKTsKK2xvbmcgcGluX3VzZXJfcGFnZXModW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQg
bG9uZyBucl9wYWdlcywKKwkJICAgIHVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdl
ICoqcGFnZXMsCisJCSAgICBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKip2bWFzKTsKK2xvbmcgcGlu
X2xvbmd0ZXJtX3BhZ2VzKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgbnJfcGFn
ZXMsCisJCQl1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzLAorCQkJ
c3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcyk7CiBsb25nIGdldF91c2VyX3BhZ2VzX2xvY2tl
ZCh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAogCQkgICAgdW5z
aWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcywgaW50ICpsb2NrZWQpOwog
bG9uZyBnZXRfdXNlcl9wYWdlc191bmxvY2tlZCh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25l
ZCBsb25nIG5yX3BhZ2VzLApAQCAtMTU1Miw2ICsxNTY1LDEwIEBAIGxvbmcgZ2V0X3VzZXJfcGFn
ZXNfdW5sb2NrZWQodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBucl9wYWdlcywK
IAogaW50IGdldF91c2VyX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9uZyBzdGFydCwgaW50IG5yX3Bh
Z2VzLAogCQkJdW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcyk7Citp
bnQgcGluX3VzZXJfcGFnZXNfZmFzdCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMs
CisJCQl1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3QgcGFnZSAqKnBhZ2VzKTsKK2ludCBw
aW5fbG9uZ3Rlcm1fcGFnZXNfZmFzdCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMs
CisJCQkgICAgdW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcyk7CiAK
IGludCBhY2NvdW50X2xvY2tlZF92bShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9u
ZyBwYWdlcywgYm9vbCBpbmMpOwogaW50IF9fYWNjb3VudF9sb2NrZWRfdm0oc3RydWN0IG1tX3N0
cnVjdCAqbW0sIHVuc2lnbmVkIGxvbmcgcGFnZXMsIGJvb2wgaW5jLApAQCAtMjYxMCwxMyArMjYy
NywxNSBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X3BhZ2Uoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2
bWEsIHVuc2lnbmVkIGxvbmcgYWRkcmVzcywKICNkZWZpbmUgRk9MTF9BTk9OCTB4ODAwMAkvKiBk
b24ndCBkbyBmaWxlIG1hcHBpbmdzICovCiAjZGVmaW5lIEZPTExfTE9OR1RFUk0JMHgxMDAwMAkv
KiBtYXBwaW5nIGxpZmV0aW1lIGlzIGluZGVmaW5pdGU6IHNlZSBiZWxvdyAqLwogI2RlZmluZSBG
T0xMX1NQTElUX1BNRAkweDIwMDAwCS8qIHNwbGl0IGh1Z2UgcG1kIGJlZm9yZSByZXR1cm5pbmcg
Ki8KKyNkZWZpbmUgRk9MTF9QSU4JMHg0MDAwMAkvKiBwYWdlcyBtdXN0IGJlIHJlbGVhc2VkIHZp
YSBwdXRfdXNlcl9wYWdlKCkgKi8KIAogLyoKLSAqIE5PVEUgb24gRk9MTF9MT05HVEVSTToKKyAq
IEZPTExfUElOIGFuZCBGT0xMX0xPTkdURVJNIG1heSBiZSB1c2VkIGluIHZhcmlvdXMgY29tYmlu
YXRpb25zIHdpdGggZWFjaAorICogb3RoZXIuIEhlcmUgaXMgd2hhdCB0aGV5IG1lYW4sIGFuZCBo
b3cgdG8gdXNlIHRoZW06CiAgKgogICogRk9MTF9MT05HVEVSTSBpbmRpY2F0ZXMgdGhhdCB0aGUg
cGFnZSB3aWxsIGJlIGhlbGQgZm9yIGFuIGluZGVmaW5pdGUgdGltZQotICogcGVyaW9kIF9vZnRl
bl8gdW5kZXIgdXNlcnNwYWNlIGNvbnRyb2wuICBUaGlzIGlzIGNvbnRyYXN0ZWQgd2l0aAotICog
aW92X2l0ZXJfZ2V0X3BhZ2VzKCkgd2hlcmUgdXNhZ2VzIHdoaWNoIGFyZSB0cmFuc2llbnQuCisg
KiBwZXJpb2QgX29mdGVuXyB1bmRlciB1c2Vyc3BhY2UgY29udHJvbC4gIFRoaXMgaXMgaW4gY29u
dHJhc3QgdG8KKyAqIGlvdl9pdGVyX2dldF9wYWdlcygpLCB3aGVyZSB1c2FnZXMgd2hpY2ggYXJl
IHRyYW5zaWVudC4KICAqCiAgKiBGSVhNRTogRm9yIHBhZ2VzIHdoaWNoIGFyZSBwYXJ0IG9mIGEg
ZmlsZXN5c3RlbSwgbWFwcGluZ3MgYXJlIHN1YmplY3QgdG8gdGhlCiAgKiBsaWZldGltZSBlbmZv
cmNlZCBieSB0aGUgZmlsZXN5c3RlbSBhbmQgd2UgbmVlZCBndWFyYW50ZWVzIHRoYXQgbG9uZ3Rl
cm0KQEAgLTI2MzEsMTEgKzI2NTAsNDEgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlKHN0cnVj
dCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsCiAgKiBDdXJyZW50
bHkgb25seSBnZXRfdXNlcl9wYWdlcygpIGFuZCBnZXRfdXNlcl9wYWdlc19mYXN0KCkgc3VwcG9y
dCB0aGlzIGZsYWcKICAqIGFuZCBjYWxscyB0byBnZXRfdXNlcl9wYWdlc19bdW5dbG9ja2VkIGFy
ZSBzcGVjaWZpY2FsbHkgbm90IGFsbG93ZWQuICBUaGlzCiAgKiBpcyBkdWUgdG8gYW4gaW5jb21w
YXRpYmlsaXR5IHdpdGggdGhlIEZTIERBWCBjaGVjayBhbmQKLSAqIEZBVUxUX0ZMQUdfQUxMT1df
UkVUUlkKKyAqIEZBVUxUX0ZMQUdfQUxMT1dfUkVUUlkuCiAgKgotICogSW4gdGhlIENNQSBjYXNl
OiBsb25ndGVybSBwaW5zIGluIGEgQ01BIHJlZ2lvbiB3b3VsZCB1bm5lY2Vzc2FyaWx5IGZyYWdt
ZW50Ci0gKiB0aGF0IHJlZ2lvbi4gIEFuZCBzbyBDTUEgYXR0ZW1wdHMgdG8gbWlncmF0ZSB0aGUg
cGFnZSBiZWZvcmUgcGlubmluZyB3aGVuCisgKiBJbiB0aGUgQ01BIGNhc2U6IGxvbmcgdGVybSBw
aW5zIGluIGEgQ01BIHJlZ2lvbiB3b3VsZCB1bm5lY2Vzc2FyaWx5IGZyYWdtZW50CisgKiB0aGF0
IHJlZ2lvbi4gIEFuZCBzbywgQ01BIGF0dGVtcHRzIHRvIG1pZ3JhdGUgdGhlIHBhZ2UgYmVmb3Jl
IHBpbm5pbmcsIHdoZW4KICAqIEZPTExfTE9OR1RFUk0gaXMgc3BlY2lmaWVkLgorICoKKyAqIEZP
TExfUElOIGluZGljYXRlcyB0aGF0IGEgc3BlY2lhbCBraW5kIG9mIHRyYWNraW5nIChub3QganVz
dCBwYWdlLT5fcmVmY291bnQsCisgKiBidXQgYW4gYWRkaXRpb25hbCBwaW4gY291bnRpbmcgc3lz
dGVtKSB3aWxsIGJlIGludm9rZWQuIFRoaXMgaXMgaW50ZW5kZWQgZm9yCisgKiBhbnl0aGluZyB0
aGF0IGdldHMgYSBwYWdlIHJlZmVyZW5jZSBhbmQgdGhlbiB0b3VjaGVzIHBhZ2UgZGF0YSAoZm9y
IGV4YW1wbGUsCisgKiBEaXJlY3QgSU8pLiBUaGlzIGxldHMgdGhlIGZpbGVzeXN0ZW0ga25vdyB0
aGF0IHNvbWUgbm9uLWZpbGUtc3lzdGVtIGVudGl0eSBpcworICogcG90ZW50aWFsbHkgY2hhbmdp
bmcgdGhlIHBhZ2VzJyBkYXRhLiBJbiBjb250cmFzdCB0byBGT0xMX0dFVCAod2hvc2UgcGFnZXMK
KyAqIGFyZSByZWxlYXNlZCB2aWEgcHV0X3BhZ2UoKSksIEZPTExfUElOIHBhZ2VzIG11c3QgYmUg
cmVsZWFzZWQsIHVsdGltYXRlbHksIGJ5CisgKiBhIGNhbGwgdG8gcHV0X3VzZXJfcGFnZSgpLgor
ICoKKyAqIEZPTExfUElOIGlzIHNpbWlsYXIgdG8gRk9MTF9HRVQ6IGJvdGggb2YgdGhlc2UgcGlu
IHBhZ2VzLiBUaGV5IHVzZSBkaWZmZXJlbnQKKyAqIGFuZCBzZXBhcmF0ZSByZWZjb3VudGluZyBt
ZWNoYW5pc21zLCBob3dldmVyLCBhbmQgdGhhdCBtZWFucyB0aGF0IGVhY2ggaGFzCisgKiBpdHMg
b3duIGFjcXVpcmUgYW5kIHJlbGVhc2UgbWVjaGFuaXNtczoKKyAqCisgKiAgICAgRk9MTF9HRVQ6
IGdldF91c2VyX3BhZ2VzKigpIHRvIGFjcXVpcmUsIGFuZCBwdXRfcGFnZSgpIHRvIHJlbGVhc2Uu
CisgKgorICogICAgIEZPTExfUElOOiBwaW5fdXNlcl9wYWdlcyooKSBvciBwaW5fbG9uZ3Rlcm1f
cGFnZXMqKCkgdG8gYWNxdWlyZSwgYW5kCisgKiAgICAgICAgICAgICAgIHB1dF91c2VyX3BhZ2Vz
IHRvIHJlbGVhc2UuCisgKgorICogRk9MTF9QSU4gYW5kIEZPTExfR0VUIGFyZSBtdXR1YWxseSBl
eGNsdXNpdmUgZm9yIGEgZ2l2ZW4gZnVuY3Rpb24gY2FsbC4KKyAqIChUaGUgdW5kZXJseWluZyBw
YWdlcyBtYXkgZXhwZXJpZW5jZSBib3RoIEZPTExfR0VULWJhc2VkIGFuZCBGT0xMX1BJTi1iYXNl
ZAorICogY2FsbHMgYXBwbGllZCB0byB0aGVtLCBhbmQgdGhhdCdzIHBlcmZlY3RseSBPSy4gVGhp
cyBpcyBhIGNvbnN0cmFpbnQgb24gdGhlCisgKiBjYWxsZXJzLCBub3Qgb24gdGhlIHBhZ2VzLikK
KyAqCisgKiBGT0xMX1BJTiBhbmQgRk9MTF9MT05HVEVSTSBzaG91bGQgYmUgc2V0IGludGVybmFs
bHkgYnkgdGhlIHBpbl91c2VyX3BhZ2UqKCkKKyAqIGFuZCBwaW5fbG9uZ3Rlcm1fKigpIEFQSXMs
IG5ldmVyIGRpcmVjdGx5IGJ5IHRoZSBjYWxsZXIuIFRoYXQncyBpbiBvcmRlciB0bworICogaGVs
cCBhdm9pZCBtaXNtYXRjaGVzIHdoZW4gcmVsZWFzaW5nIHBhZ2VzOiBnZXRfdXNlcl9wYWdlcyoo
KSBwYWdlcyBtdXN0IGJlCisgKiByZWxlYXNlZCB2aWEgcHV0X3BhZ2UoKSwgd2hpbGUgcGluX3Vz
ZXJfcGFnZXMqKCkgcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEKKyAqIHB1dF91c2VyX3BhZ2Uo
KS4KKyAqCisgKiBQbGVhc2Ugc2VlIERvY3VtZW50YXRpb24vdm0vcGluX3VzZXJfcGFnZXMucnN0
IGZvciBtb3JlIGluZm9ybWF0aW9uLgogICovCiAKIHN0YXRpYyBpbmxpbmUgaW50IHZtX2ZhdWx0
X3RvX2Vycm5vKHZtX2ZhdWx0X3Qgdm1fZmF1bHQsIGludCBmb2xsX2ZsYWdzKQpkaWZmIC0tZ2l0
IGEvbW0vZ3VwLmMgYi9tbS9ndXAuYwppbmRleCA4MzcwMmIyZTg2YzguLjQ0MDllODRkZmY1MSAx
MDA2NDQKLS0tIGEvbW0vZ3VwLmMKKysrIGIvbW0vZ3VwLmMKQEAgLTIwMSw2ICsyMDEsMTAgQEAg
c3RhdGljIHN0cnVjdCBwYWdlICpmb2xsb3dfcGFnZV9wdGUoc3RydWN0IHZtX2FyZWFfc3RydWN0
ICp2bWEsCiAJc3BpbmxvY2tfdCAqcHRsOwogCXB0ZV90ICpwdGVwLCBwdGU7CiAKKwkvKiBGT0xM
X0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlpZiAoV0FSTl9P
Tl9PTkNFKChmbGFncyAmIChGT0xMX1BJTiB8IEZPTExfR0VUKSkgPT0KKwkJCSAoRk9MTF9QSU4g
fCBGT0xMX0dFVCkpKQorCQlyZXR1cm4gRVJSX1BUUigtRUlOVkFMKTsKIHJldHJ5OgogCWlmICh1
bmxpa2VseShwbWRfYmFkKCpwbWQpKSkKIAkJcmV0dXJuIG5vX3BhZ2VfdGFibGUodm1hLCBmbGFn
cyk7CkBAIC04MTIsNyArODE2LDcgQEAgc3RhdGljIGxvbmcgX19nZXRfdXNlcl9wYWdlcyhzdHJ1
Y3QgdGFza19zdHJ1Y3QgKnRzaywgc3RydWN0IG1tX3N0cnVjdCAqbW0sCiAKIAlzdGFydCA9IHVu
dGFnZ2VkX2FkZHIoc3RhcnQpOwogCi0JVk1fQlVHX09OKCEhcGFnZXMgIT0gISEoZ3VwX2ZsYWdz
ICYgRk9MTF9HRVQpKTsKKwlWTV9CVUdfT04oISFwYWdlcyAhPSAhIShndXBfZmxhZ3MgJiAoRk9M
TF9HRVQgfCBGT0xMX1BJTikpKTsKIAogCS8qCiAJICogSWYgRk9MTF9GT1JDRSBpcyBzZXQgdGhl
biBkbyBub3QgZm9yY2UgYSBmdWxsIGZhdWx0IGFzIHRoZSBoaW50aW5nCkBAIC0xMDM2LDcgKzEw
NDAsMTYgQEAgc3RhdGljIF9fYWx3YXlzX2lubGluZSBsb25nIF9fZ2V0X3VzZXJfcGFnZXNfbG9j
a2VkKHN0cnVjdCB0YXNrX3N0cnVjdCAqdHNrLAogCQlCVUdfT04oKmxvY2tlZCAhPSAxKTsKIAl9
CiAKLQlpZiAocGFnZXMpCisJLyoKKwkgKiBGT0xMX1BJTiBhbmQgRk9MTF9HRVQgYXJlIG11dHVh
bGx5IGV4Y2x1c2l2ZS4gVHJhZGl0aW9uYWwgYmVoYXZpb3IKKwkgKiBpcyB0byBzZXQgRk9MTF9H
RVQgaWYgdGhlIGNhbGxlciB3YW50cyBwYWdlc1tdIGZpbGxlZCBpbiAoYnV0IGhhcworCSAqIGNh
cmVsZXNzbHkgZmFpbGVkIHRvIHNwZWNpZnkgRk9MTF9HRVQpLCBzbyBrZWVwIGRvaW5nIHRoYXQs
IGJ1dCBvbmx5CisJICogZm9yIEZPTExfR0VULCBub3QgZm9yIHRoZSBuZXdlciBGT0xMX1BJTi4K
KwkgKgorCSAqIEZPTExfUElOIGFsd2F5cyBleHBlY3RzIHBhZ2VzIHRvIGJlIG5vbi1udWxsLCBi
dXQgbm8gbmVlZCB0byBhc3NlcnQKKwkgKiB0aGF0IGhlcmUsIGFzIGFueSBmYWlsdXJlcyB3aWxs
IGJlIG9idmlvdXMgZW5vdWdoLgorCSAqLworCWlmIChwYWdlcyAmJiAhKGZsYWdzICYgRk9MTF9Q
SU4pKQogCQlmbGFncyB8PSBGT0xMX0dFVDsKIAogCXBhZ2VzX2RvbmUgPSAwOwpAQCAtMTE3Myw2
ICsxMTg2LDE0IEBAIGxvbmcgZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKHN0cnVjdCB0YXNrX3N0cnVj
dCAqdHNrLCBzdHJ1Y3QgbW1fc3RydWN0ICptbSwKIAkJdW5zaWduZWQgaW50IGd1cF9mbGFncywg
c3RydWN0IHBhZ2UgKipwYWdlcywKIAkJc3RydWN0IHZtX2FyZWFfc3RydWN0ICoqdm1hcywgaW50
ICpsb2NrZWQpCiB7CisJLyoKKwkgKiBGT0xMX1BJTiBtdXN0IG9ubHkgYmUgc2V0IGludGVybmFs
bHkgYnkgdGhlIHBpbl91c2VyX3BhZ2UqKCkgYW5kCisJICogcGluX2xvbmd0ZXJtXyooKSBBUElz
LCBuZXZlciBkaXJlY3RseSBieSB0aGUgY2FsbGVyLCBzbyBlbmZvcmNlIHRoYXQKKwkgKiB3aXRo
IGFuIGFzc2VydGlvbjoKKwkgKi8KKwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExf
UElOKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKIAkvKgogCSAqIFBhcnRzIG9mIEZPTExfTE9OR1RF
Uk0gYmVoYXZpb3IgYXJlIGluY29tcGF0aWJsZSB3aXRoCiAJICogRkFVTFRfRkxBR19BTExPV19S
RVRSWSBiZWNhdXNlIG9mIHRoZSBGUyBEQVggY2hlY2sgcmVxdWlyZW1lbnQgb24KQEAgLTE2NDAs
NiArMTY2MSwxNCBAQCBsb25nIGdldF91c2VyX3BhZ2VzKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVu
c2lnbmVkIGxvbmcgbnJfcGFnZXMsCiAJCXVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBw
YWdlICoqcGFnZXMsCiAJCXN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMpCiB7CisJLyoKKwkg
KiBGT0xMX1BJTiBtdXN0IG9ubHkgYmUgc2V0IGludGVybmFsbHkgYnkgdGhlIHBpbl91c2VyX3Bh
Z2UqKCkgYW5kCisJICogcGluX2xvbmd0ZXJtXyooKSBBUElzLCBuZXZlciBkaXJlY3RseSBieSB0
aGUgY2FsbGVyLCBzbyBlbmZvcmNlIHRoYXQKKwkgKiB3aXRoIGFuIGFzc2VydGlvbjoKKwkgKi8K
KwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfUElOKSkKKwkJcmV0dXJuIC1FSU5W
QUw7CisKIAlyZXR1cm4gX19ndXBfbG9uZ3Rlcm1fbG9ja2VkKGN1cnJlbnQsIGN1cnJlbnQtPm1t
LCBzdGFydCwgbnJfcGFnZXMsCiAJCQkJICAgICBwYWdlcywgdm1hcywgZ3VwX2ZsYWdzIHwgRk9M
TF9UT1VDSCk7CiB9CkBAIC0yMzkxLDI5ICsyNDIwLDE0IEBAIHN0YXRpYyBpbnQgX19ndXBfbG9u
Z3Rlcm1fdW5sb2NrZWQodW5zaWduZWQgbG9uZyBzdGFydCwgaW50IG5yX3BhZ2VzLAogCXJldHVy
biByZXQ7CiB9CiAKLS8qKgotICogZ2V0X3VzZXJfcGFnZXNfZmFzdCgpIC0gcGluIHVzZXIgcGFn
ZXMgaW4gbWVtb3J5Ci0gKiBAc3RhcnQ6CXN0YXJ0aW5nIHVzZXIgYWRkcmVzcwotICogQG5yX3Bh
Z2VzOgludW1iZXIgb2YgcGFnZXMgZnJvbSBzdGFydCB0byBwaW4KLSAqIEBndXBfZmxhZ3M6CWZs
YWdzIG1vZGlmeWluZyBwaW4gYmVoYXZpb3VyCi0gKiBAcGFnZXM6CWFycmF5IHRoYXQgcmVjZWl2
ZXMgcG9pbnRlcnMgdG8gdGhlIHBhZ2VzIHBpbm5lZC4KLSAqCQlTaG91bGQgYmUgYXQgbGVhc3Qg
bnJfcGFnZXMgbG9uZy4KLSAqCi0gKiBBdHRlbXB0IHRvIHBpbiB1c2VyIHBhZ2VzIGluIG1lbW9y
eSB3aXRob3V0IHRha2luZyBtbS0+bW1hcF9zZW0uCi0gKiBJZiBub3Qgc3VjY2Vzc2Z1bCwgaXQg
d2lsbCBmYWxsIGJhY2sgdG8gdGFraW5nIHRoZSBsb2NrIGFuZAotICogY2FsbGluZyBnZXRfdXNl
cl9wYWdlcygpLgotICoKLSAqIFJldHVybnMgbnVtYmVyIG9mIHBhZ2VzIHBpbm5lZC4gVGhpcyBt
YXkgYmUgZmV3ZXIgdGhhbiB0aGUgbnVtYmVyCi0gKiByZXF1ZXN0ZWQuIElmIG5yX3BhZ2VzIGlz
IDAgb3IgbmVnYXRpdmUsIHJldHVybnMgMC4gSWYgbm8gcGFnZXMKLSAqIHdlcmUgcGlubmVkLCBy
ZXR1cm5zIC1lcnJuby4KLSAqLwotaW50IGdldF91c2VyX3BhZ2VzX2Zhc3QodW5zaWduZWQgbG9u
ZyBzdGFydCwgaW50IG5yX3BhZ2VzLAotCQkJdW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0
IHBhZ2UgKipwYWdlcykKK3N0YXRpYyBpbnQgaW50ZXJuYWxfZ2V0X3VzZXJfcGFnZXNfZmFzdCh1
bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCisJCQkJCXVuc2lnbmVkIGludCBndXBf
ZmxhZ3MsCisJCQkJCXN0cnVjdCBwYWdlICoqcGFnZXMpCiB7CiAJdW5zaWduZWQgbG9uZyBhZGRy
LCBsZW4sIGVuZDsKIAlpbnQgbnIgPSAwLCByZXQgPSAwOwogCi0JaWYgKFdBUk5fT05fT05DRShn
dXBfZmxhZ3MgJiB+KEZPTExfV1JJVEUgfCBGT0xMX0xPTkdURVJNKSkpCisJaWYgKFdBUk5fT05f
T05DRShndXBfZmxhZ3MgJiB+KEZPTExfV1JJVEUgfCBGT0xMX0xPTkdURVJNIHwgRk9MTF9QSU4p
KSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKIAlzdGFydCA9IHVudGFnZ2VkX2FkZHIoc3RhcnQpICYg
UEFHRV9NQVNLOwpAQCAtMjQ1Myw0ICsyNDY3LDIyMyBAQCBpbnQgZ2V0X3VzZXJfcGFnZXNfZmFz
dCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFnZXMsCiAKIAlyZXR1cm4gcmV0OwogfQor
CisvKioKKyAqIGdldF91c2VyX3BhZ2VzX2Zhc3QoKSAtIHBpbiB1c2VyIHBhZ2VzIGluIG1lbW9y
eQorICogQHN0YXJ0OglzdGFydGluZyB1c2VyIGFkZHJlc3MKKyAqIEBucl9wYWdlczoJbnVtYmVy
IG9mIHBhZ2VzIGZyb20gc3RhcnQgdG8gcGluCisgKiBAZ3VwX2ZsYWdzOglmbGFncyBtb2RpZnlp
bmcgcGluIGJlaGF2aW91cgorICogQHBhZ2VzOglhcnJheSB0aGF0IHJlY2VpdmVzIHBvaW50ZXJz
IHRvIHRoZSBwYWdlcyBwaW5uZWQuCisgKgkJU2hvdWxkIGJlIGF0IGxlYXN0IG5yX3BhZ2VzIGxv
bmcuCisgKgorICogQXR0ZW1wdCB0byBwaW4gdXNlciBwYWdlcyBpbiBtZW1vcnkgd2l0aG91dCB0
YWtpbmcgbW0tPm1tYXBfc2VtLgorICogSWYgbm90IHN1Y2Nlc3NmdWwsIGl0IHdpbGwgZmFsbCBi
YWNrIHRvIHRha2luZyB0aGUgbG9jayBhbmQKKyAqIGNhbGxpbmcgZ2V0X3VzZXJfcGFnZXMoKS4K
KyAqCisgKiBSZXR1cm5zIG51bWJlciBvZiBwYWdlcyBwaW5uZWQuIFRoaXMgbWF5IGJlIGZld2Vy
IHRoYW4gdGhlIG51bWJlciByZXF1ZXN0ZWQuCisgKiBJZiBucl9wYWdlcyBpcyAwIG9yIG5lZ2F0
aXZlLCByZXR1cm5zIDAuIElmIG5vIHBhZ2VzIHdlcmUgcGlubmVkLCByZXR1cm5zCisgKiAtZXJy
bm8uCisgKi8KK2ludCBnZXRfdXNlcl9wYWdlc19mYXN0KHVuc2lnbmVkIGxvbmcgc3RhcnQsIGlu
dCBucl9wYWdlcywKKwkJCXVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFn
ZXMpCit7CisJLyoKKwkgKiBGT0xMX1BJTiBtdXN0IG9ubHkgYmUgc2V0IGludGVybmFsbHkgYnkg
dGhlIHBpbl91c2VyX3BhZ2UqKCkgYW5kCisJICogcGluX2xvbmd0ZXJtXyooKSBBUElzLCBuZXZl
ciBkaXJlY3RseSBieSB0aGUgY2FsbGVyLCBzbyBlbmZvcmNlIHRoYXQ6CisJICovCisJaWYgKFdB
Uk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX1BJTikpCisJCXJldHVybiAtRUlOVkFMOworCisJ
cmV0dXJuIGludGVybmFsX2dldF91c2VyX3BhZ2VzX2Zhc3Qoc3RhcnQsIG5yX3BhZ2VzLCBndXBf
ZmxhZ3MsIHBhZ2VzKTsKK30KIEVYUE9SVF9TWU1CT0xfR1BMKGdldF91c2VyX3BhZ2VzX2Zhc3Qp
OworCisvKioKKyAqIHBpbl91c2VyX3BhZ2VzX2Zhc3QoKSAtIHBpbiB1c2VyIHBhZ2VzIGluIG1l
bW9yeSB3aXRob3V0IHRha2luZyBsb2NrcworICoKKyAqIE5lYXJseSB0aGUgc2FtZSBhcyBnZXRf
dXNlcl9wYWdlc19mYXN0KCksIGV4Y2VwdCB0aGF0IEZPTExfUElOIGlzIHNldC4gU2VlCisgKiBn
ZXRfdXNlcl9wYWdlc19mYXN0KCkgZm9yIGRvY3VtZW50YXRpb24gb24gdGhlIGZ1bmN0aW9uIGFy
Z3VtZW50cywgYmVjYXVzZQorICogdGhlIGFyZ3VtZW50cyBoZXJlIGFyZSBpZGVudGljYWwuCisg
KgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEg
cHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2Vy
X3BhZ2VzLnJzdCBmb3IgZnVydGhlciBkZXRhaWxzLgorICoKKyAqIFRoaXMgaXMgaW50ZW5kZWQg
Zm9yIENhc2UgMSAoRElPKSBpbiBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdC4g
SXQKKyAqIGlzIE5PVCBpbnRlbmRlZCBmb3IgQ2FzZSAyIChSRE1BOiBsb25nLXRlcm0gcGlucyku
CisgKi8KK2ludCBwaW5fdXNlcl9wYWdlc19mYXN0KHVuc2lnbmVkIGxvbmcgc3RhcnQsIGludCBu
cl9wYWdlcywKKwkJCXVuc2lnbmVkIGludCBndXBfZmxhZ3MsIHN0cnVjdCBwYWdlICoqcGFnZXMp
Cit7CisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuICov
CisJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX0dFVCkpCisJCXJldHVybiAtRUlO
VkFMOworCisJZ3VwX2ZsYWdzIHw9IEZPTExfUElOOworCXJldHVybiBpbnRlcm5hbF9nZXRfdXNl
cl9wYWdlc19mYXN0KHN0YXJ0LCBucl9wYWdlcywgZ3VwX2ZsYWdzLCBwYWdlcyk7Cit9CitFWFBP
UlRfU1lNQk9MX0dQTChwaW5fdXNlcl9wYWdlc19mYXN0KTsKKworLyoqCisgKiBwaW5fbG9uZ3Rl
cm1fcGFnZXNfZmFzdCgpIC0gcGluIHVzZXIgcGFnZXMgaW4gbWVtb3J5IHdpdGhvdXQgdGFraW5n
IGxvY2tzCisgKgorICogTmVhcmx5IHRoZSBzYW1lIGFzIGdldF91c2VyX3BhZ2VzX2Zhc3QoKSwg
ZXhjZXB0IHRoYXQgRk9MTF9QSU4gYW5kCisgKiBGT0xMX0xPTkdURVJNIGFyZSBzZXQuIFNlZSBn
ZXRfdXNlcl9wYWdlc19mYXN0KCkgZm9yIGRvY3VtZW50YXRpb24gb24gdGhlCisgKiBmdW5jdGlv
biBhcmd1bWVudHMsIGJlY2F1c2UgdGhlIGFyZ3VtZW50cyBoZXJlIGFyZSBpZGVudGljYWwuCisg
KgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEg
cHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2Vy
X3BhZ2VzLnJzdCBmb3IgZnVydGhlciBkZXRhaWxzLgorICoKKyAqIEZPTExfTE9OR1RFUk0gbWVh
bnMgdGhhdCB0aGUgcGFnZXMgYXJlIGJlaW5nIHBpbm5lZCBmb3IgImxvbmcgdGVybSIgdXNlLAor
ICogdHlwaWNhbGx5IGJ5IGEgbm9uLUNQVSBkZXZpY2UsIGFuZCB3ZSBjYW5ub3QgYmUgc3VyZSB0
aGF0IHdhaXRpbmcgZm9yIGEKKyAqIHBpbm5lZCBwYWdlIHRvIGJlY29tZSB1bnBpbiB3aWxsIGJl
IGVmZmVjdGl2ZS4KKyAqCisgKiBUaGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDIgKFJETUE6IGxv
bmctdGVybSBwaW5zKSBvZiB0aGUgRk9MTF9QSU4KKyAqIGRvY3VtZW50YXRpb24uCisgKi8KK2lu
dCBwaW5fbG9uZ3Rlcm1fcGFnZXNfZmFzdCh1bnNpZ25lZCBsb25nIHN0YXJ0LCBpbnQgbnJfcGFn
ZXMsCisJCQkgICAgdW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcykK
K3sKKwkvKiBGT0xMX0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8K
KwlpZiAoV0FSTl9PTl9PTkNFKGd1cF9mbGFncyAmIEZPTExfR0VUKSkKKwkJcmV0dXJuIC1FSU5W
QUw7CisKKwlndXBfZmxhZ3MgfD0gKEZPTExfUElOIHwgRk9MTF9MT05HVEVSTSk7CisJcmV0dXJu
IGludGVybmFsX2dldF91c2VyX3BhZ2VzX2Zhc3Qoc3RhcnQsIG5yX3BhZ2VzLCBndXBfZmxhZ3Ms
IHBhZ2VzKTsKK30KK0VYUE9SVF9TWU1CT0xfR1BMKHBpbl9sb25ndGVybV9wYWdlc19mYXN0KTsK
KworLyoqCisgKiBwaW5fdXNlcl9wYWdlc19yZW1vdGUoKSAtIHBpbiBwYWdlcyBvZiBhIHJlbW90
ZSBwcm9jZXNzICh0YXNrICE9IGN1cnJlbnQpCisgKgorICogTmVhcmx5IHRoZSBzYW1lIGFzIGdl
dF91c2VyX3BhZ2VzX3JlbW90ZSgpLCBleGNlcHQgdGhhdCBGT0xMX1BJTiBpcyBzZXQuIFNlZQor
ICogZ2V0X3VzZXJfcGFnZXNfcmVtb3RlKCkgZm9yIGRvY3VtZW50YXRpb24gb24gdGhlIGZ1bmN0
aW9uIGFyZ3VtZW50cywgYmVjYXVzZQorICogdGhlIGFyZ3VtZW50cyBoZXJlIGFyZSBpZGVudGlj
YWwuCisgKgorICogRk9MTF9QSU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNl
ZCB2aWEgcHV0X3VzZXJfcGFnZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bp
bl91c2VyX3BhZ2VzLnJzdCBmb3IgZGV0YWlscy4KKyAqCisgKiBUaGlzIGlzIGludGVuZGVkIGZv
ciBDYXNlIDEgKERJTykgaW4gRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuIEl0
CisgKiBpcyBOT1QgaW50ZW5kZWQgZm9yIENhc2UgMiAoUkRNQTogbG9uZy10ZXJtIHBpbnMpLgor
ICovCitsb25nIHBpbl91c2VyX3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRzaywg
c3RydWN0IG1tX3N0cnVjdCAqbW0sCisJCQkgICB1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25l
ZCBsb25nIG5yX3BhZ2VzLAorCQkJICAgdW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0IHBh
Z2UgKipwYWdlcywKKwkJCSAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMsIGludCAqbG9j
a2VkKQoreworCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhjbHVzaXZl
LiAqLworCWlmIChXQVJOX09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9HRVQpKQorCQlyZXR1cm4g
LUVJTlZBTDsKKworCWd1cF9mbGFncyB8PSBGT0xMX1RPVUNIIHwgRk9MTF9SRU1PVEUgfCBGT0xM
X1BJTjsKKworCXJldHVybiBfX2dldF91c2VyX3BhZ2VzX2xvY2tlZCh0c2ssIG1tLCBzdGFydCwg
bnJfcGFnZXMsIHBhZ2VzLCB2bWFzLAorCQkJCSAgICAgICBsb2NrZWQsIGd1cF9mbGFncyk7Cit9
CitFWFBPUlRfU1lNQk9MKHBpbl91c2VyX3BhZ2VzX3JlbW90ZSk7CisKKy8qKgorICogcGluX2xv
bmd0ZXJtX3BhZ2VzX3JlbW90ZSgpIC0gcGluIHBhZ2VzIG9mIGEgcmVtb3RlIHByb2Nlc3MgKHRh
c2sgIT0gY3VycmVudCkKKyAqCisgKiBOZWFybHkgdGhlIHNhbWUgYXMgZ2V0X3VzZXJfcGFnZXNf
cmVtb3RlKCksIGJ1dCBub3RlIHRoYXQgRk9MTF9UT1VDSCBpcyBub3QKKyAqIHNldCwgYW5kIEZP
TExfUElOIGFuZCBGT0xMX0xPTkdURVJNIGFyZSBzZXQuIFNlZSBnZXRfdXNlcl9wYWdlc19yZW1v
dGUoKSBmb3IKKyAqIGRvY3VtZW50YXRpb24gb24gdGhlIGZ1bmN0aW9uIGFyZ3VtZW50cywgYmVj
YXVzZSB0aGUgYXJndW1lbnRzIGhlcmUgYXJlCisgKiBpZGVudGljYWwuCisgKgorICogRk9MTF9Q
SU4gbWVhbnMgdGhhdCB0aGUgcGFnZXMgbXVzdCBiZSByZWxlYXNlZCB2aWEgcHV0X3VzZXJfcGFn
ZSgpLiBQbGVhc2UKKyAqIHNlZSBEb2N1bWVudGF0aW9uL3ZtL3Bpbl91c2VyX3BhZ2VzLnJzdCBm
b3IgZnVydGhlciBkZXRhaWxzLgorICoKKyAqIEZPTExfTE9OR1RFUk0gbWVhbnMgdGhhdCB0aGUg
cGFnZXMgYXJlIGJlaW5nIHBpbm5lZCBmb3IgImxvbmcgdGVybSIgdXNlLAorICogdHlwaWNhbGx5
IGJ5IGEgbm9uLUNQVSBkZXZpY2UsIGFuZCB3ZSBjYW5ub3QgYmUgc3VyZSB0aGF0IHdhaXRpbmcg
Zm9yIGEKKyAqIHBpbm5lZCBwYWdlIHRvIGJlY29tZSB1bnBpbiB3aWxsIGJlIGVmZmVjdGl2ZS4K
KyAqCisgKiBUaGlzIGlzIGludGVuZGVkIGZvciBDYXNlIDIgKFJETUE6IGxvbmctdGVybSBwaW5z
KSBpbgorICogRG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QuCisgKi8KK2xvbmcg
cGluX2xvbmd0ZXJtX3BhZ2VzX3JlbW90ZShzdHJ1Y3QgdGFza19zdHJ1Y3QgKnRzaywgc3RydWN0
IG1tX3N0cnVjdCAqbW0sCisJCQkgICAgICAgdW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQg
bG9uZyBucl9wYWdlcywKKwkJCSAgICAgICB1bnNpZ25lZCBpbnQgZ3VwX2ZsYWdzLCBzdHJ1Y3Qg
cGFnZSAqKnBhZ2VzLAorCQkJICAgICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMsIGlu
dCAqbG9ja2VkKQoreworCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUgbXV0dWFsbHkgZXhj
bHVzaXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoZ3VwX2ZsYWdzICYgRk9MTF9HRVQpKQorCQly
ZXR1cm4gLUVJTlZBTDsKKworCS8qCisJICogUGFydHMgb2YgRk9MTF9MT05HVEVSTSBiZWhhdmlv
ciBhcmUgaW5jb21wYXRpYmxlIHdpdGgKKwkgKiBGQVVMVF9GTEFHX0FMTE9XX1JFVFJZIGJlY2F1
c2Ugb2YgdGhlIEZTIERBWCBjaGVjayByZXF1aXJlbWVudCBvbgorCSAqIHZtYXMuIEhvd2V2ZXIs
IHRoaXMgb25seSBjb21lcyB1cCBpZiBsb2NrZWQgaXMgc2V0LCBhbmQgdGhlcmUgYXJlCisJICog
Y2FsbGVycyB0aGF0IGRvIHJlcXVlc3QgRk9MTF9MT05HVEVSTSwgYnV0IGRvIG5vdCBzZXQgbG9j
a2VkLiBTbywKKwkgKiBhbGxvdyB3aGF0IHdlIGNhbi4KKwkgKi8KKwlpZiAoV0FSTl9PTl9PTkNF
KGxvY2tlZCkpCisJCXJldHVybiAtRUlOVkFMOworCisJZ3VwX2ZsYWdzIHw9IEZPTExfTE9OR1RF
Uk0gfCBGT0xMX1JFTU9URSB8IEZPTExfUElOOworCisJLyoKKwkgKiBUaGlzIHdpbGwgY2hlY2sg
dGhlIHZtYXMgKGV2ZW4gaWYgb3VyIHZtYXMgYXJnIGlzIE5VTEwpCisJICogYW5kIHJldHVybiAt
RU5PVFNVUFAgaWYgREFYIGlzbid0IGFsbG93ZWQgaW4gdGhpcyBjYXNlOgorCSAqLworCXJldHVy
biBfX2d1cF9sb25ndGVybV9sb2NrZWQodHNrLCBtbSwgc3RhcnQsIG5yX3BhZ2VzLCBwYWdlcywK
KwkJCQkgICAgIHZtYXMsIGd1cF9mbGFncyB8IEZPTExfVE9VQ0ggfAorCQkJCSAgICAgRk9MTF9S
RU1PVEUpOworfQorRVhQT1JUX1NZTUJPTChwaW5fbG9uZ3Rlcm1fcGFnZXNfcmVtb3RlKTsKKwor
LyoqCisgKiBwaW5fdXNlcl9wYWdlcygpIC0gcGluIHVzZXIgcGFnZXMgaW4gbWVtb3J5IGZvciB1
c2UgYnkgb3RoZXIgZGV2aWNlcworICoKKyAqIE5lYXJseSB0aGUgc2FtZSBhcyBnZXRfdXNlcl9w
YWdlcygpLCBleGNlcHQgdGhhdCBGT0xMX1RPVUNIIGlzIG5vdCBzZXQsIGFuZAorICogRk9MTF9Q
SU4gaXMgc2V0LgorICoKKyAqIEZPTExfUElOIG1lYW5zIHRoYXQgdGhlIHBhZ2VzIG11c3QgYmUg
cmVsZWFzZWQgdmlhIHB1dF91c2VyX3BhZ2UoKS4gUGxlYXNlCisgKiBzZWUgRG9jdW1lbnRhdGlv
bi92bS9waW5fdXNlcl9wYWdlcy5yc3QgZm9yIGRldGFpbHMuCisgKgorICogVGhpcyBpcyBpbnRl
bmRlZCBmb3IgQ2FzZSAxIChESU8pIGluIERvY3VtZW50YXRpb24vdm0vcGluX3VzZXJfcGFnZXMu
cnN0LiBJdAorICogaXMgTk9UIGludGVuZGVkIGZvciBDYXNlIDIgKFJETUE6IGxvbmctdGVybSBw
aW5zKS4KKyAqLworbG9uZyBwaW5fdXNlcl9wYWdlcyh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNp
Z25lZCBsb25nIG5yX3BhZ2VzLAorCQkgICAgdW5zaWduZWQgaW50IGd1cF9mbGFncywgc3RydWN0
IHBhZ2UgKipwYWdlcywKKwkJICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqKnZtYXMpCit7CisJ
LyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuICovCisJaWYg
KFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX0dFVCkpCisJCXJldHVybiAtRUlOVkFMOwor
CisJZ3VwX2ZsYWdzIHw9IEZPTExfUElOOworCXJldHVybiBfX2d1cF9sb25ndGVybV9sb2NrZWQo
Y3VycmVudCwgY3VycmVudC0+bW0sIHN0YXJ0LCBucl9wYWdlcywKKwkJCQkgICAgIHBhZ2VzLCB2
bWFzLCBndXBfZmxhZ3MpOworfQorRVhQT1JUX1NZTUJPTChwaW5fdXNlcl9wYWdlcyk7CisKKy8q
KgorICogcGluX2xvbmd0ZXJtX3BhZ2VzKCkgLSBwaW4gdXNlciBwYWdlcyBpbiBtZW1vcnkgZm9y
IGxvbmctdGVybSB1c2UgKFJETUEsCisgKiB0eXBpY2FsbHkpCisgKgorICogTmVhcmx5IHRoZSBz
YW1lIGFzIGdldF91c2VyX3BhZ2VzKCksIGV4Y2VwdCB0aGF0IEZPTExfUElOIGFuZCBGT0xMX0xP
TkdURVJNCisgKiBhcmUgc2V0LiBTZWUgZ2V0X3VzZXJfcGFnZXNfZmFzdCgpIGZvciBkb2N1bWVu
dGF0aW9uIG9uIHRoZSBmdW5jdGlvbgorICogYXJndW1lbnRzLCBiZWNhdXNlIHRoZSBhcmd1bWVu
dHMgaGVyZSBhcmUgaWRlbnRpY2FsLgorICoKKyAqIEZPTExfUElOIG1lYW5zIHRoYXQgdGhlIHBh
Z2VzIG11c3QgYmUgcmVsZWFzZWQgdmlhIHB1dF91c2VyX3BhZ2UoKS4gUGxlYXNlCisgKiBzZWUg
RG9jdW1lbnRhdGlvbi92bS9waW5fdXNlcl9wYWdlcy5yc3QgZm9yIGZ1cnRoZXIgZGV0YWlscy4K
KyAqCisgKiBGT0xMX0xPTkdURVJNIG1lYW5zIHRoYXQgdGhlIHBhZ2VzIGFyZSBiZWluZyBwaW5u
ZWQgZm9yICJsb25nIHRlcm0iIHVzZSwKKyAqIHR5cGljYWxseSBieSBhIG5vbi1DUFUgZGV2aWNl
LCBhbmQgd2UgY2Fubm90IGJlIHN1cmUgdGhhdCB3YWl0aW5nIGZvciBhCisgKiBwaW5uZWQgcGFn
ZSB0byBiZWNvbWUgdW5waW4gd2lsbCBiZSBlZmZlY3RpdmUuCisgKgorICogVGhpcyBpcyBpbnRl
bmRlZCBmb3IgQ2FzZSAyIChSRE1BOiBsb25nLXRlcm0gcGlucykgaW4KKyAqIERvY3VtZW50YXRp
b24vdm0vcGluX3VzZXJfcGFnZXMucnN0LgorICovCitsb25nIHBpbl9sb25ndGVybV9wYWdlcyh1
bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIG5yX3BhZ2VzLAorCQkJdW5zaWduZWQg
aW50IGd1cF9mbGFncywgc3RydWN0IHBhZ2UgKipwYWdlcywKKwkJCXN0cnVjdCB2bV9hcmVhX3N0
cnVjdCAqKnZtYXMpCit7CisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1YWxseSBl
eGNsdXNpdmUuICovCisJaWYgKFdBUk5fT05fT05DRShndXBfZmxhZ3MgJiBGT0xMX0dFVCkpCisJ
CXJldHVybiAtRUlOVkFMOworCisJZ3VwX2ZsYWdzIHw9IEZPTExfUElOIHwgRk9MTF9MT05HVEVS
TTsKKwlyZXR1cm4gX19ndXBfbG9uZ3Rlcm1fbG9ja2VkKGN1cnJlbnQsIGN1cnJlbnQtPm1tLCBz
dGFydCwgbnJfcGFnZXMsCisJCQkJICAgICBwYWdlcywgdm1hcywgZ3VwX2ZsYWdzKTsKK30KK0VY
UE9SVF9TWU1CT0wocGluX2xvbmd0ZXJtX3BhZ2VzKTsKLS0gCjIuMjQuMAoKX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZHJpLWRldmVsIG1haWxpbmcgbGlz
dApkcmktZGV2ZWxAbGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0
b3Aub3JnL21haWxtYW4vbGlzdGluZm8vZHJpLWRldmVs
