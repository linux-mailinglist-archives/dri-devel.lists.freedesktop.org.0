Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id A1AEA9D2BB
	for <lists+dri-devel@lfdr.de>; Mon, 26 Aug 2019 17:27:54 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 658F06E255;
	Mon, 26 Aug 2019 15:27:38 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from bhuna.collabora.co.uk (bhuna.collabora.co.uk [46.235.227.227])
 by gabe.freedesktop.org (Postfix) with ESMTPS id C2A396E231
 for <dri-devel@lists.freedesktop.org>; Mon, 26 Aug 2019 15:27:06 +0000 (UTC)
Received: from localhost.localdomain (unknown
 [IPv6:2a01:e0a:2c:6930:5cf4:84a1:2763:fe0d])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested) (Authenticated sender: bbrezillon)
 by bhuna.collabora.co.uk (Postfix) with ESMTPSA id CEA6328BD7A;
 Mon, 26 Aug 2019 16:27:04 +0100 (BST)
From: Boris Brezillon <boris.brezillon@collabora.com>
To: dri-devel@lists.freedesktop.org
Subject: [PATCH v2 16/21] drm/bridge: Add the necessary bits to support bus
 format negotiation
Date: Mon, 26 Aug 2019 17:26:44 +0200
Message-Id: <20190826152649.13820-17-boris.brezillon@collabora.com>
X-Mailer: git-send-email 2.21.0
In-Reply-To: <20190826152649.13820-1-boris.brezillon@collabora.com>
References: <20190826152649.13820-1-boris.brezillon@collabora.com>
MIME-Version: 1.0
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Nikita Yushchenko <nikita.yoush@cogentembedded.com>,
 Jernej Skrabec <jernej.skrabec@siol.net>,
 Laurent Pinchart <Laurent.pinchart@ideasonboard.com>,
 Neil Armstrong <narmstrong@baylibre.com>,
 Andrey Smirnov <andrew.smirnov@gmail.com>, Jonas Karlman <jonas@kwiboo.se>,
 Seung-Woo Kim <sw0312.kim@samsung.com>,
 Kyungmin Park <kyungmin.park@samsung.com>,
 Thierry Reding <thierry.reding@gmail.com>, Chris Healy <Chris.Healy@zii.aero>,
 Boris Brezillon <boris.brezillon@collabora.com>, kernel@collabora.com,
 Sam Ravnborg <sam@ravnborg.org>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

VGhpcyB0YWtlcyB0aGUgZm9ybSBvZiB2YXJpb3VzIGhlbHBlcnMsIHBsdXMgdGhlIGFkZGl0aW9u
IG9mIDIgbmV3CnN0cnVjdHM6CiogZHJtX2J1c19jYXBzOiBkZXNjcmliZSB0aGUgYnVzIGNhcGFi
aWxpdGllcyBvZiBhIGJyaWRnZS9lbmNvZGVyLiBGb3IKICBicmlkZ2VzIHdlIGhhdmUgb25lIGZv
ciB0aGUgaW5wdXQgcG9ydCBhbmQgb25lIGZvciB0aGUgb3V0cHV0IHBvcnQuCiAgRW5jb2RlcnMg
anVzdCBoYXZlIG9uZSBvdXRwdXQgcG9ydC4KKiBkcm1fYnVzX2NmZzogYWRkZWQgdG8gdGhlIGRy
bV9icmlkZ2Vfc3RhdGUuIEl0J3Mgc3VwcG9zZWQgdG8gc3RvcmUKICBidXMgY29uZmlndXJhdGlv
biBpbmZvcm1hdGlvbi4gRm9yIG5vdyB3ZSBqdXN0IGhhdmUgZm9ybWF0IGFuZCBmbGFncwogIGJ1
dCBtb3JlIGZpZWxkcyBtaWdodCBiZSBhZGRlZCBpbiB0aGUgZnV0dXJlLiBBZ2FpbiwgZWFjaAog
IGRybV9icmlkZ2Vfc3RhdGUgY29udGFpbnMgMiBkcm1fYnVzX2NmZyBlbGVtZW50czogb25lIGZv
ciB0aGUgb3V0cHV0CiAgcG9ydCBhbmQgb25lIGZvciB0aGUgaW5wdXQgcG9ydAoKSGVscGVycyBj
YW4gYmUgdXNlZCBmcm9tIGJyaWRnZSBkcml2ZXJzJyAtPmF0b21pY19jaGVjaygpIGltcGxlbWVu
dGF0aW9uCnRvIG5lZ290aWF0ZSB0aGUgYnVzIGZvcm1hdCB0byB1c2UuIE5lZ290aWF0aW9uIGhh
cHBlbnMgaW4gcmVzZXJ2ZSBvcmRlciwKc3RhcnRpbmcgZnJvbSB0aGUgbGFzdCBlbGVtZW50IG9m
IHRoZSBicmlkZ2UgY2hhaW4gKHRoZSBvbmUgZGlyZWN0bHkKY29ubmVjdGVkIHRvIHRoZSBkaXNw
bGF5KSB0byB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgY2hhaW4gKHRoZSBvbmUKY29ubmVjdGVk
IHRvIHRoZSBlbmNvZGVyKS4KCk5lZ290aWF0aW9uIHVzdWFsbHkgdGFrZXMgcGxhY2UgaW4gMiBz
dGVwczoKKiBtYWtlIHN1cmUgdGhlIGlucHV0IGVuZCBvZiB0aGUgbmV4dCBlbGVtZW50IGluIHRo
ZSBjaGFpbiBwaWNrZWQgYQogIGZvcm1hdCB0aGF0J3Mgc3VwcG9ydGVkIGJ5IHRoZSBvdXRwdXQg
ZW5kIG9mIG91ciBicmlkZ2UuIFRoYXQncyBkb25lCiAgd2l0aCBkcm1fYXRvbWljX2JyaWRnZV9j
aG9vc2Vfb3V0cHV0X2J1c19jZmcoKS4KKiBjaG9vc2UgYSBmb3JtYXQgZm9yIHRoZSBpbnB1dCBl
bmQgb2Ygb3VyIGJyaWRnZSBiYXNlZCBvbiB3aGF0J3MKICBzdXBwb3J0ZWQgYnkgdGhlIHByZXZp
b3VzIGJyaWRnZSBpbiB0aGUgY2hhaW4uIFRoaXMgaXMgYWNoaWV2ZWQgYnkKICBjYWxsaW5nIGRy
bV9hdG9taWNfYnJpZGdlX2Nob29zZV9pbnB1dF9idXNfY2ZnKCkKCk5vdGUgdGhhdCB0aG9zZSBo
ZWxwZXJzIGFyZSBhIGJpdCBsYXggd2hlbiBpdCBjb21lcyB0byB1bmluaXRpYWxpemVkCmJ1cyBm
b3JtYXQgdmFsaWRhdGlvbi4gVGhhdCdzIGludGVudGlvbmFsLiBJZiB3ZSBkb24ndCBkbyB0aGF0
IHdlJ2xsCmJhc2ljYWxseSBicmVhayB0aGluZ3MgaWYgd2Ugc3RhcnQgYWRkaW5nIHN1cHBvcnQg
Zm9yIGJ1cyBmb3JtYXQKbmVnb3RpYXRpb24gdG8gc29tZSBlbGVtZW50cyBvZiB0aGUgcGlwZWxp
bmUgbGVhdmluZyBvdGhlcnMgb24gdGhlCnNpZGUsIGFuZCB0aGF0J3MgbGlrZWx5IHRvIGhhcHBl
biBmb3IgYWxsIGV4dGVybmFsIGJyaWRnZXMgc2luY2Ugd2UKY2FuJ3QgbmVjZXNzYXJpbHkgdGVs
bCB3aGVyZSB0aGV5IGFyZSB1c2VkLgoKU2lnbmVkLW9mZi1ieTogQm9yaXMgQnJlemlsbG9uIDxi
b3Jpcy5icmV6aWxsb25AY29sbGFib3JhLmNvbT4KLS0tCkNoYW5nZXMgaW4gdjI6CiogUmV3b3Jr
IHRoaW5ncyB0byBzdXBwb3J0IG1vcmUgY29tcGxleCB1c2UgY2FzZXMKLS0tCiBkcml2ZXJzL2dw
dS9kcm0vZHJtX2JyaWRnZS5jIHwgMTc5ICsrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysr
KystCiBpbmNsdWRlL2RybS9kcm1fYnJpZGdlLmggICAgIHwgIDgyICsrKysrKysrKysrKysrKysK
IDIgZmlsZXMgY2hhbmdlZCwgMjYwIGluc2VydGlvbnMoKyksIDEgZGVsZXRpb24oLSkKCmRpZmYg
LS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vZHJtX2JyaWRnZS5jIGIvZHJpdmVycy9ncHUvZHJtL2Ry
bV9icmlkZ2UuYwppbmRleCA5Yzc0YjI4NWRhOWQuLmI1MzczMmFjOTk3ZCAxMDA2NDQKLS0tIGEv
ZHJpdmVycy9ncHUvZHJtL2RybV9icmlkZ2UuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vZHJtX2Jy
aWRnZS5jCkBAIC02MjQsMTMgKzYyNCwxODQgQEAgc3RhdGljIGludCBkcm1fYXRvbWljX2JyaWRn
ZV9jaGVjayhzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJpZGdlLAogCXJldHVybiAwOwogfQogCitzdGF0
aWMgaW50IHNlbGVjdF9idXNfZm10X3JlY3Vyc2l2ZShzdHJ1Y3QgZHJtX2JyaWRnZSAqZmlyc3Qs
CisJCQkJICAgIHN0cnVjdCBkcm1fYnJpZGdlICpjdXIsCisJCQkJICAgIHN0cnVjdCBkcm1fY3J0
Y19zdGF0ZSAqY3J0Y19zdGF0ZSwKKwkJCQkgICAgc3RydWN0IGRybV9jb25uZWN0b3Jfc3RhdGUg
KmNvbm5fc3RhdGUsCisJCQkJICAgIHUzMiBvdXRfYnVzX2ZtdCkKK3sKKwlzdHJ1Y3QgZHJtX2Jy
aWRnZV9zdGF0ZSAqY3VyX3N0YXRlOworCXVuc2lnbmVkIGludCBudW1faW5fYnVzX2ZtdHMsIGk7
CisJc3RydWN0IGRybV9icmlkZ2UgKnByZXY7CisJdTMyICppbl9idXNfZm10czsKKwlpbnQgcmV0
OworCisJcHJldiA9IGRybV9icmlkZ2VfY2hhaW5fZ2V0X3ByZXZfYnJpZGdlKGN1cik7CisJY3Vy
X3N0YXRlID0gZHJtX2F0b21pY19nZXRfbmV3X2JyaWRnZV9zdGF0ZShjcnRjX3N0YXRlLT5zdGF0
ZSwgY3VyKTsKKwlpZiAoV0FSTl9PTighY3VyX3N0YXRlKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisK
KwkvKgorCSAqIEJ1cyBmb3JtYXQgbmVnb3RpYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlz
IGJyaWRnZSwgbGV0J3MgcGFzcworCSAqIE1FRElBX0JVU19GTVRfRklYRUQgdG8gdGhlIHByZXZp
b3VzIGJyaWRnZSBpbiB0aGUgY2hhaW4gYW5kIGhvcGUKKwkgKiB0aGF0IGl0IGNhbiBoYW5kbGUg
dGhpcyBzaXR1YXRpb24gZ3JhY2VmdWxseSAoYnkgcHJvdmlkaW5nCisJICogYXBwcm9wcmlhdGUg
ZGVmYXVsdCB2YWx1ZXMpLgorCSAqLworCWlmICghY3VyLT5mdW5jcy0+YXRvbWljX2dldF9pbnB1
dF9idXNfZm10cykgeworCQlpZiAoY3VyICE9IGZpcnN0KSB7CisJCQlyZXQgPSBzZWxlY3RfYnVz
X2ZtdF9yZWN1cnNpdmUoZmlyc3QsIHByZXYsIGNydGNfc3RhdGUsCisJCQkJCQkgICAgICAgY29u
bl9zdGF0ZSwKKwkJCQkJCSAgICAgICBNRURJQV9CVVNfRk1UX0ZJWEVEKTsKKwkJCWlmIChyZXQp
CisJCQkJcmV0dXJuIHJldDsKKwkJfQorCisJCWN1cl9zdGF0ZS0+aW5wdXRfYnVzX2NmZy5mbXQg
PSBNRURJQV9CVVNfRk1UX0ZJWEVEOworCQljdXJfc3RhdGUtPm91dHB1dF9idXNfY2ZnLmZtdCA9
IG91dF9idXNfZm10OworCQlyZXR1cm4gMDsKKwl9CisKKwljdXItPmZ1bmNzLT5hdG9taWNfZ2V0
X2lucHV0X2J1c19mbXRzKGN1ciwgY3VyX3N0YXRlLCBjcnRjX3N0YXRlLAorCQkJCQkgICAgICBj
b25uX3N0YXRlLCBvdXRfYnVzX2ZtdCwKKwkJCQkJICAgICAgJm51bV9pbl9idXNfZm10cywgTlVM
TCk7CisJaWYgKCFudW1faW5fYnVzX2ZtdHMpCisJCXJldHVybiAtRU5PVFNVUFA7CisKKwlpbl9i
dXNfZm10cyA9IGtjYWxsb2MobnVtX2luX2J1c19mbXRzLCBzaXplb2YoKmluX2J1c19mbXRzKSwK
KwkJCSAgICAgIEdGUF9LRVJORUwpOworCWlmICghaW5fYnVzX2ZtdHMpCisJCXJldHVybiAtRU5P
TUVNOworCisJY3VyLT5mdW5jcy0+YXRvbWljX2dldF9pbnB1dF9idXNfZm10cyhjdXIsIGN1cl9z
dGF0ZSwgY3J0Y19zdGF0ZSwKKwkJCQkJICAgICAgY29ubl9zdGF0ZSwgb3V0X2J1c19mbXQsCisJ
CQkJCSAgICAgICZudW1faW5fYnVzX2ZtdHMsIGluX2J1c19mbXRzKTsKKworCWlmIChmaXJzdCA9
PSBjdXIpIHsKKwkJY3VyX3N0YXRlLT5pbnB1dF9idXNfY2ZnLmZtdCA9IGluX2J1c19mbXRzWzBd
OworCQljdXJfc3RhdGUtPm91dHB1dF9idXNfY2ZnLmZtdCA9IG91dF9idXNfZm10OworCQlrZnJl
ZShpbl9idXNfZm10cyk7CisJCXJldHVybiAwOworCX0KKworCWZvciAoaSA9IDA7IGkgPCBudW1f
aW5fYnVzX2ZtdHM7IGkrKykgeworCQlyZXQgPSBzZWxlY3RfYnVzX2ZtdF9yZWN1cnNpdmUoZmly
c3QsIHByZXYsIGNydGNfc3RhdGUsCisJCQkJCSAgICAgICBjb25uX3N0YXRlLCBpbl9idXNfZm10
c1tpXSk7CisJCWlmIChyZXQgIT0gLUVOT1RTVVBQKQorCQkJYnJlYWs7CisJfQorCisJaWYgKCFy
ZXQpIHsKKwkJY3VyX3N0YXRlLT5pbnB1dF9idXNfY2ZnLmZtdCA9IGluX2J1c19mbXRzW2ldOwor
CQljdXJfc3RhdGUtPm91dHB1dF9idXNfY2ZnLmZtdCA9IG91dF9idXNfZm10OworCX0KKworCWtm
cmVlKGluX2J1c19mbXRzKTsKKwlyZXR1cm4gcmV0OworfQorCisvKgorICogVGhpcyBmdW5jdGlv
biBpcyBjYWxsZWQgYnkgJmRybV9hdG9taWNfYnJpZGdlX2NoYWluX2NoZWNrKCkganVzdCBiZWZv
cmUKKyAqIGNhbGxpbmcgJmRybV9icmlkZ2VfZnVuY3MuYXRvbWljX2NoZWNrKCkgb24gYWxsIGVs
ZW1lbnRzIG9mIHRoZSBjaGFpbi4KKyAqIEl0J3MgcHJvdmlkaW5nIGJ1cyBmb3JtYXQgbmVnb3Rp
YXRpb24gYmV0d2VlbiBicmlkZ2UgZWxlbWVudHMuIFRoZQorICogbmVnb3RpYXRpb24gaGFwcGVu
cyBpbiByZXZlcnNlIG9yZGVyLCBzdGFydGluZyBmcm9tIHRoZSBsYXN0IGVsZW1lbnQgaW4KKyAq
IHRoZSBjaGFpbiB1cCB0byBAYnJpZGdlLgorICoKKyAqIE5lZ290aWF0aW9uIHN0YXJ0cyBieSBy
ZXRyaWV2aW5nIHN1cHBvcnRlZCBvdXRwdXQgYnVzIGZvcm1hdHMgb24gdGhlIGxhc3QKKyAqIGJy
aWRnZSBlbGVtZW50IGFuZCB0ZXN0aW5nIHRoZW0gb25lIGJ5IG9uZS4gVGhlIHRlc3QgaXMgcmVj
dXJzaXZlLCBtZWFuaW5nCisgKiB0aGF0IGZvciBlYWNoIHRlc3RlZCBvdXRwdXQgZm9ybWF0LCB0
aGUgd2hvbGUgY2hhaW4gd2lsbCBiZSB3YWxrZWQgYmFja3dhcmQsCisgKiBhbmQgZWFjaCBlbGVt
ZW50IHdpbGwgaGF2ZSB0byBjaG9vc2UgYW4gaW5wdXQgYnVzIGZvcm1hdCB0aGF0IGNhbiBiZQor
ICogdHJhbnNjb2RlZCB0byB0aGUgcmVxdWVzdGVkIG91dHB1dCBmb3JtYXQuIFdoZW4gYSBicmlk
Z2UgZWxlbWVudCBkb2VzIG5vdAorICogc3VwcG9ydCB0cmFuc2NvZGluZyBpbnRvIGEgc3BlY2lm
aWMgb3V0cHV0IGZvcm1hdCAtRU5PVFNVUFAgaXMgcmV0dXJuZWQgYW5kCisgKiB0aGUgbmV4dCBi
cmlkZ2UgZWxlbWVudCB3aWxsIGhhdmUgdG8gdHJ5IGEgZGlmZmVyZW50IGZvcm1hdC4gSWYgbm9u
ZSBvZiB0aGUKKyAqIGNvbWJpbmF0aW9ucyB3b3JrZWQsIC1FTk9UU1VQUCBpcyByZXR1cm5lZCBh
bmQgdGhlIGF0b21pYyBtb2Rlc2V0IHdpbGwgZmFpbC4KKyAqCisgKiBUaGlzIGltcGxlbWVudGF0
aW9uIGlzIHJlbHlpbmcgb24KKyAqICZkcm1fYnJpZGdlX2Z1bmNzLmF0b21pY19nZXRfb3V0cHV0
X2J1c19mbXRzKCkgYW5kCisgKiAmZHJtX2JyaWRnZV9mdW5jcy5hdG9taWNfZ2V0X2lucHV0X2J1
c19mbXRzKCkgdG8gZ2F0aGVyIHN1cHBvcnRlZAorICogaW5wdXQvb3V0cHV0IGZvcm1hdHMuCisg
KiBXaGVuICZkcm1fYnJpZGdlX2Z1bmNzLmF0b21pY19nZXRfb3V0cHV0X2J1c19mbXRzKCkgaXMg
bm90IGltcGxlbWVudGVkIGJ5CisgKiB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSBjaGFpbiwgJmRy
bV9hdG9taWNfYnJpZGdlX2NoYWluX3NlbGVjdF9idXNfZm10cygpCisgKiB0cmllcyBhIHNpbmds
ZSBmb3JtYXQ6ICZkcm1fY29ubmVjdG9yLmRpc3BsYXlfaW5mby5idXNfZm9ybWF0c1swXSBpZgor
ICogYXZhaWxhYmxlLCBNRURJQV9CVVNfRk1UX0ZJWEVEIG90aGVyd2lzZS4KKyAqIFdoZW4gJmRy
bV9icmlkZ2VfZnVuY3MuYXRvbWljX2dldF9pbnB1dF9idXNfZm10cygpIGlzIG5vdCBpbXBsZW1l
bnRlZCwKKyAqICZkcm1fYXRvbWljX2JyaWRnZV9jaGFpbl9zZWxlY3RfYnVzX2ZtdHMoKSBza2lw
cyB0aGUgbmVnb3RpYXRpb24gb24gdGhlCisgKiBicmlkZ2UgZWxlbWVudCB0aGF0IGxhY2tzIHRo
aXMgaG9vayBhbmQgYXNrcyB0aGUgcHJldmlvdXMgZWxlbWVudCBpbiB0aGUKKyAqIGNoYWluIHRv
IHRyeSBNRURJQV9CVVNfRk1UX0ZJWEVELiBJdCdzIHVwIHRvIGJyaWRnZSBkcml2ZXJzIHRvIGRl
Y2lkZSB3aGF0CisgKiB0byBkbyBpbiB0aGF0IGNhc2UgKGZhaWwgaWYgdGhleSB3YW50IHRvIGVu
Zm9yY2UgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbiwgb3IKKyAqIHByb3ZpZGUgYSByZWFzb25hYmxl
IGRlZmF1bHQgaWYgdGhleSBuZWVkIHRvIHN1cHBvcnQgcGlwZWxpbmVzIHdoZXJlIG5vdAorICog
YWxsIGVsZW1lbnRzIHN1cHBvcnQgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbikuCisgKi8KK3N0YXRp
YyBpbnQKK2RybV9hdG9taWNfYnJpZGdlX2NoYWluX3NlbGVjdF9idXNfZm10cyhzdHJ1Y3QgZHJt
X2JyaWRnZSAqYnJpZGdlLAorCQkJCQlzdHJ1Y3QgZHJtX2NydGNfc3RhdGUgKmNydGNfc3RhdGUs
CisJCQkJCXN0cnVjdCBkcm1fY29ubmVjdG9yX3N0YXRlICpjb25uX3N0YXRlKQoreworCXN0cnVj
dCBkcm1fY29ubmVjdG9yICpjb25uID0gY29ubl9zdGF0ZS0+Y29ubmVjdG9yOworCXN0cnVjdCBk
cm1fZW5jb2RlciAqZW5jb2RlciA9IGJyaWRnZS0+ZW5jb2RlcjsKKwlzdHJ1Y3QgZHJtX2JyaWRn
ZV9zdGF0ZSAqbGFzdF9icmlkZ2Vfc3RhdGU7CisJdW5zaWduZWQgaW50IGksIG51bV9vdXRfYnVz
X2ZtdHM7CisJc3RydWN0IGRybV9icmlkZ2UgKmxhc3RfYnJpZGdlOworCXUzMiAqb3V0X2J1c19m
bXRzOworCWludCByZXQgPSAwOworCisJbGFzdF9icmlkZ2UgPSBsaXN0X2xhc3RfZW50cnkoJmVu
Y29kZXItPmJyaWRnZV9jaGFpbiwKKwkJCQkgICAgICBzdHJ1Y3QgZHJtX2JyaWRnZSwgY2hhaW5f
bm9kZSk7CisJbGFzdF9icmlkZ2Vfc3RhdGUgPSBkcm1fYXRvbWljX2dldF9uZXdfYnJpZGdlX3N0
YXRlKGNydGNfc3RhdGUtPnN0YXRlLAorCQkJCQkJCSAgICBsYXN0X2JyaWRnZSk7CisJaWYgKFdB
Uk5fT04oIWxhc3RfYnJpZGdlX3N0YXRlKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlpZiAobGFz
dF9icmlkZ2UtPmZ1bmNzLT5hdG9taWNfZ2V0X291dHB1dF9idXNfZm10cykKKwkJbGFzdF9icmlk
Z2UtPmZ1bmNzLT5hdG9taWNfZ2V0X291dHB1dF9idXNfZm10cyhsYXN0X2JyaWRnZSwKKwkJCQkJ
CQlsYXN0X2JyaWRnZV9zdGF0ZSwKKwkJCQkJCQljcnRjX3N0YXRlLAorCQkJCQkJCWNvbm5fc3Rh
dGUsCisJCQkJCQkJJm51bV9vdXRfYnVzX2ZtdHMsCisJCQkJCQkJTlVMTCk7CisJZWxzZQorCQlu
dW1fb3V0X2J1c19mbXRzID0gMTsKKworCWlmICghbnVtX291dF9idXNfZm10cykKKwkJcmV0dXJu
IC1FTk9UU1VQUDsKKworCW91dF9idXNfZm10cyA9IGtjYWxsb2MobnVtX291dF9idXNfZm10cywg
c2l6ZW9mKCpvdXRfYnVzX2ZtdHMpLAorCQkJICAgICAgIEdGUF9LRVJORUwpOworCWlmICghb3V0
X2J1c19mbXRzKQorCQlyZXR1cm4gLUVOT01FTTsKKworCWlmIChsYXN0X2JyaWRnZS0+ZnVuY3Mt
PmF0b21pY19nZXRfb3V0cHV0X2J1c19mbXRzKQorCQlsYXN0X2JyaWRnZS0+ZnVuY3MtPmF0b21p
Y19nZXRfb3V0cHV0X2J1c19mbXRzKGxhc3RfYnJpZGdlLAorCQkJCQkJCWxhc3RfYnJpZGdlX3N0
YXRlLAorCQkJCQkJCWNydGNfc3RhdGUsCisJCQkJCQkJY29ubl9zdGF0ZSwKKwkJCQkJCQkmbnVt
X291dF9idXNfZm10cywKKwkJCQkJCQlvdXRfYnVzX2ZtdHMpOworCWVsc2UgaWYgKGNvbm4tPmRp
c3BsYXlfaW5mby5udW1fYnVzX2Zvcm1hdHMgJiYKKwkJIGNvbm4tPmRpc3BsYXlfaW5mby5idXNf
Zm9ybWF0cykKKwkJb3V0X2J1c19mbXRzWzBdID0gY29ubi0+ZGlzcGxheV9pbmZvLmJ1c19mb3Jt
YXRzWzBdOworCWVsc2UKKwkJb3V0X2J1c19mbXRzWzBdID0gTUVESUFfQlVTX0ZNVF9GSVhFRDsK
KworCWZvciAoaSA9IDA7IGkgPCBudW1fb3V0X2J1c19mbXRzOyBpKyspIHsKKwkJcmV0ID0gc2Vs
ZWN0X2J1c19mbXRfcmVjdXJzaXZlKGJyaWRnZSwgbGFzdF9icmlkZ2UsIGNydGNfc3RhdGUsCisJ
CQkJCSAgICAgICBjb25uX3N0YXRlLCBvdXRfYnVzX2ZtdHNbaV0pOworCQlpZiAocmV0ICE9IC1F
Tk9UU1VQUCkKKwkJCWJyZWFrOworCX0KKworCWtmcmVlKG91dF9idXNfZm10cyk7CisKKwlyZXR1
cm4gcmV0OworfQorCiAvKioKICAqIGRybV9hdG9taWNfYnJpZGdlX2NoYWluX2NoZWNrKCkgLSBE
byBhbiBhdG9taWMgY2hlY2sgb24gdGhlIGJyaWRnZSBjaGFpbgogICogQGJyaWRnZTogYnJpZGdl
IGNvbnRyb2wgc3RydWN0dXJlCiAgKiBAY3J0Y19zdGF0ZTogbmV3IENSVEMgc3RhdGUKICAqIEBj
b25uX3N0YXRlOiBuZXcgY29ubmVjdG9yIHN0YXRlCiAgKgotICogQ2FsbHMgJmRybV9icmlkZ2Vf
ZnVuY3MuYXRvbWljX2NoZWNrKCkgKGZhbGxzIGJhY2sgb24KKyAqIEZpcnN0IHRyaWdnZXIgYSBi
dXMgZm9ybWF0IG5lZ290aWF0aW9uIGJlZm9yZSBjYWxsaW5nCisgKiAmZHJtX2JyaWRnZV9mdW5j
cy5hdG9taWNfY2hlY2soKSAoZmFsbHMgYmFjayBvbgogICogJmRybV9icmlkZ2VfZnVuY3MubW9k
ZV9maXh1cCgpKSBvcCBmb3IgYWxsIHRoZSBicmlkZ2VzIGluIHRoZSBlbmNvZGVyIGNoYWluLAog
ICogc3RhcnRpbmcgZnJvbSB0aGUgbGFzdCBicmlkZ2UgdG8gdGhlIGZpcnN0LiBUaGVzZSBhcmUg
Y2FsbGVkIGJlZm9yZSBjYWxsaW5nCiAgKiAmZHJtX2VuY29kZXJfaGVscGVyX2Z1bmNzLmF0b21p
Y19jaGVjaygpCkBAIC02NDQsNiArODE1LDEyIEBAIGludCBkcm1fYXRvbWljX2JyaWRnZV9jaGFp
bl9jaGVjayhzdHJ1Y3QgZHJtX2JyaWRnZSAqYnJpZGdlLAogewogCXN0cnVjdCBkcm1fZW5jb2Rl
ciAqZW5jb2RlciA9IGJyaWRnZS0+ZW5jb2RlcjsKIAlzdHJ1Y3QgZHJtX2JyaWRnZSAqaXRlcjsK
KwlpbnQgcmV0OworCisJcmV0ID0gZHJtX2F0b21pY19icmlkZ2VfY2hhaW5fc2VsZWN0X2J1c19m
bXRzKGJyaWRnZSwgY3J0Y19zdGF0ZSwKKwkJCQkJCSAgICAgIGNvbm5fc3RhdGUpOworCWlmIChy
ZXQpCisJCXJldHVybiByZXQ7CiAKIAlsaXN0X2Zvcl9lYWNoX2VudHJ5X3JldmVyc2UoaXRlciwg
JmVuY29kZXItPmJyaWRnZV9jaGFpbiwgY2hhaW5fbm9kZSkgewogCQlpbnQgcmV0OwpkaWZmIC0t
Z2l0IGEvaW5jbHVkZS9kcm0vZHJtX2JyaWRnZS5oIGIvaW5jbHVkZS9kcm0vZHJtX2JyaWRnZS5o
CmluZGV4IDk1ZGM1OGMzYTRlOC4uOTZkZjNiZWRmZWU0IDEwMDY0NAotLS0gYS9pbmNsdWRlL2Ry
bS9kcm1fYnJpZGdlLmgKKysrIGIvaW5jbHVkZS9kcm0vZHJtX2JyaWRnZS5oCkBAIC0zMywxNSAr
MzMsMzMgQEAgc3RydWN0IGRybV9icmlkZ2U7CiBzdHJ1Y3QgZHJtX2JyaWRnZV90aW1pbmdzOwog
c3RydWN0IGRybV9wYW5lbDsKIAorLyoqCisgKiBzdHJ1Y3QgZHJtX2J1c19jZmcgLSBidXMgY29u
ZmlndXJhdGlvbgorICogQGZtdDogZm9ybWF0IHVzZWQgb24gdGhpcyBidXMKKyAqIEBmbGFnczog
RFJNX0JVU18gZmxhZ3MgdXNlZCBvbiB0aGlzIGJ1cworICoKKyAqIEVuY29kZXMgdGhlIGJ1cyBm
b3JtYXQgYW5kIGJ1cyBmbGFncyB1c2VkIGJ5IG9uZSBlbmQgb2YgdGhlIGJyaWRnZSBvcgorICog
YnkgdGhlIGVuY29kZXIgb3V0cHV0LgorICovCitzdHJ1Y3QgZHJtX2J1c19jZmcgeworCXUzMiBm
bXQ7CisJdTMyIGZsYWdzOworfTsKKwogLyoqCiAgKiBzdHJ1Y3QgZHJtX2JyaWRnZV9zdGF0ZSAt
IEF0b21pYyBicmlkZ2Ugc3RhdGUgb2JqZWN0CiAgKiBAYmFzZTogaW5oZXJpdCBmcm9tICZkcm1f
cHJpdmF0ZV9zdGF0ZQogICogQGJyaWRnZTogdGhlIGJyaWRnZSB0aGlzIHN0YXRlIHJlZmVycyB0
bworICogQGlucHV0X2J1c19pbmZvOiBpbnB1dCBidXMgaW5mb3JtYXRpb24KKyAqIEBvdXRwdXRf
YnVzX2luZm86IG91dHB1dCBidXMgaW5mb3JtYXRpb24KICAqLwogc3RydWN0IGRybV9icmlkZ2Vf
c3RhdGUgewogCXN0cnVjdCBkcm1fcHJpdmF0ZV9zdGF0ZSBiYXNlOwogCiAJc3RydWN0IGRybV9i
cmlkZ2UgKmJyaWRnZTsKKworCXN0cnVjdCBkcm1fYnVzX2NmZyBpbnB1dF9idXNfY2ZnOworCXN0
cnVjdCBkcm1fYnVzX2NmZyBvdXRwdXRfYnVzX2NmZzsKIH07CiAKIHN0YXRpYyBpbmxpbmUgc3Ry
dWN0IGRybV9icmlkZ2Vfc3RhdGUgKgpAQCAtMzkxLDYgKzQwOSw3MCBAQCBzdHJ1Y3QgZHJtX2Jy
aWRnZV9mdW5jcyB7CiAJdm9pZCAoKmF0b21pY19kZXN0cm95X3N0YXRlKShzdHJ1Y3QgZHJtX2Jy
aWRnZSAqYnJpZGdlLAogCQkJCSAgICAgc3RydWN0IGRybV9icmlkZ2Vfc3RhdGUgKnN0YXRlKTsK
IAorCS8qKgorCSAqIEBhdG9taWNfZ2V0X291dHB1dF9idXNfZm10czoKKwkgKgorCSAqIFJldHVy
biB0aGUgc3VwcG9ydGVkIGJ1cyBmb3JtYXRzIG9uIHRoZSBvdXRwdXQgZW5kIG9mIGEgYnJpZGdl
LgorCSAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB0d2ljZS4gT25jZSB3aXRoIG91dHB1dF9mbXRz
IHNldCBOVUxMLCBpbiB0aGlzCisJICogY2FzZSB0aGUgZHJpdmVyIHNob3VsZCBzZXQgbnVtX291
dHB1dF9mbXRzIHRvIHRoZSBudW1iZXIgb2YKKwkgKiBzdXBwb3J0ZWQgb3V0cHV0IGJ1cyBmb3Jt
YXRzIHN1Y2ggdGhhdCB0aGUgY29yZSBjYW4gYWxsb2NhdGUgYW4KKwkgKiBhcnJheSBvZiB0aGUg
cmlnaHQgZGltZW5zaW9uLiBUaGUgc2Vjb25kIHRpbWUgaXQncyBjYWxsZWQgd2l0aCBhCisJICog
bm9uLU5VTEwgb3V0cHV0X2ZtdHMsIGFuZCB0aGUgZHJpdmVyIGlzIGV4cGVjdGVkIHRvIGZpbGwg
dGhlCisJICogb3V0cHV0X2ZtdHMgYXJyYXkuIFRoZSBvdXRwdXRfZm10cyBhcnJheSBwYXNzZWQg
dG8gdGhlIGRyaXZlciBpcworCSAqIGd1YXJhbnRlZWQgdG8gYmUgYmlnIGVub3VnaCB0byBzdG9y
ZSB0aGUgbnVtYmVyIG9mIGVudHJpZXMgcmV0dXJuZWQKKwkgKiBvbiB0aGUgZmlyc3QgY2FsbCAo
bm8gbmVlZCB0byBjaGVjayBudW1fb3V0cHV0X2ZtdHMpLgorCSAqCisJICogVGhpcyBtZXRob2Qg
aXMgb25seSBjYWxsZWQgb24gdGhlIGxhc3QgZWxlbWVudCBvZiB0aGUgYnJpZGdlIGNoYWluCisJ
ICogYXMgcGFydCBvZiB0aGUgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbiBwcm9jZXNzIHRoYXQgaGFw
cGVucyBpbgorCSAqICZkcm1fYXRvbWljX2JyaWRnZV9jaGFpbl9zZWxlY3RfYnVzX2ZtdHMoKS4K
KwkgKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC4gV2hlbiBub3QgaW1wbGVtZW50ZWQsIHRoZSBj
b3JlIHdpbGwKKwkgKiBmYWxsYmFjayB0byAmZHJtX2Nvbm5lY3Rvci5kaXNwbGF5X2luZm8uYnVz
X2Zvcm1hdHNbMF0gaWYKKwkgKiAmZHJtX2Nvbm5lY3Rvci5kaXNwbGF5X2luZm8ubnVtX2J1c19m
b3JtYXRzID4gMCwKKwkgKiBNRURJQV9CVVNfRk1UX0ZJWEVEIG90aGVyd2lzZS4KKwkgKi8KKwl2
b2lkICgqYXRvbWljX2dldF9vdXRwdXRfYnVzX2ZtdHMpKHN0cnVjdCBkcm1fYnJpZGdlICpicmlk
Z2UsCisJCQkJCSAgIHN0cnVjdCBkcm1fYnJpZGdlX3N0YXRlICpicmlkZ2Vfc3RhdGUsCisJCQkJ
CSAgIHN0cnVjdCBkcm1fY3J0Y19zdGF0ZSAqY3J0Y19zdGF0ZSwKKwkJCQkJICAgc3RydWN0IGRy
bV9jb25uZWN0b3Jfc3RhdGUgKmNvbm5fc3RhdGUsCisJCQkJCSAgIHVuc2lnbmVkIGludCAqbnVt
X291dHB1dF9mbXRzLAorCQkJCQkgICB1MzIgKm91dHB1dF9mbXRzKTsKKworCS8qKgorCSAqIEBh
dG9taWNfZ2V0X2lucHV0X2J1c19mbXRzOgorCSAqCisJICogUmV0dXJuIHRoZSBzdXBwb3J0ZWQg
YnVzIGZvcm1hdHMgb24gdGhlIGlucHV0IGVuZCBvZiBhIGJyaWRnZSBmb3IKKwkgKiBhIHNwZWNp
ZmljIG91dHB1dCBidXMgZm9ybWF0LgorCSAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB0d2ljZS4g
T25jZSB3aXRoIGlucHV0X2ZtdHMgc2V0IE5VTEwsIGluIHRoaXMKKwkgKiBjYXNlIHRoZSBkcml2
ZXIgc2hvdWxkIHNldCBudW1faW5wdXRfZm10cyB0byB0aGUgbnVtYmVyIG9mCisJICogc3VwcG9y
dGVkIGlucHV0IGJ1cyBmb3JtYXRzIHN1Y2ggdGhhdCB0aGUgY29yZSBjYW4gYWxsb2NhdGUgYW4g
YXJyYXkKKwkgKiBvZiB0aGUgcmlnaHQgZGltZW5zaW9uLiBUaGUgc2Vjb25kIHRpbWUgaXQncyBj
YWxsZWQgd2l0aCBhIG5vbi1OVUxMCisJICogaW5wdXRfZm10cywgYW5kIHRoZSBkcml2ZXIgaXMg
ZXhwZWN0ZWQgdG8gZmlsbCB0aGUgaW5wdXRfZm10cyBhcnJheS4KKwkgKiBUaGUgaW5wdXRfZm10
cyBhcnJheSBwYXNzZWQgdG8gdGhlIGRyaXZlciBpcyBndWFyYW50ZWVkIHRvIGJlIGJpZworCSAq
IGVub3VnaCB0byBzdG9yZSB0aGUgbnVtYmVyIG9mIGVudHJpZXMgcmV0dXJuZWQgb24gdGhlIGZp
cnN0IGNhbGwgKG5vCisJICogbmVlZCB0byBjaGVjayBudW1faW5wdXRfZm10cykuCisJICoKKwkg
KiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgb24gYWxsIGVsZW1lbnQgb2YgdGhlIGJyaWRnZSBjaGFp
biBhcyBwYXJ0IG9mCisJICogdGhlIGJ1cyBmb3JtYXQgbmVnb3RpYXRpb24gcHJvY2VzcyB0aGF0
IGhhcHBlbnMgaW4KKwkgKiAmZHJtX2F0b21pY19icmlkZ2VfY2hhaW5fc2VsZWN0X2J1c19mbXRz
KCkuCisJICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuIFdoZW4gbm90IGltcGxlbWVudGVkLCB0
aGUgY29yZSB3aWxsIGJ5cGFzcworCSAqIGJ1cyBmb3JtYXQgbmVnb3RpYXRpb24gb24gdGhpcyBl
bGVtZW50IG9mIHRoZSBicmlkZ2Ugd2l0aG91dAorCSAqIGZhaWxpbmcsIGFuZCB0aGUgcHJldmlv
dXMgZWxlbWVudCBpbiB0aGUgY2hhaW4gd2lsbCBiZSBwYXNzZWQKKwkgKiBNRURJQV9CVVNfRk1U
X0ZJWEVEIGFzIGl0cyBvdXRwdXQgYnVzIGZvcm1hdC4KKwkgKgorCSAqIEJyaWRnZSBkcml2ZXJz
IHRoYXQgbmVlZCB0byBzdXBwb3J0IGJlaW5nIGxpbmtlZCB0byBicmlkZ2VzIHRoYXQgYXJlCisJ
ICogbm90IHN1cHBvcnRpbmcgYnVzIGZvcm1hdCBuZWdvdGlhdGlvbiBzaG91bGQgaGFuZGxlIHRo
ZQorCSAqIG91dHB1dF9mbXQgPT0gTUVESUFfQlVTX0ZNVF9GSVhFRCBjYXNlIGFwcHJvcHJpYXRl
bHksIGJ5IHNlbGVjdGluZyBhCisJICogc2Vuc2libGUgZGVmYXVsdCB2YWx1ZSBvciBleHRyYWN0
aW5nIHRoaXMgaW5mb3JtYXRpb24gZnJvbSBzb21ld2hlcmUKKwkgKiBlbHNlIChGVyBwcm9wZXJ0
eSwgJmRybV9kaXNwbGF5X21vZGUsICZkcm1fZGlzcGxheV9pbmZvLCAuLi4pCisJICovCisJdm9p
ZCAoKmF0b21pY19nZXRfaW5wdXRfYnVzX2ZtdHMpKHN0cnVjdCBkcm1fYnJpZGdlICpicmlkZ2Us
CisJCQkJCSAgc3RydWN0IGRybV9icmlkZ2Vfc3RhdGUgKmJyaWRnZV9zdGF0ZSwKKwkJCQkJICBz
dHJ1Y3QgZHJtX2NydGNfc3RhdGUgKmNydGNfc3RhdGUsCisJCQkJCSAgc3RydWN0IGRybV9jb25u
ZWN0b3Jfc3RhdGUgKmNvbm5fc3RhdGUsCisJCQkJCSAgdTMyIG91dHB1dF9mbXQsCisJCQkJCSAg
dW5zaWduZWQgaW50ICpudW1faW5wdXRfZm10cywKKwkJCQkJICB1MzIgKmlucHV0X2ZtdHMpOwor
CiAJLyoqCiAJICogQGF0b21pY19jaGVjazoKIAkgKgotLSAKMi4yMS4wCgpfX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkcmktZGV2ZWwgbWFpbGluZyBsaXN0
CmRyaS1kZXZlbEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3Rv
cC5vcmcvbWFpbG1hbi9saXN0aW5mby9kcmktZGV2ZWw=
