Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 72F20FA819
	for <lists+dri-devel@lfdr.de>; Wed, 13 Nov 2019 05:27:49 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 4F5456EC6F;
	Wed, 13 Nov 2019 04:27:39 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from hqemgate16.nvidia.com (hqemgate16.nvidia.com [216.228.121.65])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 956986EC6F
 for <dri-devel@lists.freedesktop.org>; Wed, 13 Nov 2019 04:27:18 +0000 (UTC)
Received: from hqpgpgate101.nvidia.com (Not Verified[216.228.121.13]) by
 hqemgate16.nvidia.com (using TLS: TLSv1.2, DES-CBC3-SHA)
 id <B5dcb85ea0001>; Tue, 12 Nov 2019 20:26:18 -0800
Received: from hqmail.nvidia.com ([172.20.161.6])
 by hqpgpgate101.nvidia.com (PGP Universal service);
 Tue, 12 Nov 2019 20:27:13 -0800
X-PGP-Universal: processed;
 by hqpgpgate101.nvidia.com on Tue, 12 Nov 2019 20:27:13 -0800
Received: from HQMAIL107.nvidia.com (172.20.187.13) by HQMAIL101.nvidia.com
 (172.20.187.10) with Microsoft SMTP Server (TLS) id 15.0.1473.3; Wed, 13 Nov
 2019 04:27:13 +0000
Received: from hqnvemgw03.nvidia.com (10.124.88.68) by HQMAIL107.nvidia.com
 (172.20.187.13) with Microsoft SMTP Server (TLS) id 15.0.1473.3 via Frontend
 Transport; Wed, 13 Nov 2019 04:27:13 +0000
Received: from blueforge.nvidia.com (Not Verified[10.110.48.28]) by
 hqnvemgw03.nvidia.com with Trustwave SEG (v7, 5, 8, 10121)
 id <B5dcb86210002>; Tue, 12 Nov 2019 20:27:13 -0800
From: John Hubbard <jhubbard@nvidia.com>
To: Andrew Morton <akpm@linux-foundation.org>
Subject: [PATCH v4 16/23] mm/gup: track FOLL_PIN pages
Date: Tue, 12 Nov 2019 20:27:03 -0800
Message-ID: <20191113042710.3997854-17-jhubbard@nvidia.com>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20191113042710.3997854-1-jhubbard@nvidia.com>
References: <20191113042710.3997854-1-jhubbard@nvidia.com>
MIME-Version: 1.0
X-NVConfidentiality: public
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=nvidia.com; s=n1; 
 t=1573619178; bh=ecPceg6RvODvRSv+rgTNNzwuZrUESuEjAbx6le0ukAA=;
 h=X-PGP-Universal:From:To:CC:Subject:Date:Message-ID:X-Mailer:
 In-Reply-To:References:MIME-Version:X-NVConfidentiality:
 Content-Type:Content-Transfer-Encoding;
 b=PXJht9mf3OpjrZRAbQoVzZtFvcigKotqG7tQTJfZtv5bFNK2p3HGTM3y1HnmBtK1G
 RsGbXTnwHaFqMVmRATxxkKB4j5lhuIjTKUrhyUmSPMaE2LTNEeRqm0OeYR243IOCG/
 yMl4WF4vE+MzZznnUBasfHYiLspHunf36vRvhyYES85c6M1jfCURi3J5Nlni6N4W5l
 KMmQs16OpG8ZRw9qhVt5bzyY5vXfWNH7iWo7JefEWzMW1OmgA5k2m0pH/igdBqT/k9
 UJM4a+xs+5AzhPI5ccJif4rOAgxltFAUqOu7ubWyFDHQ3HrfmRlE+bUMwMxvqHUZZt
 EMzQoSssL2nOg==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Michal Hocko <mhocko@suse.com>, Jan Kara <jack@suse.cz>,
 kvm@vger.kernel.org, linux-doc@vger.kernel.org,
 David Airlie <airlied@linux.ie>, Dave Chinner <david@fromorbit.com>,
 dri-devel@lists.freedesktop.org, LKML <linux-kernel@vger.kernel.org>,
 linux-mm@kvack.org, Paul Mackerras <paulus@samba.org>,
 linux-kselftest@vger.kernel.org, Ira Weiny <ira.weiny@intel.com>,
 Jonathan Corbet <corbet@lwn.net>, linux-rdma@vger.kernel.org,
 Michael Ellerman <mpe@ellerman.id.au>, Christoph Hellwig <hch@infradead.org>,
 Jason Gunthorpe <jgg@ziepe.ca>, Vlastimil Babka <vbabka@suse.cz>,
 =?UTF-8?q?Bj=C3=B6rn=20T=C3=B6pel?= <bjorn.topel@intel.com>,
 linux-media@vger.kernel.org, Shuah Khan <shuah@kernel.org>,
 John Hubbard <jhubbard@nvidia.com>, linux-block@vger.kernel.org,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Al Viro <viro@zeniv.linux.org.uk>, Dan Williams <dan.j.williams@intel.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Magnus Karlsson <magnus.karlsson@intel.com>, Jens Axboe <axboe@kernel.dk>,
 netdev@vger.kernel.org, Alex Williamson <alex.williamson@redhat.com>,
 linux-fsdevel@vger.kernel.org, bpf@vger.kernel.org,
 linuxppc-dev@lists.ozlabs.org, "David S . Miller" <davem@davemloft.net>,
 Mike Kravetz <mike.kravetz@oracle.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

QWRkIHRyYWNraW5nIG9mIHBhZ2VzIHRoYXQgd2VyZSBwaW5uZWQgdmlhIEZPTExfUElOLgoKQXMg
bWVudGlvbmVkIGluIHRoZSBGT0xMX1BJTiBkb2N1bWVudGF0aW9uLCBjYWxsZXJzIHdobyBlZmZl
Y3RpdmVseSBzZXQKRk9MTF9QSU4gYXJlIHJlcXVpcmVkIHRvIHVsdGltYXRlbHkgZnJlZSBzdWNo
IHBhZ2VzIHZpYSBwdXRfdXNlcl9wYWdlKCkuClRoZSBlZmZlY3QgaXMgc2ltaWxhciB0byBGT0xM
X0dFVCwgYW5kIG1heSBiZSB0aG91Z2h0IG9mIGFzICJGT0xMX0dFVApmb3IgRElPIGFuZC9vciBS
RE1BIHVzZSIuCgpQYWdlcyB0aGF0IGhhdmUgYmVlbiBwaW5uZWQgdmlhIEZPTExfUElOIGFyZSBp
ZGVudGlmaWFibGUgdmlhIGEKbmV3IGZ1bmN0aW9uIGNhbGw6CgogICBib29sIHBhZ2VfZG1hX3Bp
bm5lZChzdHJ1Y3QgcGFnZSAqcGFnZSk7CgpXaGF0IHRvIGRvIGluIHJlc3BvbnNlIHRvIGVuY291
bnRlcmluZyBzdWNoIGEgcGFnZSwgaXMgbGVmdCB0byBsYXRlcgpwYXRjaHNldHMuIFRoZXJlIGlz
IGRpc2N1c3Npb24gYWJvdXQgdGhpcyBpbiBbMV0uCgpUaGlzIGFsc28gY2hhbmdlcyBhIEJVR19P
TigpLCB0byBhIFdBUk5fT04oKSwgaW4gZm9sbG93X3BhZ2VfbWFzaygpLgoKU3VnZ2VzdGVkLWJ5
OiBKYW4gS2FyYSA8amFja0BzdXNlLmN6PgpTdWdnZXN0ZWQtYnk6IErDqXLDtG1lIEdsaXNzZSA8
amdsaXNzZUByZWRoYXQuY29tPgpTaWduZWQtb2ZmLWJ5OiBKb2huIEh1YmJhcmQgPGpodWJiYXJk
QG52aWRpYS5jb20+Ci0tLQogaW5jbHVkZS9saW51eC9tbS5oICAgICAgIHwgIDc0ICsrKysrKysr
KysrLS0tLQogaW5jbHVkZS9saW51eC9tbXpvbmUuaCAgIHwgICAyICsKIGluY2x1ZGUvbGludXgv
cGFnZV9yZWYuaCB8ICAxMCArKysKIG1tL2d1cC5jICAgICAgICAgICAgICAgICB8IDE4OSArKysr
KysrKysrKysrKysrKysrKysrKysrKysrKysrKystLS0tLS0KIG1tL2h1Z2VfbWVtb3J5LmMgICAg
ICAgICB8ICA1NCArKysrKysrKysrLQogbW0vaHVnZXRsYi5jICAgICAgICAgICAgIHwgIDM5ICsr
KysrKystCiBtbS92bXN0YXQuYyAgICAgICAgICAgICAgfCAgIDIgKwogNyBmaWxlcyBjaGFuZ2Vk
LCAzMjEgaW5zZXJ0aW9ucygrKSwgNDkgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvaW5jbHVk
ZS9saW51eC9tbS5oIGIvaW5jbHVkZS9saW51eC9tbS5oCmluZGV4IGMzNTFlMWIwYjRiNy4uMTli
M2ZhNjhhNGRhIDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4L21tLmgKKysrIGIvaW5jbHVkZS9s
aW51eC9tbS5oCkBAIC0xMDU0LDYgKzEwNTQsOCBAQCBzdGF0aWMgaW5saW5lIF9fbXVzdF9jaGVj
ayBib29sIHRyeV9nZXRfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKIAlyZXR1cm4gdHJ1ZTsKIH0K
IAorX19tdXN0X2NoZWNrIGJvb2wgdXNlcl9wYWdlX3JlZl9pbmMoc3RydWN0IHBhZ2UgKnBhZ2Up
OworCiBzdGF0aWMgaW5saW5lIHZvaWQgcHV0X3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCiB7CiAJ
cGFnZSA9IGNvbXBvdW5kX2hlYWQocGFnZSk7CkBAIC0xMDcxLDMwICsxMDczLDcwIEBAIHN0YXRp
YyBpbmxpbmUgdm9pZCBwdXRfcGFnZShzdHJ1Y3QgcGFnZSAqcGFnZSkKIAkJX19wdXRfcGFnZShw
YWdlKTsKIH0KIAotLyoqCi0gKiBwdXRfdXNlcl9wYWdlKCkgLSByZWxlYXNlIGEgZ3VwLXBpbm5l
ZCBwYWdlCi0gKiBAcGFnZTogICAgICAgICAgICBwb2ludGVyIHRvIHBhZ2UgdG8gYmUgcmVsZWFz
ZWQKKy8qCisgKiBHVVBfUElOX0NPVU5USU5HX0JJQVMsIGFuZCB0aGUgYXNzb2NpYXRlZCBmdW5j
dGlvbnMgdGhhdCB1c2UgaXQsIG92ZXJsb2FkCisgKiB0aGUgcGFnZSdzIHJlZmNvdW50IHNvIHRo
YXQgdHdvIHNlcGFyYXRlIGl0ZW1zIGFyZSB0cmFja2VkOiB0aGUgb3JpZ2luYWwgcGFnZQorICog
cmVmZXJlbmNlIGNvdW50LCBhbmQgYWxzbyBhIG5ldyBjb3VudCBvZiBob3cgbWFueSBnZXRfdXNl
cl9wYWdlcygpIGNhbGxzIHdlcmUKKyAqIG1hZGUgYWdhaW5zdCB0aGUgcGFnZS4gKCJndXAtcGlu
bmVkIiBpcyBhbm90aGVyIHRlcm0gZm9yIHRoZSBsYXR0ZXIpLgorICoKKyAqIFdpdGggdGhpcyBz
Y2hlbWUsIGdldF91c2VyX3BhZ2VzKCkgYmVjb21lcyBzcGVjaWFsOiBzdWNoIHBhZ2VzIGFyZSBt
YXJrZWQKKyAqIGFzIGRpc3RpbmN0IGZyb20gbm9ybWFsIHBhZ2VzLiBBcyBzdWNoLCB0aGUgbmV3
IHB1dF91c2VyX3BhZ2UoKSBjYWxsIChhbmQKKyAqIGl0cyB2YXJpYW50cykgbXVzdCBiZSB1c2Vk
IGluIG9yZGVyIHRvIHJlbGVhc2UgZ3VwLXBpbm5lZCBwYWdlcy4KKyAqCisgKiBDaG9pY2Ugb2Yg
dmFsdWU6CiAgKgotICogUGFnZXMgdGhhdCB3ZXJlIHBpbm5lZCB2aWEgZWl0aGVyIHBpbl91c2Vy
X3BhZ2VzKigpIG9yIHBpbl9sb25ndGVybV9wYWdlcyooKQotICogbXVzdCBiZSByZWxlYXNlZCB2
aWEgZWl0aGVyIHB1dF91c2VyX3BhZ2UoKSwgb3Igb25lIG9mIHRoZSBwdXRfdXNlcl9wYWdlcyoo
KQotICogcm91dGluZXMuIFRoaXMgaXMgc28gdGhhdCBldmVudHVhbGx5IHN1Y2ggcGFnZXMgY2Fu
IGJlIHNlcGFyYXRlbHkgdHJhY2tlZCBhbmQKLSAqIHVuaXF1ZWx5IGhhbmRsZWQuIEluIHBhcnRp
Y3VsYXIsIGludGVyYWN0aW9ucyB3aXRoIFJETUEgYW5kIGZpbGVzeXN0ZW1zIG5lZWQKLSAqIHNw
ZWNpYWwgaGFuZGxpbmcuCisgKiBCeSBtYWtpbmcgR1VQX1BJTl9DT1VOVElOR19CSUFTIGEgcG93
ZXIgb2YgdHdvLCBkZWJ1Z2dpbmcgb2YgcGFnZSByZWZlcmVuY2UKKyAqIGNvdW50cyB3aXRoIHJl
c3BlY3QgdG8gZ2V0X3VzZXJfcGFnZXMoKSBhbmQgcHV0X3VzZXJfcGFnZSgpIGJlY29tZXMgc2lt
cGxlciwKKyAqIGR1ZSB0byB0aGUgZmFjdCB0aGF0IGFkZGluZyBhbiBldmVuIHBvd2VyIG9mIHR3
byB0byB0aGUgcGFnZSByZWZjb3VudCBoYXMKKyAqIHRoZSBlZmZlY3Qgb2YgdXNpbmcgb25seSB0
aGUgdXBwZXIgTiBiaXRzLCBmb3IgdGhlIGNvZGUgdGhhdCBjb3VudHMgdXAgdXNpbmcKKyAqIHRo
ZSBiaWFzIHZhbHVlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGxvd2VyIGJpdHMgYXJlIGxlZnQgZm9y
IHRoZSBleGNsdXNpdmUKKyAqIHVzZSBvZiB0aGUgb3JpZ2luYWwgY29kZSB0aGF0IGluY3JlbWVu
dHMgYW5kIGRlY3JlbWVudHMgYnkgb25lIChvciBhdCBsZWFzdCwKKyAqIGJ5IG11Y2ggc21hbGxl
ciB2YWx1ZXMgdGhhbiB0aGUgYmlhcyB2YWx1ZSkuCiAgKgotICogcHV0X3VzZXJfcGFnZSgpIGFu
ZCBwdXRfcGFnZSgpIGFyZSBub3QgaW50ZXJjaGFuZ2VhYmxlLCBkZXNwaXRlIHRoaXMgZWFybHkK
LSAqIGltcGxlbWVudGF0aW9uIHRoYXQgbWFrZXMgdGhlbSBsb29rIHRoZSBzYW1lLiBwdXRfdXNl
cl9wYWdlKCkgY2FsbHMgbXVzdAotICogYmUgcGVyZmVjdGx5IG1hdGNoZWQgdXAgd2l0aCBwaW4q
KCkgY2FsbHMuCisgKiBPZiBjb3Vyc2UsIG9uY2UgdGhlIGxvd2VyIGJpdHMgb3ZlcmZsb3cgaW50
byB0aGUgdXBwZXIgYml0cyAoYW5kIHRoaXMgaXMKKyAqIE9LLCBiZWNhdXNlIHN1YnRyYWN0aW9u
IHJlY292ZXJzIHRoZSBvcmlnaW5hbCB2YWx1ZXMpLCB0aGVuIHZpc3VhbCBpbnNwZWN0aW9uCisg
KiBubyBsb25nZXIgc3VmZmljZXMgdG8gZGlyZWN0bHkgdmlldyB0aGUgc2VwYXJhdGUgY291bnRz
LiBIb3dldmVyLCBmb3Igbm9ybWFsCisgKiBhcHBsaWNhdGlvbnMgdGhhdCBkb24ndCBoYXZlIGh1
Z2UgcGFnZSByZWZlcmVuY2UgY291bnRzLCB0aGlzIHdvbid0IGJlIGFuCisgKiBpc3N1ZS4KKyAq
CisgKiBMb2NraW5nOiB0aGUgbG9ja2xlc3MgYWxnb3JpdGhtIGRlc2NyaWJlZCBpbiBwYWdlX2Nh
Y2hlX2dldF9zcGVjdWxhdGl2ZSgpCisgKiBhbmQgcGFnZV9jYWNoZV9ndXBfcGluX3NwZWN1bGF0
aXZlKCkgcHJvdmlkZXMgc2FmZSBvcGVyYXRpb24gZm9yCisgKiBnZXRfdXNlcl9wYWdlcyBhbmQg
cGFnZV9ta2NsZWFuIGFuZCBvdGhlciBjYWxscyB0aGF0IHJhY2UgdG8gc2V0IHVwIHBhZ2UKKyAq
IHRhYmxlIGVudHJpZXMuCiAgKi8KLXN0YXRpYyBpbmxpbmUgdm9pZCBwdXRfdXNlcl9wYWdlKHN0
cnVjdCBwYWdlICpwYWdlKQotewotCXB1dF9wYWdlKHBhZ2UpOwotfQorI2RlZmluZSBHVVBfUElO
X0NPVU5USU5HX0JJQVMgKDFVTCA8PCAxMCkKIAordm9pZCBwdXRfdXNlcl9wYWdlKHN0cnVjdCBw
YWdlICpwYWdlKTsKIHZvaWQgcHV0X3VzZXJfcGFnZXNfZGlydHlfbG9jayhzdHJ1Y3QgcGFnZSAq
KnBhZ2VzLCB1bnNpZ25lZCBsb25nIG5wYWdlcywKIAkJCSAgICAgICBib29sIG1ha2VfZGlydHkp
OwotCiB2b2lkIHB1dF91c2VyX3BhZ2VzKHN0cnVjdCBwYWdlICoqcGFnZXMsIHVuc2lnbmVkIGxv
bmcgbnBhZ2VzKTsKIAorLyoqCisgKiBwYWdlX2RtYV9waW5uZWQoKSAtIHJlcG9ydCBpZiBhIHBh
Z2UgaXMgcGlubmVkIGZvciBETUEuCisgKgorICogVGhpcyBmdW5jdGlvbiBjaGVja3MgaWYgYSBw
YWdlIGhhcyBiZWVuIHBpbm5lZCB2aWEgYSBjYWxsIHRvCisgKiBwaW5fdXNlcl9wYWdlcyooKSBv
ciBwaW5fbG9uZ3Rlcm1fcGFnZXMqKCkuCisgKgorICogVGhlIHJldHVybiB2YWx1ZSBpcyBwYXJ0
aWFsbHkgZnV6enk6IGZhbHNlIGlzIG5vdCBmdXp6eSwgYmVjYXVzZSBpdCBtZWFucworICogImRl
ZmluaXRlbHkgbm90IHBpbm5lZCBmb3IgRE1BIiwgYnV0IHRydWUgbWVhbnMgInByb2JhYmx5IHBp
bm5lZCBmb3IgRE1BLCBidXQKKyAqIHBvc3NpYmx5IGEgZmFsc2UgcG9zaXRpdmUgZHVlIHRvIGhh
dmluZyBhdCBsZWFzdCBHVVBfUElOX0NPVU5USU5HX0JJQVMgd29ydGgKKyAqIG9mIG5vcm1hbCBw
YWdlIHJlZmVyZW5jZXMiLgorICoKKyAqIEZhbHNlIHBvc2l0aXZlcyBhcmUgT0ssIGJlY2F1c2U6
IGEpIGl0J3MgdW5saWtlbHkgZm9yIGEgcGFnZSB0byBnZXQgdGhhdCBtYW55CisgKiByZWZjb3Vu
dHMsIGFuZCBiKSBhbGwgdGhlIGNhbGxlcnMgb2YgdGhpcyByb3V0aW5lIGFyZSBleHBlY3RlZCB0
byBiZSBhYmxlIHRvCisgKiBkZWFsIGdyYWNlZnVsbHkgd2l0aCBhIGZhbHNlIHBvc2l0aXZlLgor
ICoKKyAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBwbGVhc2Ugc2VlIERvY3VtZW50YXRpb24vdm0v
cGluX3VzZXJfcGFnZXMucnN0LgorICoKKyAqIEBwYWdlOglwb2ludGVyIHRvIHBhZ2UgdG8gYmUg
cXVlcmllZC4KKyAqIEBSZXR1cm46CVRydWUsIGlmIGl0IGlzIGxpa2VseSB0aGF0IHRoZSBwYWdl
IGhhcyBiZWVuICJkbWEtcGlubmVkIi4KKyAqCQlGYWxzZSwgaWYgdGhlIHBhZ2UgaXMgZGVmaW5p
dGVseSBub3QgZG1hLXBpbm5lZC4KKyAqLworc3RhdGljIGlubGluZSBib29sIHBhZ2VfZG1hX3Bp
bm5lZChzdHJ1Y3QgcGFnZSAqcGFnZSkKK3sKKwlyZXR1cm4gKHBhZ2VfcmVmX2NvdW50KGNvbXBv
dW5kX2hlYWQocGFnZSkpKSA+PSBHVVBfUElOX0NPVU5USU5HX0JJQVM7Cit9CisKICNpZiBkZWZp
bmVkKENPTkZJR19TUEFSU0VNRU0pICYmICFkZWZpbmVkKENPTkZJR19TUEFSU0VNRU1fVk1FTU1B
UCkKICNkZWZpbmUgU0VDVElPTl9JTl9QQUdFX0ZMQUdTCiAjZW5kaWYKZGlmZiAtLWdpdCBhL2lu
Y2x1ZGUvbGludXgvbW16b25lLmggYi9pbmNsdWRlL2xpbnV4L21tem9uZS5oCmluZGV4IGJkYTIw
MjgyNzQ2Yi4uMDQ4NWNiYTM4ZDIzIDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4L21tem9uZS5o
CisrKyBiL2luY2x1ZGUvbGludXgvbW16b25lLmgKQEAgLTI0NCw2ICsyNDQsOCBAQCBlbnVtIG5v
ZGVfc3RhdF9pdGVtIHsKIAlOUl9ESVJUSUVELAkJLyogcGFnZSBkaXJ0eWluZ3Mgc2luY2UgYm9v
dHVwICovCiAJTlJfV1JJVFRFTiwJCS8qIHBhZ2Ugd3JpdGluZ3Mgc2luY2UgYm9vdHVwICovCiAJ
TlJfS0VSTkVMX01JU0NfUkVDTEFJTUFCTEUsCS8qIHJlY2xhaW1hYmxlIG5vbi1zbGFiIGtlcm5l
bCBwYWdlcyAqLworCU5SX0ZPTExfUElOX1JFUVVFU1RFRCwJLyogdmlhOiBwaW5fdXNlcl9wYWdl
KCksIGd1cCBmbGFnOiBGT0xMX1BJTiAqLworCU5SX0ZPTExfUElOX1JFVFVSTkVELAkvKiBwYWdl
cyByZXR1cm5lZCB2aWEgcHV0X3VzZXJfcGFnZSgpICovCiAJTlJfVk1fTk9ERV9TVEFUX0lURU1T
CiB9OwogCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L3BhZ2VfcmVmLmggYi9pbmNsdWRlL2xp
bnV4L3BhZ2VfcmVmLmgKaW5kZXggMTRkMTRiZWIxZjdmLi5iOWNiZTU1M2QxZTcgMTAwNjQ0Ci0t
LSBhL2luY2x1ZGUvbGludXgvcGFnZV9yZWYuaAorKysgYi9pbmNsdWRlL2xpbnV4L3BhZ2VfcmVm
LmgKQEAgLTEwMiw2ICsxMDIsMTYgQEAgc3RhdGljIGlubGluZSB2b2lkIHBhZ2VfcmVmX3N1Yihz
dHJ1Y3QgcGFnZSAqcGFnZSwgaW50IG5yKQogCQlfX3BhZ2VfcmVmX21vZChwYWdlLCAtbnIpOwog
fQogCitzdGF0aWMgaW5saW5lIGludCBwYWdlX3JlZl9zdWJfcmV0dXJuKHN0cnVjdCBwYWdlICpw
YWdlLCBpbnQgbnIpCit7CisJaW50IHJldCA9IGF0b21pY19zdWJfcmV0dXJuKG5yLCAmcGFnZS0+
X3JlZmNvdW50KTsKKworCWlmIChwYWdlX3JlZl90cmFjZXBvaW50X2FjdGl2ZShfX3RyYWNlcG9p
bnRfcGFnZV9yZWZfbW9kKSkKKwkJX19wYWdlX3JlZl9tb2QocGFnZSwgLW5yKTsKKworCXJldHVy
biByZXQ7Cit9CisKIHN0YXRpYyBpbmxpbmUgdm9pZCBwYWdlX3JlZl9pbmMoc3RydWN0IHBhZ2Ug
KnBhZ2UpCiB7CiAJYXRvbWljX2luYygmcGFnZS0+X3JlZmNvdW50KTsKZGlmZiAtLWdpdCBhL21t
L2d1cC5jIGIvbW0vZ3VwLmMKaW5kZXggNDQwOWU4NGRmZjUxLi44MmU3ZTRjZTUwMjcgMTAwNjQ0
Ci0tLSBhL21tL2d1cC5jCisrKyBiL21tL2d1cC5jCkBAIC01MSw2ICs1MSw5NCBAQCBzdGF0aWMg
aW5saW5lIHN0cnVjdCBwYWdlICp0cnlfZ2V0X2NvbXBvdW5kX2hlYWQoc3RydWN0IHBhZ2UgKnBh
Z2UsIGludCByZWZzKQogCXJldHVybiBoZWFkOwogfQogCisjaWZkZWYgQ09ORklHX0RFQlVHX1ZN
CitzdGF0aWMgaW5saW5lIHZvaWQgX191cGRhdGVfcHJvY192bXN0YXQoc3RydWN0IHBhZ2UgKnBh
Z2UsCisJCQkJCWVudW0gbm9kZV9zdGF0X2l0ZW0gaXRlbSwgaW50IGNvdW50KQoreworCW1vZF9u
b2RlX3BhZ2Vfc3RhdGUocGFnZV9wZ2RhdChwYWdlKSwgaXRlbSwgY291bnQpOworfQorI2Vsc2UK
K3N0YXRpYyBpbmxpbmUgdm9pZCBfX3VwZGF0ZV9wcm9jX3Ztc3RhdChzdHJ1Y3QgcGFnZSAqcGFn
ZSwKKwkJCQkJZW51bSBub2RlX3N0YXRfaXRlbSBpdGVtLCBpbnQgY291bnQpCit7Cit9CisjZW5k
aWYKKworLyoqCisgKiB1c2VyX3BhZ2VfcmVmX2luYygpIC0gbWFyayBhIHBhZ2UgYXMgYmVpbmcg
dXNlZCBieSBnZXRfdXNlcl9wYWdlcyhGT0xMX1BJTikuCisgKgorICogQHBhZ2U6CXBvaW50ZXIg
dG8gcGFnZSB0byBiZSBtYXJrZWQKKyAqIEBSZXR1cm46CXRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNl
IGZvciBmYWlsdXJlCisgKi8KK19fbXVzdF9jaGVjayBib29sIHVzZXJfcGFnZV9yZWZfaW5jKHN0
cnVjdCBwYWdlICpwYWdlKQoreworCXBhZ2UgPSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQocGFnZSwg
R1VQX1BJTl9DT1VOVElOR19CSUFTKTsKKwlpZiAoIXBhZ2UpCisJCXJldHVybiBmYWxzZTsKKwor
CV9fdXBkYXRlX3Byb2Nfdm1zdGF0KHBhZ2UsIE5SX0ZPTExfUElOX1JFUVVFU1RFRCwgMSk7CisJ
cmV0dXJuIHRydWU7Cit9CisKKyNpZmRlZiBDT05GSUdfREVWX1BBR0VNQVBfT1BTCitzdGF0aWMg
Ym9vbCBfX3B1dF9kZXZtYXBfbWFuYWdlZF91c2VyX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2UpCit7
CisJYm9vbCBpc19kZXZtYXAgPSBwYWdlX2lzX2Rldm1hcF9tYW5hZ2VkKHBhZ2UpOworCisJaWYg
KGlzX2Rldm1hcCkgeworCQlpbnQgY291bnQgPSBwYWdlX3JlZl9zdWJfcmV0dXJuKHBhZ2UsIEdV
UF9QSU5fQ09VTlRJTkdfQklBUyk7CisKKwkJX191cGRhdGVfcHJvY192bXN0YXQocGFnZSwgTlJf
Rk9MTF9QSU5fUkVUVVJORUQsIDEpOworCQkvKgorCQkgKiBkZXZtYXAgcGFnZSByZWZjb3VudHMg
YXJlIDEtYmFzZWQsIHJhdGhlciB0aGFuIDAtYmFzZWQ6IGlmCisJCSAqIHJlZmNvdW50IGlzIDEs
IHRoZW4gdGhlIHBhZ2UgaXMgZnJlZSBhbmQgdGhlIHJlZmNvdW50IGlzCisJCSAqIHN0YWJsZSBi
ZWNhdXNlIG5vYm9keSBob2xkcyBhIHJlZmVyZW5jZSBvbiB0aGUgcGFnZS4KKwkJICovCisJCWlm
IChjb3VudCA9PSAxKQorCQkJZnJlZV9kZXZtYXBfbWFuYWdlZF9wYWdlKHBhZ2UpOworCQllbHNl
IGlmICghY291bnQpCisJCQlfX3B1dF9wYWdlKHBhZ2UpOworCX0KKworCXJldHVybiBpc19kZXZt
YXA7Cit9CisjZWxzZQorc3RhdGljIGJvb2wgX19wdXRfZGV2bWFwX21hbmFnZWRfdXNlcl9wYWdl
KHN0cnVjdCBwYWdlICpwYWdlKQoreworCXJldHVybiBmYWxzZTsKK30KKyNlbmRpZiAvKiBDT05G
SUdfREVWX1BBR0VNQVBfT1BTICovCisKKy8qKgorICogcHV0X3VzZXJfcGFnZSgpIC0gcmVsZWFz
ZSBhIGRtYS1waW5uZWQgcGFnZQorICogQHBhZ2U6ICAgICAgICAgICAgcG9pbnRlciB0byBwYWdl
IHRvIGJlIHJlbGVhc2VkCisgKgorICogUGFnZXMgdGhhdCB3ZXJlIHBpbm5lZCB2aWEgZWl0aGVy
IHBpbl91c2VyX3BhZ2VzKigpIG9yIHBpbl9sb25ndGVybV9wYWdlcyooKQorICogbXVzdCBiZSBy
ZWxlYXNlZCB2aWEgZWl0aGVyIHB1dF91c2VyX3BhZ2UoKSwgb3Igb25lIG9mIHRoZSBwdXRfdXNl
cl9wYWdlcyooKQorICogcm91dGluZXMuIFRoaXMgaXMgc28gdGhhdCBzdWNoIHBhZ2VzIGNhbiBi
ZSBzZXBhcmF0ZWx5IHRyYWNrZWQgYW5kIHVuaXF1ZWx5CisgKiBoYW5kbGVkLiBJbiBwYXJ0aWN1
bGFyLCBpbnRlcmFjdGlvbnMgd2l0aCBSRE1BIGFuZCBmaWxlc3lzdGVtcyBuZWVkIHNwZWNpYWwK
KyAqIGhhbmRsaW5nLgorICovCit2b2lkIHB1dF91c2VyX3BhZ2Uoc3RydWN0IHBhZ2UgKnBhZ2Up
Cit7CisJcGFnZSA9IGNvbXBvdW5kX2hlYWQocGFnZSk7CisKKwkvKgorCSAqIEZvciBkZXZtYXAg
bWFuYWdlZCBwYWdlcyB3ZSBuZWVkIHRvIGNhdGNoIHJlZmNvdW50IHRyYW5zaXRpb24gZnJvbQor
CSAqIEdVUF9QSU5fQ09VTlRJTkdfQklBUyB0byAxLCB3aGVuIHJlZmNvdW50IHJlYWNoIG9uZSBp
dCBtZWFucyB0aGUKKwkgKiBwYWdlIGlzIGZyZWUgYW5kIHdlIG5lZWQgdG8gaW5mb3JtIHRoZSBk
ZXZpY2UgZHJpdmVyIHRocm91Z2gKKwkgKiBjYWxsYmFjay4gU2VlIGluY2x1ZGUvbGludXgvbWVt
cmVtYXAuaCBhbmQgSE1NIGZvciBkZXRhaWxzLgorCSAqLworCWlmIChfX3B1dF9kZXZtYXBfbWFu
YWdlZF91c2VyX3BhZ2UocGFnZSkpCisJCXJldHVybjsKKworCWlmIChwYWdlX3JlZl9zdWJfYW5k
X3Rlc3QocGFnZSwgR1VQX1BJTl9DT1VOVElOR19CSUFTKSkKKwkJX19wdXRfcGFnZShwYWdlKTsK
KworCV9fdXBkYXRlX3Byb2Nfdm1zdGF0KHBhZ2UsIE5SX0ZPTExfUElOX1JFVFVSTkVELCAxKTsK
K30KK0VYUE9SVF9TWU1CT0wocHV0X3VzZXJfcGFnZSk7CisKIC8qKgogICogcHV0X3VzZXJfcGFn
ZXNfZGlydHlfbG9jaygpIC0gcmVsZWFzZSBhbmQgb3B0aW9uYWxseSBkaXJ0eSBndXAtcGlubmVk
IHBhZ2VzCiAgKiBAcGFnZXM6ICBhcnJheSBvZiBwYWdlcyB0byBiZSBtYXliZSBtYXJrZWQgZGly
dHksIGFuZCBkZWZpbml0ZWx5IHJlbGVhc2VkLgpAQCAtMjM3LDEwICszMjUsMTEgQEAgc3RhdGlj
IHN0cnVjdCBwYWdlICpmb2xsb3dfcGFnZV9wdGUoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEs
CiAJfQogCiAJcGFnZSA9IHZtX25vcm1hbF9wYWdlKHZtYSwgYWRkcmVzcywgcHRlKTsKLQlpZiAo
IXBhZ2UgJiYgcHRlX2Rldm1hcChwdGUpICYmIChmbGFncyAmIEZPTExfR0VUKSkgeworCWlmICgh
cGFnZSAmJiBwdGVfZGV2bWFwKHB0ZSkgJiYgKGZsYWdzICYgKEZPTExfR0VUIHwgRk9MTF9QSU4p
KSkgewogCQkvKgotCQkgKiBPbmx5IHJldHVybiBkZXZpY2UgbWFwcGluZyBwYWdlcyBpbiB0aGUg
Rk9MTF9HRVQgY2FzZSBzaW5jZQotCQkgKiB0aGV5IGFyZSBvbmx5IHZhbGlkIHdoaWxlIGhvbGRp
bmcgdGhlIHBnbWFwIHJlZmVyZW5jZS4KKwkJICogT25seSByZXR1cm4gZGV2aWNlIG1hcHBpbmcg
cGFnZXMgaW4gdGhlIEZPTExfR0VUIG9yIEZPTExfUElOCisJCSAqIGNhc2Ugc2luY2UgdGhleSBh
cmUgb25seSB2YWxpZCB3aGlsZSBob2xkaW5nIHRoZSBwZ21hcAorCQkgKiByZWZlcmVuY2UuCiAJ
CSAqLwogCQkqcGdtYXAgPSBnZXRfZGV2X3BhZ2VtYXAocHRlX3BmbihwdGUpLCAqcGdtYXApOwog
CQlpZiAoKnBnbWFwKQpAQCAtMjgzLDYgKzM3MiwxMSBAQCBzdGF0aWMgc3RydWN0IHBhZ2UgKmZv
bGxvd19wYWdlX3B0ZShzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwKIAkJCXBhZ2UgPSBFUlJf
UFRSKC1FTk9NRU0pOwogCQkJZ290byBvdXQ7CiAJCX0KKwl9IGVsc2UgaWYgKGZsYWdzICYgRk9M
TF9QSU4pIHsKKwkJaWYgKHVubGlrZWx5KCF1c2VyX3BhZ2VfcmVmX2luYyhwYWdlKSkpIHsKKwkJ
CXBhZ2UgPSBFUlJfUFRSKC1FTk9NRU0pOworCQkJZ290byBvdXQ7CisJCX0KIAl9CiAJaWYgKGZs
YWdzICYgRk9MTF9UT1VDSCkgewogCQlpZiAoKGZsYWdzICYgRk9MTF9XUklURSkgJiYKQEAgLTU0
NCw4ICs2MzgsOCBAQCBzdGF0aWMgc3RydWN0IHBhZ2UgKmZvbGxvd19wYWdlX21hc2soc3RydWN0
IHZtX2FyZWFfc3RydWN0ICp2bWEsCiAJLyogbWFrZSB0aGlzIGhhbmRsZSBodWdlcGQgKi8KIAlw
YWdlID0gZm9sbG93X2h1Z2VfYWRkcihtbSwgYWRkcmVzcywgZmxhZ3MgJiBGT0xMX1dSSVRFKTsK
IAlpZiAoIUlTX0VSUihwYWdlKSkgewotCQlCVUdfT04oZmxhZ3MgJiBGT0xMX0dFVCk7Ci0JCXJl
dHVybiBwYWdlOworCQlXQVJOX09OX09OQ0UoZmxhZ3MgJiAoRk9MTF9HRVQgfCBGT0xMX1BJTikp
OworCQlyZXR1cm4gTlVMTDsKIAl9CiAKIAlwZ2QgPSBwZ2Rfb2Zmc2V0KG1tLCBhZGRyZXNzKTsK
QEAgLTE4NDQsMTMgKzE5MzgsMTcgQEAgc3RhdGljIGlubGluZSBwdGVfdCBndXBfZ2V0X3B0ZShw
dGVfdCAqcHRlcCkKICNlbmRpZiAvKiBDT05GSUdfR1VQX0dFVF9QVEVfTE9XX0hJR0ggKi8KIAog
c3RhdGljIHZvaWQgX19tYXliZV91bnVzZWQgdW5kb19kZXZfcGFnZW1hcChpbnQgKm5yLCBpbnQg
bnJfc3RhcnQsCisJCQkJCSAgICB1bnNpZ25lZCBpbnQgZmxhZ3MsCiAJCQkJCSAgICBzdHJ1Y3Qg
cGFnZSAqKnBhZ2VzKQogewogCXdoaWxlICgoKm5yKSAtIG5yX3N0YXJ0KSB7CiAJCXN0cnVjdCBw
YWdlICpwYWdlID0gcGFnZXNbLS0oKm5yKV07CiAKIAkJQ2xlYXJQYWdlUmVmZXJlbmNlZChwYWdl
KTsKLQkJcHV0X3BhZ2UocGFnZSk7CisJCWlmIChmbGFncyAmIEZPTExfUElOKQorCQkJcHV0X3Vz
ZXJfcGFnZShwYWdlKTsKKwkJZWxzZQorCQkJcHV0X3BhZ2UocGFnZSk7CiAJfQogfQogCkBAIC0x
ODgzLDcgKzE5ODEsNyBAQCBzdGF0aWMgaW50IGd1cF9wdGVfcmFuZ2UocG1kX3QgcG1kLCB1bnNp
Z25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAogCiAJCQlwZ21hcCA9IGdldF9kZXZf
cGFnZW1hcChwdGVfcGZuKHB0ZSksIHBnbWFwKTsKIAkJCWlmICh1bmxpa2VseSghcGdtYXApKSB7
Ci0JCQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIHBhZ2VzKTsKKwkJCQl1bmRvX2Rl
dl9wYWdlbWFwKG5yLCBucl9zdGFydCwgZmxhZ3MsIHBhZ2VzKTsKIAkJCQlnb3RvIHB0ZV91bm1h
cDsKIAkJCX0KIAkJfSBlbHNlIGlmIChwdGVfc3BlY2lhbChwdGUpKQpAQCAtMTg5Miw5ICsxOTkw
LDE1IEBAIHN0YXRpYyBpbnQgZ3VwX3B0ZV9yYW5nZShwbWRfdCBwbWQsIHVuc2lnbmVkIGxvbmcg
YWRkciwgdW5zaWduZWQgbG9uZyBlbmQsCiAJCVZNX0JVR19PTighcGZuX3ZhbGlkKHB0ZV9wZm4o
cHRlKSkpOwogCQlwYWdlID0gcHRlX3BhZ2UocHRlKTsKIAotCQloZWFkID0gdHJ5X2dldF9jb21w
b3VuZF9oZWFkKHBhZ2UsIDEpOwotCQlpZiAoIWhlYWQpCi0JCQlnb3RvIHB0ZV91bm1hcDsKKwkJ
aWYgKGZsYWdzICYgRk9MTF9QSU4pIHsKKwkJCWhlYWQgPSBwYWdlOworCQkJaWYgKHVubGlrZWx5
KCF1c2VyX3BhZ2VfcmVmX2luYyhoZWFkKSkpCisJCQkJZ290byBwdGVfdW5tYXA7CisJCX0gZWxz
ZSB7CisJCQloZWFkID0gdHJ5X2dldF9jb21wb3VuZF9oZWFkKHBhZ2UsIDEpOworCQkJaWYgKCFo
ZWFkKQorCQkJCWdvdG8gcHRlX3VubWFwOworCQl9CiAKIAkJaWYgKHVubGlrZWx5KHB0ZV92YWwo
cHRlKSAhPSBwdGVfdmFsKCpwdGVwKSkpIHsKIAkJCXB1dF9wYWdlKGhlYWQpOwpAQCAtMTk0OCwx
MiArMjA1MiwyMCBAQCBzdGF0aWMgaW50IF9fZ3VwX2RldmljZV9odWdlKHVuc2lnbmVkIGxvbmcg
cGZuLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAKIAkJcGdtYXAgPSBnZXRfZGV2X3BhZ2VtYXAocGZu
LCBwZ21hcCk7CiAJCWlmICh1bmxpa2VseSghcGdtYXApKSB7Ci0JCQl1bmRvX2Rldl9wYWdlbWFw
KG5yLCBucl9zdGFydCwgcGFnZXMpOworCQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQs
IGZsYWdzLCBwYWdlcyk7CiAJCQlyZXR1cm4gMDsKIAkJfQogCQlTZXRQYWdlUmVmZXJlbmNlZChw
YWdlKTsKIAkJcGFnZXNbKm5yXSA9IHBhZ2U7Ci0JCWdldF9wYWdlKHBhZ2UpOworCisJCWlmIChm
bGFncyAmIEZPTExfUElOKSB7CisJCQlpZiAodW5saWtlbHkoIXVzZXJfcGFnZV9yZWZfaW5jKHBh
Z2UpKSkgeworCQkJCXVuZG9fZGV2X3BhZ2VtYXAobnIsIG5yX3N0YXJ0LCBmbGFncywgcGFnZXMp
OworCQkJCXJldHVybiAwOworCQkJfQorCQl9IGVsc2UKKwkJCWdldF9wYWdlKHBhZ2UpOworCiAJ
CSgqbnIpKys7CiAJCXBmbisrOwogCX0gd2hpbGUgKGFkZHIgKz0gUEFHRV9TSVpFLCBhZGRyICE9
IGVuZCk7CkBAIC0xOTc1LDcgKzIwODcsNyBAQCBzdGF0aWMgaW50IF9fZ3VwX2RldmljZV9odWdl
X3BtZChwbWRfdCBvcmlnLCBwbWRfdCAqcG1kcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCQlyZXR1
cm4gMDsKIAogCWlmICh1bmxpa2VseShwbWRfdmFsKG9yaWcpICE9IHBtZF92YWwoKnBtZHApKSkg
ewotCQl1bmRvX2Rldl9wYWdlbWFwKG5yLCBucl9zdGFydCwgcGFnZXMpOworCQl1bmRvX2Rldl9w
YWdlbWFwKG5yLCBucl9zdGFydCwgZmxhZ3MsIHBhZ2VzKTsKIAkJcmV0dXJuIDA7CiAJfQogCXJl
dHVybiAxOwpAQCAtMTk5Myw3ICsyMTA1LDcgQEAgc3RhdGljIGludCBfX2d1cF9kZXZpY2VfaHVn
ZV9wdWQocHVkX3Qgb3JpZywgcHVkX3QgKnB1ZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkJcmV0
dXJuIDA7CiAKIAlpZiAodW5saWtlbHkocHVkX3ZhbChvcmlnKSAhPSBwdWRfdmFsKCpwdWRwKSkp
IHsKLQkJdW5kb19kZXZfcGFnZW1hcChuciwgbnJfc3RhcnQsIHBhZ2VzKTsKKwkJdW5kb19kZXZf
cGFnZW1hcChuciwgbnJfc3RhcnQsIGZsYWdzLCBwYWdlcyk7CiAJCXJldHVybiAwOwogCX0KIAly
ZXR1cm4gMTsKQEAgLTIwNzcsOSArMjE4OSwxNiBAQCBzdGF0aWMgaW50IGd1cF9odWdlcHRlKHB0
ZV90ICpwdGVwLCB1bnNpZ25lZCBsb25nIHN6LCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJcGFnZSA9
IGhlYWQgKyAoKGFkZHIgJiAoc3otMSkpID4+IFBBR0VfU0hJRlQpOwogCXJlZnMgPSBfX3JlY29y
ZF9zdWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2VzLCAqbnIpOwogCi0JaGVhZCA9IHRyeV9n
ZXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZzKTsKLQlpZiAoIWhlYWQpCi0JCXJldHVybiAwOwor
CWlmIChmbGFncyAmIEZPTExfUElOKSB7CisJCWhlYWQgPSBwYWdlOworCQlpZiAodW5saWtlbHko
IXVzZXJfcGFnZV9yZWZfaW5jKGhlYWQpKSkKKwkJCXJldHVybiAwOworCQloZWFkID0gcGFnZTsK
Kwl9IGVsc2UgeworCQloZWFkID0gdHJ5X2dldF9jb21wb3VuZF9oZWFkKGhlYWQsIHJlZnMpOwor
CQlpZiAoIWhlYWQpCisJCQlyZXR1cm4gMDsKKwl9CiAKIAlpZiAodW5saWtlbHkocHRlX3ZhbChw
dGUpICE9IHB0ZV92YWwoKnB0ZXApKSkgewogCQlwdXRfY29tcG91bmRfaGVhZChoZWFkLCByZWZz
KTsKQEAgLTIxMzYsOSArMjI1NSwxNSBAQCBzdGF0aWMgaW50IGd1cF9odWdlX3BtZChwbWRfdCBv
cmlnLCBwbWRfdCAqcG1kcCwgdW5zaWduZWQgbG9uZyBhZGRyLAogCXBhZ2UgPSBwbWRfcGFnZShv
cmlnKSArICgoYWRkciAmIH5QTURfTUFTSykgPj4gUEFHRV9TSElGVCk7CiAJcmVmcyA9IF9fcmVj
b3JkX3N1YnBhZ2VzKHBhZ2UsIGFkZHIsIGVuZCwgcGFnZXMsICpucik7CiAKLQloZWFkID0gdHJ5
X2dldF9jb21wb3VuZF9oZWFkKHBtZF9wYWdlKG9yaWcpLCByZWZzKTsKLQlpZiAoIWhlYWQpCi0J
CXJldHVybiAwOworCWlmIChmbGFncyAmIEZPTExfUElOKSB7CisJCWhlYWQgPSBwYWdlOworCQlp
ZiAodW5saWtlbHkoIXVzZXJfcGFnZV9yZWZfaW5jKGhlYWQpKSkKKwkJCXJldHVybiAwOworCX0g
ZWxzZSB7CisJCWhlYWQgPSB0cnlfZ2V0X2NvbXBvdW5kX2hlYWQocG1kX3BhZ2Uob3JpZyksIHJl
ZnMpOworCQlpZiAoIWhlYWQpCisJCQlyZXR1cm4gMDsKKwl9CiAKIAlpZiAodW5saWtlbHkocG1k
X3ZhbChvcmlnKSAhPSBwbWRfdmFsKCpwbWRwKSkpIHsKIAkJcHV0X2NvbXBvdW5kX2hlYWQoaGVh
ZCwgcmVmcyk7CkBAIC0yMTY5LDkgKzIyOTQsMTUgQEAgc3RhdGljIGludCBndXBfaHVnZV9wdWQo
cHVkX3Qgb3JpZywgcHVkX3QgKnB1ZHAsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlwYWdlID0gcHVk
X3BhZ2Uob3JpZykgKyAoKGFkZHIgJiB+UFVEX01BU0spID4+IFBBR0VfU0hJRlQpOwogCXJlZnMg
PSBfX3JlY29yZF9zdWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2VzLCAqbnIpOwogCi0JaGVh
ZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwdWRfcGFnZShvcmlnKSwgcmVmcyk7Ci0JaWYgKCFo
ZWFkKQotCQlyZXR1cm4gMDsKKwlpZiAoZmxhZ3MgJiBGT0xMX1BJTikgeworCQloZWFkID0gcGFn
ZTsKKwkJaWYgKHVubGlrZWx5KCF1c2VyX3BhZ2VfcmVmX2luYyhoZWFkKSkpCisJCQlyZXR1cm4g
MDsKKwl9IGVsc2UgeworCQloZWFkID0gdHJ5X2dldF9jb21wb3VuZF9oZWFkKHB1ZF9wYWdlKG9y
aWcpLCByZWZzKTsKKwkJaWYgKCFoZWFkKQorCQkJcmV0dXJuIDA7CisJfQogCiAJaWYgKHVubGlr
ZWx5KHB1ZF92YWwob3JpZykgIT0gcHVkX3ZhbCgqcHVkcCkpKSB7CiAJCXB1dF9jb21wb3VuZF9o
ZWFkKGhlYWQsIHJlZnMpOwpAQCAtMjE5Nyw5ICsyMzI4LDE1IEBAIHN0YXRpYyBpbnQgZ3VwX2h1
Z2VfcGdkKHBnZF90IG9yaWcsIHBnZF90ICpwZ2RwLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJcGFn
ZSA9IHBnZF9wYWdlKG9yaWcpICsgKChhZGRyICYgflBHRElSX01BU0spID4+IFBBR0VfU0hJRlQp
OwogCXJlZnMgPSBfX3JlY29yZF9zdWJwYWdlcyhwYWdlLCBhZGRyLCBlbmQsIHBhZ2VzLCAqbnIp
OwogCi0JaGVhZCA9IHRyeV9nZXRfY29tcG91bmRfaGVhZChwZ2RfcGFnZShvcmlnKSwgcmVmcyk7
Ci0JaWYgKCFoZWFkKQotCQlyZXR1cm4gMDsKKwlpZiAoZmxhZ3MgJiBGT0xMX1BJTikgeworCQlo
ZWFkID0gcGFnZTsKKwkJaWYgKHVubGlrZWx5KCF1c2VyX3BhZ2VfcmVmX2luYyhoZWFkKSkpCisJ
CQlyZXR1cm4gMDsKKwl9IGVsc2UgeworCQloZWFkID0gdHJ5X2dldF9jb21wb3VuZF9oZWFkKHBn
ZF9wYWdlKG9yaWcpLCByZWZzKTsKKwkJaWYgKCFoZWFkKQorCQkJcmV0dXJuIDA7CisJfQogCiAJ
aWYgKHVubGlrZWx5KHBnZF92YWwob3JpZykgIT0gcGdkX3ZhbCgqcGdkcCkpKSB7CiAJCXB1dF9j
b21wb3VuZF9oZWFkKGhlYWQsIHJlZnMpOwpkaWZmIC0tZ2l0IGEvbW0vaHVnZV9tZW1vcnkuYyBi
L21tL2h1Z2VfbWVtb3J5LmMKaW5kZXggMTNjYzkzNzg1MDA2Li40MDEwYzI2OWU5ZTUgMTAwNjQ0
Ci0tLSBhL21tL2h1Z2VfbWVtb3J5LmMKKysrIGIvbW0vaHVnZV9tZW1vcnkuYwpAQCAtOTQ1LDYg
Kzk0NSwxMSBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X2Rldm1hcF9wbWQoc3RydWN0IHZtX2FyZWFf
c3RydWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkgKi8KIAlXQVJOX09OQ0UoZmxhZ3Mg
JiBGT0xMX0NPVywgIm1tOiBJbiBmb2xsb3dfZGV2bWFwX3BtZCB3aXRoIEZPTExfQ09XIHNldCIp
OwogCisJLyogRk9MTF9HRVQgYW5kIEZPTExfUElOIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuICov
CisJaWYgKFdBUk5fT05fT05DRSgoZmxhZ3MgJiAoRk9MTF9QSU4gfCBGT0xMX0dFVCkpID09CisJ
CQkgKEZPTExfUElOIHwgRk9MTF9HRVQpKSkKKwkJcmV0dXJuIE5VTEw7CisKIAlpZiAoZmxhZ3Mg
JiBGT0xMX1dSSVRFICYmICFwbWRfd3JpdGUoKnBtZCkpCiAJCXJldHVybiBOVUxMOwogCkBAIC05
NjAsNyArOTY1LDcgQEAgc3RydWN0IHBhZ2UgKmZvbGxvd19kZXZtYXBfcG1kKHN0cnVjdCB2bV9h
cmVhX3N0cnVjdCAqdm1hLCB1bnNpZ25lZCBsb25nIGFkZHIsCiAJICogZGV2aWNlIG1hcHBlZCBw
YWdlcyBjYW4gb25seSBiZSByZXR1cm5lZCBpZiB0aGUKIAkgKiBjYWxsZXIgd2lsbCBtYW5hZ2Ug
dGhlIHBhZ2UgcmVmZXJlbmNlIGNvdW50LgogCSAqLwotCWlmICghKGZsYWdzICYgRk9MTF9HRVQp
KQorCWlmICghKGZsYWdzICYgKEZPTExfR0VUIHwgRk9MTF9QSU4pKSkKIAkJcmV0dXJuIEVSUl9Q
VFIoLUVFWElTVCk7CiAKIAlwZm4gKz0gKGFkZHIgJiB+UE1EX01BU0spID4+IFBBR0VfU0hJRlQ7
CkBAIC05NjgsNyArOTczLDE4IEBAIHN0cnVjdCBwYWdlICpmb2xsb3dfZGV2bWFwX3BtZChzdHJ1
Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCWlmICghKnBnbWFw
KQogCQlyZXR1cm4gRVJSX1BUUigtRUZBVUxUKTsKIAlwYWdlID0gcGZuX3RvX3BhZ2UocGZuKTsK
LQlnZXRfcGFnZShwYWdlKTsKKworCWlmIChmbGFncyAmIEZPTExfR0VUKQorCQlnZXRfcGFnZShw
YWdlKTsKKwllbHNlIGlmIChmbGFncyAmIEZPTExfUElOKSB7CisJCS8qCisJCSAqIHVzZXJfcGFn
ZV9yZWZfaW5jKCkgaXMgbm90IGFjdHVhbGx5IGV4cGVjdGVkIHRvIGZhaWwgaGVyZQorCQkgKiBi
ZWNhdXNlIHdlIGhvbGQgdGhlIHBtZCBsb2NrIHNvIG5vIG9uZSBjYW4gdW5tYXAgdGhlIHBtZCBh
bmQKKwkJICogZnJlZSB0aGUgcGFnZSB0aGF0IGl0IHBvaW50cyB0by4KKwkJICovCisJCWlmICh1
bmxpa2VseSghdXNlcl9wYWdlX3JlZl9pbmMocGFnZSkpKQorCQkJcGFnZSA9IEVSUl9QVFIoLUVG
QVVMVCk7CisJfQogCiAJcmV0dXJuIHBhZ2U7CiB9CkBAIC0xMDg4LDYgKzExMDQsMTEgQEAgc3Ry
dWN0IHBhZ2UgKmZvbGxvd19kZXZtYXBfcHVkKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hLCB1
bnNpZ25lZCBsb25nIGFkZHIsCiAJaWYgKGZsYWdzICYgRk9MTF9XUklURSAmJiAhcHVkX3dyaXRl
KCpwdWQpKQogCQlyZXR1cm4gTlVMTDsKIAorCS8qIEZPTExfR0VUIGFuZCBGT0xMX1BJTiBhcmUg
bXV0dWFsbHkgZXhjbHVzaXZlLiAqLworCWlmIChXQVJOX09OX09OQ0UoKGZsYWdzICYgKEZPTExf
UElOIHwgRk9MTF9HRVQpKSA9PQorCQkJIChGT0xMX1BJTiB8IEZPTExfR0VUKSkpCisJCXJldHVy
biBOVUxMOworCiAJaWYgKHB1ZF9wcmVzZW50KCpwdWQpICYmIHB1ZF9kZXZtYXAoKnB1ZCkpCiAJ
CS8qIHBhc3MgKi87CiAJZWxzZQpAQCAtMTA5OSw4ICsxMTIwLDEwIEBAIHN0cnVjdCBwYWdlICpm
b2xsb3dfZGV2bWFwX3B1ZChzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYSwgdW5zaWduZWQgbG9u
ZyBhZGRyLAogCS8qCiAJICogZGV2aWNlIG1hcHBlZCBwYWdlcyBjYW4gb25seSBiZSByZXR1cm5l
ZCBpZiB0aGUKIAkgKiBjYWxsZXIgd2lsbCBtYW5hZ2UgdGhlIHBhZ2UgcmVmZXJlbmNlIGNvdW50
LgorCSAqCisJICogQXQgbGVhc3Qgb25lIG9mIEZPTExfR0VUIHwgRk9MTF9QSU4gbXVzdCBiZSBz
ZXQsIHNvIGFzc2VydCB0aGF0IGhlcmU6CiAJICovCi0JaWYgKCEoZmxhZ3MgJiBGT0xMX0dFVCkp
CisJaWYgKCEoZmxhZ3MgJiAoRk9MTF9HRVQgfCBGT0xMX1BJTikpKQogCQlyZXR1cm4gRVJSX1BU
UigtRUVYSVNUKTsKIAogCXBmbiArPSAoYWRkciAmIH5QVURfTUFTSykgPj4gUEFHRV9TSElGVDsK
QEAgLTExMDgsNyArMTEzMSwxOCBAQCBzdHJ1Y3QgcGFnZSAqZm9sbG93X2Rldm1hcF9wdWQoc3Ry
dWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAlpZiAoISpwZ21h
cCkKIAkJcmV0dXJuIEVSUl9QVFIoLUVGQVVMVCk7CiAJcGFnZSA9IHBmbl90b19wYWdlKHBmbik7
Ci0JZ2V0X3BhZ2UocGFnZSk7CisKKwlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKKwkJZ2V0X3BhZ2Uo
cGFnZSk7CisJZWxzZSBpZiAoZmxhZ3MgJiBGT0xMX1BJTikgeworCQkvKgorCQkgKiB1c2VyX3Bh
Z2VfcmVmX2luYygpIGlzIG5vdCBhY3R1YWxseSBleHBlY3RlZCB0byBmYWlsIGhlcmUKKwkJICog
YmVjYXVzZSB3ZSBob2xkIHRoZSBwdWQgbG9jayBzbyBubyBvbmUgY2FuIHVubWFwIHRoZSBwdWQg
YW5kCisJCSAqIGZyZWUgdGhlIHBhZ2UgdGhhdCBpdCBwb2ludHMgdG8uCisJCSAqLworCQlpZiAo
dW5saWtlbHkoIXVzZXJfcGFnZV9yZWZfaW5jKHBhZ2UpKSkKKwkJCXBhZ2UgPSBFUlJfUFRSKC1F
RkFVTFQpOworCX0KIAogCXJldHVybiBwYWdlOwogfQpAQCAtMTUyMiw4ICsxNTU2LDIwIEBAIHN0
cnVjdCBwYWdlICpmb2xsb3dfdHJhbnNfaHVnZV9wbWQoc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2
bWEsCiBza2lwX21sb2NrOgogCXBhZ2UgKz0gKGFkZHIgJiB+SFBBR0VfUE1EX01BU0spID4+IFBB
R0VfU0hJRlQ7CiAJVk1fQlVHX09OX1BBR0UoIVBhZ2VDb21wb3VuZChwYWdlKSAmJiAhaXNfem9u
ZV9kZXZpY2VfcGFnZShwYWdlKSwgcGFnZSk7CisKIAlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKIAkJ
Z2V0X3BhZ2UocGFnZSk7CisJZWxzZSBpZiAoZmxhZ3MgJiBGT0xMX1BJTikgeworCQkvKgorCQkg
KiB1c2VyX3BhZ2VfcmVmX2luYygpIGlzIG5vdCBhY3R1YWxseSBleHBlY3RlZCB0byBmYWlsIGhl
cmUKKwkJICogYmVjYXVzZSB3ZSBob2xkIHRoZSBwbWQgbG9jayBzbyBubyBvbmUgY2FuIHVubWFw
IHRoZSBwbWQgYW5kCisJCSAqIGZyZWUgdGhlIHBhZ2UgdGhhdCBpdCBwb2ludHMgdG8uCisJCSAq
LworCQlpZiAodW5saWtlbHkoIXVzZXJfcGFnZV9yZWZfaW5jKHBhZ2UpKSkgeworCQkJV0FSTl9P
Tl9PTkNFKDEpOworCQkJcGFnZSA9IE5VTEw7CisJCX0KKwl9CiAKIG91dDoKIAlyZXR1cm4gcGFn
ZTsKZGlmZiAtLWdpdCBhL21tL2h1Z2V0bGIuYyBiL21tL2h1Z2V0bGIuYwppbmRleCBiNDVhOTUz
NjNhODQuLjVlZTgwZWVhMjVlNSAxMDA2NDQKLS0tIGEvbW0vaHVnZXRsYi5jCisrKyBiL21tL2h1
Z2V0bGIuYwpAQCAtNDQ2Miw3ICs0NDYyLDIyIEBAIGxvbmcgZm9sbG93X2h1Z2V0bGJfcGFnZShz
dHJ1Y3QgbW1fc3RydWN0ICptbSwgc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEsCiBzYW1lX3Bh
Z2U6CiAJCWlmIChwYWdlcykgewogCQkJcGFnZXNbaV0gPSBtZW1fbWFwX29mZnNldChwYWdlLCBw
Zm5fb2Zmc2V0KTsKLQkJCWdldF9wYWdlKHBhZ2VzW2ldKTsKKworCQkJaWYgKGZsYWdzICYgRk9M
TF9HRVQpCisJCQkJZ2V0X3BhZ2UocGFnZXNbaV0pOworCQkJZWxzZSBpZiAoZmxhZ3MgJiBGT0xM
X1BJTikgeworCQkJCS8qCisJCQkJICogdXNlcl9wYWdlX3JlZl9pbmMoKSBpcyBub3QgYWN0dWFs
bHkgZXhwZWN0ZWQKKwkJCQkgKiB0byBmYWlsIGhlcmUgYmVjYXVzZSB3ZSBob2xkIHRoZSBwdGwu
CisJCQkJICovCisJCQkJaWYgKHVubGlrZWx5KCF1c2VyX3BhZ2VfcmVmX2luYyhwYWdlc1tpXSkp
KSB7CisJCQkJCXNwaW5fdW5sb2NrKHB0bCk7CisJCQkJCXJlbWFpbmRlciA9IDA7CisJCQkJCWVy
ciA9IC1FTk9NRU07CisJCQkJCVdBUk5fT05fT05DRSgxKTsKKwkJCQkJYnJlYWs7CisJCQkJfQor
CQkJfQogCQl9CiAKIAkJaWYgKHZtYXMpCkBAIC01MDIyLDYgKzUwMzcsMTIgQEAgZm9sbG93X2h1
Z2VfcG1kKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsCiAJc3Ry
dWN0IHBhZ2UgKnBhZ2UgPSBOVUxMOwogCXNwaW5sb2NrX3QgKnB0bDsKIAlwdGVfdCBwdGU7CisK
KwkvKiBGT0xMX0dFVCBhbmQgRk9MTF9QSU4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gKi8KKwlp
ZiAoV0FSTl9PTl9PTkNFKChmbGFncyAmIChGT0xMX1BJTiB8IEZPTExfR0VUKSkgPT0KKwkJCSAo
Rk9MTF9QSU4gfCBGT0xMX0dFVCkpKQorCQlyZXR1cm4gTlVMTDsKKwogcmV0cnk6CiAJcHRsID0g
cG1kX2xvY2twdHIobW0sIHBtZCk7CiAJc3Bpbl9sb2NrKHB0bCk7CkBAIC01MDM0LDggKzUwNTUs
MjAgQEAgZm9sbG93X2h1Z2VfcG1kKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25n
IGFkZHJlc3MsCiAJcHRlID0gaHVnZV9wdGVwX2dldCgocHRlX3QgKilwbWQpOwogCWlmIChwdGVf
cHJlc2VudChwdGUpKSB7CiAJCXBhZ2UgPSBwbWRfcGFnZSgqcG1kKSArICgoYWRkcmVzcyAmIH5Q
TURfTUFTSykgPj4gUEFHRV9TSElGVCk7CisKIAkJaWYgKGZsYWdzICYgRk9MTF9HRVQpCiAJCQln
ZXRfcGFnZShwYWdlKTsKKwkJZWxzZSBpZiAoZmxhZ3MgJiBGT0xMX1BJTikgeworCQkJLyoKKwkJ
CSAqIHVzZXJfcGFnZV9yZWZfaW5jKCkgaXMgbm90IGFjdHVhbGx5IGV4cGVjdGVkIHRvIGZhaWwK
KwkJCSAqIGhlcmUgYmVjYXVzZSB3ZSBob2xkIHRoZSBwdGwuCisJCQkgKi8KKwkJCWlmICh1bmxp
a2VseSghdXNlcl9wYWdlX3JlZl9pbmMocGFnZSkpKSB7CisJCQkJV0FSTl9PTl9PTkNFKDEpOwor
CQkJCXBhZ2UgPSBOVUxMOworCQkJCWdvdG8gb3V0OworCQkJfQorCQl9CiAJfSBlbHNlIHsKIAkJ
aWYgKGlzX2h1Z2V0bGJfZW50cnlfbWlncmF0aW9uKHB0ZSkpIHsKIAkJCXNwaW5fdW5sb2NrKHB0
bCk7CkBAIC01MDU2LDcgKzUwODksNyBAQCBzdHJ1Y3QgcGFnZSAqIF9fd2VhawogZm9sbG93X2h1
Z2VfcHVkKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tLCB1bnNpZ25lZCBsb25nIGFkZHJlc3MsCiAJCXB1
ZF90ICpwdWQsIGludCBmbGFncykKIHsKLQlpZiAoZmxhZ3MgJiBGT0xMX0dFVCkKKwlpZiAoZmxh
Z3MgJiAoRk9MTF9HRVQgfCBGT0xMX1BJTikpCiAJCXJldHVybiBOVUxMOwogCiAJcmV0dXJuIHB0
ZV9wYWdlKCoocHRlX3QgKilwdWQpICsgKChhZGRyZXNzICYgflBVRF9NQVNLKSA+PiBQQUdFX1NI
SUZUKTsKQEAgLTUwNjUsNyArNTA5OCw3IEBAIGZvbGxvd19odWdlX3B1ZChzdHJ1Y3QgbW1fc3Ry
dWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyZXNzLAogc3RydWN0IHBhZ2UgKiBfX3dlYWsKIGZv
bGxvd19odWdlX3BnZChzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyZXNz
LCBwZ2RfdCAqcGdkLCBpbnQgZmxhZ3MpCiB7Ci0JaWYgKGZsYWdzICYgRk9MTF9HRVQpCisJaWYg
KGZsYWdzICYgKEZPTExfR0VUIHwgRk9MTF9QSU4pKQogCQlyZXR1cm4gTlVMTDsKIAogCXJldHVy
biBwdGVfcGFnZSgqKHB0ZV90ICopcGdkKSArICgoYWRkcmVzcyAmIH5QR0RJUl9NQVNLKSA+PiBQ
QUdFX1NISUZUKTsKZGlmZiAtLWdpdCBhL21tL3Ztc3RhdC5jIGIvbW0vdm1zdGF0LmMKaW5kZXgg
YTgyMjIwNDFiZDQ0Li5mZGFkNDBjY2RlN2IgMTAwNjQ0Ci0tLSBhL21tL3Ztc3RhdC5jCisrKyBi
L21tL3Ztc3RhdC5jCkBAIC0xMTY3LDYgKzExNjcsOCBAQCBjb25zdCBjaGFyICogY29uc3Qgdm1z
dGF0X3RleHRbXSA9IHsKIAkibnJfZGlydGllZCIsCiAJIm5yX3dyaXR0ZW4iLAogCSJucl9rZXJu
ZWxfbWlzY19yZWNsYWltYWJsZSIsCisJIm5yX2ZvbGxfcGluX3JlcXVlc3RlZCIsCisJIm5yX2Zv
bGxfcGluX3JldHVybmVkIiwKIAogCS8qIGVudW0gd3JpdGViYWNrX3N0YXRfaXRlbSBjb3VudGVy
cyAqLwogCSJucl9kaXJ0eV90aHJlc2hvbGQiLAotLSAKMi4yNC4wCgpfX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkcmktZGV2ZWwgbWFpbGluZyBsaXN0CmRy
aS1kZXZlbEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5v
cmcvbWFpbG1hbi9saXN0aW5mby9kcmktZGV2ZWw=
