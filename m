Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 9CC49B63EC
	for <lists+dri-devel@lfdr.de>; Wed, 18 Sep 2019 14:59:53 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 283126EF3B;
	Wed, 18 Sep 2019 12:59:50 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from ste-pvt-msa2.bahnhof.se (ste-pvt-msa2.bahnhof.se
 [213.80.101.71])
 by gabe.freedesktop.org (Postfix) with ESMTPS id EF0C86EF3B
 for <dri-devel@lists.freedesktop.org>; Wed, 18 Sep 2019 12:59:47 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by ste-pvt-msa2.bahnhof.se (Postfix) with ESMTP id 5E7EC3F81C;
 Wed, 18 Sep 2019 14:59:31 +0200 (CEST)
X-Virus-Scanned: Debian amavisd-new at bahnhof.se
X-Spam-Flag: NO
X-Spam-Score: -2.099
X-Spam-Level: 
X-Spam-Status: No, score=-2.099 tagged_above=-999 required=6.31
 tests=[BAYES_00=-1.9, DKIM_SIGNED=0.1, DKIM_VALID=-0.1,
 DKIM_VALID_AU=-0.1, DKIM_VALID_EF=-0.1, URIBL_BLOCKED=0.001]
 autolearn=ham autolearn_force=no
Received: from ste-pvt-msa2.bahnhof.se ([127.0.0.1])
 by localhost (ste-ftg-msa2.bahnhof.se [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id IjzORh8W1YJM; Wed, 18 Sep 2019 14:59:25 +0200 (CEST)
Received: from mail1.shipmail.org (h-205-35.A357.priv.bahnhof.se
 [155.4.205.35]) (Authenticated sender: mb878879)
 by ste-pvt-msa2.bahnhof.se (Postfix) with ESMTPA id E91E83F610;
 Wed, 18 Sep 2019 14:59:24 +0200 (CEST)
Received: from localhost.localdomain.localdomain
 (h-205-35.A357.priv.bahnhof.se [155.4.205.35])
 by mail1.shipmail.org (Postfix) with ESMTPSA id 94055360384;
 Wed, 18 Sep 2019 14:59:24 +0200 (CEST)
From: =?UTF-8?q?Thomas=20Hellstr=C3=B6m=20=28VMware=29?=
 <thomas_os@shipmail.org>
To: linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 linux-mm@kvack.org
Subject: [PATCH 4/7] drm/vmwgfx: Implement an infrastructure for
 write-coherent resources
Date: Wed, 18 Sep 2019 14:59:11 +0200
Message-Id: <20190918125914.38497-5-thomas_os@shipmail.org>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190918125914.38497-1-thomas_os@shipmail.org>
References: <20190918125914.38497-1-thomas_os@shipmail.org>
MIME-Version: 1.0
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
 d=shipmail.org; s=mail; 
 t=1568811564; bh=fwwR1uwCgnZ9/3IJ3lA6MBBx9Sz+7PEsg04qBIk0YoA=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=JWLvU3NAPU+MZMSCkPZFTLpOjRLZaC6WABziUwWzL45sj9D4sbbT9mcfxQocEDAd0
 Ke3YVmB2a1fgXVzciXbUNrTdlnyZPT9DvAr9N4Ie0kTY9ejhxVzdCtGffBuinmBy0v
 bHjMFM+RUF369QCsK2bOD3dSV8Bf02hRL1X/I6Wg=
X-Mailman-Original-Authentication-Results: ste-pvt-msa2.bahnhof.se;
 dkim=pass (1024-bit key;
 unprotected) header.d=shipmail.org header.i=@shipmail.org header.b=JWLvU3NA; 
 dkim-atps=neutral
X-Mailman-Original-Authentication-Results: ste-ftg-msa2.bahnhof.se
 (amavisd-new); 
 dkim=pass (1024-bit key) header.d=shipmail.org
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Thomas Hellstrom <thellstrom@vmware.com>, Michal Hocko <mhocko@suse.com>,
 Rik van Riel <riel@surriel.com>, pv-drivers@vmware.com,
 Minchan Kim <minchan@kernel.org>, Will Deacon <will.deacon@arm.com>,
 Matthew Wilcox <willy@infradead.org>, Christoph Hellwig <hch@infradead.org>,
 Peter Zijlstra <peterz@infradead.org>,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 linux-graphics-maintainer@vmware.com, Souptick Joarder <jrdr.linux@gmail.com>,
 Huang Ying <ying.huang@intel.com>, Andrew Morton <akpm@linux-foundation.org>,
 Deepak Rawat <drawat@vmware.com>,
 =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

RnJvbTogVGhvbWFzIEhlbGxzdHJvbSA8dGhlbGxzdHJvbUB2bXdhcmUuY29tPgoKVGhpcyBpbmZy
YXN0cnVjdHVyZSB3aWxsLCBmb3IgY29oZXJlbnQgcmVzb3VyY2VzLCBtYWtlIHN1cmUgdGhhdApm
cm9tIHRoZSB1c2VyLXNwYWNlIHBvaW50IG9mIHZpZXcsIGRhdGEgd3JpdHRlbiBieSB0aGUgQ1BV
IGlzIGltbWVkaWF0ZWx5CmF1dG9tYXRpY2FsbHkgYXZhaWxhYmxlIHRvIHRoZSBHUFUgYXQgcmVz
b3VyY2UgdmFsaWRhdGlvbiB0aW1lLgoKQ2M6IEFuZHJldyBNb3J0b24gPGFrcG1AbGludXgtZm91
bmRhdGlvbi5vcmc+CkNjOiBNYXR0aGV3IFdpbGNveCA8d2lsbHlAaW5mcmFkZWFkLm9yZz4KQ2M6
IFdpbGwgRGVhY29uIDx3aWxsLmRlYWNvbkBhcm0uY29tPgpDYzogUGV0ZXIgWmlqbHN0cmEgPHBl
dGVyekBpbmZyYWRlYWQub3JnPgpDYzogUmlrIHZhbiBSaWVsIDxyaWVsQHN1cnJpZWwuY29tPgpD
YzogTWluY2hhbiBLaW0gPG1pbmNoYW5Aa2VybmVsLm9yZz4KQ2M6IE1pY2hhbCBIb2NrbyA8bWhv
Y2tvQHN1c2UuY29tPgpDYzogSHVhbmcgWWluZyA8eWluZy5odWFuZ0BpbnRlbC5jb20+CkNjOiBT
b3VwdGljayBKb2FyZGVyIDxqcmRyLmxpbnV4QGdtYWlsLmNvbT4KQ2M6ICJKw6lyw7RtZSBHbGlz
c2UiIDxqZ2xpc3NlQHJlZGhhdC5jb20+CkNjOiAiQ2hyaXN0aWFuIEvDtm5pZyIgPGNocmlzdGlh
bi5rb2VuaWdAYW1kLmNvbT4KQ2M6IENocmlzdG9waCBIZWxsd2lnIDxoY2hAaW5mcmFkZWFkLm9y
Zz4KU2lnbmVkLW9mZi1ieTogVGhvbWFzIEhlbGxzdHJvbSA8dGhlbGxzdHJvbUB2bXdhcmUuY29t
PgpSZXZpZXdlZC1ieTogRGVlcGFrIFJhd2F0IDxkcmF3YXRAdm13YXJlLmNvbT4KLS0tCiBkcml2
ZXJzL2dwdS9kcm0vdm13Z2Z4L0tjb25maWcgICAgICAgICAgICAgICAgfCAgIDEgKwogZHJpdmVy
cy9ncHUvZHJtL3Ztd2dmeC9NYWtlZmlsZSAgICAgICAgICAgICAgIHwgICAyICstCiBkcml2ZXJz
L2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9iby5jICAgICAgICAgICAgfCAgIDUgKy0KIGRyaXZlcnMv
Z3B1L2RybS92bXdnZngvdm13Z2Z4X2Rydi5oICAgICAgICAgICB8ICAyMyArLQogZHJpdmVycy9n
cHUvZHJtL3Ztd2dmeC92bXdnZnhfZXhlY2J1Zi5jICAgICAgIHwgICAxIC0KIGRyaXZlcnMvZ3B1
L2RybS92bXdnZngvdm13Z2Z4X3BhZ2VfZGlydHkuYyAgICB8IDQxNyArKysrKysrKysrKysrKysr
KysKIGRyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3Jlc291cmNlLmMgICAgICB8ICA1NyAr
KysKIGRyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3Jlc291cmNlX3ByaXYuaCB8ICAxMSAr
CiBkcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF90dG1fZ2x1ZS5jICAgICAgfCAgMTUgKy0K
IGRyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3ZhbGlkYXRpb24uYyAgICB8ICA3MSArKysK
IGRyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3ZhbGlkYXRpb24uaCAgICB8ICAxNiArLQog
MTEgZmlsZXMgY2hhbmdlZCwgNTk4IGluc2VydGlvbnMoKyksIDIxIGRlbGV0aW9ucygtKQogY3Jl
YXRlIG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3BhZ2VfZGlydHku
YwoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvS2NvbmZpZyBiL2RyaXZlcnMv
Z3B1L2RybS92bXdnZngvS2NvbmZpZwppbmRleCA2YjI4YTMyNmY4YmIuLmQ1ZmQ4MWE1MjFmNiAx
MDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC9LY29uZmlnCisrKyBiL2RyaXZlcnMv
Z3B1L2RybS92bXdnZngvS2NvbmZpZwpAQCAtOCw2ICs4LDcgQEAgY29uZmlnIERSTV9WTVdHRlgK
IAlzZWxlY3QgRkJfQ0ZCX0lNQUdFQkxJVAogCXNlbGVjdCBEUk1fVFRNCiAJc2VsZWN0IEZCCisJ
c2VsZWN0IEFTX0RJUlRZX0hFTFBFUlMKIAkjIE9ubHkgbmVlZGVkIGZvciB0aGUgdHJhbnNpdGlv
bmFsIHVzZSBvZiBkcm1fY3J0Y19pbml0IC0gY2FuIGJlIHJlbW92ZWQKIAkjIGFnYWluIG9uY2Ug
dm13Z2Z4IHNldHMgdXAgdGhlIHByaW1hcnkgcGxhbmUgaXRzZWxmLgogCXNlbGVjdCBEUk1fS01T
X0hFTFBFUgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC9NYWtlZmlsZSBiL2Ry
aXZlcnMvZ3B1L2RybS92bXdnZngvTWFrZWZpbGUKaW5kZXggODg0MWJkMzBlMWU1Li5jODc3YTIx
YTA3MzkgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvTWFrZWZpbGUKKysrIGIv
ZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC9NYWtlZmlsZQpAQCAtOCw3ICs4LDcgQEAgdm13Z2Z4LXkg
Oj0gdm13Z2Z4X2V4ZWNidWYubyB2bXdnZnhfZ21yLm8gdm13Z2Z4X2ttcy5vIHZtd2dmeF9kcnYu
byBcCiAJICAgIHZtd2dmeF9jbWRidWZfcmVzLm8gdm13Z2Z4X2NtZGJ1Zi5vIHZtd2dmeF9zdGR1
Lm8gXAogCSAgICB2bXdnZnhfY290YWJsZS5vIHZtd2dmeF9zby5vIHZtd2dmeF9iaW5kaW5nLm8g
dm13Z2Z4X21zZy5vIFwKIAkgICAgdm13Z2Z4X3NpbXBsZV9yZXNvdXJjZS5vIHZtd2dmeF92YS5v
IHZtd2dmeF9ibGl0Lm8gXAotCSAgICB2bXdnZnhfdmFsaWRhdGlvbi5vIFwKKwkgICAgdm13Z2Z4
X3ZhbGlkYXRpb24ubyB2bXdnZnhfcGFnZV9kaXJ0eS5vIFwKIAkgICAgdHRtX29iamVjdC5vIHR0
bV9sb2NrLm8KIAogb2JqLSQoQ09ORklHX0RSTV9WTVdHRlgpIDo9IHZtd2dmeC5vCmRpZmYgLS1n
aXQgYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9iby5jIGIvZHJpdmVycy9ncHUvZHJt
L3Ztd2dmeC92bXdnZnhfYm8uYwppbmRleCBhYWQ4ZDgxNDAyNTkuLjg2OWFlYWVjMmY4NiAxMDA2
NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfYm8uYworKysgYi9kcml2ZXJz
L2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9iby5jCkBAIC00NjIsNiArNDYyLDcgQEAgdm9pZCB2bXdf
Ym9fYm9fZnJlZShzdHJ1Y3QgdHRtX2J1ZmZlcl9vYmplY3QgKmJvKQogewogCXN0cnVjdCB2bXdf
YnVmZmVyX29iamVjdCAqdm13X2JvID0gdm13X2J1ZmZlcl9vYmplY3QoYm8pOwogCisJV0FSTl9P
Tih2bXdfYm8tPmRpcnR5KTsKIAl2bXdfYm9fdW5tYXAodm13X2JvKTsKIAlrZnJlZSh2bXdfYm8p
OwogfQpAQCAtNDc1LDggKzQ3NiwxMCBAQCB2b2lkIHZtd19ib19ib19mcmVlKHN0cnVjdCB0dG1f
YnVmZmVyX29iamVjdCAqYm8pCiBzdGF0aWMgdm9pZCB2bXdfdXNlcl9ib19kZXN0cm95KHN0cnVj
dCB0dG1fYnVmZmVyX29iamVjdCAqYm8pCiB7CiAJc3RydWN0IHZtd191c2VyX2J1ZmZlcl9vYmpl
Y3QgKnZtd191c2VyX2JvID0gdm13X3VzZXJfYnVmZmVyX29iamVjdChibyk7CisJc3RydWN0IHZt
d19idWZmZXJfb2JqZWN0ICp2Ym8gPSAmdm13X3VzZXJfYm8tPnZibzsKIAotCXZtd19ib191bm1h
cCgmdm13X3VzZXJfYm8tPnZibyk7CisJV0FSTl9PTih2Ym8tPmRpcnR5KTsKKwl2bXdfYm9fdW5t
YXAodmJvKTsKIAl0dG1fcHJpbWVfb2JqZWN0X2tmcmVlKHZtd191c2VyX2JvLCBwcmltZSk7CiB9
CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X2Rydi5oIGIvZHJp
dmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfZHJ2LmgKaW5kZXggNWViNzNkZWQ4ZTA3Li43OTQ0
ZGJiYmRkNzIgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X2Rydi5o
CisrKyBiL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X2Rydi5oCkBAIC0xMDUsNiArMTA1
LDcgQEAgc3RydWN0IHZtd19mcHJpdiB7CiAgKiBAZHhfcXVlcnlfY3R4OiBEWCBjb250ZXh0IGlm
IHRoaXMgYnVmZmVyIG9iamVjdCBpcyB1c2VkIGFzIGEgRFggcXVlcnkgTU9CCiAgKiBAbWFwOiBL
bWFwIG9iamVjdCBmb3Igc2VtaS1wZXJzaXN0ZW50IG1hcHBpbmdzCiAgKiBAcmVzX3ByaW9zOiBF
dmljdGlvbiBwcmlvcml0eSBjb3VudHMgZm9yIGF0dGFjaGVkIHJlc291cmNlcworICogQGRpcnR5
OiBzdHJ1Y3R1cmUgZm9yIHVzZXItc3BhY2UgZGlydHktdHJhY2tpbmcKICAqLwogc3RydWN0IHZt
d19idWZmZXJfb2JqZWN0IHsKIAlzdHJ1Y3QgdHRtX2J1ZmZlcl9vYmplY3QgYmFzZTsKQEAgLTEx
NSw2ICsxMTYsNyBAQCBzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmplY3QgewogCS8qIFByb3RlY3RlZCBi
eSByZXNlcnZhdGlvbiAqLwogCXN0cnVjdCB0dG1fYm9fa21hcF9vYmogbWFwOwogCXUzMiByZXNf
cHJpb3NbVFRNX01BWF9CT19QUklPUklUWV07CisJc3RydWN0IHZtd19ib19kaXJ0eSAqZGlydHk7
CiB9OwogCiAvKioKQEAgLTE0NSw3ICsxNDcsOCBAQCBzdHJ1Y3Qgdm13X3Jlc19mdW5jOwogICog
QHJlc19kaXJ0eTogUmVzb3VyY2UgY29udGFpbnMgZGF0YSBub3QgeWV0IGluIHRoZSBiYWNrdXAg
YnVmZmVyLiBQcm90ZWN0ZWQKICAqIGJ5IHJlc291cmNlIHJlc2VydmVkLgogICogQGJhY2t1cF9k
aXJ0eTogQmFja3VwIGJ1ZmZlciBjb250YWlucyBkYXRhIG5vdCB5ZXQgaW4gdGhlIEhXIHJlc291
cmNlLgotICogUHJvdGVjdGUgYnkgcmVzb3VyY2UgcmVzZXJ2ZWQuCisgKiBQcm90ZWN0ZWQgYnkg
cmVzb3VyY2UgcmVzZXJ2ZWQuCisgKiBAY29oZXJlbnQ6IEVtdWxhdGUgY29oZXJlbmN5IGJ5IHRy
YWNraW5nIHZtIGFjY2Vzc2VzLgogICogQGJhY2t1cDogVGhlIGJhY2t1cCBidWZmZXIgaWYgYW55
LiBQcm90ZWN0ZWQgYnkgcmVzb3VyY2UgcmVzZXJ2ZWQuCiAgKiBAYmFja3VwX29mZnNldDogT2Zm
c2V0IGludG8gdGhlIGJhY2t1cCBidWZmZXIgaWYgYW55LiBQcm90ZWN0ZWQgYnkgcmVzb3VyY2UK
ICAqIHJlc2VydmVkLiBOb3RlIHRoYXQgb25seSBhIGZldyByZXNvdXJjZSB0eXBlcyBjYW4gaGF2
ZSBhIEBiYWNrdXBfb2Zmc2V0CkBAIC0xNjIsMTQgKzE2NSwxNiBAQCBzdHJ1Y3Qgdm13X3Jlc19m
dW5jOwogICogQGh3X2Rlc3Ryb3k6IENhbGxiYWNrIHRvIGRlc3Ryb3kgdGhlIHJlc291cmNlIG9u
IHRoZSBkZXZpY2UsIGFzIHBhcnQgb2YKICAqIHJlc291cmNlIGRlc3RydWN0aW9uLgogICovCitz
dHJ1Y3Qgdm13X3Jlc291cmNlX2RpcnR5Owogc3RydWN0IHZtd19yZXNvdXJjZSB7CiAJc3RydWN0
IGtyZWYga3JlZjsKIAlzdHJ1Y3Qgdm13X3ByaXZhdGUgKmRldl9wcml2OwogCWludCBpZDsKIAl1
MzIgdXNlZF9wcmlvOwogCXVuc2lnbmVkIGxvbmcgYmFja3VwX3NpemU7Ci0JYm9vbCByZXNfZGly
dHk7Ci0JYm9vbCBiYWNrdXBfZGlydHk7CisJdTMyIHJlc19kaXJ0eSA6IDE7CisJdTMyIGJhY2t1
cF9kaXJ0eSA6IDE7CisJdTMyIGNvaGVyZW50IDogMTsKIAlzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmpl
Y3QgKmJhY2t1cDsKIAl1bnNpZ25lZCBsb25nIGJhY2t1cF9vZmZzZXQ7CiAJdW5zaWduZWQgbG9u
ZyBwaW5fY291bnQ7CkBAIC0xNzcsNiArMTgyLDcgQEAgc3RydWN0IHZtd19yZXNvdXJjZSB7CiAJ
c3RydWN0IGxpc3RfaGVhZCBscnVfaGVhZDsKIAlzdHJ1Y3QgbGlzdF9oZWFkIG1vYl9oZWFkOwog
CXN0cnVjdCBsaXN0X2hlYWQgYmluZGluZ19oZWFkOworCXN0cnVjdCB2bXdfcmVzb3VyY2VfZGly
dHkgKmRpcnR5OwogCXZvaWQgKCpyZXNfZnJlZSkgKHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcyk7
CiAJdm9pZCAoKmh3X2Rlc3Ryb3kpIChzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMpOwogfTsKQEAg
LTcxNiw2ICs3MjIsOCBAQCBleHRlcm4gdm9pZCB2bXdfcmVzb3VyY2VfZXZpY3RfYWxsKHN0cnVj
dCB2bXdfcHJpdmF0ZSAqZGV2X3ByaXYpOwogZXh0ZXJuIHZvaWQgdm13X3Jlc291cmNlX3VuYmlu
ZF9saXN0KHN0cnVjdCB2bXdfYnVmZmVyX29iamVjdCAqdmJvKTsKIHZvaWQgdm13X3Jlc291cmNl
X21vYl9hdHRhY2goc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzKTsKIHZvaWQgdm13X3Jlc291cmNl
X21vYl9kZXRhY2goc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzKTsKK3ZvaWQgdm13X3Jlc291cmNl
X2RpcnR5X3VwZGF0ZShzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMsIHBnb2ZmX3Qgc3RhcnQsCisJ
CQkgICAgICAgcGdvZmZfdCBlbmQpOwogCiAvKioKICAqIHZtd19yZXNvdXJjZV9tb2JfYXR0YWNo
ZWQgLSBXaGV0aGVyIGEgcmVzb3VyY2UgY3VycmVudGx5IGhhcyBhIG1vYiBhdHRhY2hlZApAQCAt
MTQwMyw2ICsxNDExLDE1IEBAIGludCB2bXdfaG9zdF9sb2coY29uc3QgY2hhciAqbG9nKTsKICNk
ZWZpbmUgVk1XX0RFQlVHX1VTRVIoZm10LCAuLi4pICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIFwKIAlEUk1fREVCVUdfRFJJVkVSKGZtdCwgIyNfX1ZBX0FSR1Nf
XykKIAorLyogUmVzb3VyY2UgZGlydHlpbmcgLSB2bXdnZnhfcGFnZV9kaXJ0eS5jICovCit2b2lk
IHZtd19ib19kaXJ0eV9zY2FuKHN0cnVjdCB2bXdfYnVmZmVyX29iamVjdCAqdmJvKTsKK2ludCB2
bXdfYm9fZGlydHlfYWRkKHN0cnVjdCB2bXdfYnVmZmVyX29iamVjdCAqdmJvKTsKK3ZvaWQgdm13
X2JvX2RpcnR5X3RyYW5zZmVyX3RvX3JlcyhzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMpOwordm9p
ZCB2bXdfYm9fZGlydHlfY2xlYXJfcmVzKHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcyk7Cit2b2lk
IHZtd19ib19kaXJ0eV9yZWxlYXNlKHN0cnVjdCB2bXdfYnVmZmVyX29iamVjdCAqdmJvKTsKK3Zt
X2ZhdWx0X3Qgdm13X2JvX3ZtX2ZhdWx0KHN0cnVjdCB2bV9mYXVsdCAqdm1mKTsKK3ZtX2ZhdWx0
X3Qgdm13X2JvX3ZtX21rd3JpdGUoc3RydWN0IHZtX2ZhdWx0ICp2bWYpOworCiAvKioKICAqIFZN
V19ERUJVR19LTVMgLSBEZWJ1ZyBvdXRwdXQgZm9yIGtlcm5lbCBtb2RlLXNldHRpbmcKICAqCmRp
ZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9leGVjYnVmLmMgYi9kcml2
ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9leGVjYnVmLmMKaW5kZXggZmY4NmQ0OWRjNWU4Li45
MzRhZDdjMGMzNDIgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X2V4
ZWNidWYuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9leGVjYnVmLmMKQEAg
LTI1NjAsNyArMjU2MCw2IEBAIHN0YXRpYyBpbnQgdm13X2NtZF9keF9jaGVja19zdWJyZXNvdXJj
ZShzdHJ1Y3Qgdm13X3ByaXZhdGUgKmRldl9wcml2LAogCQkgICAgIG9mZnNldG9mKHR5cGVvZigq
Y21kKSwgc2lkKSk7CiAKIAljbWQgPSBjb250YWluZXJfb2YoaGVhZGVyLCB0eXBlb2YoKmNtZCks
IGhlYWRlcik7Ci0KIAlyZXR1cm4gdm13X2NtZF9yZXNfY2hlY2soZGV2X3ByaXYsIHN3X2NvbnRl
eHQsIHZtd19yZXNfc3VyZmFjZSwKIAkJCQkgVk1XX1JFU19ESVJUWV9OT05FLCB1c2VyX3N1cmZh
Y2VfY29udmVydGVyLAogCQkJCSAmY21kLT5zaWQsIE5VTEwpOwpkaWZmIC0tZ2l0IGEvZHJpdmVy
cy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfcGFnZV9kaXJ0eS5jIGIvZHJpdmVycy9ncHUvZHJtL3Zt
d2dmeC92bXdnZnhfcGFnZV9kaXJ0eS5jCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAw
MDAwMDAwMC4uYmUzMzAyYThlMzA5Ci0tLSAvZGV2L251bGwKKysrIGIvZHJpdmVycy9ncHUvZHJt
L3Ztd2dmeC92bXdnZnhfcGFnZV9kaXJ0eS5jCkBAIC0wLDAgKzEsNDE3IEBACisvLyBTUERYLUxp
Y2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMCBPUiBNSVQKKy8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICoK
KyAqIENvcHlyaWdodCAyMDE5IFZNd2FyZSwgSW5jLiwgUGFsbyBBbHRvLCBDQS4sIFVTQQorICoK
KyAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkg
cGVyc29uIG9idGFpbmluZyBhCisgKiBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0
ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCisgKiAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0
aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCisgKiB3aXRob3V0IGxp
bWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gs
CisgKiBkaXN0cmlidXRlLCBzdWIgbGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBT
b2Z0d2FyZSwgYW5kIHRvCisgKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBp
cyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8KKyAqIHRoZSBmb2xsb3dpbmcgY29uZGl0
aW9uczoKKyAqCisgKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNz
aW9uIG5vdGljZSAoaW5jbHVkaW5nIHRoZQorICogbmV4dCBwYXJhZ3JhcGgpIHNoYWxsIGJlIGlu
Y2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMKKyAqIG9mIHRoZSBT
b2Z0d2FyZS4KKyAqCisgKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9V
VCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgorICogSU1QTElFRCwgSU5DTFVESU5H
IEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCisg
KiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OLUlORlJJTkdFTUVOVC4g
SU4gTk8gRVZFTlQgU0hBTEwKKyAqIFRIRSBDT1BZUklHSFQgSE9MREVSUywgQVVUSE9SUyBBTkQv
T1IgSVRTIFNVUFBMSUVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKKyAqIERBTUFHRVMgT1Ig
T1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBP
UgorICogT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJ
VEggVEhFIFNPRlRXQVJFIE9SIFRIRQorICogVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBT
T0ZUV0FSRS4KKyAqCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisjaW5jbHVkZSAidm13Z2Z4X2Rydi5o
IgorCisvKgorICogRGlmZmVyZW50IG1ldGhvZHMgZm9yIHRyYWNraW5nIGRpcnR5OgorICogVk1X
X0JPX0RJUlRZX1BBR0VUQUJMRSAtIFNjYW4gdGhlIHBhZ2V0YWJsZSBmb3IgaGFyZHdhcmUgZGly
dHkgYml0cworICogVk1XX0JPX0RJUlRZX01LV1JJVEUgLSBXcml0ZS1wcm90ZWN0IHBhZ2UgdGFi
bGUgZW50cmllcyBhbmQgcmVjb3JkIHdyaXRlLQorICogYWNjZXNzZXMgaW4gdGhlIFZNIG1rd3Jp
dGUoKSBjYWxsYmFjaworICovCitlbnVtIHZtd19ib19kaXJ0eV9tZXRob2QgeworCVZNV19CT19E
SVJUWV9QQUdFVEFCTEUsCisJVk1XX0JPX0RJUlRZX01LV1JJVEUsCit9OworCisvKgorICogTm8g
ZGlydGllZCBwYWdlcyBhdCBzY2FuIHRyaWdnZXIgYSB0cmFuc2l0aW9uIHRvIHRoZSBfTUtXUklU
RSBtZXRob2QsCisgKiBzaW1pbGFybHkgYSBjZXJ0YWluIHBlcmNlbnRhZ2Ugb2YgZGlydHkgcGFn
ZXMgdHJpZ2dlciBhIHRyYW5zaXRpb24gdG8KKyAqIHRoZSBfUEFHRVRBQkxFIG1ldGhvZC4gSG93
IG1hbnkgdHJpZ2dlcnMgc2hvdWxkIHdlIHdhaXQgZm9yIGJlZm9yZQorICogY2hhbmdpbmcgbWV0
aG9kPworICovCisjZGVmaW5lIFZNV19ESVJUWV9OVU1fQ0hBTkdFX1RSSUdHRVJTIDIKKworLyog
UGVyY2VudGFnZSB0byB0cmlnZ2VyIGEgdHJhbnNpdGlvbiB0byB0aGUgX1BBR0VUQUJMRSBtZXRo
b2QgKi8KKyNkZWZpbmUgVk1XX0RJUlRZX1BFUkNFTlRBR0UgMTAKKworLyoqCisgKiBzdHJ1Y3Qg
dm13X2JvX2RpcnR5IC0gRGlydHkgaW5mb3JtYXRpb24gZm9yIGJ1ZmZlciBvYmplY3RzCisgKiBA
c3RhcnQ6IEZpcnN0IGN1cnJlbnRseSBkaXJ0eSBiaXQKKyAqIEBlbmQ6IExhc3QgY3VycmVudGx5
IGRpcnR5IGJpdCArIDEKKyAqIEBtZXRob2Q6IFRoZSBjdXJyZW50bHkgdXNlZCBkaXJ0eSBtZXRo
b2QKKyAqIEBjaGFuZ2VfY291bnQ6IE51bWJlciBvZiBjb25zZWN1dGl2ZSBtZXRob2QgY2hhbmdl
IHRyaWdnZXJzCisgKiBAcmVmX2NvdW50OiBSZWZlcmVuY2UgY291bnQgZm9yIHRoaXMgc3RydWN0
dXJlCisgKiBAYml0bWFwX3NpemU6IFRoZSBzaXplIG9mIHRoZSBiaXRtYXAgaW4gYml0cy4gVHlw
aWNhbGx5IGVxdWFsIHRvIHRoZQorICogbnViZXIgb2YgcGFnZXMgaW4gdGhlIGJvLgorICogQHNp
emU6IFRoZSBhY2NvdW50aW5nIHNpemUgZm9yIHRoaXMgc3RydWN0LgorICogQGJpdG1hcDogQSBi
aXRtYXAgd2hlcmUgZWFjaCBiaXQgcmVwcmVzZW50cyBhIHBhZ2UuIEEgc2V0IGJpdCBtZWFucyBh
CisgKiBkaXJ0eSBwYWdlLgorICovCitzdHJ1Y3Qgdm13X2JvX2RpcnR5IHsKKwl1bnNpZ25lZCBs
b25nIHN0YXJ0OworCXVuc2lnbmVkIGxvbmcgZW5kOworCWVudW0gdm13X2JvX2RpcnR5X21ldGhv
ZCBtZXRob2Q7CisJdW5zaWduZWQgaW50IGNoYW5nZV9jb3VudDsKKwl1bnNpZ25lZCBpbnQgcmVm
X2NvdW50OworCXVuc2lnbmVkIGxvbmcgYml0bWFwX3NpemU7CisJc2l6ZV90IHNpemU7CisJdW5z
aWduZWQgbG9uZyBiaXRtYXBbMF07Cit9OworCisvKioKKyAqIHZtd19ib19kaXJ0eV9zY2FuX3Bh
Z2V0YWJsZSAtIFBlcmZvcm0gYSBwYWdldGFibGUgc2NhbiBmb3IgZGlydHkgYml0cworICogQHZi
bzogVGhlIGJ1ZmZlciBvYmplY3QgdG8gc2NhbgorICoKKyAqIFNjYW5zIHRoZSBwYWdldGFibGUg
Zm9yIGRpcnR5IGJpdHMuIENsZWFyIHRob3NlIGJpdHMgYW5kIG1vZGlmeSB0aGUKKyAqIGRpcnR5
IHN0cnVjdHVyZSB3aXRoIHRoZSByZXN1bHRzLiBUaGlzIGZ1bmN0aW9uIG1heSBjaGFuZ2UgdGhl
CisgKiBkaXJ0eS10cmFja2luZyBtZXRob2QuCisgKi8KK3N0YXRpYyB2b2lkIHZtd19ib19kaXJ0
eV9zY2FuX3BhZ2V0YWJsZShzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmplY3QgKnZibykKK3sKKwlzdHJ1
Y3Qgdm13X2JvX2RpcnR5ICpkaXJ0eSA9IHZiby0+ZGlydHk7CisJcGdvZmZfdCBvZmZzZXQgPSBk
cm1fdm1hX25vZGVfc3RhcnQoJnZiby0+YmFzZS5iYXNlLnZtYV9ub2RlKTsKKwlzdHJ1Y3QgYWRk
cmVzc19zcGFjZSAqbWFwcGluZyA9IHZiby0+YmFzZS5iZGV2LT5kZXZfbWFwcGluZzsKKwlwZ29m
Zl90IG51bV9tYXJrZWQ7CisKKwludW1fbWFya2VkID0gYXBwbHlfYXNfY2xlYW4obWFwcGluZywK
KwkJCQkgICAgb2Zmc2V0LCBkaXJ0eS0+Yml0bWFwX3NpemUsCisJCQkJICAgIG9mZnNldCwgJmRp
cnR5LT5iaXRtYXBbMF0sCisJCQkJICAgICZkaXJ0eS0+c3RhcnQsICZkaXJ0eS0+ZW5kKTsKKwlp
ZiAobnVtX21hcmtlZCA9PSAwKQorCQlkaXJ0eS0+Y2hhbmdlX2NvdW50Kys7CisJZWxzZQorCQlk
aXJ0eS0+Y2hhbmdlX2NvdW50ID0gMDsKKworCWlmIChkaXJ0eS0+Y2hhbmdlX2NvdW50ID4gVk1X
X0RJUlRZX05VTV9DSEFOR0VfVFJJR0dFUlMpIHsKKwkJZGlydHktPmNoYW5nZV9jb3VudCA9IDA7
CisJCWRpcnR5LT5tZXRob2QgPSBWTVdfQk9fRElSVFlfTUtXUklURTsKKwkJYXBwbHlfYXNfd3Jw
cm90ZWN0KG1hcHBpbmcsCisJCQkJICAgb2Zmc2V0LCBkaXJ0eS0+Yml0bWFwX3NpemUpOworCQlh
cHBseV9hc19jbGVhbihtYXBwaW5nLAorCQkJICAgICAgIG9mZnNldCwgZGlydHktPmJpdG1hcF9z
aXplLAorCQkJICAgICAgIG9mZnNldCwgJmRpcnR5LT5iaXRtYXBbMF0sCisJCQkgICAgICAgJmRp
cnR5LT5zdGFydCwgJmRpcnR5LT5lbmQpOworCX0KK30KKworLyoqCisgKiB2bXdfYm9fZGlydHlf
c2Nhbl9ta3dyaXRlIC0gUmVzZXQgdGhlIG1rd3JpdGUgZGlydHktdHJhY2tpbmcgbWV0aG9kCisg
KiBAdmJvOiBUaGUgYnVmZmVyIG9iamVjdCB0byBzY2FuCisgKgorICogV3JpdGUtcHJvdGVjdCBw
YWdlcyB3cml0dGVuIHRvIHNvIHRoYXQgY29uc2VjdXRpdmUgd3JpdGUgYWNjZXNzZXMgd2lsbAor
ICogdHJpZ2dlciBhIGNhbGwgdG8gbWt3cml0ZS4KKyAqCisgKiBUaGlzIGZ1bmN0aW9uIG1heSBj
aGFuZ2UgdGhlIGRpcnR5LXRyYWNraW5nIG1ldGhvZC4KKyAqLworc3RhdGljIHZvaWQgdm13X2Jv
X2RpcnR5X3NjYW5fbWt3cml0ZShzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmplY3QgKnZibykKK3sKKwlz
dHJ1Y3Qgdm13X2JvX2RpcnR5ICpkaXJ0eSA9IHZiby0+ZGlydHk7CisJdW5zaWduZWQgbG9uZyBv
ZmZzZXQgPSBkcm1fdm1hX25vZGVfc3RhcnQoJnZiby0+YmFzZS5iYXNlLnZtYV9ub2RlKTsKKwlz
dHJ1Y3QgYWRkcmVzc19zcGFjZSAqbWFwcGluZyA9IHZiby0+YmFzZS5iZGV2LT5kZXZfbWFwcGlu
ZzsKKwlwZ29mZl90IG51bV9tYXJrZWQ7CisKKwlpZiAoZGlydHktPmVuZCA8PSBkaXJ0eS0+c3Rh
cnQpCisJCXJldHVybjsKKworCW51bV9tYXJrZWQgPSBhcHBseV9hc193cnByb3RlY3QodmJvLT5i
YXNlLmJkZXYtPmRldl9tYXBwaW5nLAorCQkJCQlkaXJ0eS0+c3RhcnQgKyBvZmZzZXQsCisJCQkJ
CWRpcnR5LT5lbmQgLSBkaXJ0eS0+c3RhcnQpOworCisJaWYgKDEwMFVMICogbnVtX21hcmtlZCAv
IGRpcnR5LT5iaXRtYXBfc2l6ZSA+CisJICAgIFZNV19ESVJUWV9QRVJDRU5UQUdFKSB7CisJCWRp
cnR5LT5jaGFuZ2VfY291bnQrKzsKKwl9IGVsc2UgeworCQlkaXJ0eS0+Y2hhbmdlX2NvdW50ID0g
MDsKKwl9CisKKwlpZiAoZGlydHktPmNoYW5nZV9jb3VudCA+IFZNV19ESVJUWV9OVU1fQ0hBTkdF
X1RSSUdHRVJTKSB7CisJCXBnb2ZmX3Qgc3RhcnQgPSAwOworCQlwZ29mZl90IGVuZCA9IGRpcnR5
LT5iaXRtYXBfc2l6ZTsKKworCQlkaXJ0eS0+bWV0aG9kID0gVk1XX0JPX0RJUlRZX1BBR0VUQUJM
RTsKKwkJYXBwbHlfYXNfY2xlYW4obWFwcGluZywgb2Zmc2V0LCBlbmQsIG9mZnNldCwgJmRpcnR5
LT5iaXRtYXBbMF0sCisJCQkgICAgICAgJnN0YXJ0LCAmZW5kKTsKKwkJYml0bWFwX2NsZWFyKCZk
aXJ0eS0+Yml0bWFwWzBdLCAwLCBkaXJ0eS0+Yml0bWFwX3NpemUpOworCQlpZiAoZGlydHktPnN0
YXJ0IDwgZGlydHktPmVuZCkKKwkJCWJpdG1hcF9zZXQoJmRpcnR5LT5iaXRtYXBbMF0sIGRpcnR5
LT5zdGFydCwKKwkJCQkgICBkaXJ0eS0+ZW5kIC0gZGlydHktPnN0YXJ0KTsKKwkJZGlydHktPmNo
YW5nZV9jb3VudCA9IDA7CisJfQorfQorCisKKy8qKgorICogdm13X2JvX2RpcnR5X3NjYW4gLSBT
Y2FuIGZvciBkaXJ0eSBwYWdlcyBhbmQgYWRkIHRoZW0gdG8gdGhlIGRpcnR5CisgKiB0cmFja2lu
ZyBzdHJ1Y3R1cmUKKyAqIEB2Ym86IFRoZSBidWZmZXIgb2JqZWN0IHRvIHNjYW4KKyAqCisgKiBU
aGlzIGZ1bmN0aW9uIG1heSBjaGFuZ2UgdGhlIGRpcnR5IHRyYWNraW5nIG1ldGhvZC4KKyAqLwor
dm9pZCB2bXdfYm9fZGlydHlfc2NhbihzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmplY3QgKnZibykKK3sK
KwlzdHJ1Y3Qgdm13X2JvX2RpcnR5ICpkaXJ0eSA9IHZiby0+ZGlydHk7CisKKwlpZiAoZGlydHkt
Pm1ldGhvZCA9PSBWTVdfQk9fRElSVFlfUEFHRVRBQkxFKQorCQl2bXdfYm9fZGlydHlfc2Nhbl9w
YWdldGFibGUodmJvKTsKKwllbHNlCisJCXZtd19ib19kaXJ0eV9zY2FuX21rd3JpdGUodmJvKTsK
K30KKworLyoqCisgKiB2bXdfYm9fZGlydHlfYWRkIC0gQWRkIGEgZGlydHktdHJhY2tpbmcgdXNl
ciB0byBhIGJ1ZmZlciBvYmplY3QKKyAqIEB2Ym86IFRoZSBidWZmZXIgb2JqZWN0CisgKgorICog
VGhpcyBmdW5jdGlvbiByZWdpc3RlcnMgYSBkaXJ0eS10cmFja2luZyB1c2VyIHRvIGEgYnVmZmVy
IG9iamVjdC4KKyAqIEEgdXNlciBjYW4gYmUgZm9yIGV4YW1wbGUgYSByZXNvdXJjZSBvciBhIHZt
YSBpbiBhIHNwZWNpYWwgdXNlci1zcGFjZQorICogbWFwcGluZy4KKyAqCisgKiBSZXR1cm46IFpl
cm8gb24gc3VjY2VzcywgLUVOT01FTSBvbiBtZW1vcnkgYWxsb2NhdGlvbiBmYWlsdXJlLgorICov
CitpbnQgdm13X2JvX2RpcnR5X2FkZChzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmplY3QgKnZibykKK3sK
KwlzdHJ1Y3Qgdm13X2JvX2RpcnR5ICpkaXJ0eSA9IHZiby0+ZGlydHk7CisJcGdvZmZfdCBudW1f
cGFnZXMgPSB2Ym8tPmJhc2UubnVtX3BhZ2VzOworCXNpemVfdCBzaXplLCBhY2Nfc2l6ZTsKKwlp
bnQgcmV0OworCXN0YXRpYyBzdHJ1Y3QgdHRtX29wZXJhdGlvbl9jdHggY3R4ID0geworCQkuaW50
ZXJydXB0aWJsZSA9IGZhbHNlLAorCQkubm9fd2FpdF9ncHUgPSBmYWxzZQorCX07CisKKwlpZiAo
ZGlydHkpIHsKKwkJZGlydHktPnJlZl9jb3VudCsrOworCQlyZXR1cm4gMDsKKwl9CisKKwlzaXpl
ID0gc2l6ZW9mKCpkaXJ0eSkgKyBCSVRTX1RPX0xPTkdTKG51bV9wYWdlcykgKiBzaXplb2YobG9u
Zyk7CisJYWNjX3NpemUgPSB0dG1fcm91bmRfcG90KHNpemUpOworCXJldCA9IHR0bV9tZW1fZ2xv
YmFsX2FsbG9jKCZ0dG1fbWVtX2dsb2IsIGFjY19zaXplLCAmY3R4KTsKKwlpZiAocmV0KSB7CisJ
CVZNV19ERUJVR19VU0VSKCJPdXQgb2YgZ3JhcGhpY3MgbWVtb3J5IGZvciBidWZmZXIgb2JqZWN0
ICIKKwkJCSAgICAgICAiZGlydHkgdHJhY2tlci5cbiIpOworCQlyZXR1cm4gcmV0OworCX0KKwlk
aXJ0eSA9IGt2emFsbG9jKHNpemUsIEdGUF9LRVJORUwpOworCWlmICghZGlydHkpIHsKKwkJcmV0
ID0gLUVOT01FTTsKKwkJZ290byBvdXRfbm9fZGlydHk7CisJfQorCisJZGlydHktPnNpemUgPSBh
Y2Nfc2l6ZTsKKwlkaXJ0eS0+Yml0bWFwX3NpemUgPSBudW1fcGFnZXM7CisJZGlydHktPnN0YXJ0
ID0gZGlydHktPmJpdG1hcF9zaXplOworCWRpcnR5LT5lbmQgPSAwOworCWRpcnR5LT5yZWZfY291
bnQgPSAxOworCWlmIChudW1fcGFnZXMgPCBQQUdFX1NJWkUgLyBzaXplb2YocHRlX3QpKSB7CisJ
CWRpcnR5LT5tZXRob2QgPSBWTVdfQk9fRElSVFlfUEFHRVRBQkxFOworCX0gZWxzZSB7CisJCXN0
cnVjdCBhZGRyZXNzX3NwYWNlICptYXBwaW5nID0gdmJvLT5iYXNlLmJkZXYtPmRldl9tYXBwaW5n
OworCQlwZ29mZl90IG9mZnNldCA9IGRybV92bWFfbm9kZV9zdGFydCgmdmJvLT5iYXNlLmJhc2Uu
dm1hX25vZGUpOworCisJCWRpcnR5LT5tZXRob2QgPSBWTVdfQk9fRElSVFlfTUtXUklURTsKKwor
CQkvKiBXcml0ZS1wcm90ZWN0IGFuZCB0aGVuIHBpY2sgdXAgYWxyZWFkeSBkaXJ0eSBiaXRzICov
CisJCWFwcGx5X2FzX3dycHJvdGVjdChtYXBwaW5nLCBvZmZzZXQsIG51bV9wYWdlcyk7CisJCWFw
cGx5X2FzX2NsZWFuKG1hcHBpbmcsIG9mZnNldCwgbnVtX3BhZ2VzLCBvZmZzZXQsCisJCQkgICAg
ICAgJmRpcnR5LT5iaXRtYXBbMF0sICZkaXJ0eS0+c3RhcnQsICZkaXJ0eS0+ZW5kKTsKKwl9CisK
Kwl2Ym8tPmRpcnR5ID0gZGlydHk7CisKKwlyZXR1cm4gMDsKKworb3V0X25vX2RpcnR5OgorCXR0
bV9tZW1fZ2xvYmFsX2ZyZWUoJnR0bV9tZW1fZ2xvYiwgYWNjX3NpemUpOworCXJldHVybiByZXQ7
Cit9CisKKy8qKgorICogdm13X2JvX2RpcnR5X3JlbGVhc2UgLSBSZWxlYXNlIGEgZGlydHktdHJh
Y2tpbmcgdXNlciBmcm9tIGEgYnVmZmVyIG9iamVjdAorICogQHZibzogVGhlIGJ1ZmZlciBvYmpl
Y3QKKyAqCisgKiBUaGlzIGZ1bmN0aW9uIHJlbGVhc2VzIGEgZGlydHktdHJhY2tpbmcgdXNlciBm
cm9tIGEgYnVmZmVyIG9iamVjdC4KKyAqIElmIHRoZSByZWZlcmVuY2UgY291bnQgcmVhY2hlcyB6
ZXJvLCB0aGVuIHRoZSBkaXJ0eS10cmFja2luZyBvYmplY3QgaXMKKyAqIGZyZWVkIGFuZCB0aGUg
cG9pbnRlciB0byBpdCBjbGVhcmVkLgorICoKKyAqIFJldHVybjogWmVybyBvbiBzdWNjZXNzLCAt
RU5PTUVNIG9uIG1lbW9yeSBhbGxvY2F0aW9uIGZhaWx1cmUuCisgKi8KK3ZvaWQgdm13X2JvX2Rp
cnR5X3JlbGVhc2Uoc3RydWN0IHZtd19idWZmZXJfb2JqZWN0ICp2Ym8pCit7CisJc3RydWN0IHZt
d19ib19kaXJ0eSAqZGlydHkgPSB2Ym8tPmRpcnR5OworCisJaWYgKGRpcnR5ICYmIC0tZGlydHkt
PnJlZl9jb3VudCA9PSAwKSB7CisJCXNpemVfdCBhY2Nfc2l6ZSA9IGRpcnR5LT5zaXplOworCisJ
CWt2ZnJlZShkaXJ0eSk7CisJCXR0bV9tZW1fZ2xvYmFsX2ZyZWUoJnR0bV9tZW1fZ2xvYiwgYWNj
X3NpemUpOworCQl2Ym8tPmRpcnR5ID0gTlVMTDsKKwl9Cit9CisKKy8qKgorICogdm13X2JvX2Rp
cnR5X3RyYW5zZmVyX3RvX3JlcyAtIFBpY2sgdXAgYSByZXNvdXJjZSdzIGRpcnR5IHJlZ2lvbiBm
cm9tCisgKiBpdHMgYmFja2luZyBtb2IuCisgKiBAcmVzOiBUaGUgcmVzb3VyY2UKKyAqCisgKiBU
aGlzIGZ1bmN0aW9uIHdpbGwgcGljayB1cCBhbGwgZGlydHkgcmFuZ2VzIGFmZmVjdGluZyB0aGUg
cmVzb3VyY2UgZnJvbQorICogaXQncyBiYWNrdXAgbW9iLCBhbmQgY2FsbCB2bXdfcmVzb3VyY2Vf
ZGlydHlfdXBkYXRlKCkgb25jZSBmb3IgZWFjaAorICogcmFuZ2UuIFRoZSB0cmFuc2ZlcnJlZCBy
YW5nZXMgd2lsbCBiZSBjbGVhcmVkIGZyb20gdGhlIGJhY2tpbmcgbW9iJ3MKKyAqIGRpcnR5IHRy
YWNraW5nLgorICovCit2b2lkIHZtd19ib19kaXJ0eV90cmFuc2Zlcl90b19yZXMoc3RydWN0IHZt
d19yZXNvdXJjZSAqcmVzKQoreworCXN0cnVjdCB2bXdfYnVmZmVyX29iamVjdCAqdmJvID0gcmVz
LT5iYWNrdXA7CisJc3RydWN0IHZtd19ib19kaXJ0eSAqZGlydHkgPSB2Ym8tPmRpcnR5OworCXBn
b2ZmX3Qgc3RhcnQsIGN1ciwgZW5kOworCXVuc2lnbmVkIGxvbmcgcmVzX3N0YXJ0ID0gcmVzLT5i
YWNrdXBfb2Zmc2V0OworCXVuc2lnbmVkIGxvbmcgcmVzX2VuZCA9IHJlcy0+YmFja3VwX29mZnNl
dCArIHJlcy0+YmFja3VwX3NpemU7CisKKwlXQVJOX09OX09OQ0UocmVzX3N0YXJ0ICYgflBBR0Vf
TUFTSyk7CisJcmVzX3N0YXJ0ID4+PSBQQUdFX1NISUZUOworCXJlc19lbmQgPSBESVZfUk9VTkRf
VVAocmVzX2VuZCwgUEFHRV9TSVpFKTsKKworCWlmIChyZXNfc3RhcnQgPj0gZGlydHktPmVuZCB8
fCByZXNfZW5kIDw9IGRpcnR5LT5zdGFydCkKKwkJcmV0dXJuOworCisJY3VyID0gbWF4KHJlc19z
dGFydCwgZGlydHktPnN0YXJ0KTsKKwlyZXNfZW5kID0gbWF4KHJlc19lbmQsIGRpcnR5LT5lbmQp
OworCXdoaWxlIChjdXIgPCByZXNfZW5kKSB7CisJCXVuc2lnbmVkIGxvbmcgbnVtOworCisJCXN0
YXJ0ID0gZmluZF9uZXh0X2JpdCgmZGlydHktPmJpdG1hcFswXSwgcmVzX2VuZCwgY3VyKTsKKwkJ
aWYgKHN0YXJ0ID49IHJlc19lbmQpCisJCQlicmVhazsKKworCQllbmQgPSBmaW5kX25leHRfemVy
b19iaXQoJmRpcnR5LT5iaXRtYXBbMF0sIHJlc19lbmQsIHN0YXJ0ICsgMSk7CisJCWN1ciA9IGVu
ZCArIDE7CisJCW51bSA9IGVuZCAtIHN0YXJ0OworCQliaXRtYXBfY2xlYXIoJmRpcnR5LT5iaXRt
YXBbMF0sIHN0YXJ0LCBudW0pOworCQl2bXdfcmVzb3VyY2VfZGlydHlfdXBkYXRlKHJlcywgc3Rh
cnQsIGVuZCk7CisJfQorCisJaWYgKHJlc19zdGFydCA8PSBkaXJ0eS0+c3RhcnQgJiYgcmVzX2Vu
ZCA+IGRpcnR5LT5zdGFydCkKKwkJZGlydHktPnN0YXJ0ID0gcmVzX2VuZDsKKwlpZiAocmVzX3N0
YXJ0IDwgZGlydHktPmVuZCAmJiByZXNfZW5kID49IGRpcnR5LT5lbmQpCisJCWRpcnR5LT5lbmQg
PSByZXNfc3RhcnQ7Cit9CisKKy8qKgorICogdm13X2JvX2RpcnR5X2NsZWFyX3JlcyAtIENsZWFy
IGEgcmVzb3VyY2UncyBkaXJ0eSByZWdpb24gZnJvbQorICogaXRzIGJhY2tpbmcgbW9iLgorICog
QHJlczogVGhlIHJlc291cmNlCisgKgorICogVGhpcyBmdW5jdGlvbiB3aWxsIGNsZWFyIGFsbCBk
aXJ0eSByYW5nZXMgYWZmZWN0aW5nIHRoZSByZXNvdXJjZSBmcm9tCisgKiBpdCdzIGJhY2t1cCBt
b2IncyBkaXJ0eSB0cmFja2luZy4KKyAqLwordm9pZCB2bXdfYm9fZGlydHlfY2xlYXJfcmVzKHN0
cnVjdCB2bXdfcmVzb3VyY2UgKnJlcykKK3sKKwl1bnNpZ25lZCBsb25nIHJlc19zdGFydCA9IHJl
cy0+YmFja3VwX29mZnNldDsKKwl1bnNpZ25lZCBsb25nIHJlc19lbmQgPSByZXMtPmJhY2t1cF9v
ZmZzZXQgKyByZXMtPmJhY2t1cF9zaXplOworCXN0cnVjdCB2bXdfYnVmZmVyX29iamVjdCAqdmJv
ID0gcmVzLT5iYWNrdXA7CisJc3RydWN0IHZtd19ib19kaXJ0eSAqZGlydHkgPSB2Ym8tPmRpcnR5
OworCisJcmVzX3N0YXJ0ID4+PSBQQUdFX1NISUZUOworCXJlc19lbmQgPSBESVZfUk9VTkRfVVAo
cmVzX2VuZCwgUEFHRV9TSVpFKTsKKworCWlmIChyZXNfc3RhcnQgPj0gZGlydHktPmVuZCB8fCBy
ZXNfZW5kIDw9IGRpcnR5LT5zdGFydCkKKwkJcmV0dXJuOworCisJcmVzX3N0YXJ0ID0gbWF4KHJl
c19zdGFydCwgZGlydHktPnN0YXJ0KTsKKwlyZXNfZW5kID0gbWluKHJlc19lbmQsIGRpcnR5LT5l
bmQpOworCWJpdG1hcF9jbGVhcigmZGlydHktPmJpdG1hcFswXSwgcmVzX3N0YXJ0LCByZXNfZW5k
IC0gcmVzX3N0YXJ0KTsKKworCWlmIChyZXNfc3RhcnQgPD0gZGlydHktPnN0YXJ0ICYmIHJlc19l
bmQgPiBkaXJ0eS0+c3RhcnQpCisJCWRpcnR5LT5zdGFydCA9IHJlc19lbmQ7CisJaWYgKHJlc19z
dGFydCA8IGRpcnR5LT5lbmQgJiYgcmVzX2VuZCA+PSBkaXJ0eS0+ZW5kKQorCQlkaXJ0eS0+ZW5k
ID0gcmVzX3N0YXJ0OworfQorCit2bV9mYXVsdF90IHZtd19ib192bV9ta3dyaXRlKHN0cnVjdCB2
bV9mYXVsdCAqdm1mKQoreworCXN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hID0gdm1mLT52bWE7
CisJc3RydWN0IHR0bV9idWZmZXJfb2JqZWN0ICpibyA9IChzdHJ1Y3QgdHRtX2J1ZmZlcl9vYmpl
Y3QgKikKKwkgICAgdm1hLT52bV9wcml2YXRlX2RhdGE7CisJdm1fZmF1bHRfdCByZXQ7CisJdW5z
aWduZWQgbG9uZyBwYWdlX29mZnNldDsKKwl1bnNpZ25lZCBpbnQgc2F2ZV9mbGFnczsKKwlzdHJ1
Y3Qgdm13X2J1ZmZlcl9vYmplY3QgKnZibyA9CisJCWNvbnRhaW5lcl9vZihibywgdHlwZW9mKCp2
Ym8pLCBiYXNlKTsKKworCS8qCisJICogbWt3cml0ZSgpIGRvZXNuJ3QgaGFuZGxlIHRoZSBWTV9G
QVVMVF9SRVRSWSByZXR1cm4gdmFsdWUgY29ycmVjdGx5LgorCSAqIFNvIG1ha2Ugc3VyZSB0aGUg
VFRNIGhlbHBlcnMgYXJlIGF3YXJlLgorCSAqLworCXNhdmVfZmxhZ3MgPSB2bWYtPmZsYWdzOwor
CXZtZi0+ZmxhZ3MgJj0gfkZBVUxUX0ZMQUdfQUxMT1dfUkVUUlk7CisJcmV0ID0gdHRtX2JvX3Zt
X3Jlc2VydmUoYm8sIHZtZik7CisJdm1mLT5mbGFncyA9IHNhdmVfZmxhZ3M7CisJaWYgKHJldCkK
KwkJcmV0dXJuIHJldDsKKworCXBhZ2Vfb2Zmc2V0ID0gdm1mLT5wZ29mZiAtIGRybV92bWFfbm9k
ZV9zdGFydCgmYm8tPmJhc2Uudm1hX25vZGUpOworCWlmICh1bmxpa2VseShwYWdlX29mZnNldCA+
PSBiby0+bnVtX3BhZ2VzKSkgeworCQlyZXQgPSBWTV9GQVVMVF9TSUdCVVM7CisJCWdvdG8gb3V0
X3VubG9jazsKKwl9CisKKwlpZiAodmJvLT5kaXJ0eSAmJiB2Ym8tPmRpcnR5LT5tZXRob2QgPT0g
Vk1XX0JPX0RJUlRZX01LV1JJVEUgJiYKKwkgICAgIXRlc3RfYml0KHBhZ2Vfb2Zmc2V0LCAmdmJv
LT5kaXJ0eS0+Yml0bWFwWzBdKSkgeworCQlzdHJ1Y3Qgdm13X2JvX2RpcnR5ICpkaXJ0eSA9IHZi
by0+ZGlydHk7CisKKwkJX19zZXRfYml0KHBhZ2Vfb2Zmc2V0LCAmZGlydHktPmJpdG1hcFswXSk7
CisJCWRpcnR5LT5zdGFydCA9IG1pbihkaXJ0eS0+c3RhcnQsIHBhZ2Vfb2Zmc2V0KTsKKwkJZGly
dHktPmVuZCA9IG1heChkaXJ0eS0+ZW5kLCBwYWdlX29mZnNldCArIDEpOworCX0KKworb3V0X3Vu
bG9jazoKKwlkbWFfcmVzdl91bmxvY2soYm8tPmJhc2UucmVzdik7CisJcmV0dXJuIHJldDsKK30K
Kwordm1fZmF1bHRfdCB2bXdfYm9fdm1fZmF1bHQoc3RydWN0IHZtX2ZhdWx0ICp2bWYpCit7CisJ
c3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEgPSB2bWYtPnZtYTsKKwlzdHJ1Y3QgdHRtX2J1ZmZl
cl9vYmplY3QgKmJvID0gKHN0cnVjdCB0dG1fYnVmZmVyX29iamVjdCAqKQorCSAgICB2bWEtPnZt
X3ByaXZhdGVfZGF0YTsKKwlzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmplY3QgKnZibyA9CisJCWNvbnRh
aW5lcl9vZihibywgc3RydWN0IHZtd19idWZmZXJfb2JqZWN0LCBiYXNlKTsKKwlwZ29mZl90IG51
bV9wcmVmYXVsdDsKKwlwZ3Byb3RfdCBwcm90OworCXZtX2ZhdWx0X3QgcmV0OworCisJcmV0ID0g
dHRtX2JvX3ZtX3Jlc2VydmUoYm8sIHZtZik7CisJaWYgKHJldCkKKwkJcmV0dXJuIHJldDsKKwor
CS8qCisJICogVGhpcyB3aWxsIGNhdXNlIG1rd3JpdGUoKSB0byBiZSBjYWxsZWQgZm9yIGVhY2gg
cHRlIG9uCisJICogd3JpdGUtZW5hYmxlIHZtYXMuCisJICovCisJaWYgKHZiby0+ZGlydHkgJiYg
dmJvLT5kaXJ0eS0+bWV0aG9kID09IFZNV19CT19ESVJUWV9NS1dSSVRFKQorCQlwcm90ID0gdm1h
LT52bV9wYWdlX3Byb3Q7CisJZWxzZQorCQlwcm90ID0gdm1fZ2V0X3BhZ2VfcHJvdCh2bWEtPnZt
X2ZsYWdzKTsKKworCW51bV9wcmVmYXVsdCA9ICh2bWEtPnZtX2ZsYWdzICYgVk1fUkFORF9SRUFE
KSA/IDAgOgorCQlUVE1fQk9fVk1fTlVNX1BSRUZBVUxUOworCXJldCA9IHR0bV9ib192bV9mYXVs
dF9yZXNlcnZlZCh2bWYsIHByb3QsIG51bV9wcmVmYXVsdCk7CisJaWYgKHJldCA9PSBWTV9GQVVM
VF9SRVRSWSAmJiAhKHZtZi0+ZmxhZ3MgJiBGQVVMVF9GTEFHX1JFVFJZX05PV0FJVCkpCisJCXJl
dHVybiByZXQ7CisKKwlkbWFfcmVzdl91bmxvY2soYm8tPmJhc2UucmVzdik7CisJcmV0dXJuIHJl
dDsKK30KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3Jlc291cmNl
LmMgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9yZXNvdXJjZS5jCmluZGV4IDU1ODFh
NzgyNmI0Yy4uZTRjOTdhNGNmMmZmIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4
L3Ztd2dmeF9yZXNvdXJjZS5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3Jl
c291cmNlLmMKQEAgLTExOSw2ICsxMTksMTAgQEAgc3RhdGljIHZvaWQgdm13X3Jlc291cmNlX3Jl
bGVhc2Uoc3RydWN0IGtyZWYgKmtyZWYpCiAJCX0KIAkJcmVzLT5iYWNrdXBfZGlydHkgPSBmYWxz
ZTsKIAkJdm13X3Jlc291cmNlX21vYl9kZXRhY2gocmVzKTsKKwkJaWYgKHJlcy0+ZGlydHkpCisJ
CQlyZXMtPmZ1bmMtPmRpcnR5X2ZyZWUocmVzKTsKKwkJaWYgKHJlcy0+Y29oZXJlbnQpCisJCQl2
bXdfYm9fZGlydHlfcmVsZWFzZShyZXMtPmJhY2t1cCk7CiAJCXR0bV9ib191bnJlc2VydmUoYm8p
OwogCQl2bXdfYm9fdW5yZWZlcmVuY2UoJnJlcy0+YmFja3VwKTsKIAl9CkBAIC0yMDgsNyArMjEy
LDkgQEAgaW50IHZtd19yZXNvdXJjZV9pbml0KHN0cnVjdCB2bXdfcHJpdmF0ZSAqZGV2X3ByaXYs
IHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcywKIAlyZXMtPmJhY2t1cF9vZmZzZXQgPSAwOwogCXJl
cy0+YmFja3VwX2RpcnR5ID0gZmFsc2U7CiAJcmVzLT5yZXNfZGlydHkgPSBmYWxzZTsKKwlyZXMt
PmNvaGVyZW50ID0gZmFsc2U7CiAJcmVzLT51c2VkX3ByaW8gPSAzOworCXJlcy0+ZGlydHkgPSBO
VUxMOwogCWlmIChkZWxheV9pZCkKIAkJcmV0dXJuIDA7CiAJZWxzZQpAQCAtMzk1LDYgKzQwMSwz
MCBAQCBzdGF0aWMgaW50IHZtd19yZXNvdXJjZV9kb192YWxpZGF0ZShzdHJ1Y3Qgdm13X3Jlc291
cmNlICpyZXMsCiAJCQl2bXdfcmVzb3VyY2VfbW9iX2F0dGFjaChyZXMpOwogCX0KIAorCS8qCisJ
ICogSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBiYWNrdXAgbW9iIGlzIG1hcmtlZCBjb2hlcmVu
dCBidXQKKwkgKiB0aGUgcmVzb3VyY2UgaXNuJ3QuCisJICovCisJaWYgKGZ1bmMtPmRpcnR5X2Fs
bG9jICYmIHZtd19yZXNvdXJjZV9tb2JfYXR0YWNoZWQocmVzKSAmJgorCSAgICAhcmVzLT5jb2hl
cmVudCkgeworCQlpZiAocmVzLT5iYWNrdXAtPmRpcnR5ICYmICFyZXMtPmRpcnR5KSB7CisJCQly
ZXQgPSBmdW5jLT5kaXJ0eV9hbGxvYyhyZXMpOworCQkJaWYgKHJldCkKKwkJCQlyZXR1cm4gcmV0
OworCQl9IGVsc2UgaWYgKCFyZXMtPmJhY2t1cC0+ZGlydHkgJiYgcmVzLT5kaXJ0eSkgeworCQkJ
ZnVuYy0+ZGlydHlfZnJlZShyZXMpOworCQl9CisJfQorCisJLyoKKwkgKiBUcmFuc2ZlciB0aGUg
ZGlydHkgcmVnaW9ucyB0byB0aGUgcmVzb3VyY2UgYW5kIHVwZGF0ZQorCSAqIHRoZSByZXNvdXJj
ZS4KKwkgKi8KKwlpZiAocmVzLT5kaXJ0eSkgeworCQl2bXdfYm9fZGlydHlfdHJhbnNmZXJfdG9f
cmVzKHJlcyk7CisJCXJldHVybiBmdW5jLT5kaXJ0eV9zeW5jKHJlcyk7CisJfQorCiAJcmV0dXJu
IDA7CiAKIG91dF9iaW5kX2ZhaWxlZDoKQEAgLTQzMywxNiArNDYzLDI4IEBAIHZvaWQgdm13X3Jl
c291cmNlX3VucmVzZXJ2ZShzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMsCiAJaWYgKHN3aXRjaF9i
YWNrdXAgJiYgbmV3X2JhY2t1cCAhPSByZXMtPmJhY2t1cCkgewogCQlpZiAocmVzLT5iYWNrdXAp
IHsKIAkJCXZtd19yZXNvdXJjZV9tb2JfZGV0YWNoKHJlcyk7CisJCQlpZiAocmVzLT5jb2hlcmVu
dCkKKwkJCQl2bXdfYm9fZGlydHlfcmVsZWFzZShyZXMtPmJhY2t1cCk7CiAJCQl2bXdfYm9fdW5y
ZWZlcmVuY2UoJnJlcy0+YmFja3VwKTsKIAkJfQogCiAJCWlmIChuZXdfYmFja3VwKSB7CiAJCQly
ZXMtPmJhY2t1cCA9IHZtd19ib19yZWZlcmVuY2UobmV3X2JhY2t1cCk7CisKKwkJCS8qCisJCQkg
KiBUaGUgdmFsaWRhdGlvbiBjb2RlIHNob3VsZCBhbHJlYWR5IGhhdmUgYWRkZWQgYQorCQkJICog
ZGlydHkgdHJhY2tlciBoZXJlLgorCQkJICovCisJCQlXQVJOX09OKHJlcy0+Y29oZXJlbnQgJiYg
IW5ld19iYWNrdXAtPmRpcnR5KTsKKwogCQkJdm13X3Jlc291cmNlX21vYl9hdHRhY2gocmVzKTsK
IAkJfSBlbHNlIHsKIAkJCXJlcy0+YmFja3VwID0gTlVMTDsKIAkJfQorCX0gZWxzZSBpZiAoc3dp
dGNoX2JhY2t1cCAmJiByZXMtPmNvaGVyZW50KSB7CisJCXZtd19ib19kaXJ0eV9yZWxlYXNlKHJl
cy0+YmFja3VwKTsKIAl9CisKIAlpZiAoc3dpdGNoX2JhY2t1cCkKIAkJcmVzLT5iYWNrdXBfb2Zm
c2V0ID0gbmV3X2JhY2t1cF9vZmZzZXQ7CiAKQEAgLTEwMDgsMyArMTA1MCwxOCBAQCBlbnVtIHZt
d19yZXNfdHlwZSB2bXdfcmVzX3R5cGUoY29uc3Qgc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzKQog
ewogCXJldHVybiByZXMtPmZ1bmMtPnJlc190eXBlOwogfQorCisvKioKKyAqIHZtd19yZXNvdXJj
ZV91cGRhdGVfZGlydHkgLSBVcGRhdGUgYSByZXNvdXJjZSdzIGRpcnR5IHRyYWNrZXIgd2l0aCBh
CisgKiBzZXF1ZW50aWFsIHJhbmdlIG9mIHRvdWNoZWQgYmFja2luZyBzdG9yZSBtZW1vcnkuCisg
KiBAcmVzOiBUaGUgcmVzb3VyY2UuCisgKiBAc3RhcnQ6IFRoZSBmaXJzdCBwYWdlIHRvdWNoZWQu
CisgKiBAZW5kOiBUaGUgbGFzdCBwYWdlIHRvdWNoZWQgKyAxLgorICovCit2b2lkIHZtd19yZXNv
dXJjZV9kaXJ0eV91cGRhdGUoc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzLCBwZ29mZl90IHN0YXJ0
LAorCQkJICAgICAgIHBnb2ZmX3QgZW5kKQoreworCWlmIChyZXMtPmRpcnR5KQorCQlyZXMtPmZ1
bmMtPmRpcnR5X3JhbmdlX2FkZChyZXMsIHN0YXJ0IDw8IFBBR0VfU0hJRlQsCisJCQkJCSAgIGVu
ZCA8PCBQQUdFX1NISUZUKTsKK30KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngv
dm13Z2Z4X3Jlc291cmNlX3ByaXYuaCBiL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3Jl
c291cmNlX3ByaXYuaAppbmRleCA5ODRlNTg4YzYyY2EuLmM4NTE0NDI4NmNmZSAxMDA2NDQKLS0t
IGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfcmVzb3VyY2VfcHJpdi5oCisrKyBiL2Ry
aXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3Jlc291cmNlX3ByaXYuaApAQCAtNzEsNiArNzEs
MTIgQEAgc3RydWN0IHZtd191c2VyX3Jlc291cmNlX2NvbnYgewogICogQGNvbW1pdF9ub3RpZnk6
ICAgICBJZiB0aGUgcmVzb3VyY2UgaXMgYSBjb21tYW5kIGJ1ZmZlciBtYW5hZ2VkIHJlc291cmNl
LAogICogICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayB0byBub3RpZnkgdGhhdCBhIGRlZmlu
ZSBvciByZW1vdmUgY29tbWFuZAogICogICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBjb21t
aXR0ZWQgdG8gdGhlIGRldmljZS4KKyAqIEBkaXJ0eV9hbGxvYzogICAgICAgQWxsb2NhdGUgYSBk
aXJ0eSB0cmFja2VyLiBOVUxMIGlmIGRpcnR5LXRyYWNraW5nIGlzIG5vdAorICogICAgICAgICAg
ICAgICAgICAgICBzdXBwb3J0ZWQuCisgKiBAZGlydHlfZnJlZTogICAgICAgIEZyZWUgdGhlIGRp
cnR5IHRyYWNrZXIuCisgKiBAZGlydHlfc3luYzogICAgICAgIFVwbG9hZCB0aGUgZGlydHkgbW9i
IGNvbnRlbnRzIHRvIHRoZSByZXNvdXJjZS4KKyAqIEBkaXJ0eV9hZGRfcmFuZ2U6ICAgQWRkIGEg
c2VxdWVudGlhbCBkaXJ0eSByYW5nZSB0byB0aGUgcmVzb3VyY2UKKyAqICAgICAgICAgICAgICAg
ICAgICAgZGlydHkgdHJhY2tlci4KICAqLwogc3RydWN0IHZtd19yZXNfZnVuYyB7CiAJZW51bSB2
bXdfcmVzX3R5cGUgcmVzX3R5cGU7CkBAIC05MCw2ICs5NiwxMSBAQCBzdHJ1Y3Qgdm13X3Jlc19m
dW5jIHsKIAkJICAgICAgIHN0cnVjdCB0dG1fdmFsaWRhdGVfYnVmZmVyICp2YWxfYnVmKTsKIAl2
b2lkICgqY29tbWl0X25vdGlmeSkoc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzLAogCQkJICAgICAg
ZW51bSB2bXdfY21kYnVmX3Jlc19zdGF0ZSBzdGF0ZSk7CisJaW50ICgqZGlydHlfYWxsb2MpKHN0
cnVjdCB2bXdfcmVzb3VyY2UgKnJlcyk7CisJdm9pZCAoKmRpcnR5X2ZyZWUpKHN0cnVjdCB2bXdf
cmVzb3VyY2UgKnJlcyk7CisJaW50ICgqZGlydHlfc3luYykoc3RydWN0IHZtd19yZXNvdXJjZSAq
cmVzKTsKKwl2b2lkICgqZGlydHlfcmFuZ2VfYWRkKShzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMs
IHNpemVfdCBzdGFydCwKKwkJCQkgc2l6ZV90IGVuZCk7CiB9OwogCiAvKioKZGlmZiAtLWdpdCBh
L2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3R0bV9nbHVlLmMgYi9kcml2ZXJzL2dwdS9k
cm0vdm13Z2Z4L3Ztd2dmeF90dG1fZ2x1ZS5jCmluZGV4IDVhN2I4YmI0MjBkZS4uY2UyODg3NTY1
MzFiIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF90dG1fZ2x1ZS5j
CisrKyBiL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3R0bV9nbHVlLmMKQEAgLTI5LDEw
ICsyOSwyMyBAQAogCiBpbnQgdm13X21tYXAoc3RydWN0IGZpbGUgKmZpbHAsIHN0cnVjdCB2bV9h
cmVhX3N0cnVjdCAqdm1hKQogeworCXN0YXRpYyBjb25zdCBzdHJ1Y3Qgdm1fb3BlcmF0aW9uc19z
dHJ1Y3Qgdm13X3ZtX29wcyA9IHsKKwkJLnBmbl9ta3dyaXRlID0gdm13X2JvX3ZtX21rd3JpdGUs
CisJCS5wYWdlX21rd3JpdGUgPSB2bXdfYm9fdm1fbWt3cml0ZSwKKwkJLmZhdWx0ID0gdm13X2Jv
X3ZtX2ZhdWx0LAorCQkub3BlbiA9IHR0bV9ib192bV9vcGVuLAorCQkuY2xvc2UgPSB0dG1fYm9f
dm1fY2xvc2UKKwl9OwogCXN0cnVjdCBkcm1fZmlsZSAqZmlsZV9wcml2ID0gZmlscC0+cHJpdmF0
ZV9kYXRhOwogCXN0cnVjdCB2bXdfcHJpdmF0ZSAqZGV2X3ByaXYgPSB2bXdfcHJpdihmaWxlX3By
aXYtPm1pbm9yLT5kZXYpOworCWludCByZXQgPSB0dG1fYm9fbW1hcChmaWxwLCB2bWEsICZkZXZf
cHJpdi0+YmRldik7CiAKLQlyZXR1cm4gdHRtX2JvX21tYXAoZmlscCwgdm1hLCAmZGV2X3ByaXYt
PmJkZXYpOworCWlmIChyZXQpCisJCXJldHVybiByZXQ7CisKKwl2bWEtPnZtX29wcyA9ICZ2bXdf
dm1fb3BzOworCisJcmV0dXJuIDA7CiB9CiAKIC8qIHN0cnVjdCB2bXdfdmFsaWRhdGlvbl9tZW0g
Y2FsbGJhY2sgKi8KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3Zh
bGlkYXRpb24uYyBiL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3ZhbGlkYXRpb24uYwpp
bmRleCBmNjExYjIyOTBhMWIuLjcxMzQ5YTdiYWU5MCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUv
ZHJtL3Ztd2dmeC92bXdnZnhfdmFsaWRhdGlvbi5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS92bXdn
Zngvdm13Z2Z4X3ZhbGlkYXRpb24uYwpAQCAtMzMsNiArMzMsOCBAQAogICogc3RydWN0IHZtd192
YWxpZGF0aW9uX2JvX25vZGUgLSBCdWZmZXIgb2JqZWN0IHZhbGlkYXRpb24gbWV0YWRhdGEuCiAg
KiBAYmFzZTogTWV0YWRhdGEgdXNlZCBmb3IgVFRNIHJlc2VydmF0aW9uLSBhbmQgdmFsaWRhdGlv
bi4KICAqIEBoYXNoOiBBIGhhc2ggZW50cnkgdXNlZCBmb3IgdGhlIGR1cGxpY2F0ZSBkZXRlY3Rp
b24gaGFzaCB0YWJsZS4KKyAqIEBjb2hlcmVudF9jb3VudDogSWYgc3dpdGNoaW5nIGJhY2t1cCBi
dWZmZXJzLCBudW1iZXIgb2YgbmV3IGNvaGVyZW50CisgKiByZXNvdXJjZXMgdGhhdCB3aWxsIGhh
dmUgdGhpcyBidWZmZXIgYXMgYSBiYWNrdXAgYnVmZmVyLgogICogQGFzX21vYjogVmFsaWRhdGUg
YXMgbW9iLgogICogQGNwdV9ibGl0OiBWYWxpZGF0ZSBmb3IgY3B1IGJsaXQgYWNjZXNzLgogICoK
QEAgLTQyLDYgKzQ0LDcgQEAKIHN0cnVjdCB2bXdfdmFsaWRhdGlvbl9ib19ub2RlIHsKIAlzdHJ1
Y3QgdHRtX3ZhbGlkYXRlX2J1ZmZlciBiYXNlOwogCXN0cnVjdCBkcm1faGFzaF9pdGVtIGhhc2g7
CisJdW5zaWduZWQgaW50IGNvaGVyZW50X2NvdW50OwogCXUzMiBhc19tb2IgOiAxOwogCXUzMiBj
cHVfYmxpdCA6IDE7CiB9OwpAQCAtNDU5LDYgKzQ2MiwxOSBAQCBpbnQgdm13X3ZhbGlkYXRpb25f
cmVzX3Jlc2VydmUoc3RydWN0IHZtd192YWxpZGF0aW9uX2NvbnRleHQgKmN0eCwKIAkJCWlmIChy
ZXQpCiAJCQkJZ290byBvdXRfdW5yZXNlcnZlOwogCQl9CisKKwkJaWYgKHZhbC0+c3dpdGNoaW5n
X2JhY2t1cCAmJiB2YWwtPm5ld19iYWNrdXAgJiYKKwkJICAgIHJlcy0+Y29oZXJlbnQpIHsKKwkJ
CXN0cnVjdCB2bXdfdmFsaWRhdGlvbl9ib19ub2RlICpib19ub2RlID0KKwkJCQl2bXdfdmFsaWRh
dGlvbl9maW5kX2JvX2R1cChjdHgsCisJCQkJCQkJICAgdmFsLT5uZXdfYmFja3VwKTsKKworCQkJ
aWYgKFdBUk5fT04oIWJvX25vZGUpKSB7CisJCQkJcmV0ID0gLUVJTlZBTDsKKwkJCQlnb3RvIG91
dF91bnJlc2VydmU7CisJCQl9CisJCQlib19ub2RlLT5jb2hlcmVudF9jb3VudCsrOworCQl9CiAJ
fQogCiAJcmV0dXJuIDA7CkBAIC01NjIsNiArNTc4LDkgQEAgaW50IHZtd192YWxpZGF0aW9uX2Jv
X3ZhbGlkYXRlKHN0cnVjdCB2bXdfdmFsaWRhdGlvbl9jb250ZXh0ICpjdHgsIGJvb2wgaW50cikK
IAlpbnQgcmV0OwogCiAJbGlzdF9mb3JfZWFjaF9lbnRyeShlbnRyeSwgJmN0eC0+Ym9fbGlzdCwg
YmFzZS5oZWFkKSB7CisJCXN0cnVjdCB2bXdfYnVmZmVyX29iamVjdCAqdmJvID0KKwkJCWNvbnRh
aW5lcl9vZihlbnRyeS0+YmFzZS5ibywgdHlwZW9mKCp2Ym8pLCBiYXNlKTsKKwogCQlpZiAoZW50
cnktPmNwdV9ibGl0KSB7CiAJCQlzdHJ1Y3QgdHRtX29wZXJhdGlvbl9jdHggY3R4ID0gewogCQkJ
CS5pbnRlcnJ1cHRpYmxlID0gaW50ciwKQEAgLTU3Niw2ICs1OTUsMjcgQEAgaW50IHZtd192YWxp
ZGF0aW9uX2JvX3ZhbGlkYXRlKHN0cnVjdCB2bXdfdmFsaWRhdGlvbl9jb250ZXh0ICpjdHgsIGJv
b2wgaW50cikKIAkJfQogCQlpZiAocmV0KQogCQkJcmV0dXJuIHJldDsKKworCQkvKgorCQkgKiBS
YXRoZXIgdGhhbiBoYXZpbmcgdGhlIHJlc291cmNlIGNvZGUgYWxsb2NhdGluZyB0aGUgYm8KKwkJ
ICogZGlydHkgdHJhY2tlciBpbiByZXNvdXJjZV91bnJlc2VydmUoKSB3aGVyZSB3ZSBjYW4ndCBm
YWlsLAorCQkgKiBEbyBpdCBoZXJlIHdoZW4gdmFsaWRhdGluZyB0aGUgYnVmZmVyIG9iamVjdC4K
KwkJICovCisJCWlmIChlbnRyeS0+Y29oZXJlbnRfY291bnQpIHsKKwkJCXVuc2lnbmVkIGludCBj
b2hlcmVudF9jb3VudCA9IGVudHJ5LT5jb2hlcmVudF9jb3VudDsKKworCQkJd2hpbGUgKGNvaGVy
ZW50X2NvdW50KSB7CisJCQkJcmV0ID0gdm13X2JvX2RpcnR5X2FkZCh2Ym8pOworCQkJCWlmIChy
ZXQpCisJCQkJCXJldHVybiByZXQ7CisKKwkJCQljb2hlcmVudF9jb3VudC0tOworCQkJfQorCQkJ
ZW50cnktPmNvaGVyZW50X2NvdW50IC09IGNvaGVyZW50X2NvdW50OworCQl9CisKKwkJaWYgKHZi
by0+ZGlydHkpCisJCQl2bXdfYm9fZGlydHlfc2Nhbih2Ym8pOwogCX0KIAlyZXR1cm4gMDsKIH0K
QEAgLTgyOCwzICs4NjgsMzQgQEAgaW50IHZtd192YWxpZGF0aW9uX3ByZWxvYWRfcmVzKHN0cnVj
dCB2bXdfdmFsaWRhdGlvbl9jb250ZXh0ICpjdHgsCiAJY3R4LT5tZW1fc2l6ZV9sZWZ0ICs9IHNp
emU7CiAJcmV0dXJuIDA7CiB9CisKKy8qKgorICogdm13X3ZhbGlkYXRpb25fYm9fYmFja29mZiAt
IFVucmVzZXJ2ZSBidWZmZXIgb2JqZWN0cyByZWdpc3RlcmVkIHdpdGggYQorICogdmFsaWRhdGlv
biBjb250ZXh0CisgKiBAY3R4OiBUaGUgdmFsaWRhdGlvbiBjb250ZXh0CisgKgorICogVGhpcyBm
dW5jdGlvbiB1bnJlc2VydmVzIHRoZSBidWZmZXIgb2JqZWN0cyBwcmV2aW91c2x5IHJlc2VydmVk
IHVzaW5nCisgKiB2bXdfdmFsaWRhdGlvbl9ib19yZXNlcnZlLiBJdCdzIHR5cGljYWxseSB1c2Vk
IGFzIHBhcnQgb2YgYW4gZXJyb3IgcGF0aAorICovCit2b2lkIHZtd192YWxpZGF0aW9uX2JvX2Jh
Y2tvZmYoc3RydWN0IHZtd192YWxpZGF0aW9uX2NvbnRleHQgKmN0eCkKK3sKKwlzdHJ1Y3Qgdm13
X3ZhbGlkYXRpb25fYm9fbm9kZSAqZW50cnk7CisKKwkvKgorCSAqIFN3aXRjaGluZyBjb2hlcmVu
dCByZXNvdXJjZSBiYWNrdXAgYnVmZmVycyBmYWlsZWQuCisJICogUmVsZWFzZSBjb3JyZXNwb25k
aW5nIGJ1ZmZlciBvYmplY3QgZGlydHkgdHJhY2tlcnMuCisJICovCisJbGlzdF9mb3JfZWFjaF9l
bnRyeShlbnRyeSwgJmN0eC0+Ym9fbGlzdCwgYmFzZS5oZWFkKSB7CisJCWlmIChlbnRyeS0+Y29o
ZXJlbnRfY291bnQpIHsKKwkJCXVuc2lnbmVkIGludCBjb2hlcmVudF9jb3VudCA9IGVudHJ5LT5j
b2hlcmVudF9jb3VudDsKKwkJCXN0cnVjdCB2bXdfYnVmZmVyX29iamVjdCAqdmJvID0KKwkJCQlj
b250YWluZXJfb2YoZW50cnktPmJhc2UuYm8sIHR5cGVvZigqdmJvKSwKKwkJCQkJICAgICBiYXNl
KTsKKworCQkJd2hpbGUgKGNvaGVyZW50X2NvdW50LS0pCisJCQkJdm13X2JvX2RpcnR5X3JlbGVh
c2UodmJvKTsKKwkJfQorCX0KKworCXR0bV9ldV9iYWNrb2ZmX3Jlc2VydmF0aW9uKCZjdHgtPnRp
Y2tldCwgJmN0eC0+Ym9fbGlzdCk7Cit9CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vdm13
Z2Z4L3Ztd2dmeF92YWxpZGF0aW9uLmggYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF92
YWxpZGF0aW9uLmgKaW5kZXggMGUwNjM3NDNkZDg2Li40Y2VlM2Y3MzI1ODggMTAwNjQ0Ci0tLSBh
L2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3ZhbGlkYXRpb24uaAorKysgYi9kcml2ZXJz
L2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF92YWxpZGF0aW9uLmgKQEAgLTE3MywyMCArMTczLDYgQEAg
dm13X3ZhbGlkYXRpb25fYm9fcmVzZXJ2ZShzdHJ1Y3Qgdm13X3ZhbGlkYXRpb25fY29udGV4dCAq
Y3R4LAogCQkJCSAgICAgIE5VTEwsIHRydWUpOwogfQogCi0vKioKLSAqIHZtd192YWxpZGF0aW9u
X2JvX2JhY2tvZmYgLSBVbnJlc2VydmUgYnVmZmVyIG9iamVjdHMgcmVnaXN0ZXJlZCB3aXRoIGEK
LSAqIHZhbGlkYXRpb24gY29udGV4dAotICogQGN0eDogVGhlIHZhbGlkYXRpb24gY29udGV4dAot
ICoKLSAqIFRoaXMgZnVuY3Rpb24gdW5yZXNlcnZlcyB0aGUgYnVmZmVyIG9iamVjdHMgcHJldmlv
dXNseSByZXNlcnZlZCB1c2luZwotICogdm13X3ZhbGlkYXRpb25fYm9fcmVzZXJ2ZS4gSXQncyB0
eXBpY2FsbHkgdXNlZCBhcyBwYXJ0IG9mIGFuIGVycm9yIHBhdGgKLSAqLwotc3RhdGljIGlubGlu
ZSB2b2lkCi12bXdfdmFsaWRhdGlvbl9ib19iYWNrb2ZmKHN0cnVjdCB2bXdfdmFsaWRhdGlvbl9j
b250ZXh0ICpjdHgpCi17Ci0JdHRtX2V1X2JhY2tvZmZfcmVzZXJ2YXRpb24oJmN0eC0+dGlja2V0
LCAmY3R4LT5ib19saXN0KTsKLX0KLQogLyoqCiAgKiB2bXdfdmFsaWRhdGlvbl9ib19mZW5jZSAt
IFVucmVzZXJ2ZSBhbmQgZmVuY2UgYnVmZmVyIG9iamVjdHMgcmVnaXN0ZXJlZAogICogd2l0aCBh
IHZhbGlkYXRpb24gY29udGV4dApAQCAtMjY5LDQgKzI1NSw2IEBAIGludCB2bXdfdmFsaWRhdGlv
bl9wcmVsb2FkX3JlcyhzdHJ1Y3Qgdm13X3ZhbGlkYXRpb25fY29udGV4dCAqY3R4LAogCQkJICAg
ICAgIHVuc2lnbmVkIGludCBzaXplKTsKIHZvaWQgdm13X3ZhbGlkYXRpb25fcmVzX3NldF9kaXJ0
eShzdHJ1Y3Qgdm13X3ZhbGlkYXRpb25fY29udGV4dCAqY3R4LAogCQkJCSAgdm9pZCAqdmFsX3By
aXZhdGUsIHUzMiBkaXJ0eSk7Cit2b2lkIHZtd192YWxpZGF0aW9uX2JvX2JhY2tvZmYoc3RydWN0
IHZtd192YWxpZGF0aW9uX2NvbnRleHQgKmN0eCk7CisKICNlbmRpZgotLSAKMi4yMC4xCgpfX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkcmktZGV2ZWwgbWFp
bGluZyBsaXN0CmRyaS1kZXZlbEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5m
cmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9kcmktZGV2ZWw=
