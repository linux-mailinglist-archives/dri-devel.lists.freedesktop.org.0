Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id F4077FAB76
	for <lists+dri-devel@lfdr.de>; Wed, 13 Nov 2019 08:56:28 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 9671E6EA5C;
	Wed, 13 Nov 2019 07:56:17 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from mail-qt1-x844.google.com (mail-qt1-x844.google.com
 [IPv6:2607:f8b0:4864:20::844])
 by gabe.freedesktop.org (Postfix) with ESMTPS id B18E46EBE5
 for <dri-devel@lists.freedesktop.org>; Tue, 12 Nov 2019 20:22:55 +0000 (UTC)
Received: by mail-qt1-x844.google.com with SMTP id o11so21202916qtr.11
 for <dri-devel@lists.freedesktop.org>; Tue, 12 Nov 2019 12:22:55 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
 :references:mime-version:content-transfer-encoding;
 bh=ZzBbOWCxKZh+cdtoh3q/T1dV0tEgKiGKeoYY4ENd0lI=;
 b=mXC2yfxZ6t+Pm3TZUPteVTmaGCZalKLY7wj1LwvqvwbPOywnNEis6ZCLHZAjF7prjw
 bBkuB8siRkjP9lt4VDQFkQOvZi03047LF6Vd6Poy14GyV1U5wuvQrM4JMNFPY2qmOrA5
 eqbpdRVmhhChMpKS1Qo63uv0AL4r4Clxt7/6fRaMVUH2kZ9Cq6Yf2YQupZTymylJAMXX
 511k89ns6B7Ss8hYIrwsdzADyslxUP21uP9VuzvdBMmDZJFmLoSR0hJg3k0MFNBLWIra
 NY3zXEb+HDr8zWTVEJwiaR44kvYU4h5djSy27PNynhe83rZJjV6Pt9SJNmB9UNS6rT1d
 DmiQ==
X-Gm-Message-State: APjAAAUsM9Nqul185Yih8ywOIP0PviDAA/WATVDc2l8M021HArcX8TzW
 8NvP5dheMCx9leymBEbfipwklA==
X-Google-Smtp-Source: APXvYqxu7SJ/mVMkw3vmBcyZaKcGGZcaJusbCaEAqmtA8bZg06/oxd/+7uSG8a9wMIOFTEKi4zbLEg==
X-Received: by 2002:ac8:30cd:: with SMTP id w13mr33149349qta.201.1573590174357; 
 Tue, 12 Nov 2019 12:22:54 -0800 (PST)
Received: from ziepe.ca
 (hlfxns017vw-142-162-113-180.dhcp-dynamic.fibreop.ns.bellaliant.net.
 [142.162.113.180])
 by smtp.gmail.com with ESMTPSA id o1sm11425992qtb.82.2019.11.12.12.22.47
 (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
 Tue, 12 Nov 2019 12:22:48 -0800 (PST)
Received: from jgg by mlx.ziepe.ca with local (Exim 4.90_1)
 (envelope-from <jgg@ziepe.ca>)
 id 1iUcgZ-0003jy-C1; Tue, 12 Nov 2019 16:22:47 -0400
From: Jason Gunthorpe <jgg@ziepe.ca>
To: linux-mm@kvack.org, Jerome Glisse <jglisse@redhat.com>,
 Ralph Campbell <rcampbell@nvidia.com>, John Hubbard <jhubbard@nvidia.com>,
 Felix.Kuehling@amd.com
Subject: [PATCH v3 05/14] RDMA/odp: Use mmu_interval_notifier_insert()
Date: Tue, 12 Nov 2019 16:22:22 -0400
Message-Id: <20191112202231.3856-6-jgg@ziepe.ca>
X-Mailer: git-send-email 2.24.0
In-Reply-To: <20191112202231.3856-1-jgg@ziepe.ca>
References: <20191112202231.3856-1-jgg@ziepe.ca>
MIME-Version: 1.0
X-Mailman-Approved-At: Wed, 13 Nov 2019 07:55:45 +0000
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=ziepe.ca; s=google;
 h=from:to:cc:subject:date:message-id:in-reply-to:references
 :mime-version:content-transfer-encoding;
 bh=ZzBbOWCxKZh+cdtoh3q/T1dV0tEgKiGKeoYY4ENd0lI=;
 b=hxlcUA35dIJ7ZTxuJ6I2F+X4UIQXWwD4F9B/KOdHgDO0MDZk7hbxmngA8xWhHfva0C
 GTO8bcyvcemO0MLGmFzF/zXMzOkdbSZ5S4yyHO9fJwd2bcTqIM/mPrOmqWncKIk9U2Ax
 NMGGAUdYfsMwfC22ZtNajVcLj0d3uLYGr2CEPCP/nLBXpjQ7BYKFo/dWTJEhswSRuzL0
 Zr5FNpZqzYtIVtWp27UHffE0IPoNr1OEttLstivBmu6q+JSsCzebt44ktVwWBjFZO+aS
 ki2L9iCRTAJJcxBI3OwTgSV0FcASoFmHfaUIrliz1rRm3vacNtEtpnrefMkCyM5WcCNG
 wKkQ==
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: Juergen Gross <jgross@suse.com>,
 Mike Marciniszyn <mike.marciniszyn@intel.com>,
 Stefano Stabellini <sstabellini@kernel.org>,
 Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>,
 linux-rdma@vger.kernel.org, nouveau@lists.freedesktop.org,
 Dennis Dalessandro <dennis.dalessandro@intel.com>,
 amd-gfx@lists.freedesktop.org, Christoph Hellwig <hch@infradead.org>,
 Jason Gunthorpe <jgg@mellanox.com>, dri-devel@lists.freedesktop.org,
 Artemy Kovalyov <artemyko@mellanox.com>,
 Alex Deucher <alexander.deucher@amd.com>, xen-devel@lists.xenproject.org,
 Boris Ostrovsky <boris.ostrovsky@oracle.com>, Petr Cvek <petrcvekcz@gmail.com>,
 =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>,
 Ben Skeggs <bskeggs@redhat.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

RnJvbTogSmFzb24gR3VudGhvcnBlIDxqZ2dAbWVsbGFub3guY29tPgoKUmVwbGFjZSB0aGUgaW50
ZXJuYWwgaW50ZXJ2YWwgdHJlZSBiYXNlZCBtbXUgbm90aWZpZXIgd2l0aCB0aGUgbmV3IGNvbW1v
bgptbXVfaW50ZXJ2YWxfbm90aWZpZXJfaW5zZXJ0KCkgQVBJLiBUaGlzIHJlbW92ZXMgYSBsb3Qg
b2YgY29kZSBhbmQgZml4ZXMgYQpkZWFkbG9jayB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgaW4gT0RQ
OgoKIHphcF9wYWdlX3JhbmdlKCkKICBtbXVfbm90aWZpZXJfaW52YWxpZGF0ZV9yYW5nZV9zdGFy
dCgpCiAgIFsuLl0KICAgIGliX3VtZW1fbm90aWZpZXJfaW52YWxpZGF0ZV9yYW5nZV9zdGFydCgp
CiAgICAgICBkb3duX3JlYWQoJnBlcl9tbS0+dW1lbV9yd3NlbSkKICB1bm1hcF9zaW5nbGVfdm1h
KCkKICAgIFsuLl0KICAgICAgX19zcGxpdF9odWdlX3BhZ2VfcG1kKCkKICAgICAgICBtbXVfbm90
aWZpZXJfaW52YWxpZGF0ZV9yYW5nZV9zdGFydCgpCiAgICAgICAgWy4uXQogICAgICAgICAgIGli
X3VtZW1fbm90aWZpZXJfaW52YWxpZGF0ZV9yYW5nZV9zdGFydCgpCiAgICAgICAgICAgICAgZG93
bl9yZWFkKCZwZXJfbW0tPnVtZW1fcndzZW0pICAgLy8gREVBRExPQ0sKCiAgICAgICAgbW11X25v
dGlmaWVyX2ludmFsaWRhdGVfcmFuZ2VfZW5kKCkKICAgICAgICAgICB1cF9yZWFkKCZwZXJfbW0t
PnVtZW1fcndzZW0pCiAgbW11X25vdGlmaWVyX2ludmFsaWRhdGVfcmFuZ2VfZW5kKCkKICAgICB1
cF9yZWFkKCZwZXJfbW0tPnVtZW1fcndzZW0pCgpUaGUgdW1lbV9yd3NlbSBpcyBoZWxkIGFjcm9z
cyB0aGUgcmFuZ2Vfc3RhcnQvZW5kIGFzIHRoZSBPRFAgYWxnb3JpdGhtIGZvcgppbnZhbGlkYXRl
X3JhbmdlX2VuZCBjYW5ub3QgdG9sZXJhdGUgY2hhbmdlcyB0byB0aGUgaW50ZXJ2YWwKdHJlZS4g
SG93ZXZlciwgZHVlIHRvIHRoZSBuZXN0ZWQgaW52YWxpZGF0aW9uIHJlZ2lvbnMgdGhlIHNlY29u
ZApkb3duX3JlYWQoKSBjYW4gZGVhZGxvY2sgaWYgdGhlcmUgYXJlIGNvbXBldGluZyB3cml0ZXJz
LiBUaGUgbmV3IGNvcmUgY29kZQpwcm92aWRlcyBhbiBhbHRlcm5hdGl2ZSBzY2hlbWUgdG8gc29s
dmUgdGhpcyBwcm9ibGVtLgoKRml4ZXM6IGNhNzQ4YzM5ZWEzZiAoIlJETUEvdW1lbTogR2V0IHJp
ZCBvZiBwZXJfbW0tPm5vdGlmaWVyX2NvdW50IikKVGVzdGVkLWJ5OiBBcnRlbXkgS292YWx5b3Yg
PGFydGVteWtvQG1lbGxhbm94LmNvbT4KU2lnbmVkLW9mZi1ieTogSmFzb24gR3VudGhvcnBlIDxq
Z2dAbWVsbGFub3guY29tPgotLS0KIGRyaXZlcnMvaW5maW5pYmFuZC9jb3JlL2RldmljZS5jICAg
ICB8ICAgMSAtCiBkcml2ZXJzL2luZmluaWJhbmQvY29yZS91bWVtX29kcC5jICAgfCAzMDMgKysr
Ky0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiBkcml2ZXJzL2luZmluaWJhbmQvaHcvbWx4NS9tbHg1
X2liLmggfCAgIDcgKy0KIGRyaXZlcnMvaW5maW5pYmFuZC9ody9tbHg1L21yLmMgICAgICB8ICAg
MyArLQogZHJpdmVycy9pbmZpbmliYW5kL2h3L21seDUvb2RwLmMgICAgIHwgIDUwICsrLS0tCiBp
bmNsdWRlL3JkbWEvaWJfdW1lbV9vZHAuaCAgICAgICAgICAgfCAgNjggKystLS0tCiBpbmNsdWRl
L3JkbWEvaWJfdmVyYnMuaCAgICAgICAgICAgICAgfCAgIDIgLQogNyBmaWxlcyBjaGFuZ2VkLCA4
MiBpbnNlcnRpb25zKCspLCAzNTIgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9p
bmZpbmliYW5kL2NvcmUvZGV2aWNlLmMgYi9kcml2ZXJzL2luZmluaWJhbmQvY29yZS9kZXZpY2Uu
YwppbmRleCAyZGQyY2ZlOWI1NjEzNi4uYWM3OTI0YjNjNzNhYmUgMTAwNjQ0Ci0tLSBhL2RyaXZl
cnMvaW5maW5pYmFuZC9jb3JlL2RldmljZS5jCisrKyBiL2RyaXZlcnMvaW5maW5pYmFuZC9jb3Jl
L2RldmljZS5jCkBAIC0yNjE3LDcgKzI2MTcsNiBAQCB2b2lkIGliX3NldF9kZXZpY2Vfb3BzKHN0
cnVjdCBpYl9kZXZpY2UgKmRldiwgY29uc3Qgc3RydWN0IGliX2RldmljZV9vcHMgKm9wcykKIAlT
RVRfREVWSUNFX09QKGRldl9vcHMsIGdldF92Zl9jb25maWcpOwogCVNFVF9ERVZJQ0VfT1AoZGV2
X29wcywgZ2V0X3ZmX3N0YXRzKTsKIAlTRVRfREVWSUNFX09QKGRldl9vcHMsIGluaXRfcG9ydCk7
Ci0JU0VUX0RFVklDRV9PUChkZXZfb3BzLCBpbnZhbGlkYXRlX3JhbmdlKTsKIAlTRVRfREVWSUNF
X09QKGRldl9vcHMsIGl3X2FjY2VwdCk7CiAJU0VUX0RFVklDRV9PUChkZXZfb3BzLCBpd19hZGRf
cmVmKTsKIAlTRVRfREVWSUNFX09QKGRldl9vcHMsIGl3X2Nvbm5lY3QpOwpkaWZmIC0tZ2l0IGEv
ZHJpdmVycy9pbmZpbmliYW5kL2NvcmUvdW1lbV9vZHAuYyBiL2RyaXZlcnMvaW5maW5pYmFuZC9j
b3JlL3VtZW1fb2RwLmMKaW5kZXggZDdkNWZhZGYwODk5YWQuLmU0MmQ0NGU1MDFmZDU0IDEwMDY0
NAotLS0gYS9kcml2ZXJzL2luZmluaWJhbmQvY29yZS91bWVtX29kcC5jCisrKyBiL2RyaXZlcnMv
aW5maW5pYmFuZC9jb3JlL3VtZW1fb2RwLmMKQEAgLTQ4LDE5NyArNDgsMzMgQEAKIAogI2luY2x1
ZGUgInV2ZXJicy5oIgogCi1zdGF0aWMgdm9pZCBpYl91bWVtX25vdGlmaWVyX3N0YXJ0X2FjY291
bnQoc3RydWN0IGliX3VtZW1fb2RwICp1bWVtX29kcCkKK3N0YXRpYyBpbmxpbmUgaW50IGliX2lu
aXRfdW1lbV9vZHAoc3RydWN0IGliX3VtZW1fb2RwICp1bWVtX29kcCwKKwkJCQkgICBjb25zdCBz
dHJ1Y3QgbW11X2ludGVydmFsX25vdGlmaWVyX29wcyAqb3BzKQogewotCW11dGV4X2xvY2soJnVt
ZW1fb2RwLT51bWVtX211dGV4KTsKLQlpZiAodW1lbV9vZHAtPm5vdGlmaWVyc19jb3VudCsrID09
IDApCi0JCS8qCi0JCSAqIEluaXRpYWxpemUgdGhlIGNvbXBsZXRpb24gb2JqZWN0IGZvciB3YWl0
aW5nIG9uCi0JCSAqIG5vdGlmaWVycy4gU2luY2Ugbm90aWZpZXJfY291bnQgaXMgemVybywgbm8g
b25lIHNob3VsZCBiZQotCQkgKiB3YWl0aW5nIHJpZ2h0IG5vdy4KLQkJICovCi0JCXJlaW5pdF9j
b21wbGV0aW9uKCZ1bWVtX29kcC0+bm90aWZpZXJfY29tcGxldGlvbik7Ci0JbXV0ZXhfdW5sb2Nr
KCZ1bWVtX29kcC0+dW1lbV9tdXRleCk7Ci19Ci0KLXN0YXRpYyB2b2lkIGliX3VtZW1fbm90aWZp
ZXJfZW5kX2FjY291bnQoc3RydWN0IGliX3VtZW1fb2RwICp1bWVtX29kcCkKLXsKLQltdXRleF9s
b2NrKCZ1bWVtX29kcC0+dW1lbV9tdXRleCk7Ci0JLyoKLQkgKiBUaGlzIHNlcXVlbmNlIGluY3Jl
YXNlIHdpbGwgbm90aWZ5IHRoZSBRUCBwYWdlIGZhdWx0IHRoYXQgdGhlIHBhZ2UKLQkgKiB0aGF0
IGlzIGdvaW5nIHRvIGJlIG1hcHBlZCBpbiB0aGUgc3B0ZSBjb3VsZCBoYXZlIGJlZW4gZnJlZWQu
Ci0JICovCi0JKyt1bWVtX29kcC0+bm90aWZpZXJzX3NlcTsKLQlpZiAoLS11bWVtX29kcC0+bm90
aWZpZXJzX2NvdW50ID09IDApCi0JCWNvbXBsZXRlX2FsbCgmdW1lbV9vZHAtPm5vdGlmaWVyX2Nv
bXBsZXRpb24pOwotCW11dGV4X3VubG9jaygmdW1lbV9vZHAtPnVtZW1fbXV0ZXgpOwotfQotCi1z
dGF0aWMgdm9pZCBpYl91bWVtX25vdGlmaWVyX3JlbGVhc2Uoc3RydWN0IG1tdV9ub3RpZmllciAq
bW4sCi0JCQkJICAgICBzdHJ1Y3QgbW1fc3RydWN0ICptbSkKLXsKLQlzdHJ1Y3QgaWJfdWNvbnRl
eHRfcGVyX21tICpwZXJfbW0gPQotCQljb250YWluZXJfb2YobW4sIHN0cnVjdCBpYl91Y29udGV4
dF9wZXJfbW0sIG1uKTsKLQlzdHJ1Y3QgcmJfbm9kZSAqbm9kZTsKLQotCWRvd25fcmVhZCgmcGVy
X21tLT51bWVtX3J3c2VtKTsKLQlpZiAoIXBlcl9tbS0+bW4udXNlcnMpCi0JCWdvdG8gb3V0Owot
Ci0JZm9yIChub2RlID0gcmJfZmlyc3RfY2FjaGVkKCZwZXJfbW0tPnVtZW1fdHJlZSk7IG5vZGU7
Ci0JICAgICBub2RlID0gcmJfbmV4dChub2RlKSkgewotCQlzdHJ1Y3QgaWJfdW1lbV9vZHAgKnVt
ZW1fb2RwID0KLQkJCXJiX2VudHJ5KG5vZGUsIHN0cnVjdCBpYl91bWVtX29kcCwgaW50ZXJ2YWxf
dHJlZS5yYik7Ci0KLQkJLyoKLQkJICogSW5jcmVhc2UgdGhlIG51bWJlciBvZiBub3RpZmllcnMg
cnVubmluZywgdG8gcHJldmVudCBhbnkKLQkJICogZnVydGhlciBmYXVsdCBoYW5kbGluZyBvbiB0
aGlzIE1SLgotCQkgKi8KLQkJaWJfdW1lbV9ub3RpZmllcl9zdGFydF9hY2NvdW50KHVtZW1fb2Rw
KTsKLQkJY29tcGxldGVfYWxsKCZ1bWVtX29kcC0+bm90aWZpZXJfY29tcGxldGlvbik7Ci0JCXVt
ZW1fb2RwLT51bWVtLmliZGV2LT5vcHMuaW52YWxpZGF0ZV9yYW5nZSgKLQkJCXVtZW1fb2RwLCBp
Yl91bWVtX3N0YXJ0KHVtZW1fb2RwKSwKLQkJCWliX3VtZW1fZW5kKHVtZW1fb2RwKSk7Ci0JfQot
Ci1vdXQ6Ci0JdXBfcmVhZCgmcGVyX21tLT51bWVtX3J3c2VtKTsKLX0KLQotc3RhdGljIGludCBp
bnZhbGlkYXRlX3JhbmdlX3N0YXJ0X3RyYW1wb2xpbmUoc3RydWN0IGliX3VtZW1fb2RwICppdGVt
LAotCQkJCQkgICAgIHU2NCBzdGFydCwgdTY0IGVuZCwgdm9pZCAqY29va2llKQotewotCWliX3Vt
ZW1fbm90aWZpZXJfc3RhcnRfYWNjb3VudChpdGVtKTsKLQlpdGVtLT51bWVtLmliZGV2LT5vcHMu
aW52YWxpZGF0ZV9yYW5nZShpdGVtLCBzdGFydCwgZW5kKTsKLQlyZXR1cm4gMDsKLX0KLQotc3Rh
dGljIGludCBpYl91bWVtX25vdGlmaWVyX2ludmFsaWRhdGVfcmFuZ2Vfc3RhcnQoc3RydWN0IG1t
dV9ub3RpZmllciAqbW4sCi0JCQkJY29uc3Qgc3RydWN0IG1tdV9ub3RpZmllcl9yYW5nZSAqcmFu
Z2UpCi17Ci0Jc3RydWN0IGliX3Vjb250ZXh0X3Blcl9tbSAqcGVyX21tID0KLQkJY29udGFpbmVy
X29mKG1uLCBzdHJ1Y3QgaWJfdWNvbnRleHRfcGVyX21tLCBtbik7Ci0JaW50IHJjOwotCi0JaWYg
KG1tdV9ub3RpZmllcl9yYW5nZV9ibG9ja2FibGUocmFuZ2UpKQotCQlkb3duX3JlYWQoJnBlcl9t
bS0+dW1lbV9yd3NlbSk7Ci0JZWxzZSBpZiAoIWRvd25fcmVhZF90cnlsb2NrKCZwZXJfbW0tPnVt
ZW1fcndzZW0pKQotCQlyZXR1cm4gLUVBR0FJTjsKLQotCWlmICghcGVyX21tLT5tbi51c2Vycykg
ewotCQl1cF9yZWFkKCZwZXJfbW0tPnVtZW1fcndzZW0pOwotCQkvKgotCQkgKiBBdCB0aGlzIHBv
aW50IHVzZXJzIGlzIHBlcm1hbmVudGx5IHplcm8gYW5kIHZpc2libGUgdG8gdGhpcwotCQkgKiBD
UFUgd2l0aG91dCBhIGxvY2ssIHRoYXQgZmFjdCBpcyByZWxpZWQgb24gdG8gc2tpcCB0aGUgdW5s
b2NrCi0JCSAqIGluIHJhbmdlX2VuZC4KLQkJICovCi0JCXJldHVybiAwOwotCX0KLQotCXJjID0g
cmJ0X2liX3VtZW1fZm9yX2VhY2hfaW5fcmFuZ2UoJnBlcl9tbS0+dW1lbV90cmVlLCByYW5nZS0+
c3RhcnQsCi0JCQkJCSAgIHJhbmdlLT5lbmQsCi0JCQkJCSAgIGludmFsaWRhdGVfcmFuZ2Vfc3Rh
cnRfdHJhbXBvbGluZSwKLQkJCQkJICAgbW11X25vdGlmaWVyX3JhbmdlX2Jsb2NrYWJsZShyYW5n
ZSksCi0JCQkJCSAgIE5VTEwpOwotCWlmIChyYykKLQkJdXBfcmVhZCgmcGVyX21tLT51bWVtX3J3
c2VtKTsKLQlyZXR1cm4gcmM7Ci19Ci0KLXN0YXRpYyBpbnQgaW52YWxpZGF0ZV9yYW5nZV9lbmRf
dHJhbXBvbGluZShzdHJ1Y3QgaWJfdW1lbV9vZHAgKml0ZW0sIHU2NCBzdGFydCwKLQkJCQkJICAg
dTY0IGVuZCwgdm9pZCAqY29va2llKQotewotCWliX3VtZW1fbm90aWZpZXJfZW5kX2FjY291bnQo
aXRlbSk7Ci0JcmV0dXJuIDA7Ci19Ci0KLXN0YXRpYyB2b2lkIGliX3VtZW1fbm90aWZpZXJfaW52
YWxpZGF0ZV9yYW5nZV9lbmQoc3RydWN0IG1tdV9ub3RpZmllciAqbW4sCi0JCQkJY29uc3Qgc3Ry
dWN0IG1tdV9ub3RpZmllcl9yYW5nZSAqcmFuZ2UpCi17Ci0Jc3RydWN0IGliX3Vjb250ZXh0X3Bl
cl9tbSAqcGVyX21tID0KLQkJY29udGFpbmVyX29mKG1uLCBzdHJ1Y3QgaWJfdWNvbnRleHRfcGVy
X21tLCBtbik7Ci0KLQlpZiAodW5saWtlbHkoIXBlcl9tbS0+bW4udXNlcnMpKQotCQlyZXR1cm47
Ci0KLQlyYnRfaWJfdW1lbV9mb3JfZWFjaF9pbl9yYW5nZSgmcGVyX21tLT51bWVtX3RyZWUsIHJh
bmdlLT5zdGFydCwKLQkJCQkgICAgICByYW5nZS0+ZW5kLAotCQkJCSAgICAgIGludmFsaWRhdGVf
cmFuZ2VfZW5kX3RyYW1wb2xpbmUsIHRydWUsIE5VTEwpOwotCXVwX3JlYWQoJnBlcl9tbS0+dW1l
bV9yd3NlbSk7Ci19Ci0KLXN0YXRpYyBzdHJ1Y3QgbW11X25vdGlmaWVyICppYl91bWVtX2FsbG9j
X25vdGlmaWVyKHN0cnVjdCBtbV9zdHJ1Y3QgKm1tKQotewotCXN0cnVjdCBpYl91Y29udGV4dF9w
ZXJfbW0gKnBlcl9tbTsKLQotCXBlcl9tbSA9IGt6YWxsb2Moc2l6ZW9mKCpwZXJfbW0pLCBHRlBf
S0VSTkVMKTsKLQlpZiAoIXBlcl9tbSkKLQkJcmV0dXJuIEVSUl9QVFIoLUVOT01FTSk7Ci0KLQlw
ZXJfbW0tPnVtZW1fdHJlZSA9IFJCX1JPT1RfQ0FDSEVEOwotCWluaXRfcndzZW0oJnBlcl9tbS0+
dW1lbV9yd3NlbSk7Ci0KLQlXQVJOX09OKG1tICE9IGN1cnJlbnQtPm1tKTsKLQlyY3VfcmVhZF9s
b2NrKCk7Ci0JcGVyX21tLT50Z2lkID0gZ2V0X3Rhc2tfcGlkKGN1cnJlbnQtPmdyb3VwX2xlYWRl
ciwgUElEVFlQRV9QSUQpOwotCXJjdV9yZWFkX3VubG9jaygpOwotCXJldHVybiAmcGVyX21tLT5t
bjsKLX0KLQotc3RhdGljIHZvaWQgaWJfdW1lbV9mcmVlX25vdGlmaWVyKHN0cnVjdCBtbXVfbm90
aWZpZXIgKm1uKQotewotCXN0cnVjdCBpYl91Y29udGV4dF9wZXJfbW0gKnBlcl9tbSA9Ci0JCWNv
bnRhaW5lcl9vZihtbiwgc3RydWN0IGliX3Vjb250ZXh0X3Blcl9tbSwgbW4pOwotCi0JV0FSTl9P
TighUkJfRU1QVFlfUk9PVCgmcGVyX21tLT51bWVtX3RyZWUucmJfcm9vdCkpOwotCi0JcHV0X3Bp
ZChwZXJfbW0tPnRnaWQpOwotCWtmcmVlKHBlcl9tbSk7Ci19Ci0KLXN0YXRpYyBjb25zdCBzdHJ1
Y3QgbW11X25vdGlmaWVyX29wcyBpYl91bWVtX25vdGlmaWVycyA9IHsKLQkucmVsZWFzZSAgICAg
ICAgICAgICAgICAgICAgPSBpYl91bWVtX25vdGlmaWVyX3JlbGVhc2UsCi0JLmludmFsaWRhdGVf
cmFuZ2Vfc3RhcnQgICAgID0gaWJfdW1lbV9ub3RpZmllcl9pbnZhbGlkYXRlX3JhbmdlX3N0YXJ0
LAotCS5pbnZhbGlkYXRlX3JhbmdlX2VuZCAgICAgICA9IGliX3VtZW1fbm90aWZpZXJfaW52YWxp
ZGF0ZV9yYW5nZV9lbmQsCi0JLmFsbG9jX25vdGlmaWVyCQkgICAgPSBpYl91bWVtX2FsbG9jX25v
dGlmaWVyLAotCS5mcmVlX25vdGlmaWVyCQkgICAgPSBpYl91bWVtX2ZyZWVfbm90aWZpZXIsCi19
OwotCi1zdGF0aWMgaW5saW5lIGludCBpYl9pbml0X3VtZW1fb2RwKHN0cnVjdCBpYl91bWVtX29k
cCAqdW1lbV9vZHApCi17Ci0Jc3RydWN0IGliX3Vjb250ZXh0X3Blcl9tbSAqcGVyX21tOwotCXN0
cnVjdCBtbXVfbm90aWZpZXIgKm1uOwogCWludCByZXQ7CiAKIAl1bWVtX29kcC0+dW1lbS5pc19v
ZHAgPSAxOworCW11dGV4X2luaXQoJnVtZW1fb2RwLT51bWVtX211dGV4KTsKKwogCWlmICghdW1l
bV9vZHAtPmlzX2ltcGxpY2l0X29kcCkgewogCQlzaXplX3QgcGFnZV9zaXplID0gMVVMIDw8IHVt
ZW1fb2RwLT5wYWdlX3NoaWZ0OworCQl1bnNpZ25lZCBsb25nIHN0YXJ0OworCQl1bnNpZ25lZCBs
b25nIGVuZDsKIAkJc2l6ZV90IHBhZ2VzOwogCi0JCXVtZW1fb2RwLT5pbnRlcnZhbF90cmVlLnN0
YXJ0ID0KLQkJCUFMSUdOX0RPV04odW1lbV9vZHAtPnVtZW0uYWRkcmVzcywgcGFnZV9zaXplKTsK
KwkJc3RhcnQgPSBBTElHTl9ET1dOKHVtZW1fb2RwLT51bWVtLmFkZHJlc3MsIHBhZ2Vfc2l6ZSk7
CiAJCWlmIChjaGVja19hZGRfb3ZlcmZsb3codW1lbV9vZHAtPnVtZW0uYWRkcmVzcywKIAkJCQkg
ICAgICAgKHVuc2lnbmVkIGxvbmcpdW1lbV9vZHAtPnVtZW0ubGVuZ3RoLAotCQkJCSAgICAgICAm
dW1lbV9vZHAtPmludGVydmFsX3RyZWUubGFzdCkpCisJCQkJICAgICAgICZlbmQpKQogCQkJcmV0
dXJuIC1FT1ZFUkZMT1c7Ci0JCXVtZW1fb2RwLT5pbnRlcnZhbF90cmVlLmxhc3QgPQotCQkJQUxJ
R04odW1lbV9vZHAtPmludGVydmFsX3RyZWUubGFzdCwgcGFnZV9zaXplKTsKLQkJaWYgKHVubGlr
ZWx5KHVtZW1fb2RwLT5pbnRlcnZhbF90cmVlLmxhc3QgPCBwYWdlX3NpemUpKQorCQllbmQgPSBB
TElHTihlbmQsIHBhZ2Vfc2l6ZSk7CisJCWlmICh1bmxpa2VseShlbmQgPCBwYWdlX3NpemUpKQog
CQkJcmV0dXJuIC1FT1ZFUkZMT1c7CiAKLQkJcGFnZXMgPSAodW1lbV9vZHAtPmludGVydmFsX3Ry
ZWUubGFzdCAtCi0JCQkgdW1lbV9vZHAtPmludGVydmFsX3RyZWUuc3RhcnQpID4+Ci0JCQl1bWVt
X29kcC0+cGFnZV9zaGlmdDsKKwkJcGFnZXMgPSAoZW5kIC0gc3RhcnQpID4+IHVtZW1fb2RwLT5w
YWdlX3NoaWZ0OwogCQlpZiAoIXBhZ2VzKQogCQkJcmV0dXJuIC1FSU5WQUw7CiAKLQkJLyoKLQkJ
ICogTm90ZSB0aGF0IHRoZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW50ZXJ2YWxzIGluIHRoZQot
CQkgKiBpbnRlcnZhbCB0cmVlIGNvbnNpZGVycyB0aGUgZW5kaW5nIHBvaW50IGFzIGNvbnRhaW5l
ZCBpbgotCQkgKiB0aGUgaW50ZXJ2YWwuCi0JCSAqLwotCQl1bWVtX29kcC0+aW50ZXJ2YWxfdHJl
ZS5sYXN0LS07Ci0KIAkJdW1lbV9vZHAtPnBhZ2VfbGlzdCA9IGt2Y2FsbG9jKAogCQkJcGFnZXMs
IHNpemVvZigqdW1lbV9vZHAtPnBhZ2VfbGlzdCksIEdGUF9LRVJORUwpOwogCQlpZiAoIXVtZW1f
b2RwLT5wYWdlX2xpc3QpCkBAIC0yNTAsMjYgKzg2LDEzIEBAIHN0YXRpYyBpbmxpbmUgaW50IGli
X2luaXRfdW1lbV9vZHAoc3RydWN0IGliX3VtZW1fb2RwICp1bWVtX29kcCkKIAkJCXJldCA9IC1F
Tk9NRU07CiAJCQlnb3RvIG91dF9wYWdlX2xpc3Q7CiAJCX0KLQl9CiAKLQltbiA9IG1tdV9ub3Rp
Zmllcl9nZXQoJmliX3VtZW1fbm90aWZpZXJzLCB1bWVtX29kcC0+dW1lbS5vd25pbmdfbW0pOwot
CWlmIChJU19FUlIobW4pKSB7Ci0JCXJldCA9IFBUUl9FUlIobW4pOwotCQlnb3RvIG91dF9kbWFf
bGlzdDsKKwkJcmV0ID0gbW11X2ludGVydmFsX25vdGlmaWVyX2luc2VydCgmdW1lbV9vZHAtPm5v
dGlmaWVyLAorCQkJCQkJICAgdW1lbV9vZHAtPnVtZW0ub3duaW5nX21tLAorCQkJCQkJICAgc3Rh
cnQsIGVuZCAtIHN0YXJ0LCBvcHMpOworCQlpZiAocmV0KQorCQkJZ290byBvdXRfZG1hX2xpc3Q7
CiAJfQotCXVtZW1fb2RwLT5wZXJfbW0gPSBwZXJfbW0gPQotCQljb250YWluZXJfb2YobW4sIHN0
cnVjdCBpYl91Y29udGV4dF9wZXJfbW0sIG1uKTsKLQotCW11dGV4X2luaXQoJnVtZW1fb2RwLT51
bWVtX211dGV4KTsKLQlpbml0X2NvbXBsZXRpb24oJnVtZW1fb2RwLT5ub3RpZmllcl9jb21wbGV0
aW9uKTsKLQotCWlmICghdW1lbV9vZHAtPmlzX2ltcGxpY2l0X29kcCkgewotCQlkb3duX3dyaXRl
KCZwZXJfbW0tPnVtZW1fcndzZW0pOwotCQlpbnRlcnZhbF90cmVlX2luc2VydCgmdW1lbV9vZHAt
PmludGVydmFsX3RyZWUsCi0JCQkJICAgICAmcGVyX21tLT51bWVtX3RyZWUpOwotCQl1cF93cml0
ZSgmcGVyX21tLT51bWVtX3J3c2VtKTsKLQl9Ci0JbW1ncmFiKHVtZW1fb2RwLT51bWVtLm93bmlu
Z19tbSk7CiAKIAlyZXR1cm4gMDsKIApAQCAtMzA1LDggKzEyOCw2IEBAIHN0cnVjdCBpYl91bWVt
X29kcCAqaWJfdW1lbV9vZHBfYWxsb2NfaW1wbGljaXQoc3RydWN0IGliX3VkYXRhICp1ZGF0YSwK
IAogCWlmICghY29udGV4dCkKIAkJcmV0dXJuIEVSUl9QVFIoLUVJTyk7Ci0JaWYgKFdBUk5fT05f
T05DRSghY29udGV4dC0+ZGV2aWNlLT5vcHMuaW52YWxpZGF0ZV9yYW5nZSkpCi0JCXJldHVybiBF
UlJfUFRSKC1FSU5WQUwpOwogCiAJdW1lbV9vZHAgPSBremFsbG9jKHNpemVvZigqdW1lbV9vZHAp
LCBHRlBfS0VSTkVMKTsKIAlpZiAoIXVtZW1fb2RwKQpAQCAtMzE4LDggKzEzOSwxMCBAQCBzdHJ1
Y3QgaWJfdW1lbV9vZHAgKmliX3VtZW1fb2RwX2FsbG9jX2ltcGxpY2l0KHN0cnVjdCBpYl91ZGF0
YSAqdWRhdGEsCiAJdW1lbV9vZHAtPmlzX2ltcGxpY2l0X29kcCA9IDE7CiAJdW1lbV9vZHAtPnBh
Z2Vfc2hpZnQgPSBQQUdFX1NISUZUOwogCi0JcmV0ID0gaWJfaW5pdF91bWVtX29kcCh1bWVtX29k
cCk7CisJdW1lbV9vZHAtPnRnaWQgPSBnZXRfdGFza19waWQoY3VycmVudC0+Z3JvdXBfbGVhZGVy
LCBQSURUWVBFX1BJRCk7CisJcmV0ID0gaWJfaW5pdF91bWVtX29kcCh1bWVtX29kcCwgTlVMTCk7
CiAJaWYgKHJldCkgeworCQlwdXRfcGlkKHVtZW1fb2RwLT50Z2lkKTsKIAkJa2ZyZWUodW1lbV9v
ZHApOwogCQlyZXR1cm4gRVJSX1BUUihyZXQpOwogCX0KQEAgLTMzNiw4ICsxNTksMTAgQEAgRVhQ
T1JUX1NZTUJPTChpYl91bWVtX29kcF9hbGxvY19pbXBsaWNpdCk7CiAgKiBAYWRkcjogVGhlIHN0
YXJ0aW5nIHVzZXJzcGFjZSBWQQogICogQHNpemU6IFRoZSBsZW5ndGggb2YgdGhlIHVzZXJzcGFj
ZSBWQQogICovCi1zdHJ1Y3QgaWJfdW1lbV9vZHAgKmliX3VtZW1fb2RwX2FsbG9jX2NoaWxkKHN0
cnVjdCBpYl91bWVtX29kcCAqcm9vdCwKLQkJCQkJICAgIHVuc2lnbmVkIGxvbmcgYWRkciwgc2l6
ZV90IHNpemUpCitzdHJ1Y3QgaWJfdW1lbV9vZHAgKgoraWJfdW1lbV9vZHBfYWxsb2NfY2hpbGQo
c3RydWN0IGliX3VtZW1fb2RwICpyb290LCB1bnNpZ25lZCBsb25nIGFkZHIsCisJCQlzaXplX3Qg
c2l6ZSwKKwkJCWNvbnN0IHN0cnVjdCBtbXVfaW50ZXJ2YWxfbm90aWZpZXJfb3BzICpvcHMpCiB7
CiAJLyoKIAkgKiBDYWxsZXIgbXVzdCBlbnN1cmUgdGhhdCByb290IGNhbm5vdCBiZSBmcmVlZCBk
dXJpbmcgdGhlIGNhbGwgdG8KQEAgLTM2MCw5ICsxODUsMTIgQEAgc3RydWN0IGliX3VtZW1fb2Rw
ICppYl91bWVtX29kcF9hbGxvY19jaGlsZChzdHJ1Y3QgaWJfdW1lbV9vZHAgKnJvb3QsCiAJdW1l
bS0+d3JpdGFibGUgICA9IHJvb3QtPnVtZW0ud3JpdGFibGU7CiAJdW1lbS0+b3duaW5nX21tICA9
IHJvb3QtPnVtZW0ub3duaW5nX21tOwogCW9kcF9kYXRhLT5wYWdlX3NoaWZ0ID0gUEFHRV9TSElG
VDsKKwlvZHBfZGF0YS0+bm90aWZpZXIub3BzID0gb3BzOwogCi0JcmV0ID0gaWJfaW5pdF91bWVt
X29kcChvZHBfZGF0YSk7CisJb2RwX2RhdGEtPnRnaWQgPSBnZXRfcGlkKHJvb3QtPnRnaWQpOwor
CXJldCA9IGliX2luaXRfdW1lbV9vZHAob2RwX2RhdGEsIG9wcyk7CiAJaWYgKHJldCkgeworCQlw
dXRfcGlkKG9kcF9kYXRhLT50Z2lkKTsKIAkJa2ZyZWUob2RwX2RhdGEpOwogCQlyZXR1cm4gRVJS
X1BUUihyZXQpOwogCX0KQEAgLTM4Myw3ICsyMTEsOCBAQCBFWFBPUlRfU1lNQk9MKGliX3VtZW1f
b2RwX2FsbG9jX2NoaWxkKTsKICAqIGNvbmp1bmN0aW9uIHdpdGggTU1VIG5vdGlmaWVycy4KICAq
Lwogc3RydWN0IGliX3VtZW1fb2RwICppYl91bWVtX29kcF9nZXQoc3RydWN0IGliX3VkYXRhICp1
ZGF0YSwgdW5zaWduZWQgbG9uZyBhZGRyLAotCQkJCSAgICBzaXplX3Qgc2l6ZSwgaW50IGFjY2Vz
cykKKwkJCQkgICAgc2l6ZV90IHNpemUsIGludCBhY2Nlc3MsCisJCQkJICAgIGNvbnN0IHN0cnVj
dCBtbXVfaW50ZXJ2YWxfbm90aWZpZXJfb3BzICpvcHMpCiB7CiAJc3RydWN0IGliX3VtZW1fb2Rw
ICp1bWVtX29kcDsKIAlzdHJ1Y3QgaWJfdWNvbnRleHQgKmNvbnRleHQ7CkBAIC0zOTgsOCArMjI3
LDcgQEAgc3RydWN0IGliX3VtZW1fb2RwICppYl91bWVtX29kcF9nZXQoc3RydWN0IGliX3VkYXRh
ICp1ZGF0YSwgdW5zaWduZWQgbG9uZyBhZGRyLAogCWlmICghY29udGV4dCkKIAkJcmV0dXJuIEVS
Ul9QVFIoLUVJTyk7CiAKLQlpZiAoV0FSTl9PTl9PTkNFKCEoYWNjZXNzICYgSUJfQUNDRVNTX09O
X0RFTUFORCkpIHx8Ci0JICAgIFdBUk5fT05fT05DRSghY29udGV4dC0+ZGV2aWNlLT5vcHMuaW52
YWxpZGF0ZV9yYW5nZSkpCisJaWYgKFdBUk5fT05fT05DRSghKGFjY2VzcyAmIElCX0FDQ0VTU19P
Tl9ERU1BTkQpKSkKIAkJcmV0dXJuIEVSUl9QVFIoLUVJTlZBTCk7CiAKIAl1bWVtX29kcCA9IGt6
YWxsb2Moc2l6ZW9mKHN0cnVjdCBpYl91bWVtX29kcCksIEdGUF9LRVJORUwpOwpAQCAtNDExLDYg
KzIzOSw3IEBAIHN0cnVjdCBpYl91bWVtX29kcCAqaWJfdW1lbV9vZHBfZ2V0KHN0cnVjdCBpYl91
ZGF0YSAqdWRhdGEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAl1bWVtX29kcC0+dW1lbS5hZGRyZXNz
ID0gYWRkcjsKIAl1bWVtX29kcC0+dW1lbS53cml0YWJsZSA9IGliX2FjY2Vzc193cml0YWJsZShh
Y2Nlc3MpOwogCXVtZW1fb2RwLT51bWVtLm93bmluZ19tbSA9IG1tID0gY3VycmVudC0+bW07CisJ
dW1lbV9vZHAtPm5vdGlmaWVyLm9wcyA9IG9wczsKIAogCXVtZW1fb2RwLT5wYWdlX3NoaWZ0ID0g
UEFHRV9TSElGVDsKIAlpZiAoYWNjZXNzICYgSUJfQUNDRVNTX0hVR0VUTEIpIHsKQEAgLTQyOSwx
MSArMjU4LDE0IEBAIHN0cnVjdCBpYl91bWVtX29kcCAqaWJfdW1lbV9vZHBfZ2V0KHN0cnVjdCBp
Yl91ZGF0YSAqdWRhdGEsIHVuc2lnbmVkIGxvbmcgYWRkciwKIAkJdXBfcmVhZCgmbW0tPm1tYXBf
c2VtKTsKIAl9CiAKLQlyZXQgPSBpYl9pbml0X3VtZW1fb2RwKHVtZW1fb2RwKTsKKwl1bWVtX29k
cC0+dGdpZCA9IGdldF90YXNrX3BpZChjdXJyZW50LT5ncm91cF9sZWFkZXIsIFBJRFRZUEVfUElE
KTsKKwlyZXQgPSBpYl9pbml0X3VtZW1fb2RwKHVtZW1fb2RwLCBvcHMpOwogCWlmIChyZXQpCi0J
CWdvdG8gZXJyX2ZyZWU7CisJCWdvdG8gZXJyX3B1dF9waWQ7CiAJcmV0dXJuIHVtZW1fb2RwOwog
CitlcnJfcHV0X3BpZDoKKwlwdXRfcGlkKHVtZW1fb2RwLT50Z2lkKTsKIGVycl9mcmVlOgogCWtm
cmVlKHVtZW1fb2RwKTsKIAlyZXR1cm4gRVJSX1BUUihyZXQpOwpAQCAtNDQyLDggKzI3NCw2IEBA
IEVYUE9SVF9TWU1CT0woaWJfdW1lbV9vZHBfZ2V0KTsKIAogdm9pZCBpYl91bWVtX29kcF9yZWxl
YXNlKHN0cnVjdCBpYl91bWVtX29kcCAqdW1lbV9vZHApCiB7Ci0Jc3RydWN0IGliX3Vjb250ZXh0
X3Blcl9tbSAqcGVyX21tID0gdW1lbV9vZHAtPnBlcl9tbTsKLQogCS8qCiAJICogRW5zdXJlIHRo
YXQgbm8gbW9yZSBwYWdlcyBhcmUgbWFwcGVkIGluIHRoZSB1bWVtLgogCSAqCkBAIC00NTUsMjgg
KzI4NSwxMSBAQCB2b2lkIGliX3VtZW1fb2RwX3JlbGVhc2Uoc3RydWN0IGliX3VtZW1fb2RwICp1
bWVtX29kcCkKIAkJaWJfdW1lbV9vZHBfdW5tYXBfZG1hX3BhZ2VzKHVtZW1fb2RwLCBpYl91bWVt
X3N0YXJ0KHVtZW1fb2RwKSwKIAkJCQkJICAgIGliX3VtZW1fZW5kKHVtZW1fb2RwKSk7CiAJCW11
dGV4X3VubG9jaygmdW1lbV9vZHAtPnVtZW1fbXV0ZXgpOworCQltbXVfaW50ZXJ2YWxfbm90aWZp
ZXJfcmVtb3ZlKCZ1bWVtX29kcC0+bm90aWZpZXIpOwogCQlrdmZyZWUodW1lbV9vZHAtPmRtYV9s
aXN0KTsKIAkJa3ZmcmVlKHVtZW1fb2RwLT5wYWdlX2xpc3QpOworCQlwdXRfcGlkKHVtZW1fb2Rw
LT50Z2lkKTsKIAl9Ci0KLQlkb3duX3dyaXRlKCZwZXJfbW0tPnVtZW1fcndzZW0pOwotCWlmICgh
dW1lbV9vZHAtPmlzX2ltcGxpY2l0X29kcCkgewotCQlpbnRlcnZhbF90cmVlX3JlbW92ZSgmdW1l
bV9vZHAtPmludGVydmFsX3RyZWUsCi0JCQkJICAgICAmcGVyX21tLT51bWVtX3RyZWUpOwotCQlj
b21wbGV0ZV9hbGwoJnVtZW1fb2RwLT5ub3RpZmllcl9jb21wbGV0aW9uKTsKLQl9Ci0JLyoKLQkg
KiBOT1RFISBtbXVfbm90aWZpZXJfdW5yZWdpc3RlcigpIGNhbiBoYXBwZW4gYmV0d2VlbiBhIHN0
YXJ0L2VuZAotCSAqIGNhbGxiYWNrLCByZXN1bHRpbmcgaW4gYSBtaXNzaW5nIGVuZCwgYW5kIHRo
dXMgYW4gdW5iYWxhbmNlZAotCSAqIGxvY2suIFRoaXMgZG9lc24ndCByZWFsbHkgbWF0dGVyIHRv
IHVzIHNpbmNlIHdlIGFyZSBhYm91dCB0byBrZnJlZQotCSAqIHRoZSBtZW1vcnkgdGhhdCBob2xk
cyB0aGUgbG9jaywgaG93ZXZlciBMT0NLREVQIGRvZXNuJ3QgbGlrZSB0aGlzLgotCSAqIFRodXMg
d2UgY2FsbCB0aGUgbW11X25vdGlmaWVyX3B1dCB1bmRlciB0aGUgcndzZW0gYW5kIHRlc3QgdGhl
Ci0JICogaW50ZXJuYWwgdXNlcnMgY291bnQgdG8gcmVsaWFibHkgc2VlIGlmIHdlIGFyZSBwYXN0
IHRoaXMgcG9pbnQuCi0JICovCi0JbW11X25vdGlmaWVyX3B1dCgmcGVyX21tLT5tbik7Ci0JdXBf
d3JpdGUoJnBlcl9tbS0+dW1lbV9yd3NlbSk7Ci0KLQltbWRyb3AodW1lbV9vZHAtPnVtZW0ub3du
aW5nX21tKTsKIAlrZnJlZSh1bWVtX29kcCk7CiB9CiBFWFBPUlRfU1lNQk9MKGliX3VtZW1fb2Rw
X3JlbGVhc2UpOwpAQCAtNTAxLDcgKzMxNCw3IEBAIEVYUE9SVF9TWU1CT0woaWJfdW1lbV9vZHBf
cmVsZWFzZSk7CiAgKi8KIHN0YXRpYyBpbnQgaWJfdW1lbV9vZHBfbWFwX2RtYV9zaW5nbGVfcGFn
ZSgKIAkJc3RydWN0IGliX3VtZW1fb2RwICp1bWVtX29kcCwKLQkJaW50IHBhZ2VfaW5kZXgsCisJ
CXVuc2lnbmVkIGludCBwYWdlX2luZGV4LAogCQlzdHJ1Y3QgcGFnZSAqcGFnZSwKIAkJdTY0IGFj
Y2Vzc19tYXNrLAogCQl1bnNpZ25lZCBsb25nIGN1cnJlbnRfc2VxKQpAQCAtNTEwLDEyICszMjMs
NyBAQCBzdGF0aWMgaW50IGliX3VtZW1fb2RwX21hcF9kbWFfc2luZ2xlX3BhZ2UoCiAJZG1hX2Fk
ZHJfdCBkbWFfYWRkcjsKIAlpbnQgcmV0ID0gMDsKIAotCS8qCi0JICogTm90ZTogd2UgYXZvaWQg
d3JpdGluZyBpZiBzZXEgaXMgZGlmZmVyZW50IGZyb20gdGhlIGluaXRpYWwgc2VxLCB0bwotCSAq
IGhhbmRsZSBjYXNlIG9mIGEgcmFjaW5nIG5vdGlmaWVyLiBUaGlzIGNoZWNrIGFsc28gYWxsb3dz
IHVzIHRvIGJhaWwKLQkgKiBlYXJseSBpZiB3ZSBoYXZlIGEgbm90aWZpZXIgcnVubmluZyBpbiBw
YXJhbGxlbCB3aXRoIHVzLgotCSAqLwotCWlmIChpYl91bWVtX21tdV9ub3RpZmllcl9yZXRyeSh1
bWVtX29kcCwgY3VycmVudF9zZXEpKSB7CisJaWYgKG1tdV9pbnRlcnZhbF9jaGVja19yZXRyeSgm
dW1lbV9vZHAtPm5vdGlmaWVyLCBjdXJyZW50X3NlcSkpIHsKIAkJcmV0ID0gLUVBR0FJTjsKIAkJ
Z290byBvdXQ7CiAJfQpAQCAtNjE4LDcgKzQyNiw3IEBAIGludCBpYl91bWVtX29kcF9tYXBfZG1h
X3BhZ2VzKHN0cnVjdCBpYl91bWVtX29kcCAqdW1lbV9vZHAsIHU2NCB1c2VyX3ZpcnQsCiAJICog
ZXhpc3RpbmcgYmV5b25kIHRoZSBsaWZldGltZSBvZiB0aGUgb3JpZ2luYXRpbmcgcHJvY2Vzcy4u
IFByZXN1bWFibHkKIAkgKiBtbWdldF9ub3RfemVybyB3aWxsIGZhaWwgaW4gdGhpcyBjYXNlLgog
CSAqLwotCW93bmluZ19wcm9jZXNzID0gZ2V0X3BpZF90YXNrKHVtZW1fb2RwLT5wZXJfbW0tPnRn
aWQsIFBJRFRZUEVfUElEKTsKKwlvd25pbmdfcHJvY2VzcyA9IGdldF9waWRfdGFzayh1bWVtX29k
cC0+dGdpZCwgUElEVFlQRV9QSUQpOwogCWlmICghb3duaW5nX3Byb2Nlc3MgfHwgIW1tZ2V0X25v
dF96ZXJvKG93bmluZ19tbSkpIHsKIAkJcmV0ID0gLUVJTlZBTDsKIAkJZ290byBvdXRfcHV0X3Rh
c2s7CkBAIC03NjIsMzIgKzU3MCwzIEBAIHZvaWQgaWJfdW1lbV9vZHBfdW5tYXBfZG1hX3BhZ2Vz
KHN0cnVjdCBpYl91bWVtX29kcCAqdW1lbV9vZHAsIHU2NCB2aXJ0LAogCX0KIH0KIEVYUE9SVF9T
WU1CT0woaWJfdW1lbV9vZHBfdW5tYXBfZG1hX3BhZ2VzKTsKLQotLyogQGxhc3QgaXMgbm90IGEg
cGFydCBvZiB0aGUgaW50ZXJ2YWwuIFNlZSBjb21tZW50IGZvciBmdW5jdGlvbgotICogbm9kZV9s
YXN0LgotICovCi1pbnQgcmJ0X2liX3VtZW1fZm9yX2VhY2hfaW5fcmFuZ2Uoc3RydWN0IHJiX3Jv
b3RfY2FjaGVkICpyb290LAotCQkJCSAgdTY0IHN0YXJ0LCB1NjQgbGFzdCwKLQkJCQkgIHVtZW1f
Y2FsbF9iYWNrIGNiLAotCQkJCSAgYm9vbCBibG9ja2FibGUsCi0JCQkJICB2b2lkICpjb29raWUp
Ci17Ci0JaW50IHJldF92YWwgPSAwOwotCXN0cnVjdCBpbnRlcnZhbF90cmVlX25vZGUgKm5vZGUs
ICpuZXh0OwotCXN0cnVjdCBpYl91bWVtX29kcCAqdW1lbTsKLQotCWlmICh1bmxpa2VseShzdGFy
dCA9PSBsYXN0KSkKLQkJcmV0dXJuIHJldF92YWw7Ci0KLQlmb3IgKG5vZGUgPSBpbnRlcnZhbF90
cmVlX2l0ZXJfZmlyc3Qocm9vdCwgc3RhcnQsIGxhc3QgLSAxKTsKLQkJCW5vZGU7IG5vZGUgPSBu
ZXh0KSB7Ci0JCS8qIFRPRE8gbW92ZSB0aGUgYmxvY2thYmxlIGRlY2lzaW9uIHVwIHRvIHRoZSBj
YWxsYmFjayAqLwotCQlpZiAoIWJsb2NrYWJsZSkKLQkJCXJldHVybiAtRUFHQUlOOwotCQluZXh0
ID0gaW50ZXJ2YWxfdHJlZV9pdGVyX25leHQobm9kZSwgc3RhcnQsIGxhc3QgLSAxKTsKLQkJdW1l
bSA9IGNvbnRhaW5lcl9vZihub2RlLCBzdHJ1Y3QgaWJfdW1lbV9vZHAsIGludGVydmFsX3RyZWUp
OwotCQlyZXRfdmFsID0gY2IodW1lbSwgc3RhcnQsIGxhc3QsIGNvb2tpZSkgfHwgcmV0X3ZhbDsK
LQl9Ci0KLQlyZXR1cm4gcmV0X3ZhbDsKLX0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvaW5maW5pYmFu
ZC9ody9tbHg1L21seDVfaWIuaCBiL2RyaXZlcnMvaW5maW5pYmFuZC9ody9tbHg1L21seDVfaWIu
aAppbmRleCBmNjFkNDAwNWM2YzM3OS4uMTA4Y2FkZjlhZjFmZGEgMTAwNjQ0Ci0tLSBhL2RyaXZl
cnMvaW5maW5pYmFuZC9ody9tbHg1L21seDVfaWIuaAorKysgYi9kcml2ZXJzL2luZmluaWJhbmQv
aHcvbWx4NS9tbHg1X2liLmgKQEAgLTEyNjMsOCArMTI2Myw2IEBAIGludCBtbHg1X2liX29kcF9p
bml0X29uZShzdHJ1Y3QgbWx4NV9pYl9kZXYgKmliZGV2KTsKIHZvaWQgbWx4NV9pYl9vZHBfY2xl
YW51cF9vbmUoc3RydWN0IG1seDVfaWJfZGV2ICppYmRldik7CiBpbnQgX19pbml0IG1seDVfaWJf
b2RwX2luaXQodm9pZCk7CiB2b2lkIG1seDVfaWJfb2RwX2NsZWFudXAodm9pZCk7Ci12b2lkIG1s
eDVfaWJfaW52YWxpZGF0ZV9yYW5nZShzdHJ1Y3QgaWJfdW1lbV9vZHAgKnVtZW1fb2RwLCB1bnNp
Z25lZCBsb25nIHN0YXJ0LAotCQkJICAgICAgdW5zaWduZWQgbG9uZyBlbmQpOwogdm9pZCBtbHg1
X29kcF9pbml0X21yX2NhY2hlX2VudHJ5KHN0cnVjdCBtbHg1X2NhY2hlX2VudCAqZW50KTsKIHZv
aWQgbWx4NV9vZHBfcG9wdWxhdGVfa2xtKHN0cnVjdCBtbHg1X2tsbSAqcGtsbSwgc2l6ZV90IG9m
ZnNldCwKIAkJCSAgIHNpemVfdCBuZW50cmllcywgc3RydWN0IG1seDVfaWJfbXIgKm1yLCBpbnQg
ZmxhZ3MpOwpAQCAtMTI5NCwxMSArMTI5MiwxMCBAQCBtbHg1X2liX2FkdmlzZV9tcl9wcmVmZXRj
aChzdHJ1Y3QgaWJfcGQgKnBkLAogewogCXJldHVybiAtRU9QTk9UU1VQUDsKIH0KLXN0YXRpYyBp
bmxpbmUgdm9pZCBtbHg1X2liX2ludmFsaWRhdGVfcmFuZ2Uoc3RydWN0IGliX3VtZW1fb2RwICp1
bWVtX29kcCwKLQkJCQkJICAgIHVuc2lnbmVkIGxvbmcgc3RhcnQsCi0JCQkJCSAgICB1bnNpZ25l
ZCBsb25nIGVuZCl7fTsKICNlbmRpZiAvKiBDT05GSUdfSU5GSU5JQkFORF9PTl9ERU1BTkRfUEFH
SU5HICovCiAKK2V4dGVybiBjb25zdCBzdHJ1Y3QgbW11X2ludGVydmFsX25vdGlmaWVyX29wcyBt
bHg1X21uX29wczsKKwogLyogTmVlZGVkIGZvciByZXAgcHJvZmlsZSAqLwogdm9pZCBfX21seDVf
aWJfcmVtb3ZlKHN0cnVjdCBtbHg1X2liX2RldiAqZGV2LAogCQkgICAgICBjb25zdCBzdHJ1Y3Qg
bWx4NV9pYl9wcm9maWxlICpwcm9maWxlLApkaWZmIC0tZ2l0IGEvZHJpdmVycy9pbmZpbmliYW5k
L2h3L21seDUvbXIuYyBiL2RyaXZlcnMvaW5maW5pYmFuZC9ody9tbHg1L21yLmMKaW5kZXggMTk5
Zjc5NTlhYWE1MTAuLmZiZTMxODMwYjIyODA3IDEwMDY0NAotLS0gYS9kcml2ZXJzL2luZmluaWJh
bmQvaHcvbWx4NS9tci5jCisrKyBiL2RyaXZlcnMvaW5maW5pYmFuZC9ody9tbHg1L21yLmMKQEAg
LTc0Myw3ICs3NDMsOCBAQCBzdGF0aWMgaW50IG1yX3VtZW1fZ2V0KHN0cnVjdCBtbHg1X2liX2Rl
diAqZGV2LCBzdHJ1Y3QgaWJfdWRhdGEgKnVkYXRhLAogCWlmIChhY2Nlc3NfZmxhZ3MgJiBJQl9B
Q0NFU1NfT05fREVNQU5EKSB7CiAJCXN0cnVjdCBpYl91bWVtX29kcCAqb2RwOwogCi0JCW9kcCA9
IGliX3VtZW1fb2RwX2dldCh1ZGF0YSwgc3RhcnQsIGxlbmd0aCwgYWNjZXNzX2ZsYWdzKTsKKwkJ
b2RwID0gaWJfdW1lbV9vZHBfZ2V0KHVkYXRhLCBzdGFydCwgbGVuZ3RoLCBhY2Nlc3NfZmxhZ3Ms
CisJCQkJICAgICAgJm1seDVfbW5fb3BzKTsKIAkJaWYgKElTX0VSUihvZHApKSB7CiAJCQltbHg1
X2liX2RiZyhkZXYsICJ1bWVtIGdldCBmYWlsZWQgKCVsZClcbiIsCiAJCQkJICAgIFBUUl9FUlIo
b2RwKSk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2luZmluaWJhbmQvaHcvbWx4NS9vZHAuYyBiL2Ry
aXZlcnMvaW5maW5pYmFuZC9ody9tbHg1L29kcC5jCmluZGV4IGJjZmMwOTg0NjY5NzdlLi42M2Uw
ZWJkMWFlOWQwYyAxMDA2NDQKLS0tIGEvZHJpdmVycy9pbmZpbmliYW5kL2h3L21seDUvb2RwLmMK
KysrIGIvZHJpdmVycy9pbmZpbmliYW5kL2h3L21seDUvb2RwLmMKQEAgLTI0MSwxNyArMjQxLDI2
IEBAIHN0YXRpYyB2b2lkIGRlc3Ryb3lfdW51c2VkX2ltcGxpY2l0X2NoaWxkX21yKHN0cnVjdCBt
bHg1X2liX21yICptcikKIAl4YV91bmxvY2soJmltci0+aW1wbGljaXRfY2hpbGRyZW4pOwogfQog
Ci12b2lkIG1seDVfaWJfaW52YWxpZGF0ZV9yYW5nZShzdHJ1Y3QgaWJfdW1lbV9vZHAgKnVtZW1f
b2RwLCB1bnNpZ25lZCBsb25nIHN0YXJ0LAotCQkJICAgICAgdW5zaWduZWQgbG9uZyBlbmQpCitz
dGF0aWMgYm9vbCBtbHg1X2liX2ludmFsaWRhdGVfcmFuZ2Uoc3RydWN0IG1tdV9pbnRlcnZhbF9u
b3RpZmllciAqbW5pLAorCQkJCSAgICAgY29uc3Qgc3RydWN0IG1tdV9ub3RpZmllcl9yYW5nZSAq
cmFuZ2UsCisJCQkJICAgICB1bnNpZ25lZCBsb25nIGN1cl9zZXEpCiB7CisJc3RydWN0IGliX3Vt
ZW1fb2RwICp1bWVtX29kcCA9CisJCWNvbnRhaW5lcl9vZihtbmksIHN0cnVjdCBpYl91bWVtX29k
cCwgbm90aWZpZXIpOwogCXN0cnVjdCBtbHg1X2liX21yICptcjsKIAljb25zdCB1NjQgdW1yX2Js
b2NrX21hc2sgPSAoTUxYNV9VTVJfTVRUX0FMSUdOTUVOVCAvCiAJCQkJICAgIHNpemVvZihzdHJ1
Y3QgbWx4NV9tdHQpKSAtIDE7CiAJdTY0IGlkeCA9IDAsIGJsa19zdGFydF9pZHggPSAwOworCXVu
c2lnbmVkIGxvbmcgc3RhcnQ7CisJdW5zaWduZWQgbG9uZyBlbmQ7CiAJaW50IGluX2Jsb2NrID0g
MDsKIAl1NjQgYWRkcjsKIAorCWlmICghbW11X25vdGlmaWVyX3JhbmdlX2Jsb2NrYWJsZShyYW5n
ZSkpCisJCXJldHVybiBmYWxzZTsKKwogCW11dGV4X2xvY2soJnVtZW1fb2RwLT51bWVtX211dGV4
KTsKKwltbXVfaW50ZXJ2YWxfc2V0X3NlcShtbmksIGN1cl9zZXEpOwogCS8qCiAJICogSWYgbnBh
Z2VzIGlzIHplcm8gdGhlbiB1bWVtX29kcC0+cHJpdmF0ZSBtYXkgbm90IGJlIHNldHVwIHlldC4g
VGhpcwogCSAqIGRvZXMgbm90IGNvbXBsZXRlIHVudGlsIGFmdGVyIHRoZSBmaXJzdCBwYWdlIGlz
IG1hcHBlZCBmb3IgRE1BLgpAQCAtMjYwLDggKzI2OSw4IEBAIHZvaWQgbWx4NV9pYl9pbnZhbGlk
YXRlX3JhbmdlKHN0cnVjdCBpYl91bWVtX29kcCAqdW1lbV9vZHAsIHVuc2lnbmVkIGxvbmcgc3Rh
cnQsCiAJCWdvdG8gb3V0OwogCW1yID0gdW1lbV9vZHAtPnByaXZhdGU7CiAKLQlzdGFydCA9IG1h
eF90KHU2NCwgaWJfdW1lbV9zdGFydCh1bWVtX29kcCksIHN0YXJ0KTsKLQllbmQgPSBtaW5fdCh1
NjQsIGliX3VtZW1fZW5kKHVtZW1fb2RwKSwgZW5kKTsKKwlzdGFydCA9IG1heF90KHU2NCwgaWJf
dW1lbV9zdGFydCh1bWVtX29kcCksIHJhbmdlLT5zdGFydCk7CisJZW5kID0gbWluX3QodTY0LCBp
Yl91bWVtX2VuZCh1bWVtX29kcCksIHJhbmdlLT5lbmQpOwogCiAJLyoKIAkgKiBJdGVyYXRpb24g
b25lIC0gemFwIHRoZSBIVydzIE1UVHMuIFRoZSBub3RpZmllcnNfY291bnQgZW5zdXJlcyB0aGF0
CkBAIC0zMTIsOCArMzIxLDEzIEBAIHZvaWQgbWx4NV9pYl9pbnZhbGlkYXRlX3JhbmdlKHN0cnVj
dCBpYl91bWVtX29kcCAqdW1lbV9vZHAsIHVuc2lnbmVkIGxvbmcgc3RhcnQsCiAJCWRlc3Ryb3lf
dW51c2VkX2ltcGxpY2l0X2NoaWxkX21yKG1yKTsKIG91dDoKIAltdXRleF91bmxvY2soJnVtZW1f
b2RwLT51bWVtX211dGV4KTsKKwlyZXR1cm4gdHJ1ZTsKIH0KIAorY29uc3Qgc3RydWN0IG1tdV9p
bnRlcnZhbF9ub3RpZmllcl9vcHMgbWx4NV9tbl9vcHMgPSB7CisJLmludmFsaWRhdGUgPSBtbHg1
X2liX2ludmFsaWRhdGVfcmFuZ2UsCit9OworCiB2b2lkIG1seDVfaWJfaW50ZXJuYWxfZmlsbF9v
ZHBfY2FwcyhzdHJ1Y3QgbWx4NV9pYl9kZXYgKmRldikKIHsKIAlzdHJ1Y3QgaWJfb2RwX2NhcHMg
KmNhcHMgPSAmZGV2LT5vZHBfY2FwczsKQEAgLTQxNCw3ICs0MjgsNyBAQCBzdGF0aWMgc3RydWN0
IG1seDVfaWJfbXIgKmltcGxpY2l0X2dldF9jaGlsZF9tcihzdHJ1Y3QgbWx4NV9pYl9tciAqaW1y
LAogCiAJb2RwID0gaWJfdW1lbV9vZHBfYWxsb2NfY2hpbGQodG9faWJfdW1lbV9vZHAoaW1yLT51
bWVtKSwKIAkJCQkgICAgICBpZHggKiBNTFg1X0lNUl9NVFRfU0laRSwKLQkJCQkgICAgICBNTFg1
X0lNUl9NVFRfU0laRSk7CisJCQkJICAgICAgTUxYNV9JTVJfTVRUX1NJWkUsICZtbHg1X21uX29w
cyk7CiAJaWYgKElTX0VSUihvZHApKQogCQlyZXR1cm4gRVJSX0NBU1Qob2RwKTsKIApAQCAtNjAw
LDggKzYxNCw5IEBAIHN0YXRpYyBpbnQgcGFnZWZhdWx0X3JlYWxfbXIoc3RydWN0IG1seDVfaWJf
bXIgKm1yLCBzdHJ1Y3QgaWJfdW1lbV9vZHAgKm9kcCwKIAkJCSAgICAgdTY0IHVzZXJfdmEsIHNp
emVfdCBiY250LCB1MzIgKmJ5dGVzX21hcHBlZCwKIAkJCSAgICAgdTMyIGZsYWdzKQogewotCWlu
dCBjdXJyZW50X3NlcSwgcGFnZV9zaGlmdCwgcmV0LCBucDsKKwlpbnQgcGFnZV9zaGlmdCwgcmV0
LCBucDsKIAlib29sIGRvd25ncmFkZSA9IGZsYWdzICYgTUxYNV9QRl9GTEFHU19ET1dOR1JBREU7
CisJdW5zaWduZWQgbG9uZyBjdXJyZW50X3NlcTsKIAl1NjQgYWNjZXNzX21hc2s7CiAJdTY0IHN0
YXJ0X2lkeCwgcGFnZV9tYXNrOwogCkBAIC02MTMsMTIgKzYyOCw3IEBAIHN0YXRpYyBpbnQgcGFn
ZWZhdWx0X3JlYWxfbXIoc3RydWN0IG1seDVfaWJfbXIgKm1yLCBzdHJ1Y3QgaWJfdW1lbV9vZHAg
Km9kcCwKIAlpZiAob2RwLT51bWVtLndyaXRhYmxlICYmICFkb3duZ3JhZGUpCiAJCWFjY2Vzc19t
YXNrIHw9IE9EUF9XUklURV9BTExPV0VEX0JJVDsKIAotCWN1cnJlbnRfc2VxID0gUkVBRF9PTkNF
KG9kcC0+bm90aWZpZXJzX3NlcSk7Ci0JLyoKLQkgKiBFbnN1cmUgdGhlIHNlcXVlbmNlIG51bWJl
ciBpcyB2YWxpZCBmb3Igc29tZSB0aW1lIGJlZm9yZSB3ZSBjYWxsCi0JICogZ3VwLgotCSAqLwot
CXNtcF9ybWIoKTsKKwljdXJyZW50X3NlcSA9IG1tdV9pbnRlcnZhbF9yZWFkX2JlZ2luKCZvZHAt
Pm5vdGlmaWVyKTsKIAogCW5wID0gaWJfdW1lbV9vZHBfbWFwX2RtYV9wYWdlcyhvZHAsIHVzZXJf
dmEsIGJjbnQsIGFjY2Vzc19tYXNrLAogCQkJCSAgICAgICBjdXJyZW50X3NlcSk7CkBAIC02MjYs
NyArNjM2LDcgQEAgc3RhdGljIGludCBwYWdlZmF1bHRfcmVhbF9tcihzdHJ1Y3QgbWx4NV9pYl9t
ciAqbXIsIHN0cnVjdCBpYl91bWVtX29kcCAqb2RwLAogCQlyZXR1cm4gbnA7CiAKIAltdXRleF9s
b2NrKCZvZHAtPnVtZW1fbXV0ZXgpOwotCWlmICghaWJfdW1lbV9tbXVfbm90aWZpZXJfcmV0cnko
b2RwLCBjdXJyZW50X3NlcSkpIHsKKwlpZiAoIW1tdV9pbnRlcnZhbF9yZWFkX3JldHJ5KCZvZHAt
Pm5vdGlmaWVyLCBjdXJyZW50X3NlcSkpIHsKIAkJLyoKIAkJICogTm8gbmVlZCB0byBjaGVjayB3
aGV0aGVyIHRoZSBNVFRzIHJlYWxseSBiZWxvbmcgdG8KIAkJICogdGhpcyBNUiwgc2luY2UgaWJf
dW1lbV9vZHBfbWFwX2RtYV9wYWdlcyBhbHJlYWR5CkBAIC02NTYsMTkgKzY2Niw2IEBAIHN0YXRp
YyBpbnQgcGFnZWZhdWx0X3JlYWxfbXIoc3RydWN0IG1seDVfaWJfbXIgKm1yLCBzdHJ1Y3QgaWJf
dW1lbV9vZHAgKm9kcCwKIAlyZXR1cm4gbnAgPDwgKHBhZ2Vfc2hpZnQgLSBQQUdFX1NISUZUKTsK
IAogb3V0OgotCWlmIChyZXQgPT0gLUVBR0FJTikgewotCQl1bnNpZ25lZCBsb25nIHRpbWVvdXQg
PSBtc2Vjc190b19qaWZmaWVzKE1NVV9OT1RJRklFUl9USU1FT1VUKTsKLQotCQlpZiAoIXdhaXRf
Zm9yX2NvbXBsZXRpb25fdGltZW91dCgmb2RwLT5ub3RpZmllcl9jb21wbGV0aW9uLAotCQkJCQkJ
IHRpbWVvdXQpKSB7Ci0JCQltbHg1X2liX3dhcm4oCi0JCQkJbXItPmRldiwKLQkJCQkidGltZW91
dCB3YWl0aW5nIGZvciBtbXUgbm90aWZpZXIuIHNlcSAlZCBhZ2FpbnN0ICVkLiBub3RpZmllcnNf
Y291bnQ9JWRcbiIsCi0JCQkJY3VycmVudF9zZXEsIG9kcC0+bm90aWZpZXJzX3NlcSwKLQkJCQlv
ZHAtPm5vdGlmaWVyc19jb3VudCk7Ci0JCX0KLQl9Ci0KIAlyZXR1cm4gcmV0OwogfQogCkBAIC0x
NjA5LDcgKzE2MDYsNiBAQCB2b2lkIG1seDVfb2RwX2luaXRfbXJfY2FjaGVfZW50cnkoc3RydWN0
IG1seDVfY2FjaGVfZW50ICplbnQpCiAKIHN0YXRpYyBjb25zdCBzdHJ1Y3QgaWJfZGV2aWNlX29w
cyBtbHg1X2liX2Rldl9vZHBfb3BzID0gewogCS5hZHZpc2VfbXIgPSBtbHg1X2liX2FkdmlzZV9t
ciwKLQkuaW52YWxpZGF0ZV9yYW5nZSA9IG1seDVfaWJfaW52YWxpZGF0ZV9yYW5nZSwKIH07CiAK
IGludCBtbHg1X2liX29kcF9pbml0X29uZShzdHJ1Y3QgbWx4NV9pYl9kZXYgKmRldikKZGlmZiAt
LWdpdCBhL2luY2x1ZGUvcmRtYS9pYl91bWVtX29kcC5oIGIvaW5jbHVkZS9yZG1hL2liX3VtZW1f
b2RwLmgKaW5kZXggMDliMGU0NDk0OTg2YTkuLjgxNDI5YWNjODI1Nzc0IDEwMDY0NAotLS0gYS9p
bmNsdWRlL3JkbWEvaWJfdW1lbV9vZHAuaAorKysgYi9pbmNsdWRlL3JkbWEvaWJfdW1lbV9vZHAu
aApAQCAtMzUsMTEgKzM1LDExIEBACiAKICNpbmNsdWRlIDxyZG1hL2liX3VtZW0uaD4KICNpbmNs
dWRlIDxyZG1hL2liX3ZlcmJzLmg+Ci0jaW5jbHVkZSA8bGludXgvaW50ZXJ2YWxfdHJlZS5oPgog
CiBzdHJ1Y3QgaWJfdW1lbV9vZHAgewogCXN0cnVjdCBpYl91bWVtIHVtZW07Ci0Jc3RydWN0IGli
X3Vjb250ZXh0X3Blcl9tbSAqcGVyX21tOworCXN0cnVjdCBtbXVfaW50ZXJ2YWxfbm90aWZpZXIg
bm90aWZpZXI7CisJc3RydWN0IHBpZCAqdGdpZDsKIAogCS8qCiAJICogQW4gYXJyYXkgb2YgdGhl
IHBhZ2VzIGluY2x1ZGVkIGluIHRoZSBvbi1kZW1hbmQgcGFnaW5nIHVtZW0uCkBAIC02MiwxMyAr
NjIsOCBAQCBzdHJ1Y3QgaWJfdW1lbV9vZHAgewogCXN0cnVjdCBtdXRleAkJdW1lbV9tdXRleDsK
IAl2b2lkCQkJKnByaXZhdGU7IC8qIGZvciB0aGUgSFcgZHJpdmVyIHRvIHVzZS4gKi8KIAotCWlu
dCBub3RpZmllcnNfc2VxOwotCWludCBub3RpZmllcnNfY291bnQ7CiAJaW50IG5wYWdlczsKIAot
CS8qIFRyZWUgdHJhY2tpbmcgKi8KLQlzdHJ1Y3QgaW50ZXJ2YWxfdHJlZV9ub2RlIGludGVydmFs
X3RyZWU7Ci0KIAkvKgogCSAqIEFuIGltcGxpY2l0IG9kcCB1bWVtIGNhbm5vdCBiZSBETUEgbWFw
cGVkLCBoYXMgMCBsZW5ndGgsIGFuZCBzZXJ2ZXMKIAkgKiBvbmx5IGFzIGFuIGFuY2hvciBmb3Ig
dGhlIGRyaXZlciB0byBob2xkIG9udG8gdGhlIHBlcl9tbS4gRklYTUU6CkBAIC03Nyw3ICs3Miw2
IEBAIHN0cnVjdCBpYl91bWVtX29kcCB7CiAJICovCiAJYm9vbCBpc19pbXBsaWNpdF9vZHA7CiAK
LQlzdHJ1Y3QgY29tcGxldGlvbglub3RpZmllcl9jb21wbGV0aW9uOwogCXVuc2lnbmVkIGludAkJ
cGFnZV9zaGlmdDsKIH07CiAKQEAgLTg5LDEzICs4MywxMyBAQCBzdGF0aWMgaW5saW5lIHN0cnVj
dCBpYl91bWVtX29kcCAqdG9faWJfdW1lbV9vZHAoc3RydWN0IGliX3VtZW0gKnVtZW0pCiAvKiBS
ZXR1cm5zIHRoZSBmaXJzdCBwYWdlIG9mIGFuIE9EUCB1bWVtLiAqLwogc3RhdGljIGlubGluZSB1
bnNpZ25lZCBsb25nIGliX3VtZW1fc3RhcnQoc3RydWN0IGliX3VtZW1fb2RwICp1bWVtX29kcCkK
IHsKLQlyZXR1cm4gdW1lbV9vZHAtPmludGVydmFsX3RyZWUuc3RhcnQ7CisJcmV0dXJuIHVtZW1f
b2RwLT5ub3RpZmllci5pbnRlcnZhbF90cmVlLnN0YXJ0OwogfQogCiAvKiBSZXR1cm5zIHRoZSBh
ZGRyZXNzIG9mIHRoZSBwYWdlIGFmdGVyIHRoZSBsYXN0IG9uZSBvZiBhbiBPRFAgdW1lbS4gKi8K
IHN0YXRpYyBpbmxpbmUgdW5zaWduZWQgbG9uZyBpYl91bWVtX2VuZChzdHJ1Y3QgaWJfdW1lbV9v
ZHAgKnVtZW1fb2RwKQogewotCXJldHVybiB1bWVtX29kcC0+aW50ZXJ2YWxfdHJlZS5sYXN0ICsg
MTsKKwlyZXR1cm4gdW1lbV9vZHAtPm5vdGlmaWVyLmludGVydmFsX3RyZWUubGFzdCArIDE7CiB9
CiAKIHN0YXRpYyBpbmxpbmUgc2l6ZV90IGliX3VtZW1fb2RwX251bV9wYWdlcyhzdHJ1Y3QgaWJf
dW1lbV9vZHAgKnVtZW1fb2RwKQpAQCAtMTE5LDIxICsxMTMsMTUgQEAgc3RhdGljIGlubGluZSBz
aXplX3QgaWJfdW1lbV9vZHBfbnVtX3BhZ2VzKHN0cnVjdCBpYl91bWVtX29kcCAqdW1lbV9vZHAp
CiAKICNpZmRlZiBDT05GSUdfSU5GSU5JQkFORF9PTl9ERU1BTkRfUEFHSU5HCiAKLXN0cnVjdCBp
Yl91Y29udGV4dF9wZXJfbW0gewotCXN0cnVjdCBtbXVfbm90aWZpZXIgbW47Ci0Jc3RydWN0IHBp
ZCAqdGdpZDsKLQotCXN0cnVjdCByYl9yb290X2NhY2hlZCB1bWVtX3RyZWU7Ci0JLyogUHJvdGVj
dHMgdW1lbV90cmVlICovCi0Jc3RydWN0IHJ3X3NlbWFwaG9yZSB1bWVtX3J3c2VtOwotfTsKLQot
c3RydWN0IGliX3VtZW1fb2RwICppYl91bWVtX29kcF9nZXQoc3RydWN0IGliX3VkYXRhICp1ZGF0
YSwgdW5zaWduZWQgbG9uZyBhZGRyLAotCQkJCSAgICBzaXplX3Qgc2l6ZSwgaW50IGFjY2Vzcyk7
CitzdHJ1Y3QgaWJfdW1lbV9vZHAgKgoraWJfdW1lbV9vZHBfZ2V0KHN0cnVjdCBpYl91ZGF0YSAq
dWRhdGEsIHVuc2lnbmVkIGxvbmcgYWRkciwgc2l6ZV90IHNpemUsCisJCWludCBhY2Nlc3MsIGNv
bnN0IHN0cnVjdCBtbXVfaW50ZXJ2YWxfbm90aWZpZXJfb3BzICpvcHMpOwogc3RydWN0IGliX3Vt
ZW1fb2RwICppYl91bWVtX29kcF9hbGxvY19pbXBsaWNpdChzdHJ1Y3QgaWJfdWRhdGEgKnVkYXRh
LAogCQkJCQkgICAgICAgaW50IGFjY2Vzcyk7Ci1zdHJ1Y3QgaWJfdW1lbV9vZHAgKmliX3VtZW1f
b2RwX2FsbG9jX2NoaWxkKHN0cnVjdCBpYl91bWVtX29kcCAqcm9vdF91bWVtLAotCQkJCQkgICAg
dW5zaWduZWQgbG9uZyBhZGRyLCBzaXplX3Qgc2l6ZSk7CitzdHJ1Y3QgaWJfdW1lbV9vZHAgKgor
aWJfdW1lbV9vZHBfYWxsb2NfY2hpbGQoc3RydWN0IGliX3VtZW1fb2RwICpyb290X3VtZW0sIHVu
c2lnbmVkIGxvbmcgYWRkciwKKwkJCXNpemVfdCBzaXplLAorCQkJY29uc3Qgc3RydWN0IG1tdV9p
bnRlcnZhbF9ub3RpZmllcl9vcHMgKm9wcyk7CiB2b2lkIGliX3VtZW1fb2RwX3JlbGVhc2Uoc3Ry
dWN0IGliX3VtZW1fb2RwICp1bWVtX29kcCk7CiAKIGludCBpYl91bWVtX29kcF9tYXBfZG1hX3Bh
Z2VzKHN0cnVjdCBpYl91bWVtX29kcCAqdW1lbV9vZHAsIHU2NCBzdGFydF9vZmZzZXQsCkBAIC0x
NDMsMzkgKzEzMSwxMSBAQCBpbnQgaWJfdW1lbV9vZHBfbWFwX2RtYV9wYWdlcyhzdHJ1Y3QgaWJf
dW1lbV9vZHAgKnVtZW1fb2RwLCB1NjQgc3RhcnRfb2Zmc2V0LAogdm9pZCBpYl91bWVtX29kcF91
bm1hcF9kbWFfcGFnZXMoc3RydWN0IGliX3VtZW1fb2RwICp1bWVtX29kcCwgdTY0IHN0YXJ0X29m
ZnNldCwKIAkJCQkgdTY0IGJvdW5kKTsKIAotdHlwZWRlZiBpbnQgKCp1bWVtX2NhbGxfYmFjayko
c3RydWN0IGliX3VtZW1fb2RwICppdGVtLCB1NjQgc3RhcnQsIHU2NCBlbmQsCi0JCQkgICAgICB2
b2lkICpjb29raWUpOwotLyoKLSAqIENhbGwgdGhlIGNhbGxiYWNrIG9uIGVhY2ggaWJfdW1lbSBp
biB0aGUgcmFuZ2UuIFJldHVybnMgdGhlIGxvZ2ljYWwgb3Igb2YKLSAqIHRoZSByZXR1cm4gdmFs
dWVzIG9mIHRoZSBmdW5jdGlvbnMgY2FsbGVkLgotICovCi1pbnQgcmJ0X2liX3VtZW1fZm9yX2Vh
Y2hfaW5fcmFuZ2Uoc3RydWN0IHJiX3Jvb3RfY2FjaGVkICpyb290LAotCQkJCSAgdTY0IHN0YXJ0
LCB1NjQgZW5kLAotCQkJCSAgdW1lbV9jYWxsX2JhY2sgY2IsCi0JCQkJICBib29sIGJsb2NrYWJs
ZSwgdm9pZCAqY29va2llKTsKLQotc3RhdGljIGlubGluZSBpbnQgaWJfdW1lbV9tbXVfbm90aWZp
ZXJfcmV0cnkoc3RydWN0IGliX3VtZW1fb2RwICp1bWVtX29kcCwKLQkJCQkJICAgICB1bnNpZ25l
ZCBsb25nIG1tdV9zZXEpCi17Ci0JLyoKLQkgKiBUaGlzIGNvZGUgaXMgc3Ryb25nbHkgYmFzZWQg
b24gdGhlIEtWTSBjb2RlIGZyb20KLQkgKiBtbXVfbm90aWZpZXJfcmV0cnkuIFNob3VsZCBiZSBj
YWxsZWQgd2l0aAotCSAqIHRoZSByZWxldmFudCBsb2NrcyB0YWtlbiAodW1lbV9vZHAtPnVtZW1f
bXV0ZXgKLQkgKiBhbmQgdGhlIHVjb250ZXh0IHVtZW1fbXV0ZXggc2VtYXBob3JlIGxvY2tlZCBm
b3IgcmVhZCkuCi0JICovCi0KLQlpZiAodW5saWtlbHkodW1lbV9vZHAtPm5vdGlmaWVyc19jb3Vu
dCkpCi0JCXJldHVybiAxOwotCWlmICh1bWVtX29kcC0+bm90aWZpZXJzX3NlcSAhPSBtbXVfc2Vx
KQotCQlyZXR1cm4gMTsKLQlyZXR1cm4gMDsKLX0KLQogI2Vsc2UgLyogQ09ORklHX0lORklOSUJB
TkRfT05fREVNQU5EX1BBR0lORyAqLwogCi1zdGF0aWMgaW5saW5lIHN0cnVjdCBpYl91bWVtX29k
cCAqaWJfdW1lbV9vZHBfZ2V0KHN0cnVjdCBpYl91ZGF0YSAqdWRhdGEsCi0JCQkJCQkgIHVuc2ln
bmVkIGxvbmcgYWRkciwKLQkJCQkJCSAgc2l6ZV90IHNpemUsIGludCBhY2Nlc3MpCitzdGF0aWMg
aW5saW5lIHN0cnVjdCBpYl91bWVtX29kcCAqCitpYl91bWVtX29kcF9nZXQoc3RydWN0IGliX3Vk
YXRhICp1ZGF0YSwgdW5zaWduZWQgbG9uZyBhZGRyLCBzaXplX3Qgc2l6ZSwKKwkJaW50IGFjY2Vz
cywgY29uc3Qgc3RydWN0IG1tdV9pbnRlcnZhbF9ub3RpZmllcl9vcHMgKm9wcykKIHsKIAlyZXR1
cm4gRVJSX1BUUigtRUlOVkFMKTsKIH0KZGlmZiAtLWdpdCBhL2luY2x1ZGUvcmRtYS9pYl92ZXJi
cy5oIGIvaW5jbHVkZS9yZG1hL2liX3ZlcmJzLmgKaW5kZXggNmE0N2JhODVjNTRjMTEuLjJjMzBj
ODU5YWUwZDEzIDEwMDY0NAotLS0gYS9pbmNsdWRlL3JkbWEvaWJfdmVyYnMuaAorKysgYi9pbmNs
dWRlL3JkbWEvaWJfdmVyYnMuaApAQCAtMjQyMiw4ICsyNDIyLDYgQEAgc3RydWN0IGliX2Rldmlj
ZV9vcHMgewogCQkJICAgIHU2NCBpb3ZhKTsKIAlpbnQgKCp1bm1hcF9mbXIpKHN0cnVjdCBsaXN0
X2hlYWQgKmZtcl9saXN0KTsKIAlpbnQgKCpkZWFsbG9jX2Ztcikoc3RydWN0IGliX2ZtciAqZm1y
KTsKLQl2b2lkICgqaW52YWxpZGF0ZV9yYW5nZSkoc3RydWN0IGliX3VtZW1fb2RwICp1bWVtX29k
cCwKLQkJCQkgdW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQpOwogCWludCAo
KmF0dGFjaF9tY2FzdCkoc3RydWN0IGliX3FwICpxcCwgdW5pb24gaWJfZ2lkICpnaWQsIHUxNiBs
aWQpOwogCWludCAoKmRldGFjaF9tY2FzdCkoc3RydWN0IGliX3FwICpxcCwgdW5pb24gaWJfZ2lk
ICpnaWQsIHUxNiBsaWQpOwogCXN0cnVjdCBpYl94cmNkICooKmFsbG9jX3hyY2QpKHN0cnVjdCBp
Yl9kZXZpY2UgKmRldmljZSwKLS0gCjIuMjQuMAoKX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX18KZHJpLWRldmVsIG1haWxpbmcgbGlzdApkcmktZGV2ZWxAbGlz
dHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlzdHMuZnJlZWRlc2t0b3Aub3JnL21haWxtYW4v
bGlzdGluZm8vZHJpLWRldmVs
