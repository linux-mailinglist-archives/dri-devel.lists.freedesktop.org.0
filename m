Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 2D3F6F295C
	for <lists+dri-devel@lfdr.de>; Thu,  7 Nov 2019 09:41:35 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 6E27E6EF10;
	Thu,  7 Nov 2019 08:41:31 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from pio-pvt-msa3.bahnhof.se (pio-pvt-msa3.bahnhof.se [79.136.2.42])
 by gabe.freedesktop.org (Postfix) with ESMTPS id A4D2C6EF08
 for <dri-devel@lists.freedesktop.org>; Thu,  7 Nov 2019 08:41:29 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by pio-pvt-msa3.bahnhof.se (Postfix) with ESMTP id 229BC3F4C3
 for <dri-devel@lists.freedesktop.org>; Thu,  7 Nov 2019 09:41:27 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at bahnhof.se
X-Spam-Flag: NO
X-Spam-Score: -2.099
X-Spam-Level: 
X-Spam-Status: No, score=-2.099 tagged_above=-999 required=6.31
 tests=[BAYES_00=-1.9, DKIM_SIGNED=0.1, DKIM_VALID=-0.1,
 DKIM_VALID_AU=-0.1, DKIM_VALID_EF=-0.1, URIBL_BLOCKED=0.001]
 autolearn=ham autolearn_force=no
Received: from pio-pvt-msa3.bahnhof.se ([127.0.0.1])
 by localhost (pio-pvt-msa3.bahnhof.se [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id BBt0HSwHSsFN for <dri-devel@lists.freedesktop.org>;
 Thu,  7 Nov 2019 09:41:25 +0100 (CET)
Received: from mail1.shipmail.org (h-205-35.A357.priv.bahnhof.se
 [155.4.205.35]) (Authenticated sender: mb878879)
 by pio-pvt-msa3.bahnhof.se (Postfix) with ESMTPA id 1A1B43F30D
 for <dri-devel@lists.freedesktop.org>; Thu,  7 Nov 2019 09:41:24 +0100 (CET)
Received: from localhost.localdomain.localdomain
 (h-205-35.A357.priv.bahnhof.se [155.4.205.35])
 by mail1.shipmail.org (Postfix) with ESMTPSA id 73D3936031E
 for <dri-devel@lists.freedesktop.org>; Thu,  7 Nov 2019 09:41:24 +0100 (CET)
From: =?UTF-8?q?Thomas=20Hellstr=C3=B6m=20=28VMware=29?=
 <thomas_os@shipmail.org>
To: dri-devel@lists.freedesktop.org
Subject: [PATCH v7 4/8] mm: Add write-protect and clean utilities for address
 space ranges
Date: Thu,  7 Nov 2019 09:41:12 +0100
Message-Id: <20191107084116.33032-5-thomas_os@shipmail.org>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20191107084116.33032-1-thomas_os@shipmail.org>
References: <20191107084116.33032-1-thomas_os@shipmail.org>
MIME-Version: 1.0
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
 d=shipmail.org; s=mail; 
 t=1573116084; bh=2xCS0bN4oZGQVsktbNM1aiac360jgVTRZOYlxadOoB4=;
 h=From:To:Subject:Date:In-Reply-To:References:From;
 b=PRRb9xuXEME9TuS6hLhX87OzaR218DO4nVHkY9xb84MOLPUctusNfJkk2+mCDLzaR
 Y/fXwKpBwDE3C/jK7FkECS5eXP2W3i1WOhFJ2Wr7v4xXkM+oXxZvhok9+6gw9tsshC
 UCx544eI0vu+n4MFoAj1obsOVnEu5qwlL8IZgrVI=
X-Mailman-Original-Authentication-Results: pio-pvt-msa3.bahnhof.se;
 dkim=pass (1024-bit key;
 unprotected) header.d=shipmail.org header.i=@shipmail.org header.b=PRRb9xuX; 
 dkim-atps=neutral
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

RnJvbTogVGhvbWFzIEhlbGxzdHJvbSA8dGhlbGxzdHJvbUB2bXdhcmUuY29tPgoKQWRkIHR3byB1
dGlsaXRpZXMgdG8gMSkgd3JpdGUtcHJvdGVjdCBhbmQgMikgY2xlYW4gYWxsIHB0ZXMgcG9pbnRp
bmcgaW50bwphIHJhbmdlIG9mIGFuIGFkZHJlc3Mgc3BhY2UuClRoZSB1dGlsaXRpZXMgYXJlIGlu
dGVuZGVkIHRvIGFpZCBpbiB0cmFja2luZyBkaXJ0eSBwYWdlcyAoZWl0aGVyCmRyaXZlci1hbGxv
Y2F0ZWQgc3lzdGVtIG1lbW9yeSBvciBwY2kgZGV2aWNlIG1lbW9yeSkuClRoZSB3cml0ZS1wcm90
ZWN0IHV0aWxpdHkgc2hvdWxkIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aApwYWdlX21rd3Jp
dGUoKSBhbmQgcGZuX21rd3JpdGUoKSB0byB0cmlnZ2VyIHdyaXRlIHBhZ2UtZmF1bHRzIG9uIHBh
Z2UKYWNjZXNzZXMuIFR5cGljYWxseSBvbmUgd291bGQgd2FudCB0byB1c2UgdGhpcyBvbiBzcGFy
c2UgYWNjZXNzZXMgaW50bwpsYXJnZSBtZW1vcnkgcmVnaW9ucy4gVGhlIGNsZWFuIHV0aWxpdHkg
c2hvdWxkIGJlIHVzZWQgdG8gdXRpbGl6ZQpoYXJkd2FyZSBkaXJ0eWluZyBmdW5jdGlvbmFsaXR5
IGFuZCBhdm9pZCB0aGUgb3ZlcmhlYWQgb2YgcGFnZS1mYXVsdHMsCnR5cGljYWxseSBvbiBsYXJn
ZSBhY2Nlc3NlcyBpbnRvIHNtYWxsIG1lbW9yeSByZWdpb25zLgoKQ2M6IEFuZHJldyBNb3J0b24g
PGFrcG1AbGludXgtZm91bmRhdGlvbi5vcmc+CkNjOiBNYXR0aGV3IFdpbGNveCA8d2lsbHlAaW5m
cmFkZWFkLm9yZz4KQ2M6IFdpbGwgRGVhY29uIDx3aWxsLmRlYWNvbkBhcm0uY29tPgpDYzogUGV0
ZXIgWmlqbHN0cmEgPHBldGVyekBpbmZyYWRlYWQub3JnPgpDYzogUmlrIHZhbiBSaWVsIDxyaWVs
QHN1cnJpZWwuY29tPgpDYzogTWluY2hhbiBLaW0gPG1pbmNoYW5Aa2VybmVsLm9yZz4KQ2M6IE1p
Y2hhbCBIb2NrbyA8bWhvY2tvQHN1c2UuY29tPgpDYzogSHVhbmcgWWluZyA8eWluZy5odWFuZ0Bp
bnRlbC5jb20+CkNjOiBKw6lyw7RtZSBHbGlzc2UgPGpnbGlzc2VAcmVkaGF0LmNvbT4KQ2M6IEtp
cmlsbCBBLiBTaHV0ZW1vdiA8a2lyaWxsQHNodXRlbW92Lm5hbWU+ClNpZ25lZC1vZmYtYnk6IFRo
b21hcyBIZWxsc3Ryb20gPHRoZWxsc3Ryb21Adm13YXJlLmNvbT4KQWNrZWQtYnk6IEFuZHJldyBN
b3J0b24gPGFrcG1AbGludXgtZm91bmRhdGlvbi5vcmc+Ci0tLQogaW5jbHVkZS9saW51eC9tbS5o
ICAgICAgICAgfCAgMTMgKy0KIG1tL0tjb25maWcgICAgICAgICAgICAgICAgIHwgICAzICsKIG1t
L01ha2VmaWxlICAgICAgICAgICAgICAgIHwgICAxICsKIG1tL21hcHBpbmdfZGlydHlfaGVscGVy
cy5jIHwgMzE1ICsrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysKIDQgZmlsZXMg
Y2hhbmdlZCwgMzMxIGluc2VydGlvbnMoKyksIDEgZGVsZXRpb24oLSkKIGNyZWF0ZSBtb2RlIDEw
MDY0NCBtbS9tYXBwaW5nX2RpcnR5X2hlbHBlcnMuYwoKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGlu
dXgvbW0uaCBiL2luY2x1ZGUvbGludXgvbW0uaAppbmRleCBjYzI5MjI3M2U2YmEuLjRiYzkzNDc3
Mzc1ZSAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9tbS5oCisrKyBiL2luY2x1ZGUvbGludXgv
bW0uaApAQCAtMjYzNyw3ICsyNjM3LDYgQEAgdHlwZWRlZiBpbnQgKCpwdGVfZm5fdCkocHRlX3Qg
KnB0ZSwgdW5zaWduZWQgbG9uZyBhZGRyLCB2b2lkICpkYXRhKTsKIGV4dGVybiBpbnQgYXBwbHlf
dG9fcGFnZV9yYW5nZShzdHJ1Y3QgbW1fc3RydWN0ICptbSwgdW5zaWduZWQgbG9uZyBhZGRyZXNz
LAogCQkJICAgICAgIHVuc2lnbmVkIGxvbmcgc2l6ZSwgcHRlX2ZuX3QgZm4sIHZvaWQgKmRhdGEp
OwogCi0KICNpZmRlZiBDT05GSUdfUEFHRV9QT0lTT05JTkcKIGV4dGVybiBib29sIHBhZ2VfcG9p
c29uaW5nX2VuYWJsZWQodm9pZCk7CiBleHRlcm4gdm9pZCBrZXJuZWxfcG9pc29uX3BhZ2VzKHN0
cnVjdCBwYWdlICpwYWdlLCBpbnQgbnVtcGFnZXMsIGludCBlbmFibGUpOwpAQCAtMjg3OCw1ICsy
ODc3LDE3IEBAIHN0YXRpYyBpbmxpbmUgaW50IHBhZ2VzX2lkZW50aWNhbChzdHJ1Y3QgcGFnZSAq
cGFnZTEsIHN0cnVjdCBwYWdlICpwYWdlMikKIAlyZXR1cm4gIW1lbWNtcF9wYWdlcyhwYWdlMSwg
cGFnZTIpOwogfQogCisjaWZkZWYgQ09ORklHX01BUFBJTkdfRElSVFlfSEVMUEVSUwordW5zaWdu
ZWQgbG9uZyBjbGVhbl9yZWNvcmRfc2hhcmVkX21hcHBpbmdfcmFuZ2Uoc3RydWN0IGFkZHJlc3Nf
c3BhY2UgKm1hcHBpbmcsCisJCQkJCQlwZ29mZl90IGZpcnN0X2luZGV4LCBwZ29mZl90IG5yLAor
CQkJCQkJcGdvZmZfdCBiaXRtYXBfcGdvZmYsCisJCQkJCQl1bnNpZ25lZCBsb25nICpiaXRtYXAs
CisJCQkJCQlwZ29mZl90ICpzdGFydCwKKwkJCQkJCXBnb2ZmX3QgKmVuZCk7CisKK3Vuc2lnbmVk
IGxvbmcgd3Bfc2hhcmVkX21hcHBpbmdfcmFuZ2Uoc3RydWN0IGFkZHJlc3Nfc3BhY2UgKm1hcHBp
bmcsCisJCQkJICAgICAgcGdvZmZfdCBmaXJzdF9pbmRleCwgcGdvZmZfdCBucik7CisjZW5kaWYK
KwogI2VuZGlmIC8qIF9fS0VSTkVMX18gKi8KICNlbmRpZiAvKiBfTElOVVhfTU1fSCAqLwpkaWZm
IC0tZ2l0IGEvbW0vS2NvbmZpZyBiL21tL0tjb25maWcKaW5kZXggYTVkYWU5YTdlYjUxLi41NTBm
N2FjZWI2NzkgMTAwNjQ0Ci0tLSBhL21tL0tjb25maWcKKysrIGIvbW0vS2NvbmZpZwpAQCAtNzM2
LDQgKzczNiw3IEBAIGNvbmZpZyBBUkNIX0hBU19QVEVfU1BFQ0lBTAogY29uZmlnIEFSQ0hfSEFT
X0hVR0VQRAogCWJvb2wKIAorY29uZmlnIE1BUFBJTkdfRElSVFlfSEVMUEVSUworICAgICAgICBi
b29sCisKIGVuZG1lbnUKZGlmZiAtLWdpdCBhL21tL01ha2VmaWxlIGIvbW0vTWFrZWZpbGUKaW5k
ZXggZDk5Njg0NjY5N2VmLi4xOTM3Y2MyNTE4ODMgMTAwNjQ0Ci0tLSBhL21tL01ha2VmaWxlCisr
KyBiL21tL01ha2VmaWxlCkBAIC0xMDcsMyArMTA3LDQgQEAgb2JqLSQoQ09ORklHX1BFUkNQVV9T
VEFUUykgKz0gcGVyY3B1LXN0YXRzLm8KIG9iai0kKENPTkZJR19aT05FX0RFVklDRSkgKz0gbWVt
cmVtYXAubwogb2JqLSQoQ09ORklHX0hNTV9NSVJST1IpICs9IGhtbS5vCiBvYmotJChDT05GSUdf
TUVNRkRfQ1JFQVRFKSArPSBtZW1mZC5vCitvYmotJChDT05GSUdfTUFQUElOR19ESVJUWV9IRUxQ
RVJTKSArPSBtYXBwaW5nX2RpcnR5X2hlbHBlcnMubwpkaWZmIC0tZ2l0IGEvbW0vbWFwcGluZ19k
aXJ0eV9oZWxwZXJzLmMgYi9tbS9tYXBwaW5nX2RpcnR5X2hlbHBlcnMuYwpuZXcgZmlsZSBtb2Rl
IDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMDAuLjcxMDcwZGRhOTY0MwotLS0gL2Rldi9udWxsCisr
KyBiL21tL21hcHBpbmdfZGlydHlfaGVscGVycy5jCkBAIC0wLDAgKzEsMzE1IEBACisvLyBTUERY
LUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMAorI2luY2x1ZGUgPGxpbnV4L3BhZ2V3YWxrLmg+
CisjaW5jbHVkZSA8bGludXgvaHVnZXRsYi5oPgorI2luY2x1ZGUgPGxpbnV4L2JpdG9wcy5oPgor
I2luY2x1ZGUgPGxpbnV4L21tdV9ub3RpZmllci5oPgorI2luY2x1ZGUgPGFzbS9jYWNoZWZsdXNo
Lmg+CisjaW5jbHVkZSA8YXNtL3RsYmZsdXNoLmg+CisKKy8qKgorICogc3RydWN0IHdwX3dhbGsg
LSBQcml2YXRlIHN0cnVjdCBmb3IgcGFnZXRhYmxlIHdhbGsgY2FsbGJhY2tzCisgKiBAcmFuZ2U6
IFJhbmdlIGZvciBtbXUgbm90aWZpZXJzCisgKiBAdGxiZmx1c2hfc3RhcnQ6IEFkZHJlc3Mgb2Yg
Zmlyc3QgbW9kaWZpZWQgcHRlCisgKiBAdGxiZmx1c2hfZW5kOiBBZGRyZXNzIG9mIGxhc3QgbW9k
aWZpZWQgcHRlICsgMQorICogQHRvdGFsOiBUb3RhbCBudW1iZXIgb2YgbW9kaWZpZWQgcHRlcwor
ICovCitzdHJ1Y3Qgd3Bfd2FsayB7CisJc3RydWN0IG1tdV9ub3RpZmllcl9yYW5nZSByYW5nZTsK
Kwl1bnNpZ25lZCBsb25nIHRsYmZsdXNoX3N0YXJ0OworCXVuc2lnbmVkIGxvbmcgdGxiZmx1c2hf
ZW5kOworCXVuc2lnbmVkIGxvbmcgdG90YWw7Cit9OworCisvKioKKyAqIHdwX3B0ZSAtIFdyaXRl
LXByb3RlY3QgYSBwdGUKKyAqIEBwdGU6IFBvaW50ZXIgdG8gdGhlIHB0ZQorICogQGFkZHI6IFRo
ZSB2aXJ0dWFsIHBhZ2UgYWRkcmVzcworICogQHdhbGs6IHBhZ2V0YWJsZSB3YWxrIGNhbGxiYWNr
IGFyZ3VtZW50CisgKgorICogVGhlIGZ1bmN0aW9uIHdyaXRlLXByb3RlY3RzIGEgcHRlIGFuZCBy
ZWNvcmRzIHRoZSByYW5nZSBpbgorICogdmlydHVhbCBhZGRyZXNzIHNwYWNlIG9mIHRvdWNoZWQg
cHRlcyBmb3IgZWZmaWNpZW50IHJhbmdlIFRMQiBmbHVzaGVzLgorICovCitzdGF0aWMgaW50IHdw
X3B0ZShwdGVfdCAqcHRlLCB1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcgZW5kLAor
CQkgIHN0cnVjdCBtbV93YWxrICp3YWxrKQoreworCXN0cnVjdCB3cF93YWxrICp3cHdhbGsgPSB3
YWxrLT5wcml2YXRlOworCXB0ZV90IHB0ZW50ID0gKnB0ZTsKKworCWlmIChwdGVfd3JpdGUocHRl
bnQpKSB7CisJCXB0ZV90IG9sZF9wdGUgPSBwdGVwX21vZGlmeV9wcm90X3N0YXJ0KHdhbGstPnZt
YSwgYWRkciwgcHRlKTsKKworCQlwdGVudCA9IHB0ZV93cnByb3RlY3Qob2xkX3B0ZSk7CisJCXB0
ZXBfbW9kaWZ5X3Byb3RfY29tbWl0KHdhbGstPnZtYSwgYWRkciwgcHRlLCBvbGRfcHRlLCBwdGVu
dCk7CisJCXdwd2Fsay0+dG90YWwrKzsKKwkJd3B3YWxrLT50bGJmbHVzaF9zdGFydCA9IG1pbih3
cHdhbGstPnRsYmZsdXNoX3N0YXJ0LCBhZGRyKTsKKwkJd3B3YWxrLT50bGJmbHVzaF9lbmQgPSBt
YXgod3B3YWxrLT50bGJmbHVzaF9lbmQsCisJCQkJCSAgIGFkZHIgKyBQQUdFX1NJWkUpOworCX0K
KworCXJldHVybiAwOworfQorCisvKioKKyAqIHN0cnVjdCBjbGVhbl93YWxrIC0gUHJpdmF0ZSBz
dHJ1Y3QgZm9yIHRoZSBjbGVhbl9yZWNvcmRfcHRlIGZ1bmN0aW9uLgorICogQGJhc2U6IHN0cnVj
dCB3cF93YWxrIHdlIGRlcml2ZSBmcm9tCisgKiBAYml0bWFwX3Bnb2ZmOiBBZGRyZXNzX3NwYWNl
IFBhZ2Ugb2Zmc2V0IG9mIHRoZSBmaXJzdCBiaXQgaW4gQGJpdG1hcAorICogQGJpdG1hcDogQml0
bWFwIHdpdGggb25lIGJpdCBmb3IgZWFjaCBwYWdlIG9mZnNldCBpbiB0aGUgYWRkcmVzc19zcGFj
ZSByYW5nZQorICogY292ZXJlZC4KKyAqIEBzdGFydDogQWRkcmVzc19zcGFjZSBwYWdlIG9mZnNl
dCBvZiBmaXJzdCBtb2RpZmllZCBwdGUgcmVsYXRpdmUKKyAqIHRvIEBiaXRtYXBfcGdvZmYKKyAq
IEBlbmQ6IEFkZHJlc3Nfc3BhY2UgcGFnZSBvZmZzZXQgb2YgbGFzdCBtb2RpZmllZCBwdGUgcmVs
YXRpdmUKKyAqIHRvIEBiaXRtYXBfcGdvZmYKKyAqLworc3RydWN0IGNsZWFuX3dhbGsgeworCXN0
cnVjdCB3cF93YWxrIGJhc2U7CisJcGdvZmZfdCBiaXRtYXBfcGdvZmY7CisJdW5zaWduZWQgbG9u
ZyAqYml0bWFwOworCXBnb2ZmX3Qgc3RhcnQ7CisJcGdvZmZfdCBlbmQ7Cit9OworCisjZGVmaW5l
IHRvX2NsZWFuX3dhbGsoX3dwd2FsaykgY29udGFpbmVyX29mKF93cHdhbGssIHN0cnVjdCBjbGVh
bl93YWxrLCBiYXNlKQorCisvKioKKyAqIGNsZWFuX3JlY29yZF9wdGUgLSBDbGVhbiBhIHB0ZSBh
bmQgcmVjb3JkIGl0cyBhZGRyZXNzIHNwYWNlIG9mZnNldCBpbiBhCisgKiBiaXRtYXAKKyAqIEBw
dGU6IFBvaW50ZXIgdG8gdGhlIHB0ZQorICogQGFkZHI6IFRoZSB2aXJ0dWFsIHBhZ2UgYWRkcmVz
cworICogQHdhbGs6IHBhZ2V0YWJsZSB3YWxrIGNhbGxiYWNrIGFyZ3VtZW50CisgKgorICogVGhl
IGZ1bmN0aW9uIGNsZWFucyBhIHB0ZSBhbmQgcmVjb3JkcyB0aGUgcmFuZ2UgaW4KKyAqIHZpcnR1
YWwgYWRkcmVzcyBzcGFjZSBvZiB0b3VjaGVkIHB0ZXMgZm9yIGVmZmljaWVudCBUTEIgZmx1c2hl
cy4KKyAqIEl0IGFsc28gcmVjb3JkcyBkaXJ0eSBwdGVzIGluIGEgYml0bWFwIHJlcHJlc2VudGlu
ZyBwYWdlIG9mZnNldHMKKyAqIGluIHRoZSBhZGRyZXNzX3NwYWNlLCBhcyB3ZWxsIGFzIHRoZSBm
aXJzdCBhbmQgbGFzdCBvZiB0aGUgYml0cworICogdG91Y2hlZC4KKyAqLworc3RhdGljIGludCBj
bGVhbl9yZWNvcmRfcHRlKHB0ZV90ICpwdGUsIHVuc2lnbmVkIGxvbmcgYWRkciwKKwkJCSAgICB1
bnNpZ25lZCBsb25nIGVuZCwgc3RydWN0IG1tX3dhbGsgKndhbGspCit7CisJc3RydWN0IHdwX3dh
bGsgKndwd2FsayA9IHdhbGstPnByaXZhdGU7CisJc3RydWN0IGNsZWFuX3dhbGsgKmN3YWxrID0g
dG9fY2xlYW5fd2Fsayh3cHdhbGspOworCXB0ZV90IHB0ZW50ID0gKnB0ZTsKKworCWlmIChwdGVf
ZGlydHkocHRlbnQpKSB7CisJCXBnb2ZmX3QgcGdvZmYgPSAoKGFkZHIgLSB3YWxrLT52bWEtPnZt
X3N0YXJ0KSA+PiBQQUdFX1NISUZUKSArCisJCQl3YWxrLT52bWEtPnZtX3Bnb2ZmIC0gY3dhbGst
PmJpdG1hcF9wZ29mZjsKKwkJcHRlX3Qgb2xkX3B0ZSA9IHB0ZXBfbW9kaWZ5X3Byb3Rfc3RhcnQo
d2Fsay0+dm1hLCBhZGRyLCBwdGUpOworCisJCXB0ZW50ID0gcHRlX21rY2xlYW4ob2xkX3B0ZSk7
CisJCXB0ZXBfbW9kaWZ5X3Byb3RfY29tbWl0KHdhbGstPnZtYSwgYWRkciwgcHRlLCBvbGRfcHRl
LCBwdGVudCk7CisKKwkJd3B3YWxrLT50b3RhbCsrOworCQl3cHdhbGstPnRsYmZsdXNoX3N0YXJ0
ID0gbWluKHdwd2Fsay0+dGxiZmx1c2hfc3RhcnQsIGFkZHIpOworCQl3cHdhbGstPnRsYmZsdXNo
X2VuZCA9IG1heCh3cHdhbGstPnRsYmZsdXNoX2VuZCwKKwkJCQkJICAgYWRkciArIFBBR0VfU0la
RSk7CisKKwkJX19zZXRfYml0KHBnb2ZmLCBjd2Fsay0+Yml0bWFwKTsKKwkJY3dhbGstPnN0YXJ0
ID0gbWluKGN3YWxrLT5zdGFydCwgcGdvZmYpOworCQljd2Fsay0+ZW5kID0gbWF4KGN3YWxrLT5l
bmQsIHBnb2ZmICsgMSk7CisJfQorCisJcmV0dXJuIDA7Cit9CisKKy8qIHdwX2NsZWFuX3BtZF9l
bnRyeSAtIFRoZSBwYWdld2FsayBwbWQgY2FsbGJhY2suICovCitzdGF0aWMgaW50IHdwX2NsZWFu
X3BtZF9lbnRyeShwbWRfdCAqcG1kLCB1bnNpZ25lZCBsb25nIGFkZHIsIHVuc2lnbmVkIGxvbmcg
ZW5kLAorCQkJICAgICAgc3RydWN0IG1tX3dhbGsgKndhbGspCit7CisJLyogRGlydHktdHJhY2tp
bmcgc2hvdWxkIGJlIGhhbmRsZWQgb24gdGhlIHB0ZSBsZXZlbCAqLworCXBtZF90IHBtZHZhbCA9
IHBtZF9yZWFkX2F0b21pYyhwbWQpOworCisJaWYgKHBtZF90cmFuc19odWdlKHBtZHZhbCkgfHwg
cG1kX2Rldm1hcChwbWR2YWwpKQorCQlXQVJOX09OKHBtZF93cml0ZShwbWR2YWwpIHx8IHBtZF9k
aXJ0eShwbWR2YWwpKTsKKworCXJldHVybiAwOworfQorCisvKiB3cF9jbGVhbl9wdWRfZW50cnkg
LSBUaGUgcGFnZXdhbGsgcHVkIGNhbGxiYWNrLiAqLworc3RhdGljIGludCB3cF9jbGVhbl9wdWRf
ZW50cnkocHVkX3QgKnB1ZCwgdW5zaWduZWQgbG9uZyBhZGRyLCB1bnNpZ25lZCBsb25nIGVuZCwK
KwkJCSAgICAgIHN0cnVjdCBtbV93YWxrICp3YWxrKQoreworCS8qIERpcnR5LXRyYWNraW5nIHNo
b3VsZCBiZSBoYW5kbGVkIG9uIHRoZSBwdGUgbGV2ZWwgKi8KKwlwdWRfdCBwdWR2YWwgPSBSRUFE
X09OQ0UoKnB1ZCk7CisKKwlpZiAocHVkX3RyYW5zX2h1Z2UocHVkdmFsKSB8fCBwdWRfZGV2bWFw
KHB1ZHZhbCkpCisJCVdBUk5fT04ocHVkX3dyaXRlKHB1ZHZhbCkgfHwgcHVkX2RpcnR5KHB1ZHZh
bCkpOworCisJcmV0dXJuIDA7Cit9CisKKy8qCisgKiB3cF9jbGVhbl9wcmVfdm1hIC0gVGhlIHBh
Z2V3YWxrIHByZV92bWEgY2FsbGJhY2suCisgKgorICogVGhlIHByZV92bWEgY2FsbGJhY2sgcGVy
Zm9ybXMgdGhlIGNhY2hlIGZsdXNoLCBzdGFnZXMgdGhlIHRsYiBmbHVzaAorICogYW5kIGNhbGxz
IHRoZSBuZWNlc3NhcnkgbW11IG5vdGlmaWVycy4KKyAqLworc3RhdGljIGludCB3cF9jbGVhbl9w
cmVfdm1hKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLAorCQkJICAgIHN0
cnVjdCBtbV93YWxrICp3YWxrKQoreworCXN0cnVjdCB3cF93YWxrICp3cHdhbGsgPSB3YWxrLT5w
cml2YXRlOworCisJd3B3YWxrLT50bGJmbHVzaF9zdGFydCA9IGVuZDsKKwl3cHdhbGstPnRsYmZs
dXNoX2VuZCA9IHN0YXJ0OworCisJbW11X25vdGlmaWVyX3JhbmdlX2luaXQoJndwd2Fsay0+cmFu
Z2UsIE1NVV9OT1RJRllfUFJPVEVDVElPTl9QQUdFLCAwLAorCQkJCXdhbGstPnZtYSwgd2Fsay0+
bW0sIHN0YXJ0LCBlbmQpOworCW1tdV9ub3RpZmllcl9pbnZhbGlkYXRlX3JhbmdlX3N0YXJ0KCZ3
cHdhbGstPnJhbmdlKTsKKwlmbHVzaF9jYWNoZV9yYW5nZSh3YWxrLT52bWEsIHN0YXJ0LCBlbmQp
OworCisJLyoKKwkgKiBXZSdyZSBub3QgdXNpbmcgdGxiX2dhdGhlcl9tbXUoKSBzaW5jZSB0eXBp
Y2FsbHkKKwkgKiBvbmx5IGEgc21hbGwgc3VicmFuZ2Ugb2YgUFRFcyBhcmUgYWZmZWN0ZWQsIHdo
ZXJlYXMKKwkgKiB0bGJfZ2F0aGVyX21tdSgpIHJlY29yZHMgdGhlIGZ1bGwgcmFuZ2UuCisJICov
CisJaW5jX3RsYl9mbHVzaF9wZW5kaW5nKHdhbGstPm1tKTsKKworCXJldHVybiAwOworfQorCisv
KgorICogd3BfY2xlYW5fcG9zdF92bWEgLSBUaGUgcGFnZXdhbGsgcG9zdF92bWEgY2FsbGJhY2su
CisgKgorICogVGhlIHBvc3Rfdm1hIGNhbGxiYWNrIHBlcmZvcm1zIHRoZSB0bGIgZmx1c2ggYW5k
IGNhbGxzIG5lY2Vzc2FyeSBtbXUKKyAqIG5vdGlmaWVycy4KKyAqLworc3RhdGljIHZvaWQgd3Bf
Y2xlYW5fcG9zdF92bWEoc3RydWN0IG1tX3dhbGsgKndhbGspCit7CisJc3RydWN0IHdwX3dhbGsg
Kndwd2FsayA9IHdhbGstPnByaXZhdGU7CisKKwlpZiAobW1fdGxiX2ZsdXNoX25lc3RlZCh3YWxr
LT5tbSkpCisJCWZsdXNoX3RsYl9yYW5nZSh3YWxrLT52bWEsIHdwd2Fsay0+cmFuZ2Uuc3RhcnQs
CisJCQkJd3B3YWxrLT5yYW5nZS5lbmQpOworCWVsc2UgaWYgKHdwd2Fsay0+dGxiZmx1c2hfZW5k
ID4gd3B3YWxrLT50bGJmbHVzaF9zdGFydCkKKwkJZmx1c2hfdGxiX3JhbmdlKHdhbGstPnZtYSwg
d3B3YWxrLT50bGJmbHVzaF9zdGFydCwKKwkJCQl3cHdhbGstPnRsYmZsdXNoX2VuZCk7CisKKwlt
bXVfbm90aWZpZXJfaW52YWxpZGF0ZV9yYW5nZV9lbmQoJndwd2Fsay0+cmFuZ2UpOworCWRlY190
bGJfZmx1c2hfcGVuZGluZyh3YWxrLT5tbSk7Cit9CisKKy8qCisgKiB3cF9jbGVhbl90ZXN0X3dh
bGsgLSBUaGUgcGFnZXdhbGsgdGVzdF93YWxrIGNhbGxiYWNrLgorICoKKyAqIFdvbid0IHBlcmZv
cm0gZGlydHktdHJhY2tpbmcgb24gQ09XLCByZWFkLW9ubHkgb3IgSFVHRVRMQiB2bWFzLgorICov
CitzdGF0aWMgaW50IHdwX2NsZWFuX3Rlc3Rfd2Fsayh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNp
Z25lZCBsb25nIGVuZCwKKwkJCSAgICAgIHN0cnVjdCBtbV93YWxrICp3YWxrKQoreworCXVuc2ln
bmVkIGxvbmcgdm1fZmxhZ3MgPSBSRUFEX09OQ0Uod2Fsay0+dm1hLT52bV9mbGFncyk7CisKKwkv
KiBTa2lwIG5vbi1hcHBsaWNhYmxlIFZNQXMgKi8KKwlpZiAoKHZtX2ZsYWdzICYgKFZNX1NIQVJF
RCB8IFZNX01BWVdSSVRFIHwgVk1fSFVHRVRMQikpICE9CisJICAgIChWTV9TSEFSRUQgfCBWTV9N
QVlXUklURSkpCisJCXJldHVybiAxOworCisJcmV0dXJuIDA7Cit9CisKK3N0YXRpYyBjb25zdCBz
dHJ1Y3QgbW1fd2Fsa19vcHMgY2xlYW5fd2Fsa19vcHMgPSB7CisJLnB0ZV9lbnRyeSA9IGNsZWFu
X3JlY29yZF9wdGUsCisJLnBtZF9lbnRyeSA9IHdwX2NsZWFuX3BtZF9lbnRyeSwKKwkucHVkX2Vu
dHJ5ID0gd3BfY2xlYW5fcHVkX2VudHJ5LAorCS50ZXN0X3dhbGsgPSB3cF9jbGVhbl90ZXN0X3dh
bGssCisJLnByZV92bWEgPSB3cF9jbGVhbl9wcmVfdm1hLAorCS5wb3N0X3ZtYSA9IHdwX2NsZWFu
X3Bvc3Rfdm1hCit9OworCitzdGF0aWMgY29uc3Qgc3RydWN0IG1tX3dhbGtfb3BzIHdwX3dhbGtf
b3BzID0geworCS5wdGVfZW50cnkgPSB3cF9wdGUsCisJLnBtZF9lbnRyeSA9IHdwX2NsZWFuX3Bt
ZF9lbnRyeSwKKwkucHVkX2VudHJ5ID0gd3BfY2xlYW5fcHVkX2VudHJ5LAorCS50ZXN0X3dhbGsg
PSB3cF9jbGVhbl90ZXN0X3dhbGssCisJLnByZV92bWEgPSB3cF9jbGVhbl9wcmVfdm1hLAorCS5w
b3N0X3ZtYSA9IHdwX2NsZWFuX3Bvc3Rfdm1hCit9OworCisvKioKKyAqIHdwX3NoYXJlZF9tYXBw
aW5nX3JhbmdlIC0gV3JpdGUtcHJvdGVjdCBhbGwgcHRlcyBpbiBhbiBhZGRyZXNzIHNwYWNlIHJh
bmdlCisgKiBAbWFwcGluZzogVGhlIGFkZHJlc3Nfc3BhY2Ugd2Ugd2FudCB0byB3cml0ZSBwcm90
ZWN0CisgKiBAZmlyc3RfaW5kZXg6IFRoZSBmaXJzdCBwYWdlIG9mZnNldCBpbiB0aGUgcmFuZ2UK
KyAqIEBucjogTnVtYmVyIG9mIGluY3JlbWVudGFsIHBhZ2Ugb2Zmc2V0cyB0byBjb3ZlcgorICoK
KyAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gY3VycmVudGx5IHNraXBzIHRyYW5zaHVnZSBwYWdlLXRh
YmxlIGVudHJpZXMsIHNpbmNlCisgKiBpdCdzIGludGVuZGVkIGZvciBkaXJ0eS10cmFja2luZyBv
biB0aGUgUFRFIGxldmVsLiBJdCB3aWxsIHdhcm4gb24KKyAqIGVuY291bnRlcmluZyB0cmFuc2h1
Z2Ugd3JpdGUtZW5hYmxlZCBlbnRyaWVzLCB0aG91Z2gsIGFuZCBjYW4gZWFzaWx5IGJlCisgKiBl
eHRlbmRlZCB0byBoYW5kbGUgdGhlbSBhcyB3ZWxsLgorICoKKyAqIFJldHVybjogVGhlIG51bWJl
ciBvZiBwdGVzIGFjdHVhbGx5IHdyaXRlLXByb3RlY3RlZC4gTm90ZSB0aGF0CisgKiBhbHJlYWR5
IHdyaXRlLXByb3RlY3RlZCBwdGVzIGFyZSBub3QgY291bnRlZC4KKyAqLwordW5zaWduZWQgbG9u
ZyB3cF9zaGFyZWRfbWFwcGluZ19yYW5nZShzdHJ1Y3QgYWRkcmVzc19zcGFjZSAqbWFwcGluZywK
KwkJCQkgICAgICBwZ29mZl90IGZpcnN0X2luZGV4LCBwZ29mZl90IG5yKQoreworCXN0cnVjdCB3
cF93YWxrIHdwd2FsayA9IHsgLnRvdGFsID0gMCB9OworCisJaV9tbWFwX2xvY2tfcmVhZChtYXBw
aW5nKTsKKwlXQVJOX09OKHdhbGtfcGFnZV9tYXBwaW5nKG1hcHBpbmcsIGZpcnN0X2luZGV4LCBu
ciwgJndwX3dhbGtfb3BzLAorCQkJCSAgJndwd2FsaykpOworCWlfbW1hcF91bmxvY2tfcmVhZCht
YXBwaW5nKTsKKworCXJldHVybiB3cHdhbGsudG90YWw7Cit9CitFWFBPUlRfU1lNQk9MX0dQTCh3
cF9zaGFyZWRfbWFwcGluZ19yYW5nZSk7CisKKy8qKgorICogY2xlYW5fcmVjb3JkX3NoYXJlZF9t
YXBwaW5nX3JhbmdlIC0gQ2xlYW4gYW5kIHJlY29yZCBhbGwgcHRlcyBpbiBhbgorICogYWRkcmVz
cyBzcGFjZSByYW5nZQorICogQG1hcHBpbmc6IFRoZSBhZGRyZXNzX3NwYWNlIHdlIHdhbnQgdG8g
Y2xlYW4KKyAqIEBmaXJzdF9pbmRleDogVGhlIGZpcnN0IHBhZ2Ugb2Zmc2V0IGluIHRoZSByYW5n
ZQorICogQG5yOiBOdW1iZXIgb2YgaW5jcmVtZW50YWwgcGFnZSBvZmZzZXRzIHRvIGNvdmVyCisg
KiBAYml0bWFwX3Bnb2ZmOiBUaGUgcGFnZSBvZmZzZXQgb2YgdGhlIGZpcnN0IGJpdCBpbiBAYml0
bWFwCisgKiBAYml0bWFwOiBQb2ludGVyIHRvIGEgYml0bWFwIG9mIGF0IGxlYXN0IEBuciBiaXRz
LiBUaGUgYml0bWFwIG5lZWRzIHRvCisgKiBjb3ZlciB0aGUgd2hvbGUgcmFuZ2UgQGZpcnN0X2lu
ZGV4Li5AZmlyc3RfaW5kZXggKyBAbnIuCisgKiBAc3RhcnQ6IFBvaW50ZXIgdG8gbnVtYmVyIG9m
IHRoZSBmaXJzdCBzZXQgYml0IGluIEBiaXRtYXAuCisgKiBpcyBtb2RpZmllZCBhcyBuZXcgYml0
cyBhcmUgc2V0IGJ5IHRoZSBmdW5jdGlvbi4KKyAqIEBlbmQ6IFBvaW50ZXIgdG8gdGhlIG51bWJl
ciBvZiB0aGUgbGFzdCBzZXQgYml0IGluIEBiaXRtYXAuCisgKiBub25lIHNldC4gVGhlIHZhbHVl
IGlzIG1vZGlmaWVkIGFzIG5ldyBiaXRzIGFyZSBzZXQgYnkgdGhlIGZ1bmN0aW9uLgorICoKKyAq
IE5vdGU6IFdoZW4gdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0
aGF0IGEgQ1BVIGhhcworICogbm90IGFscmVhZHkgZGlydGllZCBuZXcgcHRlcy4gSG93ZXZlciBp
dCB3aWxsIG5vdCBjbGVhbiBhbnkgcHRlcyBub3QKKyAqIHJlcG9ydGVkIGluIHRoZSBiaXRtYXAu
IFRoZSBndWFyYW50ZWVzIGFyZSBhcyBmb2xsb3dzOgorICogYSkgQWxsIHB0ZXMgZGlydHkgd2hl
biB0aGUgZnVuY3Rpb24gc3RhcnRzIGV4ZWN1dGluZyB3aWxsIGVuZCB1cCByZWNvcmRlZAorICog
ICAgaW4gdGhlIGJpdG1hcC4KKyAqIGIpIEFsbCBwdGVzIGRpcnRpZWQgYWZ0ZXIgdGhhdCB3aWxs
IGVpdGhlciByZW1haW4gZGlydHksIGJlIHJlY29yZGVkIGluIHRoZQorICogICAgYml0bWFwIG9y
IGJvdGguCisgKgorICogSWYgYSBjYWxsZXIgbmVlZHMgdG8gbWFrZSBzdXJlIGFsbCBkaXJ0eSBw
dGVzIGFyZSBwaWNrZWQgdXAgYW5kIG5vbmUKKyAqIGFkZGl0aW9uYWwgYXJlIGFkZGVkLCBpdCBm
aXJzdCBuZWVkcyB0byB3cml0ZS1wcm90ZWN0IHRoZSBhZGRyZXNzLXNwYWNlCisgKiByYW5nZSBh
bmQgbWFrZSBzdXJlIG5ldyB3cml0ZXJzIGFyZSBibG9ja2VkIGluIHBhZ2VfbWt3cml0ZSgpIG9y
CisgKiBwZm5fbWt3cml0ZSgpLiBBbmQgdGhlbiBhZnRlciBhIFRMQiBmbHVzaCBmb2xsb3dpbmcg
dGhlIHdyaXRlLXByb3RlY3Rpb24KKyAqIHBpY2sgdXAgYWxsIGRpcnR5IGJpdHMuCisgKgorICog
Tm90ZTogVGhpcyBmdW5jdGlvbiBjdXJyZW50bHkgc2tpcHMgdHJhbnNodWdlIHBhZ2UtdGFibGUg
ZW50cmllcywgc2luY2UKKyAqIGl0J3MgaW50ZW5kZWQgZm9yIGRpcnR5LXRyYWNraW5nIG9uIHRo
ZSBQVEUgbGV2ZWwuIEl0IHdpbGwgd2FybiBvbgorICogZW5jb3VudGVyaW5nIHRyYW5zaHVnZSBk
aXJ0eSBlbnRyaWVzLCB0aG91Z2gsIGFuZCBjYW4gZWFzaWx5IGJlIGV4dGVuZGVkCisgKiB0byBo
YW5kbGUgdGhlbSBhcyB3ZWxsLgorICoKKyAqIFJldHVybjogVGhlIG51bWJlciBvZiBkaXJ0eSBw
dGVzIGFjdHVhbGx5IGNsZWFuZWQuCisgKi8KK3Vuc2lnbmVkIGxvbmcgY2xlYW5fcmVjb3JkX3No
YXJlZF9tYXBwaW5nX3JhbmdlKHN0cnVjdCBhZGRyZXNzX3NwYWNlICptYXBwaW5nLAorCQkJCQkJ
cGdvZmZfdCBmaXJzdF9pbmRleCwgcGdvZmZfdCBuciwKKwkJCQkJCXBnb2ZmX3QgYml0bWFwX3Bn
b2ZmLAorCQkJCQkJdW5zaWduZWQgbG9uZyAqYml0bWFwLAorCQkJCQkJcGdvZmZfdCAqc3RhcnQs
CisJCQkJCQlwZ29mZl90ICplbmQpCit7CisJYm9vbCBub25lX3NldCA9ICgqc3RhcnQgPj0gKmVu
ZCk7CisJc3RydWN0IGNsZWFuX3dhbGsgY3dhbGsgPSB7CisJCS5iYXNlID0geyAudG90YWwgPSAw
IH0sCisJCS5iaXRtYXBfcGdvZmYgPSBiaXRtYXBfcGdvZmYsCisJCS5iaXRtYXAgPSBiaXRtYXAs
CisJCS5zdGFydCA9IG5vbmVfc2V0ID8gbnIgOiAqc3RhcnQsCisJCS5lbmQgPSBub25lX3NldCA/
IDAgOiAqZW5kLAorCX07CisKKwlpX21tYXBfbG9ja19yZWFkKG1hcHBpbmcpOworCVdBUk5fT04o
d2Fsa19wYWdlX21hcHBpbmcobWFwcGluZywgZmlyc3RfaW5kZXgsIG5yLCAmY2xlYW5fd2Fsa19v
cHMsCisJCQkJICAmY3dhbGsuYmFzZSkpOworCWlfbW1hcF91bmxvY2tfcmVhZChtYXBwaW5nKTsK
KworCSpzdGFydCA9IGN3YWxrLnN0YXJ0OworCSplbmQgPSBjd2Fsay5lbmQ7CisKKwlyZXR1cm4g
Y3dhbGsuYmFzZS50b3RhbDsKK30KK0VYUE9SVF9TWU1CT0xfR1BMKGNsZWFuX3JlY29yZF9zaGFy
ZWRfbWFwcGluZ19yYW5nZSk7Ci0tIAoyLjIwLjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fCmRyaS1kZXZlbCBtYWlsaW5nIGxpc3QKZHJpLWRldmVsQGxp
c3RzLmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFu
L2xpc3RpbmZvL2RyaS1kZXZlbA==
