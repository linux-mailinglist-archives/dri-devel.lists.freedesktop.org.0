Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 6F98EF295D
	for <lists+dri-devel@lfdr.de>; Thu,  7 Nov 2019 09:41:38 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id ADF416EF12;
	Thu,  7 Nov 2019 08:41:35 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from pio-pvt-msa1.bahnhof.se (pio-pvt-msa1.bahnhof.se [79.136.2.40])
 by gabe.freedesktop.org (Postfix) with ESMTPS id AEF336EF14
 for <dri-devel@lists.freedesktop.org>; Thu,  7 Nov 2019 08:41:34 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by pio-pvt-msa1.bahnhof.se (Postfix) with ESMTP id 5A3543F4DB
 for <dri-devel@lists.freedesktop.org>; Thu,  7 Nov 2019 09:41:32 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at bahnhof.se
X-Spam-Flag: NO
X-Spam-Score: -2.099
X-Spam-Level: 
X-Spam-Status: No, score=-2.099 tagged_above=-999 required=6.31
 tests=[BAYES_00=-1.9, DKIM_SIGNED=0.1, DKIM_VALID=-0.1,
 DKIM_VALID_AU=-0.1, DKIM_VALID_EF=-0.1, URIBL_BLOCKED=0.001]
 autolearn=ham autolearn_force=no
Received: from pio-pvt-msa1.bahnhof.se ([127.0.0.1])
 by localhost (pio-pvt-msa1.bahnhof.se [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id GoRu12Fjnn5V for <dri-devel@lists.freedesktop.org>;
 Thu,  7 Nov 2019 09:41:25 +0100 (CET)
Received: from mail1.shipmail.org (h-205-35.A357.priv.bahnhof.se
 [155.4.205.35]) (Authenticated sender: mb878879)
 by pio-pvt-msa1.bahnhof.se (Postfix) with ESMTPA id CCA113F4EB
 for <dri-devel@lists.freedesktop.org>; Thu,  7 Nov 2019 09:41:25 +0100 (CET)
Received: from localhost.localdomain.localdomain
 (h-205-35.A357.priv.bahnhof.se [155.4.205.35])
 by mail1.shipmail.org (Postfix) with ESMTPSA id CA433360352
 for <dri-devel@lists.freedesktop.org>; Thu,  7 Nov 2019 09:41:24 +0100 (CET)
From: =?UTF-8?q?Thomas=20Hellstr=C3=B6m=20=28VMware=29?=
 <thomas_os@shipmail.org>
To: dri-devel@lists.freedesktop.org
Subject: [PATCH v7 7/8] drm/vmwgfx: Implement an infrastructure for
 read-coherent resources
Date: Thu,  7 Nov 2019 09:41:15 +0100
Message-Id: <20191107084116.33032-8-thomas_os@shipmail.org>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20191107084116.33032-1-thomas_os@shipmail.org>
References: <20191107084116.33032-1-thomas_os@shipmail.org>
MIME-Version: 1.0
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
 d=shipmail.org; s=mail; 
 t=1573116084; bh=xevg7rDqAWXKhkuIN9/rx93jYWPcVt10V45B1IKLTpQ=;
 h=From:To:Subject:Date:In-Reply-To:References:From;
 b=ZY/foy/lRWxVzkIw3XkbjpQ8fX352opuy1H5VeEyb7Rog9GiPEeW0Qq6jwtTtodka
 xC1jb+hURAkreRqn4A9JWjn2bzTh4ZSp91jDM5YEmOI+hfwJQpnRmwnX+qhJNK/HVZ
 mcVaJmSndqJ02E8sIVJfHZ+D+9YbK+RO8kVg+8yk=
X-Mailman-Original-Authentication-Results: pio-pvt-msa1.bahnhof.se;
 dkim=pass (1024-bit key;
 unprotected) header.d=shipmail.org header.i=@shipmail.org header.b="ZY/foy/l";
 dkim-atps=neutral
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

RnJvbTogVGhvbWFzIEhlbGxzdHJvbSA8dGhlbGxzdHJvbUB2bXdhcmUuY29tPgoKU2ltaWxhciB0
byB3cml0ZS1jb2hlcmVudCByZXNvdXJjZXMsIG1ha2Ugc3VyZSB0aGF0IGZyb20gdGhlIHVzZXIt
c3BhY2UKcG9pbnQgb2YgdmlldywgR1BVIHJlbmRlcmVkIGNvbnRlbnRzIGlzIGF1dG9tYXRpY2Fs
bHkgYXZhaWxhYmxlIGZvcgpyZWFkaW5nIGJ5IHRoZSBDUFUuCgpDYzogQW5kcmV3IE1vcnRvbiA8
YWtwbUBsaW51eC1mb3VuZGF0aW9uLm9yZz4KQ2M6IE1hdHRoZXcgV2lsY294IDx3aWxseUBpbmZy
YWRlYWQub3JnPgpDYzogV2lsbCBEZWFjb24gPHdpbGwuZGVhY29uQGFybS5jb20+CkNjOiBQZXRl
ciBaaWpsc3RyYSA8cGV0ZXJ6QGluZnJhZGVhZC5vcmc+CkNjOiBSaWsgdmFuIFJpZWwgPHJpZWxA
c3VycmllbC5jb20+CkNjOiBNaW5jaGFuIEtpbSA8bWluY2hhbkBrZXJuZWwub3JnPgpDYzogTWlj
aGFsIEhvY2tvIDxtaG9ja29Ac3VzZS5jb20+CkNjOiBIdWFuZyBZaW5nIDx5aW5nLmh1YW5nQGlu
dGVsLmNvbT4KQ2M6IErDqXLDtG1lIEdsaXNzZSA8amdsaXNzZUByZWRoYXQuY29tPgpDYzogS2ly
aWxsIEEuIFNodXRlbW92IDxraXJpbGxAc2h1dGVtb3YubmFtZT4KU2lnbmVkLW9mZi1ieTogVGhv
bWFzIEhlbGxzdHJvbSA8dGhlbGxzdHJvbUB2bXdhcmUuY29tPgpSZXZpZXdlZC1ieTogRGVlcGFr
IFJhd2F0IDxkcmF3YXRAdm13YXJlLmNvbT4KLS0tCiBkcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Zt
d2dmeF9kcnYuaCAgICAgICAgICAgfCAgIDcgKy0KIGRyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13
Z2Z4X3BhZ2VfZGlydHkuYyAgICB8ICA3NyArKysrKysrKysrKystCiBkcml2ZXJzL2dwdS9kcm0v
dm13Z2Z4L3Ztd2dmeF9yZXNvdXJjZS5jICAgICAgfCAxMDMgKysrKysrKysrKysrKysrKystCiBk
cml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9yZXNvdXJjZV9wcml2LmggfCAgIDIgKwogZHJp
dmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfdmFsaWRhdGlvbi5jICAgIHwgICAzICstCiA1IGZp
bGVzIGNoYW5nZWQsIDE4MSBpbnNlcnRpb25zKCspLCAxMSBkZWxldGlvbnMoLSkKCmRpZmYgLS1n
aXQgYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9kcnYuaCBiL2RyaXZlcnMvZ3B1L2Ry
bS92bXdnZngvdm13Z2Z4X2Rydi5oCmluZGV4IGQ1ZmE5YjcyYzhmZi4uNzc3Mzk1MmY4MWY4IDEw
MDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9kcnYuaAorKysgYi9kcml2
ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9kcnYuaApAQCAtNjg0LDcgKzY4NCw4IEBAIGV4dGVy
biB2b2lkIHZtd19yZXNvdXJjZV91bnJlZmVyZW5jZShzdHJ1Y3Qgdm13X3Jlc291cmNlICoqcF9y
ZXMpOwogZXh0ZXJuIHN0cnVjdCB2bXdfcmVzb3VyY2UgKnZtd19yZXNvdXJjZV9yZWZlcmVuY2Uo
c3RydWN0IHZtd19yZXNvdXJjZSAqcmVzKTsKIGV4dGVybiBzdHJ1Y3Qgdm13X3Jlc291cmNlICoK
IHZtd19yZXNvdXJjZV9yZWZlcmVuY2VfdW5sZXNzX2Rvb21lZChzdHJ1Y3Qgdm13X3Jlc291cmNl
ICpyZXMpOwotZXh0ZXJuIGludCB2bXdfcmVzb3VyY2VfdmFsaWRhdGUoc3RydWN0IHZtd19yZXNv
dXJjZSAqcmVzLCBib29sIGludHIpOworZXh0ZXJuIGludCB2bXdfcmVzb3VyY2VfdmFsaWRhdGUo
c3RydWN0IHZtd19yZXNvdXJjZSAqcmVzLCBib29sIGludHIsCisJCQkJIGJvb2wgZGlydHlpbmcp
OwogZXh0ZXJuIGludCB2bXdfcmVzb3VyY2VfcmVzZXJ2ZShzdHJ1Y3Qgdm13X3Jlc291cmNlICpy
ZXMsIGJvb2wgaW50ZXJydXB0aWJsZSwKIAkJCQlib29sIG5vX2JhY2t1cCk7CiBleHRlcm4gYm9v
bCB2bXdfcmVzb3VyY2VfbmVlZHNfYmFja3VwKGNvbnN0IHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJl
cyk7CkBAIC03MjgsNiArNzI5LDggQEAgdm9pZCB2bXdfcmVzb3VyY2VfbW9iX2F0dGFjaChzdHJ1
Y3Qgdm13X3Jlc291cmNlICpyZXMpOwogdm9pZCB2bXdfcmVzb3VyY2VfbW9iX2RldGFjaChzdHJ1
Y3Qgdm13X3Jlc291cmNlICpyZXMpOwogdm9pZCB2bXdfcmVzb3VyY2VfZGlydHlfdXBkYXRlKHN0
cnVjdCB2bXdfcmVzb3VyY2UgKnJlcywgcGdvZmZfdCBzdGFydCwKIAkJCSAgICAgICBwZ29mZl90
IGVuZCk7CitpbnQgdm13X3Jlc291cmNlc19jbGVhbihzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmplY3Qg
KnZibywgcGdvZmZfdCBzdGFydCwKKwkJCXBnb2ZmX3QgZW5kLCBwZ29mZl90ICpudW1fcHJlZmF1
bHQpOwogCiAvKioKICAqIHZtd19yZXNvdXJjZV9tb2JfYXR0YWNoZWQgLSBXaGV0aGVyIGEgcmVz
b3VyY2UgY3VycmVudGx5IGhhcyBhIG1vYiBhdHRhY2hlZApAQCAtMTQyMSw2ICsxNDI0LDggQEAg
aW50IHZtd19ib19kaXJ0eV9hZGQoc3RydWN0IHZtd19idWZmZXJfb2JqZWN0ICp2Ym8pOwogdm9p
ZCB2bXdfYm9fZGlydHlfdHJhbnNmZXJfdG9fcmVzKHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcyk7
CiB2b2lkIHZtd19ib19kaXJ0eV9jbGVhcl9yZXMoc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzKTsK
IHZvaWQgdm13X2JvX2RpcnR5X3JlbGVhc2Uoc3RydWN0IHZtd19idWZmZXJfb2JqZWN0ICp2Ym8p
Owordm9pZCB2bXdfYm9fZGlydHlfdW5tYXAoc3RydWN0IHZtd19idWZmZXJfb2JqZWN0ICp2Ym8s
CisJCQlwZ29mZl90IHN0YXJ0LCBwZ29mZl90IGVuZCk7CiB2bV9mYXVsdF90IHZtd19ib192bV9m
YXVsdChzdHJ1Y3Qgdm1fZmF1bHQgKnZtZik7CiB2bV9mYXVsdF90IHZtd19ib192bV9ta3dyaXRl
KHN0cnVjdCB2bV9mYXVsdCAqdm1mKTsKIApkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL3Zt
d2dmeC92bXdnZnhfcGFnZV9kaXJ0eS5jIGIvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhf
cGFnZV9kaXJ0eS5jCmluZGV4IDA2MGMxZTQ5MmYyNS4uZjA3YWE4NTc1ODdjIDEwMDY0NAotLS0g
YS9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9wYWdlX2RpcnR5LmMKKysrIGIvZHJpdmVy
cy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfcGFnZV9kaXJ0eS5jCkBAIC0xNTUsNyArMTU1LDYgQEAg
c3RhdGljIHZvaWQgdm13X2JvX2RpcnR5X3NjYW5fbWt3cml0ZShzdHJ1Y3Qgdm13X2J1ZmZlcl9v
YmplY3QgKnZibykKIAl9CiB9CiAKLQogLyoqCiAgKiB2bXdfYm9fZGlydHlfc2NhbiAtIFNjYW4g
Zm9yIGRpcnR5IHBhZ2VzIGFuZCBhZGQgdGhlbSB0byB0aGUgZGlydHkKICAqIHRyYWNraW5nIHN0
cnVjdHVyZQpAQCAtMTczLDYgKzE3Miw1MyBAQCB2b2lkIHZtd19ib19kaXJ0eV9zY2FuKHN0cnVj
dCB2bXdfYnVmZmVyX29iamVjdCAqdmJvKQogCQl2bXdfYm9fZGlydHlfc2Nhbl9ta3dyaXRlKHZi
byk7CiB9CiAKKy8qKgorICogdm13X2JvX2RpcnR5X3ByZV91bm1hcCAtIHdyaXRlLXByb3RlY3Qg
YW5kIHBpY2sgdXAgZGlydHkgcGFnZXMgYmVmb3JlCisgKiBhbiB1bm1hcF9tYXBwaW5nX3Jhbmdl
IG9wZXJhdGlvbi4KKyAqIEB2Ym86IFRoZSBidWZmZXIgb2JqZWN0LAorICogQHN0YXJ0OiBGaXJz
dCBwYWdlIG9mIHRoZSByYW5nZSB3aXRoaW4gdGhlIGJ1ZmZlciBvYmplY3QuCisgKiBAZW5kOiBM
YXN0IHBhZ2Ugb2YgdGhlIHJhbmdlIHdpdGhpbiB0aGUgYnVmZmVyIG9iamVjdCArIDEuCisgKgor
ICogSWYgd2UncmUgdXNpbmcgdGhlIF9QQUdFVEFCTEUgc2NhbiBtZXRob2QsIHdlIG1heSBsZWFr
IGRpcnR5IHBhZ2VzCisgKiB3aGVuIGNhbGxpbmcgdW5tYXBfbWFwcGluZ19yYW5nZSgpLiBUaGlz
IGZ1bmN0aW9uIG1ha2VzIHN1cmUgd2UgcGljaworICogdXAgYWxsIGRpcnR5IHBhZ2VzLgorICov
CitzdGF0aWMgdm9pZCB2bXdfYm9fZGlydHlfcHJlX3VubWFwKHN0cnVjdCB2bXdfYnVmZmVyX29i
amVjdCAqdmJvLAorCQkJCSAgIHBnb2ZmX3Qgc3RhcnQsIHBnb2ZmX3QgZW5kKQoreworCXN0cnVj
dCB2bXdfYm9fZGlydHkgKmRpcnR5ID0gdmJvLT5kaXJ0eTsKKwl1bnNpZ25lZCBsb25nIG9mZnNl
dCA9IGRybV92bWFfbm9kZV9zdGFydCgmdmJvLT5iYXNlLmJhc2Uudm1hX25vZGUpOworCXN0cnVj
dCBhZGRyZXNzX3NwYWNlICptYXBwaW5nID0gdmJvLT5iYXNlLmJkZXYtPmRldl9tYXBwaW5nOwor
CisJaWYgKGRpcnR5LT5tZXRob2QgIT0gVk1XX0JPX0RJUlRZX1BBR0VUQUJMRSB8fCBzdGFydCA+
PSBlbmQpCisJCXJldHVybjsKKworCXdwX3NoYXJlZF9tYXBwaW5nX3JhbmdlKG1hcHBpbmcsIHN0
YXJ0ICsgb2Zmc2V0LCBlbmQgLSBzdGFydCk7CisJY2xlYW5fcmVjb3JkX3NoYXJlZF9tYXBwaW5n
X3JhbmdlKG1hcHBpbmcsIHN0YXJ0ICsgb2Zmc2V0LAorCQkJCQkgIGVuZCAtIHN0YXJ0LCBvZmZz
ZXQsCisJCQkJCSAgJmRpcnR5LT5iaXRtYXBbMF0sICZkaXJ0eS0+c3RhcnQsCisJCQkJCSAgJmRp
cnR5LT5lbmQpOworfQorCisvKioKKyAqIHZtd19ib19kaXJ0eV91bm1hcCAtIENsZWFyIGFsbCBw
dGVzIHBvaW50aW5nIHRvIGEgcmFuZ2Ugd2l0aGluIGEgYm8KKyAqIEB2Ym86IFRoZSBidWZmZXIg
b2JqZWN0LAorICogQHN0YXJ0OiBGaXJzdCBwYWdlIG9mIHRoZSByYW5nZSB3aXRoaW4gdGhlIGJ1
ZmZlciBvYmplY3QuCisgKiBAZW5kOiBMYXN0IHBhZ2Ugb2YgdGhlIHJhbmdlIHdpdGhpbiB0aGUg
YnVmZmVyIG9iamVjdCArIDEuCisgKgorICogVGhpcyBpcyBzaW1pbGFyIHRvIHR0bV9ib191bm1h
cF92aXJ0dWFsX2xvY2tlZCgpIGV4Y2VwdCBpdCB0YWtlcyBhIHN1YnJhbmdlLgorICovCit2b2lk
IHZtd19ib19kaXJ0eV91bm1hcChzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmplY3QgKnZibywKKwkJCXBn
b2ZmX3Qgc3RhcnQsIHBnb2ZmX3QgZW5kKQoreworCXVuc2lnbmVkIGxvbmcgb2Zmc2V0ID0gZHJt
X3ZtYV9ub2RlX3N0YXJ0KCZ2Ym8tPmJhc2UuYmFzZS52bWFfbm9kZSk7CisJc3RydWN0IGFkZHJl
c3Nfc3BhY2UgKm1hcHBpbmcgPSB2Ym8tPmJhc2UuYmRldi0+ZGV2X21hcHBpbmc7CisKKwl2bXdf
Ym9fZGlydHlfcHJlX3VubWFwKHZibywgc3RhcnQsIGVuZCk7CisJdW5tYXBfc2hhcmVkX21hcHBp
bmdfcmFuZ2UobWFwcGluZywgKG9mZnNldCArIHN0YXJ0KSA8PCBQQUdFX1NISUZULAorCQkJCSAg
IChsb2ZmX3QpIChlbmQgLSBzdGFydCkgPDwgUEFHRV9TSElGVCk7Cit9CisKIC8qKgogICogdm13
X2JvX2RpcnR5X2FkZCAtIEFkZCBhIGRpcnR5LXRyYWNraW5nIHVzZXIgdG8gYSBidWZmZXIgb2Jq
ZWN0CiAgKiBAdmJvOiBUaGUgYnVmZmVyIG9iamVjdApAQCAtNDAxLDIxICs0NDcsNDIgQEAgdm1f
ZmF1bHRfdCB2bXdfYm9fdm1fZmF1bHQoc3RydWN0IHZtX2ZhdWx0ICp2bWYpCiAJaWYgKHJldCkK
IAkJcmV0dXJuIHJldDsKIAorCW51bV9wcmVmYXVsdCA9ICh2bWEtPnZtX2ZsYWdzICYgVk1fUkFO
RF9SRUFEKSA/IDEgOgorCQlUVE1fQk9fVk1fTlVNX1BSRUZBVUxUOworCisJaWYgKHZiby0+ZGly
dHkpIHsKKwkJcGdvZmZfdCBhbGxvd2VkX3ByZWZhdWx0OworCQl1bnNpZ25lZCBsb25nIHBhZ2Vf
b2Zmc2V0OworCisJCXBhZ2Vfb2Zmc2V0ID0gdm1mLT5wZ29mZiAtCisJCQlkcm1fdm1hX25vZGVf
c3RhcnQoJmJvLT5iYXNlLnZtYV9ub2RlKTsKKwkJaWYgKHBhZ2Vfb2Zmc2V0ID49IGJvLT5udW1f
cGFnZXMgfHwKKwkJICAgIHZtd19yZXNvdXJjZXNfY2xlYW4odmJvLCBwYWdlX29mZnNldCwKKwkJ
CQkJcGFnZV9vZmZzZXQgKyBQQUdFX1NJWkUsCisJCQkJCSZhbGxvd2VkX3ByZWZhdWx0KSkgewor
CQkJcmV0ID0gVk1fRkFVTFRfU0lHQlVTOworCQkJZ290byBvdXRfdW5sb2NrOworCQl9CisKKwkJ
bnVtX3ByZWZhdWx0ID0gbWluKG51bV9wcmVmYXVsdCwgYWxsb3dlZF9wcmVmYXVsdCk7CisJfQor
CiAJLyoKLQkgKiBUaGlzIHdpbGwgY2F1c2UgbWt3cml0ZSgpIHRvIGJlIGNhbGxlZCBmb3IgZWFj
aCBwdGUgb24KLQkgKiB3cml0ZS1lbmFibGUgdm1hcy4KKwkgKiBJZiB3ZSBkb24ndCB0cmFjayBk
aXJ0eSB1c2luZyB0aGUgTUtXUklURSBtZXRob2QsIG1ha2Ugc3VyZQorCSAqIHN1cmUgdGhlIHBh
Z2UgcHJvdGVjdGlvbiBpcyB3cml0ZS1lbmFibGVkIHNvIHdlIGRvbid0IGdldAorCSAqIGEgbG90
IG9mIHVubmVjZXNzYXJ5IHdyaXRlIGZhdWx0cy4KIAkgKi8KIAlpZiAodmJvLT5kaXJ0eSAmJiB2
Ym8tPmRpcnR5LT5tZXRob2QgPT0gVk1XX0JPX0RJUlRZX01LV1JJVEUpCiAJCXByb3QgPSB2bWEt
PnZtX3BhZ2VfcHJvdDsKIAllbHNlCiAJCXByb3QgPSB2bV9nZXRfcGFnZV9wcm90KHZtYS0+dm1f
ZmxhZ3MpOwogCi0JbnVtX3ByZWZhdWx0ID0gKHZtYS0+dm1fZmxhZ3MgJiBWTV9SQU5EX1JFQUQp
ID8gMCA6Ci0JCVRUTV9CT19WTV9OVU1fUFJFRkFVTFQ7CiAJcmV0ID0gdHRtX2JvX3ZtX2ZhdWx0
X3Jlc2VydmVkKHZtZiwgcHJvdCwgbnVtX3ByZWZhdWx0KTsKIAlpZiAocmV0ID09IFZNX0ZBVUxU
X1JFVFJZICYmICEodm1mLT5mbGFncyAmIEZBVUxUX0ZMQUdfUkVUUllfTk9XQUlUKSkKIAkJcmV0
dXJuIHJldDsKIAorb3V0X3VubG9jazoKIAlkbWFfcmVzdl91bmxvY2soYm8tPmJhc2UucmVzdik7
CisKIAlyZXR1cm4gcmV0OwogfQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC92
bXdnZnhfcmVzb3VyY2UuYyBiL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3Jlc291cmNl
LmMKaW5kZXggYTE4ODMxZTFkMzUzLi5jODQ0MTAzMDYzN2EgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMv
Z3B1L2RybS92bXdnZngvdm13Z2Z4X3Jlc291cmNlLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL3Zt
d2dmeC92bXdnZnhfcmVzb3VyY2UuYwpAQCAtMzkzLDcgKzM5Myw4IEBAIHN0YXRpYyBpbnQgdm13
X3Jlc291cmNlX2J1Zl9hbGxvYyhzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMsCiAgKiBzaG91bGQg
YmUgcmV0cmllZCBvbmNlIHJlc291cmNlcyBoYXZlIGJlZW4gZnJlZWQgdXAuCiAgKi8KIHN0YXRp
YyBpbnQgdm13X3Jlc291cmNlX2RvX3ZhbGlkYXRlKHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcywK
LQkJCQkgICAgc3RydWN0IHR0bV92YWxpZGF0ZV9idWZmZXIgKnZhbF9idWYpCisJCQkJICAgIHN0
cnVjdCB0dG1fdmFsaWRhdGVfYnVmZmVyICp2YWxfYnVmLAorCQkJCSAgICBib29sIGRpcnR5aW5n
KQogewogCWludCByZXQgPSAwOwogCWNvbnN0IHN0cnVjdCB2bXdfcmVzX2Z1bmMgKmZ1bmMgPSBy
ZXMtPmZ1bmM7CkBAIC00MzUsNiArNDM2LDE1IEBAIHN0YXRpYyBpbnQgdm13X3Jlc291cmNlX2Rv
X3ZhbGlkYXRlKHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcywKIAkgKiB0aGUgcmVzb3VyY2UuCiAJ
ICovCiAJaWYgKHJlcy0+ZGlydHkpIHsKKwkJaWYgKGRpcnR5aW5nICYmICFyZXMtPnJlc19kaXJ0
eSkgeworCQkJcGdvZmZfdCBzdGFydCA9IHJlcy0+YmFja3VwX29mZnNldCA+PiBQQUdFX1NISUZU
OworCQkJcGdvZmZfdCBlbmQgPSBfX0tFUk5FTF9ESVZfUk9VTkRfVVAKKwkJCQkocmVzLT5iYWNr
dXBfb2Zmc2V0ICsgcmVzLT5iYWNrdXBfc2l6ZSwKKwkJCQkgUEFHRV9TSVpFKTsKKworCQkJdm13
X2JvX2RpcnR5X3VubWFwKHJlcy0+YmFja3VwLCBzdGFydCwgZW5kKTsKKwkJfQorCiAJCXZtd19i
b19kaXJ0eV90cmFuc2Zlcl90b19yZXMocmVzKTsKIAkJcmV0dXJuIGZ1bmMtPmRpcnR5X3N5bmMo
cmVzKTsKIAl9CkBAIC02NzgsNiArNjg4LDcgQEAgc3RhdGljIGludCB2bXdfcmVzb3VyY2VfZG9f
ZXZpY3Qoc3RydWN0IHd3X2FjcXVpcmVfY3R4ICp0aWNrZXQsCiAgKiAgICAgICAgICAgICAgICAg
ICAgICAgICB0byB0aGUgZGV2aWNlLgogICogQHJlczogVGhlIHJlc291cmNlIHRvIG1ha2Ugdmlz
aWJsZSB0byB0aGUgZGV2aWNlLgogICogQGludHI6IFBlcmZvcm0gd2FpdHMgaW50ZXJydXB0aWJs
ZSBpZiBwb3NzaWJsZS4KKyAqIEBkaXJ0eWluZzogUGVuZGluZyBHUFUgb3BlcmF0aW9uIHdpbGwg
ZGlydHkgdGhlIHJlc291cmNlCiAgKgogICogT24gc3VjY2VzZnVsIHJldHVybiwgYW55IGJhY2t1
cCBETUEgYnVmZmVyIHBvaW50ZWQgdG8gYnkgQHJlcy0+YmFja3VwIHdpbGwKICAqIGJlIHJlc2Vy
dmVkIGFuZCB2YWxpZGF0ZWQuCkBAIC02ODcsNyArNjk4LDggQEAgc3RhdGljIGludCB2bXdfcmVz
b3VyY2VfZG9fZXZpY3Qoc3RydWN0IHd3X2FjcXVpcmVfY3R4ICp0aWNrZXQsCiAgKiBSZXR1cm46
IFplcm8gb24gc3VjY2VzcywgLUVSRVNUQVJUU1lTIGlmIGludGVycnVwdGVkLCBuZWdhdGl2ZSBl
cnJvciBjb2RlCiAgKiBvbiBmYWlsdXJlLgogICovCi1pbnQgdm13X3Jlc291cmNlX3ZhbGlkYXRl
KHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcywgYm9vbCBpbnRyKQoraW50IHZtd19yZXNvdXJjZV92
YWxpZGF0ZShzdHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMsIGJvb2wgaW50ciwKKwkJCSAgYm9vbCBk
aXJ0eWluZykKIHsKIAlpbnQgcmV0OwogCXN0cnVjdCB2bXdfcmVzb3VyY2UgKmV2aWN0X3JlczsK
QEAgLTcwNCw3ICs3MTYsNyBAQCBpbnQgdm13X3Jlc291cmNlX3ZhbGlkYXRlKHN0cnVjdCB2bXdf
cmVzb3VyY2UgKnJlcywgYm9vbCBpbnRyKQogCWlmIChyZXMtPmJhY2t1cCkKIAkJdmFsX2J1Zi5i
byA9ICZyZXMtPmJhY2t1cC0+YmFzZTsKIAlkbyB7Ci0JCXJldCA9IHZtd19yZXNvdXJjZV9kb192
YWxpZGF0ZShyZXMsICZ2YWxfYnVmKTsKKwkJcmV0ID0gdm13X3Jlc291cmNlX2RvX3ZhbGlkYXRl
KHJlcywgJnZhbF9idWYsIGRpcnR5aW5nKTsKIAkJaWYgKGxpa2VseShyZXQgIT0gLUVCVVNZKSkK
IAkJCWJyZWFrOwogCkBAIC0xMDA0LDcgKzEwMTYsNyBAQCBpbnQgdm13X3Jlc291cmNlX3Bpbihz
dHJ1Y3Qgdm13X3Jlc291cmNlICpyZXMsIGJvb2wgaW50ZXJydXB0aWJsZSkKIAkJCS8qIERvIHdl
IHJlYWxseSBuZWVkIHRvIHBpbiB0aGUgTU9CIGFzIHdlbGw/ICovCiAJCQl2bXdfYm9fcGluX3Jl
c2VydmVkKHZibywgdHJ1ZSk7CiAJCX0KLQkJcmV0ID0gdm13X3Jlc291cmNlX3ZhbGlkYXRlKHJl
cywgaW50ZXJydXB0aWJsZSk7CisJCXJldCA9IHZtd19yZXNvdXJjZV92YWxpZGF0ZShyZXMsIGlu
dGVycnVwdGlibGUsIHRydWUpOwogCQlpZiAodmJvKQogCQkJdHRtX2JvX3VucmVzZXJ2ZSgmdmJv
LT5iYXNlKTsKIAkJaWYgKHJldCkKQEAgLTEwNzksMyArMTA5MSw4NiBAQCB2b2lkIHZtd19yZXNv
dXJjZV9kaXJ0eV91cGRhdGUoc3RydWN0IHZtd19yZXNvdXJjZSAqcmVzLCBwZ29mZl90IHN0YXJ0
LAogCQlyZXMtPmZ1bmMtPmRpcnR5X3JhbmdlX2FkZChyZXMsIHN0YXJ0IDw8IFBBR0VfU0hJRlQs
CiAJCQkJCSAgIGVuZCA8PCBQQUdFX1NISUZUKTsKIH0KKworLyoqCisgKiB2bXdfcmVzb3VyY2Vz
X2NsZWFuIC0gQ2xlYW4gcmVzb3VyY2VzIGludGVyc2VjdGluZyBhIG1vYiByYW5nZQorICogQHZi
bzogVGhlIG1vYiBidWZmZXIgb2JqZWN0CisgKiBAc3RhcnQ6IFRoZSBtb2IgcGFnZSBvZmZzZXQg
c3RhcnRpbmcgdGhlIHJhbmdlCisgKiBAZW5kOiBUaGUgbW9iIHBhZ2Ugb2Zmc2V0IGVuZGluZyB0
aGUgcmFuZ2UKKyAqIEBudW1fcHJlZmF1bHQ6IFJldHVybnMgaG93IG1hbnkgcGFnZXMgaW5jbHVk
aW5nIHRoZSBmaXJzdCBoYXZlIGJlZW4KKyAqIGNsZWFuZWQgYW5kIGFyZSBvayB0byBwcmVmYXVs
dAorICovCitpbnQgdm13X3Jlc291cmNlc19jbGVhbihzdHJ1Y3Qgdm13X2J1ZmZlcl9vYmplY3Qg
KnZibywgcGdvZmZfdCBzdGFydCwKKwkJCXBnb2ZmX3QgZW5kLCBwZ29mZl90ICpudW1fcHJlZmF1
bHQpCit7CisJc3RydWN0IHJiX25vZGUgKmN1ciA9IHZiby0+cmVzX3RyZWUucmJfbm9kZTsKKwlz
dHJ1Y3Qgdm13X3Jlc291cmNlICpmb3VuZCA9IE5VTEw7CisJdW5zaWduZWQgbG9uZyByZXNfc3Rh
cnQgPSBzdGFydCA8PCBQQUdFX1NISUZUOworCXVuc2lnbmVkIGxvbmcgcmVzX2VuZCA9IGVuZCA8
PCBQQUdFX1NISUZUOworCXVuc2lnbmVkIGxvbmcgbGFzdF9jbGVhbmVkID0gMDsKKworCS8qCisJ
ICogRmluZCB0aGUgcmVzb3VyY2Ugd2l0aCBsb3dlc3QgYmFja3VwX29mZnNldCB0aGF0IGludGVy
c2VjdHMgdGhlCisJICogcmFuZ2UuCisJICovCisJd2hpbGUgKGN1cikgeworCQlzdHJ1Y3Qgdm13
X3Jlc291cmNlICpjdXJfcmVzID0KKwkJCWNvbnRhaW5lcl9vZihjdXIsIHN0cnVjdCB2bXdfcmVz
b3VyY2UsIG1vYl9ub2RlKTsKKworCQlpZiAoY3VyX3Jlcy0+YmFja3VwX29mZnNldCA+PSByZXNf
ZW5kKSB7CisJCQljdXIgPSBjdXItPnJiX2xlZnQ7CisJCX0gZWxzZSBpZiAoY3VyX3Jlcy0+YmFj
a3VwX29mZnNldCArIGN1cl9yZXMtPmJhY2t1cF9zaXplIDw9CisJCQkgICByZXNfc3RhcnQpIHsK
KwkJCWN1ciA9IGN1ci0+cmJfcmlnaHQ7CisJCX0gZWxzZSB7CisJCQlmb3VuZCA9IGN1cl9yZXM7
CisJCQljdXIgPSBjdXItPnJiX2xlZnQ7CisJCQkvKiBDb250aW51ZSB0byBsb29rIGZvciByZXNv
dXJjZXMgd2l0aCBsb3dlciBvZmZzZXRzICovCisJCX0KKwl9CisKKwkvKgorCSAqIEluIG9yZGVy
IG9mIGluY3JlYXNpbmcgYmFja3VwX29mZnNldCwgY2xlYW4gZGlydHkgcmVzb3JjZXMKKwkgKiBp
bnRlcnNlY3RpbmcgdGhlIHJhbmdlLgorCSAqLworCXdoaWxlIChmb3VuZCkgeworCQlpZiAoZm91
bmQtPnJlc19kaXJ0eSkgeworCQkJaW50IHJldDsKKworCQkJaWYgKCFmb3VuZC0+ZnVuYy0+Y2xl
YW4pCisJCQkJcmV0dXJuIC1FSU5WQUw7CisKKwkJCXJldCA9IGZvdW5kLT5mdW5jLT5jbGVhbihm
b3VuZCk7CisJCQlpZiAocmV0KQorCQkJCXJldHVybiByZXQ7CisKKwkJCWZvdW5kLT5yZXNfZGly
dHkgPSBmYWxzZTsKKwkJfQorCQlsYXN0X2NsZWFuZWQgPSBmb3VuZC0+YmFja3VwX29mZnNldCAr
IGZvdW5kLT5iYWNrdXBfc2l6ZTsKKwkJY3VyID0gcmJfbmV4dCgmZm91bmQtPm1vYl9ub2RlKTsK
KwkJaWYgKCFjdXIpCisJCQlicmVhazsKKworCQlmb3VuZCA9IGNvbnRhaW5lcl9vZihjdXIsIHN0
cnVjdCB2bXdfcmVzb3VyY2UsIG1vYl9ub2RlKTsKKwkJaWYgKGZvdW5kLT5iYWNrdXBfb2Zmc2V0
ID49IHJlc19lbmQpCisJCQlicmVhazsKKwl9CisKKwkvKgorCSAqIFNldCBudW1iZXIgb2YgcGFn
ZXMgYWxsb3dlZCBwcmVmYXVsdGluZyBhbmQgZmVuY2UgdGhlIGJ1ZmZlciBvYmplY3QKKwkgKi8K
KwkqbnVtX3ByZWZhdWx0ID0gMTsKKwlpZiAobGFzdF9jbGVhbmVkID4gcmVzX3N0YXJ0KSB7CisJ
CXN0cnVjdCB0dG1fYnVmZmVyX29iamVjdCAqYm8gPSAmdmJvLT5iYXNlOworCisJCSpudW1fcHJl
ZmF1bHQgPSBfX0tFUk5FTF9ESVZfUk9VTkRfVVAobGFzdF9jbGVhbmVkIC0gcmVzX3N0YXJ0LAor
CQkJCQkJICAgICAgUEFHRV9TSVpFKTsKKwkJdm13X2JvX2ZlbmNlX3NpbmdsZShibywgTlVMTCk7
CisJCWlmIChiby0+bW92aW5nKQorCQkJZG1hX2ZlbmNlX3B1dChiby0+bW92aW5nKTsKKwkJYm8t
Pm1vdmluZyA9IGRtYV9mZW5jZV9nZXQKKwkJCShkbWFfcmVzdl9nZXRfZXhjbChiby0+YmFzZS5y
ZXN2KSk7CisJfQorCisJcmV0dXJuIDA7Cit9CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0v
dm13Z2Z4L3Ztd2dmeF9yZXNvdXJjZV9wcml2LmggYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Zt
d2dmeF9yZXNvdXJjZV9wcml2LmgKaW5kZXggYzg1MTQ0Mjg2Y2ZlLi4zYjc0MzhiMmQyODkgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3Jlc291cmNlX3ByaXYuaAor
KysgYi9kcml2ZXJzL2dwdS9kcm0vdm13Z2Z4L3Ztd2dmeF9yZXNvdXJjZV9wcml2LmgKQEAgLTc3
LDYgKzc3LDcgQEAgc3RydWN0IHZtd191c2VyX3Jlc291cmNlX2NvbnYgewogICogQGRpcnR5X3N5
bmM6ICAgICAgICBVcGxvYWQgdGhlIGRpcnR5IG1vYiBjb250ZW50cyB0byB0aGUgcmVzb3VyY2Uu
CiAgKiBAZGlydHlfYWRkX3JhbmdlOiAgIEFkZCBhIHNlcXVlbnRpYWwgZGlydHkgcmFuZ2UgdG8g
dGhlIHJlc291cmNlCiAgKiAgICAgICAgICAgICAgICAgICAgIGRpcnR5IHRyYWNrZXIuCisgKiBA
Y2xlYW46ICAgICAgICAgICAgIENsZWFuIHRoZSByZXNvdXJjZS4KICAqLwogc3RydWN0IHZtd19y
ZXNfZnVuYyB7CiAJZW51bSB2bXdfcmVzX3R5cGUgcmVzX3R5cGU7CkBAIC0xMDEsNiArMTAyLDcg
QEAgc3RydWN0IHZtd19yZXNfZnVuYyB7CiAJaW50ICgqZGlydHlfc3luYykoc3RydWN0IHZtd19y
ZXNvdXJjZSAqcmVzKTsKIAl2b2lkICgqZGlydHlfcmFuZ2VfYWRkKShzdHJ1Y3Qgdm13X3Jlc291
cmNlICpyZXMsIHNpemVfdCBzdGFydCwKIAkJCQkgc2l6ZV90IGVuZCk7CisJaW50ICgqY2xlYW4p
KHN0cnVjdCB2bXdfcmVzb3VyY2UgKnJlcyk7CiB9OwogCiAvKioKZGlmZiAtLWdpdCBhL2RyaXZl
cnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3ZhbGlkYXRpb24uYyBiL2RyaXZlcnMvZ3B1L2RybS92
bXdnZngvdm13Z2Z4X3ZhbGlkYXRpb24uYwppbmRleCAzODRhMTE3MzBhOTIuLmU2OWJjMzczYWUy
ZSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL3Ztd2dmeC92bXdnZnhfdmFsaWRhdGlvbi5j
CisrKyBiL2RyaXZlcnMvZ3B1L2RybS92bXdnZngvdm13Z2Z4X3ZhbGlkYXRpb24uYwpAQCAtNjQ0
LDcgKzY0NCw4IEBAIGludCB2bXdfdmFsaWRhdGlvbl9yZXNfdmFsaWRhdGUoc3RydWN0IHZtd192
YWxpZGF0aW9uX2NvbnRleHQgKmN0eCwgYm9vbCBpbnRyKQogCQlzdHJ1Y3Qgdm13X3Jlc291cmNl
ICpyZXMgPSB2YWwtPnJlczsKIAkJc3RydWN0IHZtd19idWZmZXJfb2JqZWN0ICpiYWNrdXAgPSBy
ZXMtPmJhY2t1cDsKIAotCQlyZXQgPSB2bXdfcmVzb3VyY2VfdmFsaWRhdGUocmVzLCBpbnRyKTsK
KwkJcmV0ID0gdm13X3Jlc291cmNlX3ZhbGlkYXRlKHJlcywgaW50ciwgdmFsLT5kaXJ0eV9zZXQg
JiYKKwkJCQkJICAgIHZhbC0+ZGlydHkpOwogCQlpZiAocmV0KSB7CiAJCQlpZiAocmV0ICE9IC1F
UkVTVEFSVFNZUykKIAkJCQlEUk1fRVJST1IoIkZhaWxlZCB0byB2YWxpZGF0ZSByZXNvdXJjZS5c
biIpOwotLSAKMi4yMC4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fXwpkcmktZGV2ZWwgbWFpbGluZyBsaXN0CmRyaS1kZXZlbEBsaXN0cy5mcmVlZGVza3Rv
cC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9kcmkt
ZGV2ZWw=
