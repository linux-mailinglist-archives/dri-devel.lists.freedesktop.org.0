Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 0F7188794D
	for <lists+dri-devel@lfdr.de>; Fri,  9 Aug 2019 14:04:43 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 418676E1EC;
	Fri,  9 Aug 2019 12:04:37 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from metis.ext.pengutronix.de (metis.ext.pengutronix.de
 [IPv6:2001:67c:670:201:290:27ff:fe1d:cc33])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 9BDD689958
 for <dri-devel@lists.freedesktop.org>; Fri,  9 Aug 2019 12:04:28 +0000 (UTC)
Received: from dude02.hi.pengutronix.de ([2001:67c:670:100:1d::28]
 helo=dude02.pengutronix.de.)
 by metis.ext.pengutronix.de with esmtp (Exim 4.92)
 (envelope-from <l.stach@pengutronix.de>)
 id 1hw3dA-00055N-Fa; Fri, 09 Aug 2019 14:04:24 +0200
From: Lucas Stach <l.stach@pengutronix.de>
To: etnaviv@lists.freedesktop.org
Subject: [PATCH v3 8/8] drm/etnaviv: implement per-process address spaces on
 MMUv2
Date: Fri,  9 Aug 2019 14:04:24 +0200
Message-Id: <20190809120424.32679-8-l.stach@pengutronix.de>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190809120424.32679-1-l.stach@pengutronix.de>
References: <20190809120424.32679-1-l.stach@pengutronix.de>
MIME-Version: 1.0
X-SA-Exim-Connect-IP: 2001:67c:670:100:1d::28
X-SA-Exim-Mail-From: l.stach@pengutronix.de
X-SA-Exim-Scanned: No (on metis.ext.pengutronix.de);
 SAEximRunCond expanded to false
X-PTX-Original-Recipient: dri-devel@lists.freedesktop.org
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: patchwork-lst@pengutronix.de, kernel@pengutronix.de,
 dri-devel@lists.freedesktop.org, Russell King <linux+etnaviv@armlinux.org.uk>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

VGhpcyBidWlsZHMgb24gdG9wIG9mIHRoZSBNTVUgY29udGV4dHMgaW50cm9kdWNlZCBlYXJsaWVy
LiBJbnN0ZWFkIG9mIGhhdmluZwpvbmUgY29udGV4dCBwZXIgR1BVIGNvcmUsIGVhY2ggR1BVIGNs
aWVudCByZWNlaXZlcyBpdHMgb3duIGNvbnRleHQuCgpPbiBNTVV2MSB0aGlzIHN0aWxsIG1lYW5z
IGEgc2luZ2xlIHNoYXJlZCBwYWdldGFibGUgc2V0IGlzIHVzZWQgYnkgYWxsCmNsaWVudHMsIGJ1
dCBvbiBNTVV2MiB0aGVyZSBpcyBub3cgYSBkaXN0aW5jdCBzZXQgb2YgcGFnZXRhYmxlcyBmb3Ig
ZWFjaApjbGllbnQuIEFzIHRoZSBjb21tYW5kIGZldGNoIGlzIGFsc28gdHJhbnNsYXRlZCB2aWEg
dGhlIE1NVSBvbiBNTVV2MiB0aGUKa2VybmVsIGNvbW1hbmQgcmluZ2J1ZmZlciBpcyBtYXBwZWQg
aW50byBlYWNoIG9mIHRoZSBjbGllbnQgcGFnZXRhYmxlcy4KCkFzIHRoZSBNTVUgY29udGV4dCBz
d2l0Y2ggaXMgYSBiaXQgb2YgYSBoZWF2eSBvcGVyYXRpb24sIGR1ZSB0byB0aGUgbmVlZGVkCmNh
Y2hlIGFuZCBUTEIgZmx1c2hpbmcsIHRoaXMgcGF0Y2ggaW1wbGVtZW50cyBhIGxhenkgd2F5IG9m
IHN3aXRjaGluZyB0aGUKTU1VIGNvbnRleHQuIFRoZSBrZXJuZWwgZG9lcyBub3QgaGF2ZSBpdHMg
b3duIE1NVSBjb250ZXh0LCBidXQgcmV1c2VzIHRoZQpsYXN0IGNsaWVudCBjb250ZXh0IGZvciBh
bGwgb2YgaXRzIG9wZXJhdGlvbnMuIFRoaXMgaGFzIHNvbWUgdmlzaWJsZSBpbXBhY3QsCmFzIHRo
ZSBHUFUgY2FuIG5vdyBvbmx5IGJlIHN0YXJ0ZWQgb25jZSBhIGNsaWVudCBoYXMgc3VibWl0dGVk
IHNvbWUgd29yayBhbmQKd2UgZ290IHRoZSBjbGllbnQgTU1VIGNvbnRleHQgYXNzaWduZWQuIEFs
c28gdGhlIE1NVSBjb250ZXh0IGhhcyBhIGRpZmZlcmVudApsaWZldGltZSB0aGFuIHRoZSBnZW5l
cmFsIGNsaWVudCBjb250ZXh0LCBhcyB0aGUgR1BVIG1pZ2h0IHN0aWxsIGV4ZWN1dGUgdGhlCmtl
cm5lbCBjb21tYW5kIGJ1ZmZlciBpbiB0aGUgY29udGV4dCBvZiBhIGNsaWVudCBldmVuIGFmdGVy
IHRoZSBjbGllbnQgaGFzCmNvbXBsZXRlZCBhbGwgR1BVIHdvcmsgYW5kIGhhcyBiZWVuIHRlcm1p
bmF0ZWQuIE9ubHkgd2hlbiB0aGUgR1BVIGlzIHJ1bnRpbWUKc3VzcGVuZGVkIG9yIHN3aXRjaGVz
IHRvIGFub3RoZXIgY2xpZW50cyBNTVUgY29udGV4dCBpcyB0aGUgb2xkIGNvbnRleHQKZnJlZWQg
dXAuCgpTaWduZWQtb2ZmLWJ5OiBMdWNhcyBTdGFjaCA8bC5zdGFjaEBwZW5ndXRyb25peC5kZT4K
LS0tCnYzOiBEb24ndCBjYWxsIGV0bmF2aXZfY21kYnVmX3N1YmFsbG9jX3VubWFwIHdoZW4gbWFw
cGluZyBmYWlsZWQuCi0tLQogZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9idWZmZXIu
YyAgICAgfCAgNjQgKysrKysrKystLS0KIGRyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZf
ZHJ2LmMgICAgICAgIHwgIDM4ICsrKysrKy0KIGRyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2
aXZfZHJ2LmggICAgICAgIHwgICA2ICstCiBkcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2
X2R1bXAuYyAgICAgICB8ICAgNCArLQogZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9n
ZW0uYyAgICAgICAgfCAgIDcgKy0KIGRyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZfZ2Vt
LmggICAgICAgIHwgICA0ICstCiBkcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2dlbV9z
dWJtaXQuYyB8ICAxMSArLQogZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9ncHUuYyAg
ICAgICAgfCAxMDUgKysrKysrKystLS0tLS0tLS0tLQogZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYv
ZXRuYXZpdl9ncHUuaCAgICAgICAgfCAgIDQgLQogZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRu
YXZpdl9pb21tdS5jICAgICAgfCAgMTAgKy0KIGRyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2
aXZfaW9tbXVfdjIuYyAgIHwgIDE3ICsrLQogZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZp
dl9tbXUuYyAgICAgICAgfCAgNDIgKysrKysrLS0KIGRyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0
bmF2aXZfbW11LmggICAgICAgIHwgIDExICstCiAxMyBmaWxlcyBjaGFuZ2VkLCAyMDggaW5zZXJ0
aW9ucygrKSwgMTE1IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9l
dG5hdml2L2V0bmF2aXZfYnVmZmVyLmMgYi9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2
X2J1ZmZlci5jCmluZGV4IDQzMjRiMDk4Njg5Zi4uODc2YTAzNWVlMWEyIDEwMDY0NAotLS0gYS9k
cml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2J1ZmZlci5jCisrKyBiL2RyaXZlcnMvZ3B1
L2RybS9ldG5hdml2L2V0bmF2aXZfYnVmZmVyLmMKQEAgLTExOCw3ICsxMTgsOCBAQCBzdGF0aWMg
dm9pZCBldG5hdml2X2J1ZmZlcl9kdW1wKHN0cnVjdCBldG5hdml2X2dwdSAqZ3B1LAogCXUzMiAq
cHRyID0gYnVmLT52YWRkciArIG9mZjsKIAogCWRldl9pbmZvKGdwdS0+ZGV2LCAidmlydCAlcCBw
aHlzIDB4JTA4eCBmcmVlIDB4JTA4eFxuIiwKLQkJCXB0ciwgZXRuYXZpdl9jbWRidWZfZ2V0X3Zh
KGJ1ZiwgJmdwdS0+Y21kYnVmX21hcHBpbmcpICsKKwkJCXB0ciwgZXRuYXZpdl9jbWRidWZfZ2V0
X3ZhKGJ1ZiwKKwkJCSZncHUtPm1tdV9jb250ZXh0LT5jbWRidWZfbWFwcGluZykgKwogCQkJb2Zm
LCBzaXplIC0gbGVuICogNCAtIG9mZik7CiAKIAlwcmludF9oZXhfZHVtcChLRVJOX0lORk8sICJj
bWQgIiwgRFVNUF9QUkVGSVhfT0ZGU0VULCAxNiwgNCwKQEAgLTE1Miw3ICsxNTMsOCBAQCBzdGF0
aWMgdTMyIGV0bmF2aXZfYnVmZmVyX3Jlc2VydmUoc3RydWN0IGV0bmF2aXZfZ3B1ICpncHUsCiAJ
aWYgKGJ1ZmZlci0+dXNlcl9zaXplICsgY21kX2R3b3JkcyAqIHNpemVvZih1NjQpID4gYnVmZmVy
LT5zaXplKQogCQlidWZmZXItPnVzZXJfc2l6ZSA9IDA7CiAKLQlyZXR1cm4gZXRuYXZpdl9jbWRi
dWZfZ2V0X3ZhKGJ1ZmZlciwgJmdwdS0+Y21kYnVmX21hcHBpbmcpICsKKwlyZXR1cm4gZXRuYXZp
dl9jbWRidWZfZ2V0X3ZhKGJ1ZmZlciwKKwkJCQkgICAgICZncHUtPm1tdV9jb250ZXh0LT5jbWRi
dWZfbWFwcGluZykgKwogCSAgICAgICBidWZmZXItPnVzZXJfc2l6ZTsKIH0KIApAQCAtMTY2LDcg
KzE2OCw4IEBAIHUxNiBldG5hdml2X2J1ZmZlcl9pbml0KHN0cnVjdCBldG5hdml2X2dwdSAqZ3B1
KQogCWJ1ZmZlci0+dXNlcl9zaXplID0gMDsKIAogCUNNRF9XQUlUKGJ1ZmZlcik7Ci0JQ01EX0xJ
TksoYnVmZmVyLCAyLCBldG5hdml2X2NtZGJ1Zl9nZXRfdmEoYnVmZmVyLCAmZ3B1LT5jbWRidWZf
bWFwcGluZykKKwlDTURfTElOSyhidWZmZXIsIDIsCisJCSBldG5hdml2X2NtZGJ1Zl9nZXRfdmEo
YnVmZmVyLCAmZ3B1LT5tbXVfY29udGV4dC0+Y21kYnVmX21hcHBpbmcpCiAJCSArIGJ1ZmZlci0+
dXNlcl9zaXplIC0gNCk7CiAKIAlyZXR1cm4gYnVmZmVyLT51c2VyX3NpemUgLyA4OwpAQCAtMjkz
LDcgKzI5Niw4IEBAIHZvaWQgZXRuYXZpdl9zeW5jX3BvaW50X3F1ZXVlKHN0cnVjdCBldG5hdml2
X2dwdSAqZ3B1LCB1bnNpZ25lZCBpbnQgZXZlbnQpCiAKIAkvKiBBcHBlbmQgd2FpdGxpbmsgKi8K
IAlDTURfV0FJVChidWZmZXIpOwotCUNNRF9MSU5LKGJ1ZmZlciwgMiwgZXRuYXZpdl9jbWRidWZf
Z2V0X3ZhKGJ1ZmZlciwgJmdwdS0+Y21kYnVmX21hcHBpbmcpCisJQ01EX0xJTksoYnVmZmVyLCAy
LAorCQkgZXRuYXZpdl9jbWRidWZfZ2V0X3ZhKGJ1ZmZlciwgJmdwdS0+bW11X2NvbnRleHQtPmNt
ZGJ1Zl9tYXBwaW5nKQogCQkgKyBidWZmZXItPnVzZXJfc2l6ZSAtIDQpOwogCiAJLyoKQEAgLTMw
OCw3ICszMTIsOCBAQCB2b2lkIGV0bmF2aXZfc3luY19wb2ludF9xdWV1ZShzdHJ1Y3QgZXRuYXZp
dl9ncHUgKmdwdSwgdW5zaWduZWQgaW50IGV2ZW50KQogCiAvKiBBcHBlbmQgYSBjb21tYW5kIGJ1
ZmZlciB0byB0aGUgcmluZyBidWZmZXIuICovCiB2b2lkIGV0bmF2aXZfYnVmZmVyX3F1ZXVlKHN0
cnVjdCBldG5hdml2X2dwdSAqZ3B1LCB1MzIgZXhlY19zdGF0ZSwKLQl1bnNpZ25lZCBpbnQgZXZl
bnQsIHN0cnVjdCBldG5hdml2X2NtZGJ1ZiAqY21kYnVmKQorCXN0cnVjdCBldG5hdml2X2lvbW11
X2NvbnRleHQgKm1tdV9jb250ZXh0LCB1bnNpZ25lZCBpbnQgZXZlbnQsCisJc3RydWN0IGV0bmF2
aXZfY21kYnVmICpjbWRidWYpCiB7CiAJc3RydWN0IGV0bmF2aXZfY21kYnVmICpidWZmZXIgPSAm
Z3B1LT5idWZmZXI7CiAJdW5zaWduZWQgaW50IHdhaXRsaW5rX29mZnNldCA9IGJ1ZmZlci0+dXNl
cl9zaXplIC0gMTY7CkBAIC0zMTcsMTcgKzMyMiwxOSBAQCB2b2lkIGV0bmF2aXZfYnVmZmVyX3F1
ZXVlKHN0cnVjdCBldG5hdml2X2dwdSAqZ3B1LCB1MzIgZXhlY19zdGF0ZSwKIAlib29sIHN3aXRj
aF9jb250ZXh0ID0gZ3B1LT5leGVjX3N0YXRlICE9IGV4ZWNfc3RhdGU7CiAJdW5zaWduZWQgaW50
IG5ld19mbHVzaF9zZXEgPSBSRUFEX09OQ0UoZ3B1LT5tbXVfY29udGV4dC0+Zmx1c2hfc2VxKTsK
IAlib29sIG5lZWRfZmx1c2ggPSBncHUtPmZsdXNoX3NlcSAhPSBuZXdfZmx1c2hfc2VxOworCWJv
b2wgc3dpdGNoX21tdV9jb250ZXh0ID0gZ3B1LT5tbXVfY29udGV4dCAhPSBtbXVfY29udGV4dDsK
IAogCWxvY2tkZXBfYXNzZXJ0X2hlbGQoJmdwdS0+bG9jayk7CiAKIAlpZiAoZHJtX2RlYnVnICYg
RFJNX1VUX0RSSVZFUikKIAkJZXRuYXZpdl9idWZmZXJfZHVtcChncHUsIGJ1ZmZlciwgMCwgMHg1
MCk7CiAKLQlsaW5rX3RhcmdldCA9IGV0bmF2aXZfY21kYnVmX2dldF92YShjbWRidWYsICZncHUt
PmNtZGJ1Zl9tYXBwaW5nKTsKKwlsaW5rX3RhcmdldCA9IGV0bmF2aXZfY21kYnVmX2dldF92YShj
bWRidWYsCisJCQkJCSAgICAmZ3B1LT5tbXVfY29udGV4dC0+Y21kYnVmX21hcHBpbmcpOwogCWxp
bmtfZHdvcmRzID0gY21kYnVmLT5zaXplIC8gODsKIAogCS8qCi0JICogSWYgd2UgbmVlZCBtYWlu
dGFuZW5jZSBwcmlvciB0byBzdWJtaXR0aW5nIHRoaXMgYnVmZmVyLCB3ZSB3aWxsCisJICogSWYg
d2UgbmVlZCBtYWludGVuYW5jZSBwcmlvciB0byBzdWJtaXR0aW5nIHRoaXMgYnVmZmVyLCB3ZSB3
aWxsCiAJICogbmVlZCB0byBhcHBlbmQgYSBtbXUgZmx1c2ggbG9hZCBzdGF0ZSwgZm9sbG93ZWQg
YnkgYSBuZXcKIAkgKiBsaW5rIHRvIHRoaXMgYnVmZmVyIC0gYSB0b3RhbCBvZiBmb3VyIGFkZGl0
aW9uYWwgd29yZHMuCiAJICovCkBAIC0zNDksNyArMzU2LDI0IEBAIHZvaWQgZXRuYXZpdl9idWZm
ZXJfcXVldWUoc3RydWN0IGV0bmF2aXZfZ3B1ICpncHUsIHUzMiBleGVjX3N0YXRlLAogCQlpZiAo
c3dpdGNoX2NvbnRleHQpCiAJCQlleHRyYV9kd29yZHMgKz0gNDsKIAorCQkvKiBQVEEgbG9hZCBj
b21tYW5kICovCisJCWlmIChzd2l0Y2hfbW11X2NvbnRleHQgJiYgZ3B1LT5zZWNfbW9kZSA9PSBF
VE5BX1NFQ19LRVJORUwpCisJCQlleHRyYV9kd29yZHMgKz0gMTsKKwogCQl0YXJnZXQgPSBldG5h
dml2X2J1ZmZlcl9yZXNlcnZlKGdwdSwgYnVmZmVyLCBleHRyYV9kd29yZHMpOworCQkvKgorCQkg
KiBTd2l0Y2ggTU1VIGNvbnRleHQgaWYgbmVjZXNzYXJ5LiBNdXN0IGJlIGRvbmUgYWZ0ZXIgdGhl
CisJCSAqIGxpbmsgdGFyZ2V0IGhhcyBiZWVuIGNhbGN1bGF0ZWQsIGFzIHRoZSBqdW1wIGZvcndh
cmQgaW4gdGhlCisJCSAqIGtlcm5lbCByaW5nIHN0aWxsIHVzZXMgdGhlIGxhc3QgYWN0aXZlIE1N
VSBjb250ZXh0IGJlZm9yZQorCQkgKiB0aGUgc3dpdGNoLgorCQkgKi8KKwkJaWYgKHN3aXRjaF9t
bXVfY29udGV4dCkgeworCQkJc3RydWN0IGV0bmF2aXZfaW9tbXVfY29udGV4dCAqb2xkX2NvbnRl
eHQgPSBncHUtPm1tdV9jb250ZXh0OworCisJCQlldG5hdml2X2lvbW11X2NvbnRleHRfZ2V0KG1t
dV9jb250ZXh0KTsKKwkJCWdwdS0+bW11X2NvbnRleHQgPSBtbXVfY29udGV4dDsKKwkJCWV0bmF2
aXZfaW9tbXVfY29udGV4dF9wdXQob2xkX2NvbnRleHQpOworCQl9CiAKIAkJaWYgKG5lZWRfZmx1
c2gpIHsKIAkJCS8qIEFkZCB0aGUgTU1VIGZsdXNoICovCkBAIC0zNjEsMTAgKzM4NSwyMyBAQCB2
b2lkIGV0bmF2aXZfYnVmZmVyX3F1ZXVlKHN0cnVjdCBldG5hdml2X2dwdSAqZ3B1LCB1MzIgZXhl
Y19zdGF0ZSwKIAkJCQkJICAgICAgIFZJVlNfR0xfRkxVU0hfTU1VX0ZMVVNIX1BFTU1VIHwKIAkJ
CQkJICAgICAgIFZJVlNfR0xfRkxVU0hfTU1VX0ZMVVNIX1VOSzQpOwogCQkJfSBlbHNlIHsKKwkJ
CQl1MzIgZmx1c2ggPSBWSVZTX01NVXYyX0NPTkZJR1VSQVRJT05fTU9ERV9NQVNLIHwKKwkJCQkJ
ICAgIFZJVlNfTU1VdjJfQ09ORklHVVJBVElPTl9GTFVTSF9GTFVTSDsKKworCQkJCWlmIChzd2l0
Y2hfbW11X2NvbnRleHQgJiYKKwkJCQkgICAgZ3B1LT5zZWNfbW9kZSA9PSBFVE5BX1NFQ19LRVJO
RUwpIHsKKwkJCQkJdW5zaWduZWQgc2hvcnQgaWQgPQorCQkJCQkJZXRuYXZpdl9pb21tdXYyX2dl
dF9wdGFfaWQoZ3B1LT5tbXVfY29udGV4dCk7CisJCQkJCUNNRF9MT0FEX1NUQVRFKGJ1ZmZlciwK
KwkJCQkJCVZJVlNfTU1VdjJfUFRBX0NPTkZJRywKKwkJCQkJCVZJVlNfTU1VdjJfUFRBX0NPTkZJ
R19JTkRFWChpZCkpOworCQkJCX0KKworCQkJCWlmIChncHUtPnNlY19tb2RlID09IEVUTkFfU0VD
X05PTkUpCisJCQkJCWZsdXNoIHw9IGV0bmF2aXZfaW9tbXV2Ml9nZXRfbXRsYl9hZGRyKGdwdS0+
bW11X2NvbnRleHQpOworCiAJCQkJQ01EX0xPQURfU1RBVEUoYnVmZmVyLCBWSVZTX01NVXYyX0NP
TkZJR1VSQVRJT04sCi0JCQkJCVZJVlNfTU1VdjJfQ09ORklHVVJBVElPTl9NT0RFX01BU0sgfAot
CQkJCQlWSVZTX01NVXYyX0NPTkZJR1VSQVRJT05fQUREUkVTU19NQVNLIHwKLQkJCQkJVklWU19N
TVV2Ml9DT05GSUdVUkFUSU9OX0ZMVVNIX0ZMVVNIKTsKKwkJCQkJICAgICAgIGZsdXNoKTsKIAkJ
CQlDTURfU0VNKGJ1ZmZlciwgU1lOQ19SRUNJUElFTlRfRkUsCiAJCQkJCVNZTkNfUkVDSVBJRU5U
X1BFKTsKIAkJCQlDTURfU1RBTEwoYnVmZmVyLCBTWU5DX1JFQ0lQSUVOVF9GRSwKQEAgLTM4MCw2
ICs0MTcsOCBAQCB2b2lkIGV0bmF2aXZfYnVmZmVyX3F1ZXVlKHN0cnVjdCBldG5hdml2X2dwdSAq
Z3B1LCB1MzIgZXhlY19zdGF0ZSwKIAkJfQogCiAJCS8qIEFuZCB0aGUgbGluayB0byB0aGUgc3Vi
bWl0dGVkIGJ1ZmZlciAqLworCQlsaW5rX3RhcmdldCA9IGV0bmF2aXZfY21kYnVmX2dldF92YShj
bWRidWYsCisJCQkJCSZncHUtPm1tdV9jb250ZXh0LT5jbWRidWZfbWFwcGluZyk7CiAJCUNNRF9M
SU5LKGJ1ZmZlciwgbGlua19kd29yZHMsIGxpbmtfdGFyZ2V0KTsKIAogCQkvKiBVcGRhdGUgdGhl
IGxpbmsgdGFyZ2V0IHRvIHBvaW50IHRvIGFib3ZlIGluc3RydWN0aW9ucyAqLwpAQCAtNDE2LDEz
ICs0NTUsMTQgQEAgdm9pZCBldG5hdml2X2J1ZmZlcl9xdWV1ZShzdHJ1Y3QgZXRuYXZpdl9ncHUg
KmdwdSwgdTMyIGV4ZWNfc3RhdGUsCiAJQ01EX0xPQURfU1RBVEUoYnVmZmVyLCBWSVZTX0dMX0VW
RU5ULCBWSVZTX0dMX0VWRU5UX0VWRU5UX0lEKGV2ZW50KSB8CiAJCSAgICAgICBWSVZTX0dMX0VW
RU5UX0ZST01fUEUpOwogCUNNRF9XQUlUKGJ1ZmZlcik7Ci0JQ01EX0xJTksoYnVmZmVyLCAyLCBl
dG5hdml2X2NtZGJ1Zl9nZXRfdmEoYnVmZmVyLCAmZ3B1LT5jbWRidWZfbWFwcGluZykKKwlDTURf
TElOSyhidWZmZXIsIDIsCisJCSBldG5hdml2X2NtZGJ1Zl9nZXRfdmEoYnVmZmVyLCAmZ3B1LT5t
bXVfY29udGV4dC0+Y21kYnVmX21hcHBpbmcpCiAJCSArIGJ1ZmZlci0+dXNlcl9zaXplIC0gNCk7
CiAKIAlpZiAoZHJtX2RlYnVnICYgRFJNX1VUX0RSSVZFUikKIAkJcHJfaW5mbygic3RyZWFtIGxp
bmsgdG8gMHglMDh4IEAgMHglMDh4ICVwXG4iLAogCQkJcmV0dXJuX3RhcmdldCwKLQkJCWV0bmF2
aXZfY21kYnVmX2dldF92YShjbWRidWYsICZncHUtPmNtZGJ1Zl9tYXBwaW5nKSwKKwkJCWV0bmF2
aXZfY21kYnVmX2dldF92YShjbWRidWYsICZncHUtPm1tdV9jb250ZXh0LT5jbWRidWZfbWFwcGlu
ZyksCiAJCQljbWRidWYtPnZhZGRyKTsKIAogCWlmIChkcm1fZGVidWcgJiBEUk1fVVRfRFJJVkVS
KSB7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2Rydi5jIGIv
ZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9kcnYuYwppbmRleCBlYjBjMjNmZTk3OWEu
LjgwZjFlZGNiYmVhMCAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZp
dl9kcnYuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2Rydi5jCkBAIC01
MCwxMiArNTAsMTkgQEAgc3RhdGljIGludCBldG5hdml2X29wZW4oc3RydWN0IGRybV9kZXZpY2Ug
KmRldiwgc3RydWN0IGRybV9maWxlICpmaWxlKQogewogCXN0cnVjdCBldG5hdml2X2RybV9wcml2
YXRlICpwcml2ID0gZGV2LT5kZXZfcHJpdmF0ZTsKIAlzdHJ1Y3QgZXRuYXZpdl9maWxlX3ByaXZh
dGUgKmN0eDsKLQlpbnQgaTsKKwlpbnQgcmV0LCBpOwogCiAJY3R4ID0ga3phbGxvYyhzaXplb2Yo
KmN0eCksIEdGUF9LRVJORUwpOwogCWlmICghY3R4KQogCQlyZXR1cm4gLUVOT01FTTsKIAorCWN0
eC0+bW11ID0gZXRuYXZpdl9pb21tdV9jb250ZXh0X2luaXQocHJpdi0+bW11X2dsb2JhbCwKKwkJ
CQkJICAgICAgcHJpdi0+Y21kYnVmX3N1YmFsbG9jKTsKKwlpZiAoIWN0eC0+bW11KSB7CisJCXJl
dCA9IC1FTk9NRU07CisJCWdvdG8gb3V0X2ZyZWU7CisJfQorCiAJZm9yIChpID0gMDsgaSA8IEVU
TkFfTUFYX1BJUEVTOyBpKyspIHsKIAkJc3RydWN0IGV0bmF2aXZfZ3B1ICpncHUgPSBwcml2LT5n
cHVbaV07CiAJCXN0cnVjdCBkcm1fc2NoZWRfcnEgKnJxOwpAQCAtNzAsNiArNzcsMTAgQEAgc3Rh
dGljIGludCBldG5hdml2X29wZW4oc3RydWN0IGRybV9kZXZpY2UgKmRldiwgc3RydWN0IGRybV9m
aWxlICpmaWxlKQogCWZpbGUtPmRyaXZlcl9wcml2ID0gY3R4OwogCiAJcmV0dXJuIDA7CisKK291
dF9mcmVlOgorCWtmcmVlKGN0eCk7CisJcmV0dXJuIHJldDsKIH0KIAogc3RhdGljIHZvaWQgZXRu
YXZpdl9wb3N0Y2xvc2Uoc3RydWN0IGRybV9kZXZpY2UgKmRldiwgc3RydWN0IGRybV9maWxlICpm
aWxlKQpAQCAtODUsNiArOTYsOCBAQCBzdGF0aWMgdm9pZCBldG5hdml2X3Bvc3RjbG9zZShzdHJ1
Y3QgZHJtX2RldmljZSAqZGV2LCBzdHJ1Y3QgZHJtX2ZpbGUgKmZpbGUpCiAJCQlkcm1fc2NoZWRf
ZW50aXR5X2Rlc3Ryb3koJmN0eC0+c2NoZWRfZW50aXR5W2ldKTsKIAl9CiAKKwlldG5hdml2X2lv
bW11X2NvbnRleHRfcHV0KGN0eC0+bW11KTsKKwogCWtmcmVlKGN0eCk7CiB9CiAKQEAgLTExNiwx
MiArMTI5LDI5IEBAIHN0YXRpYyBpbnQgZXRuYXZpdl9tbV9zaG93KHN0cnVjdCBkcm1fZGV2aWNl
ICpkZXYsIHN0cnVjdCBzZXFfZmlsZSAqbSkKIHN0YXRpYyBpbnQgZXRuYXZpdl9tbXVfc2hvdyhz
dHJ1Y3QgZXRuYXZpdl9ncHUgKmdwdSwgc3RydWN0IHNlcV9maWxlICptKQogewogCXN0cnVjdCBk
cm1fcHJpbnRlciBwID0gZHJtX3NlcV9maWxlX3ByaW50ZXIobSk7CisJc3RydWN0IGV0bmF2aXZf
aW9tbXVfY29udGV4dCAqbW11X2NvbnRleHQ7CiAKIAlzZXFfcHJpbnRmKG0sICJBY3RpdmUgT2Jq
ZWN0cyAoJXMpOlxuIiwgZGV2X25hbWUoZ3B1LT5kZXYpKTsKIAotCW11dGV4X2xvY2soJmdwdS0+
bW11X2NvbnRleHQtPmxvY2spOwotCWRybV9tbV9wcmludCgmZ3B1LT5tbXVfY29udGV4dC0+bW0s
ICZwKTsKLQltdXRleF91bmxvY2soJmdwdS0+bW11X2NvbnRleHQtPmxvY2spOworCS8qCisJICog
TG9jayB0aGUgR1BVIHRvIGF2b2lkIGEgTU1VIGNvbnRleHQgc3dpdGNoIGp1c3Qgbm93IGFuZCBl
bGV2YXRlCisJICogdGhlIHJlZmNvdW50IG9mIHRoZSBjdXJyZW50IGNvbnRleHQgdG8gYXZvaWQg
aXQgZGlzYXBwZWFyaW5nIGZyb20KKwkgKiB1bmRlciBvdXIgZmVldC4KKwkgKi8KKwltdXRleF9s
b2NrKCZncHUtPmxvY2spOworCW1tdV9jb250ZXh0ID0gZ3B1LT5tbXVfY29udGV4dDsKKwlpZiAo
bW11X2NvbnRleHQpCisJCWV0bmF2aXZfaW9tbXVfY29udGV4dF9nZXQobW11X2NvbnRleHQpOwor
CW11dGV4X3VubG9jaygmZ3B1LT5sb2NrKTsKKworCWlmICghbW11X2NvbnRleHQpCisJCXJldHVy
biAwOworCisJbXV0ZXhfbG9jaygmbW11X2NvbnRleHQtPmxvY2spOworCWRybV9tbV9wcmludCgm
bW11X2NvbnRleHQtPm1tLCAmcCk7CisJbXV0ZXhfdW5sb2NrKCZtbXVfY29udGV4dC0+bG9jayk7
CisKKwlldG5hdml2X2lvbW11X2NvbnRleHRfcHV0KG1tdV9jb250ZXh0KTsKIAogCXJldHVybiAw
OwogfQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9kcnYuaCBi
L2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZfZHJ2LmgKaW5kZXggNWY4ZGIwOGYxYzE3
Li5hNDg4Y2ZkYjZiYmYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2
aXZfZHJ2LmgKKysrIGIvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9kcnYuaApAQCAt
MjUsMTAgKzI1LDcgQEAgc3RydWN0IGV0bmF2aXZfZ2VtX3N1Ym1pdDsKIHN0cnVjdCBldG5hdml2
X2lvbW11X2dsb2JhbDsKIAogc3RydWN0IGV0bmF2aXZfZmlsZV9wcml2YXRlIHsKLQkvKgotCSAq
IFdoZW4gcGVyLWNvbnRleHQgYWRkcmVzcyBzcGFjZXMgYXJlIHN1cHBvcnRlZCB3ZSdkIGtlZXAg
dHJhY2sgb2YKLQkgKiB0aGUgY29udGV4dCdzIHBhZ2UtdGFibGVzIGhlcmUuCi0JICovCisJc3Ry
dWN0IGV0bmF2aXZfaW9tbXVfY29udGV4dAkqbW11OwogCXN0cnVjdCBkcm1fc2NoZWRfZW50aXR5
CQlzY2hlZF9lbnRpdHlbRVROQV9NQVhfUElQRVNdOwogfTsKIApAQCAtNzUsNiArNzIsNyBAQCB1
MTYgZXRuYXZpdl9idWZmZXJfY29uZmlnX3B0YShzdHJ1Y3QgZXRuYXZpdl9ncHUgKmdwdSwgdW5z
aWduZWQgc2hvcnQgaWQpOwogdm9pZCBldG5hdml2X2J1ZmZlcl9lbmQoc3RydWN0IGV0bmF2aXZf
Z3B1ICpncHUpOwogdm9pZCBldG5hdml2X3N5bmNfcG9pbnRfcXVldWUoc3RydWN0IGV0bmF2aXZf
Z3B1ICpncHUsIHVuc2lnbmVkIGludCBldmVudCk7CiB2b2lkIGV0bmF2aXZfYnVmZmVyX3F1ZXVl
KHN0cnVjdCBldG5hdml2X2dwdSAqZ3B1LCB1MzIgZXhlY19zdGF0ZSwKKwlzdHJ1Y3QgZXRuYXZp
dl9pb21tdV9jb250ZXh0ICptbXUsCiAJdW5zaWduZWQgaW50IGV2ZW50LCBzdHJ1Y3QgZXRuYXZp
dl9jbWRidWYgKmNtZGJ1Zik7CiB2b2lkIGV0bmF2aXZfdmFsaWRhdGVfaW5pdCh2b2lkKTsKIGJv
b2wgZXRuYXZpdl9jbWRfdmFsaWRhdGVfb25lKHN0cnVjdCBldG5hdml2X2dwdSAqZ3B1LApkaWZm
IC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9kdW1wLmMgYi9kcml2ZXJz
L2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2R1bXAuYwppbmRleCA3ZTY3OTE1MTc2OTMuLjY5OGRi
NTQwOTcyYyAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9kdW1w
LmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9kdW1wLmMKQEAgLTE3Mywx
MiArMTczLDEyIEBAIHZvaWQgZXRuYXZpdl9jb3JlX2R1bXAoc3RydWN0IGV0bmF2aXZfZ2VtX3N1
Ym1pdCAqc3VibWl0KQogCWV0bmF2aXZfY29yZV9kdW1wX21lbSgmaXRlciwgRVREVU1QX0JVRl9S
SU5HLCBncHUtPmJ1ZmZlci52YWRkciwKIAkJCSAgICAgIGdwdS0+YnVmZmVyLnNpemUsCiAJCQkg
ICAgICBldG5hdml2X2NtZGJ1Zl9nZXRfdmEoJmdwdS0+YnVmZmVyLAotCQkJCQkJICAgICZncHUt
PmNtZGJ1Zl9tYXBwaW5nKSk7CisJCQkJCSZncHUtPm1tdV9jb250ZXh0LT5jbWRidWZfbWFwcGlu
ZykpOwogCiAJZXRuYXZpdl9jb3JlX2R1bXBfbWVtKCZpdGVyLCBFVERVTVBfQlVGX0NNRCwKIAkJ
CSAgICAgIHN1Ym1pdC0+Y21kYnVmLnZhZGRyLCBzdWJtaXQtPmNtZGJ1Zi5zaXplLAogCQkJICAg
ICAgZXRuYXZpdl9jbWRidWZfZ2V0X3ZhKCZzdWJtaXQtPmNtZGJ1ZiwKLQkJCQkJCSAgICAmZ3B1
LT5jbWRidWZfbWFwcGluZykpOworCQkJCQkmZ3B1LT5tbXVfY29udGV4dC0+Y21kYnVmX21hcHBp
bmcpKTsKIAogCS8qIFJlc2VydmUgc3BhY2UgZm9yIHRoZSBib21hcCAqLwogCWlmIChuX2JvbWFw
X3BhZ2VzKSB7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2dl
bS5jIGIvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9nZW0uYwppbmRleCAwNGM4MTcw
Zjc2Y2QuLmU3OWY2ZWYzNjU5YSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYv
ZXRuYXZpdl9nZW0uYworKysgYi9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2dlbS5j
CkBAIC0yNDgsOCArMjQ4LDcgQEAgdm9pZCBldG5hdml2X2dlbV9tYXBwaW5nX3VucmVmZXJlbmNl
KHN0cnVjdCBldG5hdml2X3ZyYW1fbWFwcGluZyAqbWFwcGluZykKIH0KIAogc3RydWN0IGV0bmF2
aXZfdnJhbV9tYXBwaW5nICpldG5hdml2X2dlbV9tYXBwaW5nX2dldCgKLQlzdHJ1Y3QgZHJtX2dl
bV9vYmplY3QgKm9iaiwgc3RydWN0IGV0bmF2aXZfZ3B1ICpncHUsCi0Jc3RydWN0IGV0bmF2aXZf
aW9tbXVfY29udGV4dCAqbW11X2NvbnRleHQpCisJc3RydWN0IGRybV9nZW1fb2JqZWN0ICpvYmos
IHN0cnVjdCBldG5hdml2X2lvbW11X2NvbnRleHQgKm1tdV9jb250ZXh0KQogewogCXN0cnVjdCBl
dG5hdml2X2dlbV9vYmplY3QgKmV0bmF2aXZfb2JqID0gdG9fZXRuYXZpdl9ibyhvYmopOwogCXN0
cnVjdCBldG5hdml2X3ZyYW1fbWFwcGluZyAqbWFwcGluZzsKQEAgLTMwOCw4ICszMDcsOCBAQCBz
dHJ1Y3QgZXRuYXZpdl92cmFtX21hcHBpbmcgKmV0bmF2aXZfZ2VtX21hcHBpbmdfZ2V0KAogCW1h
cHBpbmctPmNvbnRleHQgPSBtbXVfY29udGV4dDsKIAltYXBwaW5nLT51c2UgPSAxOwogCi0JcmV0
ID0gZXRuYXZpdl9pb21tdV9tYXBfZ2VtKG1tdV9jb250ZXh0LCBldG5hdml2X29iaiwgZ3B1LT5t
ZW1vcnlfYmFzZSwKLQkJCQkgICAgbWFwcGluZyk7CisJcmV0ID0gZXRuYXZpdl9pb21tdV9tYXBf
Z2VtKG1tdV9jb250ZXh0LCBldG5hdml2X29iaiwKKwkJCQkgICAgbW11X2NvbnRleHQtPmdsb2Jh
bC0+bWVtb3J5X2Jhc2UsIG1hcHBpbmcpOwogCWlmIChyZXQgPCAwKQogCQlrZnJlZShtYXBwaW5n
KTsKIAllbHNlCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2dl
bS5oIGIvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9nZW0uaAppbmRleCBmMzQyNTYw
YjU5MzguLjFlMTE2NTlhODg0MiAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYv
ZXRuYXZpdl9nZW0uaAorKysgYi9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2dlbS5o
CkBAIC05Myw2ICs5Myw3IEBAIHN0cnVjdCBldG5hdml2X2dlbV9zdWJtaXQgewogCXN0cnVjdCBr
cmVmIHJlZmNvdW50OwogCXN0cnVjdCBldG5hdml2X2ZpbGVfcHJpdmF0ZSAqY3R4OwogCXN0cnVj
dCBldG5hdml2X2dwdSAqZ3B1OworCXN0cnVjdCBldG5hdml2X2lvbW11X2NvbnRleHQgKm1tdV9j
b250ZXh0LCAqcHJldl9tbXVfY29udGV4dDsKIAlzdHJ1Y3QgZG1hX2ZlbmNlICpvdXRfZmVuY2Us
ICppbl9mZW5jZTsKIAlpbnQgb3V0X2ZlbmNlX2lkOwogCXN0cnVjdCBsaXN0X2hlYWQgbm9kZTsg
LyogR1BVIGFjdGl2ZSBzdWJtaXQgbGlzdCAqLwpAQCAtMTE5LDggKzEyMCw3IEBAIHN0cnVjdCBw
YWdlICoqZXRuYXZpdl9nZW1fZ2V0X3BhZ2VzKHN0cnVjdCBldG5hdml2X2dlbV9vYmplY3QgKm9i
aik7CiB2b2lkIGV0bmF2aXZfZ2VtX3B1dF9wYWdlcyhzdHJ1Y3QgZXRuYXZpdl9nZW1fb2JqZWN0
ICpvYmopOwogCiBzdHJ1Y3QgZXRuYXZpdl92cmFtX21hcHBpbmcgKmV0bmF2aXZfZ2VtX21hcHBp
bmdfZ2V0KAotCXN0cnVjdCBkcm1fZ2VtX29iamVjdCAqb2JqLCBzdHJ1Y3QgZXRuYXZpdl9ncHUg
KmdwdSwKLQlzdHJ1Y3QgZXRuYXZpdl9pb21tdV9jb250ZXh0ICptbXVfY29udGV4dCk7CisJc3Ry
dWN0IGRybV9nZW1fb2JqZWN0ICpvYmosIHN0cnVjdCBldG5hdml2X2lvbW11X2NvbnRleHQgKm1t
dV9jb250ZXh0KTsKIHZvaWQgZXRuYXZpdl9nZW1fbWFwcGluZ191bnJlZmVyZW5jZShzdHJ1Y3Qg
ZXRuYXZpdl92cmFtX21hcHBpbmcgKm1hcHBpbmcpOwogCiAjZW5kaWYgLyogX19FVE5BVklWX0dF
TV9IX18gKi8KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZfZ2Vt
X3N1Ym1pdC5jIGIvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9nZW1fc3VibWl0LmMK
aW5kZXggNzkyOWQyNThkYWY4Li4xNmU3ZDM3MWE3ZWYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1
L2RybS9ldG5hdml2L2V0bmF2aXZfZ2VtX3N1Ym1pdC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9l
dG5hdml2L2V0bmF2aXZfZ2VtX3N1Ym1pdC5jCkBAIC0yMjQsOCArMjI0LDcgQEAgc3RhdGljIGlu
dCBzdWJtaXRfcGluX29iamVjdHMoc3RydWN0IGV0bmF2aXZfZ2VtX3N1Ym1pdCAqc3VibWl0KQog
CQlzdHJ1Y3QgZXRuYXZpdl92cmFtX21hcHBpbmcgKm1hcHBpbmc7CiAKIAkJbWFwcGluZyA9IGV0
bmF2aXZfZ2VtX21hcHBpbmdfZ2V0KCZldG5hdml2X29iai0+YmFzZSwKLQkJCQkJCSAgc3VibWl0
LT5ncHUsCi0JCQkJCQkgIHN1Ym1pdC0+Z3B1LT5tbXVfY29udGV4dCk7CisJCQkJCQkgIHN1Ym1p
dC0+bW11X2NvbnRleHQpOwogCQlpZiAoSVNfRVJSKG1hcHBpbmcpKSB7CiAJCQlyZXQgPSBQVFJf
RVJSKG1hcHBpbmcpOwogCQkJYnJlYWs7CkBAIC0zNjIsNiArMzYxLDEyIEBAIHN0YXRpYyB2b2lk
IHN1Ym1pdF9jbGVhbnVwKHN0cnVjdCBrcmVmICprcmVmKQogCWlmIChzdWJtaXQtPmNtZGJ1Zi5z
dWJhbGxvYykKIAkJZXRuYXZpdl9jbWRidWZfZnJlZSgmc3VibWl0LT5jbWRidWYpOwogCisJaWYg
KHN1Ym1pdC0+bW11X2NvbnRleHQpCisJCWV0bmF2aXZfaW9tbXVfY29udGV4dF9wdXQoc3VibWl0
LT5tbXVfY29udGV4dCk7CisKKwlpZiAoc3VibWl0LT5wcmV2X21tdV9jb250ZXh0KQorCQlldG5h
dml2X2lvbW11X2NvbnRleHRfcHV0KHN1Ym1pdC0+cHJldl9tbXVfY29udGV4dCk7CisKIAlmb3Ig
KGkgPSAwOyBpIDwgc3VibWl0LT5ucl9ib3M7IGkrKykgewogCQlzdHJ1Y3QgZXRuYXZpdl9nZW1f
b2JqZWN0ICpldG5hdml2X29iaiA9IHN1Ym1pdC0+Ym9zW2ldLm9iajsKIApAQCAtNTAzLDYgKzUw
OCw4IEBAIGludCBldG5hdml2X2lvY3RsX2dlbV9zdWJtaXQoc3RydWN0IGRybV9kZXZpY2UgKmRl
diwgdm9pZCAqZGF0YSwKIAkJZ290byBlcnJfc3VibWl0X29iamVjdHM7CiAKIAlzdWJtaXQtPmN0
eCA9IGZpbGUtPmRyaXZlcl9wcml2OworCWV0bmF2aXZfaW9tbXVfY29udGV4dF9nZXQoc3VibWl0
LT5jdHgtPm1tdSk7CisJc3VibWl0LT5tbXVfY29udGV4dCA9IHN1Ym1pdC0+Y3R4LT5tbXU7CiAJ
c3VibWl0LT5leGVjX3N0YXRlID0gYXJncy0+ZXhlY19zdGF0ZTsKIAlzdWJtaXQtPmZsYWdzID0g
YXJncy0+ZmxhZ3M7CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2
aXZfZ3B1LmMgYi9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2dwdS5jCmluZGV4IDNh
ZjcyYTQxMjdiMC4uZDhhODNlYmZjZTQ3IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vZXRu
YXZpdi9ldG5hdml2X2dwdS5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZf
Z3B1LmMKQEAgLTYwMiw3ICs2MDIsOCBAQCB2b2lkIGV0bmF2aXZfZ3B1X3N0YXJ0X2ZlKHN0cnVj
dCBldG5hdml2X2dwdSAqZ3B1LCB1MzIgYWRkcmVzcywgdTE2IHByZWZldGNoKQogCiBzdGF0aWMg
dm9pZCBldG5hdml2X2dwdV9zdGFydF9mZV9pZGxlbG9vcChzdHJ1Y3QgZXRuYXZpdl9ncHUgKmdw
dSkKIHsKLQl1MzIgYWRkcmVzcyA9IGV0bmF2aXZfY21kYnVmX2dldF92YSgmZ3B1LT5idWZmZXIs
ICZncHUtPmNtZGJ1Zl9tYXBwaW5nKTsKKwl1MzIgYWRkcmVzcyA9IGV0bmF2aXZfY21kYnVmX2dl
dF92YSgmZ3B1LT5idWZmZXIsCisJCQkJJmdwdS0+bW11X2NvbnRleHQtPmNtZGJ1Zl9tYXBwaW5n
KTsKIAl1MTYgcHJlZmV0Y2g7CiAKIAkvKiBzZXR1cCB0aGUgTU1VICovCkBAIC02OTMsOCArNjk0
LDYgQEAgc3RhdGljIHZvaWQgZXRuYXZpdl9ncHVfaHdfaW5pdChzdHJ1Y3QgZXRuYXZpdl9ncHUg
KmdwdSkKIAlldG5hdml2X2dwdV9zZXR1cF9wdWxzZV9lYXRlcihncHUpOwogCiAJZ3B1X3dyaXRl
KGdwdSwgVklWU19ISV9JTlRSX0VOQkwsIH4wVSk7Ci0KLQlldG5hdml2X2dwdV9zdGFydF9mZV9p
ZGxlbG9vcChncHUpOwogfQogCiBpbnQgZXRuYXZpdl9ncHVfaW5pdChzdHJ1Y3QgZXRuYXZpdl9n
cHUgKmdwdSkKQEAgLTcyNCwyOCArNzIzLDYgQEAgaW50IGV0bmF2aXZfZ3B1X2luaXQoc3RydWN0
IGV0bmF2aXZfZ3B1ICpncHUpCiAJCWdvdG8gZmFpbDsKIAl9CiAKLQkvKgotCSAqIFNldCB0aGUg
R1BVIGxpbmVhciB3aW5kb3cgdG8gYmUgYXQgdGhlIGVuZCBvZiB0aGUgRE1BIHdpbmRvdywgd2hl
cmUKLQkgKiB0aGUgQ01BIGFyZWEgaXMgbGlrZWx5IHRvIHJlc2lkZS4gVGhpcyBlbnN1cmVzIHRo
YXQgd2UgYXJlIGFibGUgdG8KLQkgKiBtYXAgdGhlIGNvbW1hbmQgYnVmZmVycyB3aGlsZSBoYXZp
bmcgdGhlIGxpbmVhciB3aW5kb3cgb3ZlcmxhcCBhcwotCSAqIG11Y2ggUkFNIGFzIHBvc3NpYmxl
LCBzbyB3ZSBjYW4gb3B0aW1pemUgbWFwcGluZ3MgZm9yIG90aGVyIGJ1ZmZlcnMuCi0JICoKLQkg
KiBGb3IgM0QgY29yZXMgb25seSBkbyB0aGlzIGlmIE1DMi4wIGlzIHByZXNlbnQsIGFzIHdpdGgg
TUMxLjAgaXQgbGVhZHMKLQkgKiB0byBkaWZmZXJlbnQgdmlld3Mgb2YgdGhlIG1lbW9yeSBvbiB0
aGUgaW5kaXZpZHVhbCBlbmdpbmVzLgotCSAqLwotCWlmICghKGdwdS0+aWRlbnRpdHkuZmVhdHVy
ZXMgJiBjaGlwRmVhdHVyZXNfUElQRV8zRCkgfHwKLQkgICAgKGdwdS0+aWRlbnRpdHkubWlub3Jf
ZmVhdHVyZXMwICYgY2hpcE1pbm9yRmVhdHVyZXMwX01DMjApKSB7Ci0JCXUzMiBkbWFfbWFzayA9
ICh1MzIpZG1hX2dldF9yZXF1aXJlZF9tYXNrKGdwdS0+ZGV2KTsKLQkJaWYgKGRtYV9tYXNrIDwg
UEhZU19PRkZTRVQgKyBTWl8yRykKLQkJCWdwdS0+bWVtb3J5X2Jhc2UgPSBQSFlTX09GRlNFVDsK
LQkJZWxzZQotCQkJZ3B1LT5tZW1vcnlfYmFzZSA9IGRtYV9tYXNrIC0gU1pfMkcgKyAxOwotCX0g
ZWxzZSBpZiAoUEhZU19PRkZTRVQgPj0gU1pfMkcpIHsKLQkJZGV2X2luZm8oZ3B1LT5kZXYsICJO
ZWVkIHRvIG1vdmUgbGluZWFyIHdpbmRvdyBvbiBNQzEuMCwgZGlzYWJsaW5nIFRTXG4iKTsKLQkJ
Z3B1LT5tZW1vcnlfYmFzZSA9IFBIWVNfT0ZGU0VUOwotCQlncHUtPmlkZW50aXR5LmZlYXR1cmVz
ICY9IH5jaGlwRmVhdHVyZXNfRkFTVF9DTEVBUjsKLQl9Ci0KIAkvKgogCSAqIE9uIGNvcmVzIHdp
dGggc2VjdXJpdHkgZmVhdHVyZXMgc3VwcG9ydGVkLCB3ZSBjbGFpbSBjb250cm9sIG92ZXIgdGhl
CiAJICogc2VjdXJpdHkgc3RhdGVzLgpAQCAtNzY0LDIwICs3NDEsMjYgQEAgaW50IGV0bmF2aXZf
Z3B1X2luaXQoc3RydWN0IGV0bmF2aXZfZ3B1ICpncHUpCiAJaWYgKHJldCkKIAkJZ290byBmYWls
OwogCi0JZ3B1LT5tbXVfY29udGV4dCA9IGV0bmF2aXZfaW9tbXVfY29udGV4dF9pbml0KHByaXYt
Pm1tdV9nbG9iYWwpOwotCWlmIChJU19FUlIoZ3B1LT5tbXVfY29udGV4dCkpIHsKLQkJZGV2X2Vy
cihncHUtPmRldiwgIkZhaWxlZCB0byBpbnN0YW50aWF0ZSBHUFUgSU9NTVVcbiIpOwotCQlyZXQg
PSBQVFJfRVJSKGdwdS0+bW11X2NvbnRleHQpOwotCQlnb3RvIGlvbW11X2dsb2JhbF9maW5pOwot
CX0KLQotCXJldCA9IGV0bmF2aXZfY21kYnVmX3N1YmFsbG9jX21hcChwcml2LT5jbWRidWZfc3Vi
YWxsb2MsCi0JCQkJCSAgZ3B1LT5tbXVfY29udGV4dCwKLQkJCQkJICAmZ3B1LT5jbWRidWZfbWFw
cGluZywKLQkJCQkJICBncHUtPm1lbW9yeV9iYXNlKTsKLQlpZiAocmV0KSB7Ci0JCWRldl9lcnIo
Z3B1LT5kZXYsICJmYWlsZWQgdG8gbWFwIGNtZGJ1ZiBzdWJhbGxvY1xuIik7Ci0JCWdvdG8gZGVz
dHJveV9pb21tdTsKKwkvKgorCSAqIFNldCB0aGUgR1BVIGxpbmVhciB3aW5kb3cgdG8gYmUgYXQg
dGhlIGVuZCBvZiB0aGUgRE1BIHdpbmRvdywgd2hlcmUKKwkgKiB0aGUgQ01BIGFyZWEgaXMgbGlr
ZWx5IHRvIHJlc2lkZS4gVGhpcyBlbnN1cmVzIHRoYXQgd2UgYXJlIGFibGUgdG8KKwkgKiBtYXAg
dGhlIGNvbW1hbmQgYnVmZmVycyB3aGlsZSBoYXZpbmcgdGhlIGxpbmVhciB3aW5kb3cgb3Zlcmxh
cCBhcworCSAqIG11Y2ggUkFNIGFzIHBvc3NpYmxlLCBzbyB3ZSBjYW4gb3B0aW1pemUgbWFwcGlu
Z3MgZm9yIG90aGVyIGJ1ZmZlcnMuCisJICoKKwkgKiBGb3IgM0QgY29yZXMgb25seSBkbyB0aGlz
IGlmIE1DMi4wIGlzIHByZXNlbnQsIGFzIHdpdGggTUMxLjAgaXQgbGVhZHMKKwkgKiB0byBkaWZm
ZXJlbnQgdmlld3Mgb2YgdGhlIG1lbW9yeSBvbiB0aGUgaW5kaXZpZHVhbCBlbmdpbmVzLgorCSAq
LworCWlmICghKGdwdS0+aWRlbnRpdHkuZmVhdHVyZXMgJiBjaGlwRmVhdHVyZXNfUElQRV8zRCkg
fHwKKwkgICAgKGdwdS0+aWRlbnRpdHkubWlub3JfZmVhdHVyZXMwICYgY2hpcE1pbm9yRmVhdHVy
ZXMwX01DMjApKSB7CisJCXUzMiBkbWFfbWFzayA9ICh1MzIpZG1hX2dldF9yZXF1aXJlZF9tYXNr
KGdwdS0+ZGV2KTsKKwkJaWYgKGRtYV9tYXNrIDwgUEhZU19PRkZTRVQgKyBTWl8yRykKKwkJCXBy
aXYtPm1tdV9nbG9iYWwtPm1lbW9yeV9iYXNlID0gUEhZU19PRkZTRVQ7CisJCWVsc2UKKwkJCXBy
aXYtPm1tdV9nbG9iYWwtPm1lbW9yeV9iYXNlID0gZG1hX21hc2sgLSBTWl8yRyArIDE7CisJfSBl
bHNlIGlmIChQSFlTX09GRlNFVCA+PSBTWl8yRykgeworCQlkZXZfaW5mbyhncHUtPmRldiwgIk5l
ZWQgdG8gbW92ZSBsaW5lYXIgd2luZG93IG9uIE1DMS4wLCBkaXNhYmxpbmcgVFNcbiIpOworCQlw
cml2LT5tbXVfZ2xvYmFsLT5tZW1vcnlfYmFzZSA9IFBIWVNfT0ZGU0VUOworCQlncHUtPmlkZW50
aXR5LmZlYXR1cmVzICY9IH5jaGlwRmVhdHVyZXNfRkFTVF9DTEVBUjsKIAl9CiAKIAkvKiBDcmVh
dGUgYnVmZmVyOiAqLwpAQCAtNzg1LDE1ICs3NjgsNyBAQCBpbnQgZXRuYXZpdl9ncHVfaW5pdChz
dHJ1Y3QgZXRuYXZpdl9ncHUgKmdwdSkKIAkJCQkgIFBBR0VfU0laRSk7CiAJaWYgKHJldCkgewog
CQlkZXZfZXJyKGdwdS0+ZGV2LCAiY291bGQgbm90IGNyZWF0ZSBjb21tYW5kIGJ1ZmZlclxuIik7
Ci0JCWdvdG8gdW5tYXBfc3ViYWxsb2M7Ci0JfQotCi0JaWYgKCEoZ3B1LT5pZGVudGl0eS5taW5v
cl9mZWF0dXJlczEgJiBjaGlwTWlub3JGZWF0dXJlczFfTU1VX1ZFUlNJT04pICYmCi0JICAgIGV0
bmF2aXZfY21kYnVmX2dldF92YSgmZ3B1LT5idWZmZXIsICZncHUtPmNtZGJ1Zl9tYXBwaW5nKSA+
IDB4ODAwMDAwMDApIHsKLQkJcmV0ID0gLUVJTlZBTDsKLQkJZGV2X2VycihncHUtPmRldiwKLQkJ
CSJjb21tYW5kIGJ1ZmZlciBvdXRzaWRlIHZhbGlkIG1lbW9yeSB3aW5kb3dcbiIpOwotCQlnb3Rv
IGZyZWVfYnVmZmVyOworCQlnb3RvIGZhaWw7CiAJfQogCiAJLyogU2V0dXAgZXZlbnQgbWFuYWdl
bWVudCAqLwpAQCAtODE2LDE0ICs3OTEsNiBAQCBpbnQgZXRuYXZpdl9ncHVfaW5pdChzdHJ1Y3Qg
ZXRuYXZpdl9ncHUgKmdwdSkKIAogCXJldHVybiAwOwogCi1mcmVlX2J1ZmZlcjoKLQlldG5hdml2
X2NtZGJ1Zl9mcmVlKCZncHUtPmJ1ZmZlcik7Ci11bm1hcF9zdWJhbGxvYzoKLQlldG5hdml2X2Nt
ZGJ1Zl9zdWJhbGxvY191bm1hcChncHUtPm1tdV9jb250ZXh0LCAmZ3B1LT5jbWRidWZfbWFwcGlu
Zyk7Ci1kZXN0cm95X2lvbW11OgotCWV0bmF2aXZfaW9tbXVfY29udGV4dF9wdXQoZ3B1LT5tbXVf
Y29udGV4dCk7Ci1pb21tdV9nbG9iYWxfZmluaToKLQlldG5hdml2X2lvbW11X2dsb2JhbF9maW5p
KGdwdSk7CiBmYWlsOgogCXBtX3J1bnRpbWVfbWFya19sYXN0X2J1c3koZ3B1LT5kZXYpOwogCXBt
X3J1bnRpbWVfcHV0X2F1dG9zdXNwZW5kKGdwdS0+ZGV2KTsKQEAgLTEwMTcsNiArOTg0LDcgQEAg
dm9pZCBldG5hdml2X2dwdV9yZWNvdmVyX2hhbmcoc3RydWN0IGV0bmF2aXZfZ3B1ICpncHUpCiAK
IAlldG5hdml2X2dwdV9od19pbml0KGdwdSk7CiAJZ3B1LT5leGVjX3N0YXRlID0gLTE7CisJZ3B1
LT5tbXVfY29udGV4dCA9IE5VTEw7CiAKIAltdXRleF91bmxvY2soJmdwdS0+bG9jayk7CiAJcG1f
cnVudGltZV9tYXJrX2xhc3RfYnVzeShncHUtPmRldik7CkBAIC0xMzIzLDYgKzEyOTEsMTUgQEAg
c3RydWN0IGRtYV9mZW5jZSAqZXRuYXZpdl9ncHVfc3VibWl0KHN0cnVjdCBldG5hdml2X2dlbV9z
dWJtaXQgKnN1Ym1pdCkKIAkJZ290byBvdXRfdW5sb2NrOwogCX0KIAorCWlmICghZ3B1LT5tbXVf
Y29udGV4dCkgeworCQlldG5hdml2X2lvbW11X2NvbnRleHRfZ2V0KHN1Ym1pdC0+bW11X2NvbnRl
eHQpOworCQlncHUtPm1tdV9jb250ZXh0ID0gc3VibWl0LT5tbXVfY29udGV4dDsKKwkJZXRuYXZp
dl9ncHVfc3RhcnRfZmVfaWRsZWxvb3AoZ3B1KTsKKwl9IGVsc2UgeworCQlldG5hdml2X2lvbW11
X2NvbnRleHRfZ2V0KGdwdS0+bW11X2NvbnRleHQpOworCQlzdWJtaXQtPnByZXZfbW11X2NvbnRl
eHQgPSBncHUtPm1tdV9jb250ZXh0OworCX0KKwogCWlmIChzdWJtaXQtPm5yX3BtcnMpIHsKIAkJ
Z3B1LT5ldmVudFtldmVudFsxXV0uc3luY19wb2ludCA9ICZzeW5jX3BvaW50X3BlcmZtb25fc2Ft
cGxlX3ByZTsKIAkJa3JlZl9nZXQoJnN1Ym1pdC0+cmVmY291bnQpOwpAQCAtMTMzMiw4ICsxMzA5
LDggQEAgc3RydWN0IGRtYV9mZW5jZSAqZXRuYXZpdl9ncHVfc3VibWl0KHN0cnVjdCBldG5hdml2
X2dlbV9zdWJtaXQgKnN1Ym1pdCkKIAogCWdwdS0+ZXZlbnRbZXZlbnRbMF1dLmZlbmNlID0gZ3B1
X2ZlbmNlOwogCXN1Ym1pdC0+Y21kYnVmLnVzZXJfc2l6ZSA9IHN1Ym1pdC0+Y21kYnVmLnNpemUg
LSA4OwotCWV0bmF2aXZfYnVmZmVyX3F1ZXVlKGdwdSwgc3VibWl0LT5leGVjX3N0YXRlLCBldmVu
dFswXSwKLQkJCSAgICAgJnN1Ym1pdC0+Y21kYnVmKTsKKwlldG5hdml2X2J1ZmZlcl9xdWV1ZShn
cHUsIHN1Ym1pdC0+ZXhlY19zdGF0ZSwgc3VibWl0LT5tbXVfY29udGV4dCwKKwkJCSAgICAgZXZl
bnRbMF0sICZzdWJtaXQtPmNtZGJ1Zik7CiAKIAlpZiAoc3VibWl0LT5ucl9wbXJzKSB7CiAJCWdw
dS0+ZXZlbnRbZXZlbnRbMl1dLnN5bmNfcG9pbnQgPSAmc3luY19wb2ludF9wZXJmbW9uX3NhbXBs
ZV9wb3N0OwpAQCAtMTUzNSw3ICsxNTEyLDcgQEAgaW50IGV0bmF2aXZfZ3B1X3dhaXRfaWRsZShz
dHJ1Y3QgZXRuYXZpdl9ncHUgKmdwdSwgdW5zaWduZWQgaW50IHRpbWVvdXRfbXMpCiAKIHN0YXRp
YyBpbnQgZXRuYXZpdl9ncHVfaHdfc3VzcGVuZChzdHJ1Y3QgZXRuYXZpdl9ncHUgKmdwdSkKIHsK
LQlpZiAoZ3B1LT5pbml0aWFsaXplZCkgeworCWlmIChncHUtPmluaXRpYWxpemVkICYmIGdwdS0+
bW11X2NvbnRleHQpIHsKIAkJLyogUmVwbGFjZSB0aGUgbGFzdCBXQUlUIHdpdGggRU5EICovCiAJ
CW11dGV4X2xvY2soJmdwdS0+bG9jayk7CiAJCWV0bmF2aXZfYnVmZmVyX2VuZChncHUpOwpAQCAt
MTU0Nyw4ICsxNTI0LDEzIEBAIHN0YXRpYyBpbnQgZXRuYXZpdl9ncHVfaHdfc3VzcGVuZChzdHJ1
Y3QgZXRuYXZpdl9ncHUgKmdwdSkKIAkJICogd2UgZmFpbCwganVzdCB3YXJuIGFuZCBjb250aW51
ZS4KIAkJICovCiAJCWV0bmF2aXZfZ3B1X3dhaXRfaWRsZShncHUsIDEwMCk7CisKKwkJZXRuYXZp
dl9pb21tdV9jb250ZXh0X3B1dChncHUtPm1tdV9jb250ZXh0KTsKKwkJZ3B1LT5tbXVfY29udGV4
dCA9IE5VTEw7CiAJfQogCisJZ3B1LT5leGVjX3N0YXRlID0gLTE7CisKIAlyZXR1cm4gZXRuYXZp
dl9ncHVfY2xrX2Rpc2FibGUoZ3B1KTsKIH0KIApAQCAtMTU2NCw4ICsxNTQ2LDYgQEAgc3RhdGlj
IGludCBldG5hdml2X2dwdV9od19yZXN1bWUoc3RydWN0IGV0bmF2aXZfZ3B1ICpncHUpCiAJZXRu
YXZpdl9ncHVfdXBkYXRlX2Nsb2NrKGdwdSk7CiAJZXRuYXZpdl9ncHVfaHdfaW5pdChncHUpOwog
Ci0JZ3B1LT5leGVjX3N0YXRlID0gLTE7Ci0KIAltdXRleF91bmxvY2soJmdwdS0+bG9jayk7CiAK
IAlyZXR1cm4gMDsKQEAgLTE2OTYsOSArMTY3Niw2IEBAIHN0YXRpYyB2b2lkIGV0bmF2aXZfZ3B1
X3VuYmluZChzdHJ1Y3QgZGV2aWNlICpkZXYsIHN0cnVjdCBkZXZpY2UgKm1hc3RlciwKIAogCWlm
IChncHUtPmluaXRpYWxpemVkKSB7CiAJCWV0bmF2aXZfY21kYnVmX2ZyZWUoJmdwdS0+YnVmZmVy
KTsKLQkJZXRuYXZpdl9jbWRidWZfc3ViYWxsb2NfdW5tYXAoZ3B1LT5tbXVfY29udGV4dCwKLQkJ
CQkJICAgICAgJmdwdS0+Y21kYnVmX21hcHBpbmcpOwotCQlldG5hdml2X2lvbW11X2NvbnRleHRf
cHV0KGdwdS0+bW11X2NvbnRleHQpOwogCQlldG5hdml2X2lvbW11X2dsb2JhbF9maW5pKGdwdSk7
CiAJCWdwdS0+aW5pdGlhbGl6ZWQgPSBmYWxzZTsKIAl9CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dw
dS9kcm0vZXRuYXZpdi9ldG5hdml2X2dwdS5oIGIvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRu
YXZpdl9ncHUuaAppbmRleCBjMGJkNjAxOGQ1M2IuLjhmOWJkNGVkYzk2YSAxMDA2NDQKLS0tIGEv
ZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9ncHUuaAorKysgYi9kcml2ZXJzL2dwdS9k
cm0vZXRuYXZpdi9ldG5hdml2X2dwdS5oCkBAIC0xMDMsMTMgKzEwMyw5IEBAIHN0cnVjdCBldG5h
dml2X2dwdSB7CiAJYm9vbCBpbml0aWFsaXplZDsKIAogCS8qICdyaW5nJy1idWZmZXI6ICovCi0J
c3RydWN0IGV0bmF2aXZfdnJhbV9tYXBwaW5nIGNtZGJ1Zl9tYXBwaW5nOwogCXN0cnVjdCBldG5h
dml2X2NtZGJ1ZiBidWZmZXI7CiAJaW50IGV4ZWNfc3RhdGU7CiAKLQkvKiBidXMgYmFzZSBhZGRy
ZXNzIG9mIG1lbW9yeSAgKi8KLQl1MzIgbWVtb3J5X2Jhc2U7Ci0KIAkvKiBldmVudCBtYW5hZ2Vt
ZW50OiAqLwogCURFQ0xBUkVfQklUTUFQKGV2ZW50X2JpdG1hcCwgRVROQV9OUl9FVkVOVFMpOwog
CXN0cnVjdCBldG5hdml2X2V2ZW50IGV2ZW50W0VUTkFfTlJfRVZFTlRTXTsKZGlmZiAtLWdpdCBh
L2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZfaW9tbXUuYyBiL2RyaXZlcnMvZ3B1L2Ry
bS9ldG5hdml2L2V0bmF2aXZfaW9tbXUuYwppbmRleCBhMmYxZmYxNTE4MjIuLmFhYzhkYmYzZWE1
NiAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9pb21tdS5jCisr
KyBiL2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZfaW9tbXUuYwpAQCAtOTMsMTEgKzkz
LDExIEBAIHN0YXRpYyB2b2lkIGV0bmF2aXZfaW9tbXV2MV9yZXN0b3JlKHN0cnVjdCBldG5hdml2
X2dwdSAqZ3B1LAogCXUzMiBwZ3RhYmxlOwogCiAJLyogc2V0IGJhc2UgYWRkcmVzc2VzICovCi0J
Z3B1X3dyaXRlKGdwdSwgVklWU19NQ19NRU1PUllfQkFTRV9BRERSX1JBLCBncHUtPm1lbW9yeV9i
YXNlKTsKLQlncHVfd3JpdGUoZ3B1LCBWSVZTX01DX01FTU9SWV9CQVNFX0FERFJfRkUsIGdwdS0+
bWVtb3J5X2Jhc2UpOwotCWdwdV93cml0ZShncHUsIFZJVlNfTUNfTUVNT1JZX0JBU0VfQUREUl9U
WCwgZ3B1LT5tZW1vcnlfYmFzZSk7Ci0JZ3B1X3dyaXRlKGdwdSwgVklWU19NQ19NRU1PUllfQkFT
RV9BRERSX1BFWiwgZ3B1LT5tZW1vcnlfYmFzZSk7Ci0JZ3B1X3dyaXRlKGdwdSwgVklWU19NQ19N
RU1PUllfQkFTRV9BRERSX1BFLCBncHUtPm1lbW9yeV9iYXNlKTsKKwlncHVfd3JpdGUoZ3B1LCBW
SVZTX01DX01FTU9SWV9CQVNFX0FERFJfUkEsIGNvbnRleHQtPmdsb2JhbC0+bWVtb3J5X2Jhc2Up
OworCWdwdV93cml0ZShncHUsIFZJVlNfTUNfTUVNT1JZX0JBU0VfQUREUl9GRSwgY29udGV4dC0+
Z2xvYmFsLT5tZW1vcnlfYmFzZSk7CisJZ3B1X3dyaXRlKGdwdSwgVklWU19NQ19NRU1PUllfQkFT
RV9BRERSX1RYLCBjb250ZXh0LT5nbG9iYWwtPm1lbW9yeV9iYXNlKTsKKwlncHVfd3JpdGUoZ3B1
LCBWSVZTX01DX01FTU9SWV9CQVNFX0FERFJfUEVaLCBjb250ZXh0LT5nbG9iYWwtPm1lbW9yeV9i
YXNlKTsKKwlncHVfd3JpdGUoZ3B1LCBWSVZTX01DX01FTU9SWV9CQVNFX0FERFJfUEUsIGNvbnRl
eHQtPmdsb2JhbC0+bWVtb3J5X2Jhc2UpOwogCiAJLyogc2V0IHBhZ2UgdGFibGUgYWRkcmVzcyBp
biBNQyAqLwogCXBndGFibGUgPSAodTMyKXYxX2NvbnRleHQtPnBndGFibGVfZG1hOwpkaWZmIC0t
Z2l0IGEvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9pb21tdV92Mi5jIGIvZHJpdmVy
cy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9pb21tdV92Mi5jCmluZGV4IDVjYTIwNzdjMTQ4ZC4u
MDQzMTExYTFkNjBjIDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2
X2lvbW11X3YyLmMKKysrIGIvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9pb21tdV92
Mi5jCkBAIC0yMDYsNyArMjA2LDcgQEAgc3RhdGljIHZvaWQgZXRuYXZpdl9pb21tdXYyX3Jlc3Rv
cmVfc2VjKHN0cnVjdCBldG5hdml2X2dwdSAqZ3B1LAogCQkgIFZJVlNfTU1VdjJfU0FGRV9BRERS
RVNTX0NPTkZJR19TRUNfU0FGRV9BRERSX0hJR0goCiAJCSAgdXBwZXJfMzJfYml0cyhjb250ZXh0
LT5nbG9iYWwtPmJhZF9wYWdlX2RtYSkpKTsKIAotCWNvbnRleHQtPmdsb2JhbC0+djIucHRhX2Nw
dVswXSA9IHYyX2NvbnRleHQtPm10bGJfZG1hIHwKKwljb250ZXh0LT5nbG9iYWwtPnYyLnB0YV9j
cHVbdjJfY29udGV4dC0+aWRdID0gdjJfY29udGV4dC0+bXRsYl9kbWEgfAogCQkJCSAJIFZJVlNf
TU1VdjJfQ09ORklHVVJBVElPTl9NT0RFX01PREU0X0s7CiAKIAkvKiB0cmlnZ2VyIGEgUFRBIGxv
YWQgdGhyb3VnaCB0aGUgRkUgKi8KQEAgLTIxOCw2ICsyMTgsMTkgQEAgc3RhdGljIHZvaWQgZXRu
YXZpdl9pb21tdXYyX3Jlc3RvcmVfc2VjKHN0cnVjdCBldG5hdml2X2dwdSAqZ3B1LAogCWdwdV93
cml0ZShncHUsIFZJVlNfTU1VdjJfU0VDX0NPTlRST0wsIFZJVlNfTU1VdjJfU0VDX0NPTlRST0xf
RU5BQkxFKTsKIH0KIAordTMyIGV0bmF2aXZfaW9tbXV2Ml9nZXRfbXRsYl9hZGRyKHN0cnVjdCBl
dG5hdml2X2lvbW11X2NvbnRleHQgKmNvbnRleHQpCit7CisJc3RydWN0IGV0bmF2aXZfaW9tbXV2
Ml9jb250ZXh0ICp2Ml9jb250ZXh0ID0gdG9fdjJfY29udGV4dChjb250ZXh0KTsKKworCXJldHVy
biB2Ml9jb250ZXh0LT5tdGxiX2RtYTsKK30KKwordW5zaWduZWQgc2hvcnQgZXRuYXZpdl9pb21t
dXYyX2dldF9wdGFfaWQoc3RydWN0IGV0bmF2aXZfaW9tbXVfY29udGV4dCAqY29udGV4dCkKK3sK
KwlzdHJ1Y3QgZXRuYXZpdl9pb21tdXYyX2NvbnRleHQgKnYyX2NvbnRleHQgPSB0b192Ml9jb250
ZXh0KGNvbnRleHQpOworCisJcmV0dXJuIHYyX2NvbnRleHQtPmlkOworfQogc3RhdGljIHZvaWQg
ZXRuYXZpdl9pb21tdXYyX3Jlc3RvcmUoc3RydWN0IGV0bmF2aXZfZ3B1ICpncHUsCiAJCQkJICAg
IHN0cnVjdCBldG5hdml2X2lvbW11X2NvbnRleHQgKmNvbnRleHQpCiB7CkBAIC0yNzIsNiArMjg1
LDggQEAgZXRuYXZpdl9pb21tdXYyX2NvbnRleHRfYWxsb2Moc3RydWN0IGV0bmF2aXZfaW9tbXVf
Z2xvYmFsICpnbG9iYWwpCiAJbWVtc2V0MzIodjJfY29udGV4dC0+bXRsYl9jcHUsIE1NVXYyX1BU
RV9FWENFUFRJT04sCiAJCSBNTVV2Ml9NQVhfU1RMQl9FTlRSSUVTKTsKIAorCWdsb2JhbC0+djIu
cHRhX2NwdVt2Ml9jb250ZXh0LT5pZF0gPSB2Ml9jb250ZXh0LT5tdGxiX2RtYTsKKwogCWNvbnRl
eHQgPSAmdjJfY29udGV4dC0+YmFzZTsKIAljb250ZXh0LT5nbG9iYWwgPSBnbG9iYWw7CiAJa3Jl
Zl9pbml0KCZjb250ZXh0LT5yZWZjb3VudCk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0v
ZXRuYXZpdi9ldG5hdml2X21tdS5jIGIvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9t
bXUuYwppbmRleCAyZjY0ZWVmNzczZWQuLjgyODIyZTMwYmYzMCAxMDA2NDQKLS0tIGEvZHJpdmVy
cy9ncHUvZHJtL2V0bmF2aXYvZXRuYXZpdl9tbXUuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vZXRu
YXZpdi9ldG5hdml2X21tdS5jCkBAIC0yOTAsNiArMjkwLDggQEAgc3RhdGljIHZvaWQgZXRuYXZp
dl9pb21tdV9jb250ZXh0X2ZyZWUoc3RydWN0IGtyZWYgKmtyZWYpCiAJc3RydWN0IGV0bmF2aXZf
aW9tbXVfY29udGV4dCAqY29udGV4dCA9CiAJCWNvbnRhaW5lcl9vZihrcmVmLCBzdHJ1Y3QgZXRu
YXZpdl9pb21tdV9jb250ZXh0LCByZWZjb3VudCk7CiAKKwlldG5hdml2X2NtZGJ1Zl9zdWJhbGxv
Y191bm1hcChjb250ZXh0LCAmY29udGV4dC0+Y21kYnVmX21hcHBpbmcpOworCiAJY29udGV4dC0+
Z2xvYmFsLT5vcHMtPmZyZWUoY29udGV4dCk7CiB9CiB2b2lkIGV0bmF2aXZfaW9tbXVfY29udGV4
dF9wdXQoc3RydWN0IGV0bmF2aXZfaW9tbXVfY29udGV4dCAqY29udGV4dCkKQEAgLTI5OCwxMiAr
MzAwLDI4IEBAIHZvaWQgZXRuYXZpdl9pb21tdV9jb250ZXh0X3B1dChzdHJ1Y3QgZXRuYXZpdl9p
b21tdV9jb250ZXh0ICpjb250ZXh0KQogfQogCiBzdHJ1Y3QgZXRuYXZpdl9pb21tdV9jb250ZXh0
ICoKLWV0bmF2aXZfaW9tbXVfY29udGV4dF9pbml0KHN0cnVjdCBldG5hdml2X2lvbW11X2dsb2Jh
bCAqZ2xvYmFsKQorZXRuYXZpdl9pb21tdV9jb250ZXh0X2luaXQoc3RydWN0IGV0bmF2aXZfaW9t
bXVfZ2xvYmFsICpnbG9iYWwsCisJCQkgICBzdHJ1Y3QgZXRuYXZpdl9jbWRidWZfc3ViYWxsb2Mg
KnN1YmFsbG9jKQogeworCXN0cnVjdCBldG5hdml2X2lvbW11X2NvbnRleHQgKmN0eDsKKwlpbnQg
cmV0OworCiAJaWYgKGdsb2JhbC0+dmVyc2lvbiA9PSBFVE5BVklWX0lPTU1VX1YxKQotCQlyZXR1
cm4gZXRuYXZpdl9pb21tdXYxX2NvbnRleHRfYWxsb2MoZ2xvYmFsKTsKKwkJY3R4ID0gZXRuYXZp
dl9pb21tdXYxX2NvbnRleHRfYWxsb2MoZ2xvYmFsKTsKIAllbHNlCi0JCXJldHVybiBldG5hdml2
X2lvbW11djJfY29udGV4dF9hbGxvYyhnbG9iYWwpOworCQljdHggPSBldG5hdml2X2lvbW11djJf
Y29udGV4dF9hbGxvYyhnbG9iYWwpOworCisJaWYgKCFjdHgpCisJCXJldHVybiBOVUxMOworCisJ
cmV0ID0gZXRuYXZpdl9jbWRidWZfc3ViYWxsb2NfbWFwKHN1YmFsbG9jLCBjdHgsICZjdHgtPmNt
ZGJ1Zl9tYXBwaW5nLAorCQkJCQkgIGdsb2JhbC0+bWVtb3J5X2Jhc2UpOworCWlmIChyZXQpIHsK
KwkJZ2xvYmFsLT5vcHMtPmZyZWUoY3R4KTsKKwkJcmV0dXJuIE5VTEw7CisJfQorCisJcmV0dXJu
IGN0eDsKIH0KIAogdm9pZCBldG5hdml2X2lvbW11X3Jlc3RvcmUoc3RydWN0IGV0bmF2aXZfZ3B1
ICpncHUsCkBAIC0zMTksNiArMzM3LDEyIEBAIGludCBldG5hdml2X2lvbW11X2dldF9zdWJhbGxv
Y192YShzdHJ1Y3QgZXRuYXZpdl9pb21tdV9jb250ZXh0ICpjb250ZXh0LAogewogCW11dGV4X2xv
Y2soJmNvbnRleHQtPmxvY2spOwogCisJaWYgKG1hcHBpbmctPnVzZSA+IDApIHsKKwkJbWFwcGlu
Zy0+dXNlKys7CisJCW11dGV4X3VubG9jaygmY29udGV4dC0+bG9jayk7CisJCXJldHVybiAwOwor
CX0KKwogCS8qCiAJICogRm9yIE1NVXYxIHdlIGRvbid0IGFkZCB0aGUgc3ViYWxsb2MgcmVnaW9u
IHRvIHRoZSBwYWdldGFibGVzLCBhcwogCSAqIHRob3NlIEdQVXMgY2FuIG9ubHkgd29yayB3aXRo
IGNtZGJ1ZnMgYWNjZXNzZWQgdGhyb3VnaCB0aGUgbGluZWFyCkBAIC0zNDAsNyArMzY0LDYgQEAg
aW50IGV0bmF2aXZfaW9tbXVfZ2V0X3N1YmFsbG9jX3ZhKHN0cnVjdCBldG5hdml2X2lvbW11X2Nv
bnRleHQgKmNvbnRleHQsCiAJCW1hcHBpbmctPmlvdmEgPSBub2RlLT5zdGFydDsKIAkJcmV0ID0g
ZXRuYXZpdl9jb250ZXh0X21hcChjb250ZXh0LCBub2RlLT5zdGFydCwgcGFkZHIsIHNpemUsCiAJ
CQkJCSAgRVROQVZJVl9QUk9UX1JFQUQpOwotCiAJCWlmIChyZXQgPCAwKSB7CiAJCQlkcm1fbW1f
cmVtb3ZlX25vZGUobm9kZSk7CiAJCQltdXRleF91bmxvY2soJmNvbnRleHQtPmxvY2spOwpAQCAt
MzYzLDE1ICszODYsMTQgQEAgdm9pZCBldG5hdml2X2lvbW11X3B1dF9zdWJhbGxvY192YShzdHJ1
Y3QgZXRuYXZpdl9pb21tdV9jb250ZXh0ICpjb250ZXh0LAogewogCXN0cnVjdCBkcm1fbW1fbm9k
ZSAqbm9kZSA9ICZtYXBwaW5nLT52cmFtX25vZGU7CiAKLQlpZiAoIW1hcHBpbmctPnVzZSkKLQkJ
cmV0dXJuOwotCi0JbWFwcGluZy0+dXNlID0gMDsKKwltdXRleF9sb2NrKCZjb250ZXh0LT5sb2Nr
KTsKKwltYXBwaW5nLT51c2UtLTsKIAotCWlmIChjb250ZXh0LT5nbG9iYWwtPnZlcnNpb24gPT0g
RVROQVZJVl9JT01NVV9WMSkKKwlpZiAobWFwcGluZy0+dXNlID4gMCB8fCBjb250ZXh0LT5nbG9i
YWwtPnZlcnNpb24gPT0gRVROQVZJVl9JT01NVV9WMSkgeworCQltdXRleF91bmxvY2soJmNvbnRl
eHQtPmxvY2spOwogCQlyZXR1cm47CisJfQogCi0JbXV0ZXhfbG9jaygmY29udGV4dC0+bG9jayk7
CiAJZXRuYXZpdl9jb250ZXh0X3VubWFwKGNvbnRleHQsIG5vZGUtPnN0YXJ0LCBub2RlLT5zaXpl
KTsKIAlkcm1fbW1fcmVtb3ZlX25vZGUobm9kZSk7CiAJbXV0ZXhfdW5sb2NrKCZjb250ZXh0LT5s
b2NrKTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZfbW11Lmgg
Yi9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X21tdS5oCmluZGV4IDQ0MzhkNjZkYjZh
Yi4uYzAxNDkxYTZjNGQ4IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5h
dml2X21tdS5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZfbW11LmgKQEAg
LTQ3LDYgKzQ3LDggQEAgc3RydWN0IGV0bmF2aXZfaW9tbXVfZ2xvYmFsIHsKIAl2b2lkICpiYWRf
cGFnZV9jcHU7CiAJZG1hX2FkZHJfdCBiYWRfcGFnZV9kbWE7CiAKKwl1MzIgbWVtb3J5X2Jhc2U7
CisKIAkvKgogCSAqIFRoaXMgdW5pb24gaG9sZHMgbWVtYmVycyBuZWVkZWQgYnkgZWl0aGVyIE1N
VXYxIG9yIE1NVXYyLCB3aGljaAogCSAqIGNhbiBub3QgZXhpc3QgYXQgdGhlIHNhbWUgdGltZS4K
QEAgLTc0LDYgKzc2LDkgQEAgc3RydWN0IGV0bmF2aXZfaW9tbXVfY29udGV4dCB7CiAJc3RydWN0
IGxpc3RfaGVhZCBtYXBwaW5nczsKIAlzdHJ1Y3QgZHJtX21tIG1tOwogCXVuc2lnbmVkIGludCBm
bHVzaF9zZXE7CisKKwkvKiBOb3QgcGFydCBvZiB0aGUgY29udGV4dCwgYnV0IG5lZWRzIHRvIGhh
dmUgdGhlIHNhbWUgbGlmZXRpbWUgKi8KKwlzdHJ1Y3QgZXRuYXZpdl92cmFtX21hcHBpbmcgY21k
YnVmX21hcHBpbmc7CiB9OwogCiBpbnQgZXRuYXZpdl9pb21tdV9nbG9iYWxfaW5pdChzdHJ1Y3Qg
ZXRuYXZpdl9ncHUgKmdwdSk7CkBAIC05OCw3ICsxMDMsOCBAQCBzaXplX3QgZXRuYXZpdl9pb21t
dV9kdW1wX3NpemUoc3RydWN0IGV0bmF2aXZfaW9tbXVfY29udGV4dCAqY3R4KTsKIHZvaWQgZXRu
YXZpdl9pb21tdV9kdW1wKHN0cnVjdCBldG5hdml2X2lvbW11X2NvbnRleHQgKmN0eCwgdm9pZCAq
YnVmKTsKIAogc3RydWN0IGV0bmF2aXZfaW9tbXVfY29udGV4dCAqCi1ldG5hdml2X2lvbW11X2Nv
bnRleHRfaW5pdChzdHJ1Y3QgZXRuYXZpdl9pb21tdV9nbG9iYWwgKmdsb2JhbCk7CitldG5hdml2
X2lvbW11X2NvbnRleHRfaW5pdChzdHJ1Y3QgZXRuYXZpdl9pb21tdV9nbG9iYWwgKmdsb2JhbCwK
KwkJCSAgIHN0cnVjdCBldG5hdml2X2NtZGJ1Zl9zdWJhbGxvYyAqc3ViYWxsb2MpOwogc3RhdGlj
IGlubGluZSB2b2lkIGV0bmF2aXZfaW9tbXVfY29udGV4dF9nZXQoc3RydWN0IGV0bmF2aXZfaW9t
bXVfY29udGV4dCAqY3R4KQogewogCWtyZWZfZ2V0KCZjdHgtPnJlZmNvdW50KTsKQEAgLTExMiw0
ICsxMTgsNyBAQCBldG5hdml2X2lvbW11djFfY29udGV4dF9hbGxvYyhzdHJ1Y3QgZXRuYXZpdl9p
b21tdV9nbG9iYWwgKmdsb2JhbCk7CiBzdHJ1Y3QgZXRuYXZpdl9pb21tdV9jb250ZXh0ICoKIGV0
bmF2aXZfaW9tbXV2Ml9jb250ZXh0X2FsbG9jKHN0cnVjdCBldG5hdml2X2lvbW11X2dsb2JhbCAq
Z2xvYmFsKTsKIAordTMyIGV0bmF2aXZfaW9tbXV2Ml9nZXRfbXRsYl9hZGRyKHN0cnVjdCBldG5h
dml2X2lvbW11X2NvbnRleHQgKmNvbnRleHQpOwordW5zaWduZWQgc2hvcnQgZXRuYXZpdl9pb21t
dXYyX2dldF9wdGFfaWQoc3RydWN0IGV0bmF2aXZfaW9tbXVfY29udGV4dCAqY29udGV4dCk7CisK
ICNlbmRpZiAvKiBfX0VUTkFWSVZfTU1VX0hfXyAqLwotLSAKMi4yMC4xCgpfX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkcmktZGV2ZWwgbWFpbGluZyBsaXN0
CmRyaS1kZXZlbEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3Rv
cC5vcmcvbWFpbG1hbi9saXN0aW5mby9kcmktZGV2ZWw=
