Return-Path: <dri-devel-bounces@lists.freedesktop.org>
X-Original-To: lists+dri-devel@lfdr.de
Delivered-To: lists+dri-devel@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 3D576B8C9D
	for <lists+dri-devel@lfdr.de>; Fri, 20 Sep 2019 10:23:23 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id A9DBD6E824;
	Fri, 20 Sep 2019 08:23:20 +0000 (UTC)
X-Original-To: dri-devel@lists.freedesktop.org
Delivered-To: dri-devel@lists.freedesktop.org
Received: from mx1.redhat.com (mx1.redhat.com [209.132.183.28])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 1D8B96E824;
 Fri, 20 Sep 2019 08:23:20 +0000 (UTC)
Received: from smtp.corp.redhat.com (int-mx07.intmail.prod.int.phx2.redhat.com
 [10.5.11.22])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mx1.redhat.com (Postfix) with ESMTPS id 5555444BD7;
 Fri, 20 Sep 2019 08:23:19 +0000 (UTC)
Received: from jason-ThinkPad-X1-Carbon-6th.redhat.com
 (ovpn-12-88.pek2.redhat.com [10.72.12.88])
 by smtp.corp.redhat.com (Postfix) with ESMTP id DE83010027AA;
 Fri, 20 Sep 2019 08:22:33 +0000 (UTC)
From: Jason Wang <jasowang@redhat.com>
To: kvm@vger.kernel.org, linux-s390@vger.kernel.org,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 intel-gfx@lists.freedesktop.org, intel-gvt-dev@lists.freedesktop.org,
 kwankhede@nvidia.com, alex.williamson@redhat.com, mst@redhat.com,
 tiwei.bie@intel.com
Subject: [RFC PATCH V2 2/6] mdev: introduce device specific ops
Date: Fri, 20 Sep 2019 16:20:46 +0800
Message-Id: <20190920082050.19352-3-jasowang@redhat.com>
In-Reply-To: <20190920082050.19352-1-jasowang@redhat.com>
References: <20190920082050.19352-1-jasowang@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
 (mx1.redhat.com [10.5.110.30]); Fri, 20 Sep 2019 08:23:19 +0000 (UTC)
X-BeenThere: dri-devel@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Direct Rendering Infrastructure - Development
 <dri-devel.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/dri-devel>
List-Post: <mailto:dri-devel@lists.freedesktop.org>
List-Help: <mailto:dri-devel-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/dri-devel>,
 <mailto:dri-devel-request@lists.freedesktop.org?subject=subscribe>
Cc: sebott@linux.ibm.com, airlied@linux.ie, Jason Wang <jasowang@redhat.com>,
 heiko.carstens@de.ibm.com, virtualization@lists.linux-foundation.org,
 rob.miller@broadcom.com, lulu@redhat.com, eperezma@redhat.com,
 pasic@linux.ibm.com, borntraeger@de.ibm.com, haotian.wang@sifive.com,
 zhi.a.wang@intel.com, farman@linux.ibm.com, idos@mellanox.com,
 gor@linux.ibm.com, cunming.liang@intel.com, rodrigo.vivi@intel.com,
 xiao.w.wang@intel.com, freude@linux.ibm.com, zhihong.wang@intel.com,
 akrowiak@linux.ibm.com, pmorel@linux.ibm.com, netdev@vger.kernel.org,
 cohuck@redhat.com, oberpar@linux.ibm.com, maxime.coquelin@redhat.com,
 lingshan.zhu@intel.com
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: dri-devel-bounces@lists.freedesktop.org
Sender: "dri-devel" <dri-devel-bounces@lists.freedesktop.org>

Q3VycmVudGx5LCBleGNlcHQgZm9yIHRoZSBjcmF0ZSBhbmQgcmVtb3ZlLiBUaGUgcmVzdCBmaWVs
ZHMgb2YKbWRldl9wYXJlbnRfb3BzIGlzIGp1c3QgZGVzaWduZWQgZm9yIHZmaW8tbWRldiBkcml2
ZXIgYW5kIG1heSBub3QgaGVscApmb3Iga2VybmVsIG1kZXYgZHJpdmVyLiBTbyBmb2xsb3cgdGhl
IGRldmljZSBpZCBzdXBwb3J0IGJ5IHByZXZpb3VzCnBhdGNoLCB0aGlzIHBhdGNoIGludHJvZHVj
ZXMgZGV2aWNlIHNwZWNpZmljIG9wcyB3aGljaCBwb2ludHMgdG8KZGV2aWNlIHNwZWNpZmljIG9w
cyAoZS5nIHZmaW8gb3BzKS4gVGhpcyBhbGxvd3MgdGhlIGZ1dHVyZSBkcml2ZXJzCmxpa2Ugdmly
dGlvLW1kZXYgdG8gaW1wbGVtZW50IGl0cyBvd24gZGV2aWNlIHNwZWNpZmljIG9wcy4KClNpZ25l
ZC1vZmYtYnk6IEphc29uIFdhbmcgPGphc293YW5nQHJlZGhhdC5jb20+Ci0tLQogLi4uL2RyaXZl
ci1hcGkvdmZpby1tZWRpYXRlZC1kZXZpY2UucnN0ICAgICAgIHwgIDQgKy0KIGRyaXZlcnMvZ3B1
L2RybS9pOTE1L2d2dC9rdm1ndC5jICAgICAgICAgICAgICB8IDE1ICsrKy0tLQogZHJpdmVycy9z
MzkwL2Npby92ZmlvX2Njd19vcHMuYyAgICAgICAgICAgICAgIHwgMTUgKysrKy0tCiBkcml2ZXJz
L3MzOTAvY3J5cHRvL3ZmaW9fYXBfb3BzLmMgICAgICAgICAgICAgfCAxMSArKy0tCiBkcml2ZXJz
L3ZmaW8vbWRldi92ZmlvX21kZXYuYyAgICAgICAgICAgICAgICAgfCAzMSArKysrKysrLS0tLS0K
IGluY2x1ZGUvbGludXgvbWRldi5oICAgICAgICAgICAgICAgICAgICAgICAgICB8IDM5ICsrLS0t
LS0tLS0tLS0tLQogaW5jbHVkZS9saW51eC92ZmlvX21kZXYuaCAgICAgICAgICAgICAgICAgICAg
IHwgNTAgKysrKysrKysrKysrKysrKysrKwogc2FtcGxlcy92ZmlvLW1kZXYvbWJvY2hzLmMgICAg
ICAgICAgICAgICAgICAgIHwgMTcgKysrKy0tLQogc2FtcGxlcy92ZmlvLW1kZXYvbWRweS5jICAg
ICAgICAgICAgICAgICAgICAgIHwgMTcgKysrKy0tLQogc2FtcGxlcy92ZmlvLW1kZXYvbXR0eS5j
ICAgICAgICAgICAgICAgICAgICAgIHwgMTUgKysrKy0tCiAxMCBmaWxlcyBjaGFuZ2VkLCAxMzYg
aW5zZXJ0aW9ucygrKSwgNzggZGVsZXRpb25zKC0pCiBjcmVhdGUgbW9kZSAxMDA2NDQgaW5jbHVk
ZS9saW51eC92ZmlvX21kZXYuaAoKZGlmZiAtLWdpdCBhL0RvY3VtZW50YXRpb24vZHJpdmVyLWFw
aS92ZmlvLW1lZGlhdGVkLWRldmljZS5yc3QgYi9Eb2N1bWVudGF0aW9uL2RyaXZlci1hcGkvdmZp
by1tZWRpYXRlZC1kZXZpY2UucnN0CmluZGV4IDBkNmU4NTE1NWI5Yi4uZjQ4NDU0YmI2MGI5IDEw
MDY0NAotLS0gYS9Eb2N1bWVudGF0aW9uL2RyaXZlci1hcGkvdmZpby1tZWRpYXRlZC1kZXZpY2Uu
cnN0CisrKyBiL0RvY3VtZW50YXRpb24vZHJpdmVyLWFwaS92ZmlvLW1lZGlhdGVkLWRldmljZS5y
c3QKQEAgLTE1Miw3ICsxNTIsOSBAQCBjYWxsYmFja3MgcGVyIG1kZXYgcGFyZW50IGRldmljZSwg
cGVyIG1kZXYgdHlwZSwgb3IgYW55IG90aGVyIGNhdGVnb3JpemF0aW9uLgogVmVuZG9yIGRyaXZl
cnMgYXJlIGV4cGVjdGVkIHRvIGJlIGZ1bGx5IGFzeW5jaHJvbm91cyBpbiB0aGlzIHJlc3BlY3Qg
b3IKIHByb3ZpZGUgdGhlaXIgb3duIGludGVybmFsIHJlc291cmNlIHByb3RlY3Rpb24uKQogCi1U
aGUgY2FsbGJhY2tzIGluIHRoZSBtZGV2X3BhcmVudF9vcHMgc3RydWN0dXJlIGFyZSBhcyBmb2xs
b3dzOgorVGhlIGRldmljZSBzcGVjaWZpYyBjYWxsYmFja3MgYXJlIHJlZmVycmVkIHRocm91Z2gg
ZGV2aWNlX29wcyBwb2ludGVyCitpbiBtZGV2X3BhcmVudF9vcHMuIEZvciB2ZmlvLW1kZXYgZGV2
aWNlLCBpdHMgY2FsbGJhY2tzIGluIGRldmljZV9vcHMKK2FyZSBhcyBmb2xsb3dzOgogCiAqIG9w
ZW46IG9wZW4gY2FsbGJhY2sgb2YgbWVkaWF0ZWQgZGV2aWNlCiAqIGNsb3NlOiBjbG9zZSBjYWxs
YmFjayBvZiBtZWRpYXRlZCBkZXZpY2UKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1
L2d2dC9rdm1ndC5jIGIvZHJpdmVycy9ncHUvZHJtL2k5MTUvZ3Z0L2t2bWd0LmMKaW5kZXggMTlk
NTFhMzVmMDE5Li44ZWE4NmIxZTY5ZjEgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9pOTE1
L2d2dC9rdm1ndC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9pOTE1L2d2dC9rdm1ndC5jCkBAIC00
Miw2ICs0Miw3IEBACiAjaW5jbHVkZSA8bGludXgva3ZtX2hvc3QuaD4KICNpbmNsdWRlIDxsaW51
eC92ZmlvLmg+CiAjaW5jbHVkZSA8bGludXgvbWRldi5oPgorI2luY2x1ZGUgPGxpbnV4L3ZmaW9f
bWRldi5oPgogI2luY2x1ZGUgPGxpbnV4L2RlYnVnZnMuaD4KIAogI2luY2x1ZGUgPGxpbnV4L25v
c3BlYy5oPgpAQCAtMTYwMCwyMCArMTYwMSwyMiBAQCBzdGF0aWMgY29uc3Qgc3RydWN0IGF0dHJp
YnV0ZV9ncm91cCAqaW50ZWxfdmdwdV9ncm91cHNbXSA9IHsKIAlOVUxMLAogfTsKIAotc3RhdGlj
IHN0cnVjdCBtZGV2X3BhcmVudF9vcHMgaW50ZWxfdmdwdV9vcHMgPSB7Ci0JLm1kZXZfYXR0cl9n
cm91cHMgICAgICAgPSBpbnRlbF92Z3B1X2dyb3VwcywKLQkuY3JlYXRlCQkJPSBpbnRlbF92Z3B1
X2NyZWF0ZSwKLQkucmVtb3ZlCQkJPSBpbnRlbF92Z3B1X3JlbW92ZSwKLQorc3RhdGljIHN0cnVj
dCB2ZmlvX21kZXZfcGFyZW50X29wcyBpbnRlbF92ZmlvX3ZncHVfb3BzID0gewogCS5vcGVuCQkJ
PSBpbnRlbF92Z3B1X29wZW4sCiAJLnJlbGVhc2UJCT0gaW50ZWxfdmdwdV9yZWxlYXNlLAotCiAJ
LnJlYWQJCQk9IGludGVsX3ZncHVfcmVhZCwKIAkud3JpdGUJCQk9IGludGVsX3ZncHVfd3JpdGUs
CiAJLm1tYXAJCQk9IGludGVsX3ZncHVfbW1hcCwKIAkuaW9jdGwJCQk9IGludGVsX3ZncHVfaW9j
dGwsCiB9OwogCitzdGF0aWMgc3RydWN0IG1kZXZfcGFyZW50X29wcyBpbnRlbF92Z3B1X29wcyA9
IHsKKwkubWRldl9hdHRyX2dyb3VwcyAgICAgICA9IGludGVsX3ZncHVfZ3JvdXBzLAorCS5jcmVh
dGUJCQk9IGludGVsX3ZncHVfY3JlYXRlLAorCS5yZW1vdmUJCQk9IGludGVsX3ZncHVfcmVtb3Zl
LAorCS5kZXZpY2Vfb3BzCSAgICAgICAgPSAmaW50ZWxfdmZpb192Z3B1X29wcywKK307CisKIHN0
YXRpYyBpbnQga3ZtZ3RfaG9zdF9pbml0KHN0cnVjdCBkZXZpY2UgKmRldiwgdm9pZCAqZ3Z0LCBj
b25zdCB2b2lkICpvcHMpCiB7CiAJc3RydWN0IGF0dHJpYnV0ZSAqKmt2bV90eXBlX2F0dHJzOwpk
aWZmIC0tZ2l0IGEvZHJpdmVycy9zMzkwL2Npby92ZmlvX2Njd19vcHMuYyBiL2RyaXZlcnMvczM5
MC9jaW8vdmZpb19jY3dfb3BzLmMKaW5kZXggZjg3ZDk0MDllMjkwLi5lMDEyNDdjYzYxYjggMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvczM5MC9jaW8vdmZpb19jY3dfb3BzLmMKKysrIGIvZHJpdmVycy9z
MzkwL2Npby92ZmlvX2Njd19vcHMuYwpAQCAtMTIsNiArMTIsNyBAQAogCiAjaW5jbHVkZSA8bGlu
dXgvdmZpby5oPgogI2luY2x1ZGUgPGxpbnV4L21kZXYuaD4KKyNpbmNsdWRlIDxsaW51eC92Zmlv
X21kZXYuaD4KICNpbmNsdWRlIDxsaW51eC9ub3NwZWMuaD4KICNpbmNsdWRlIDxsaW51eC9zbGFi
Lmg+CiAKQEAgLTU2NCwxMSArNTY1LDcgQEAgc3RhdGljIHNzaXplX3QgdmZpb19jY3dfbWRldl9p
b2N0bChzdHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYsCiAJfQogfQogCi1zdGF0aWMgY29uc3Qgc3Ry
dWN0IG1kZXZfcGFyZW50X29wcyB2ZmlvX2Njd19tZGV2X29wcyA9IHsKLQkub3duZXIJCQk9IFRI
SVNfTU9EVUxFLAotCS5zdXBwb3J0ZWRfdHlwZV9ncm91cHMgID0gbWRldl90eXBlX2dyb3VwcywK
LQkuY3JlYXRlCQkJPSB2ZmlvX2Njd19tZGV2X2NyZWF0ZSwKLQkucmVtb3ZlCQkJPSB2ZmlvX2Nj
d19tZGV2X3JlbW92ZSwKK3N0YXRpYyBjb25zdCBzdHJ1Y3QgdmZpb19tZGV2X3BhcmVudF9vcHMg
dmZpb19tZGV2X29wcyA9IHsKIAkub3BlbgkJCT0gdmZpb19jY3dfbWRldl9vcGVuLAogCS5yZWxl
YXNlCQk9IHZmaW9fY2N3X21kZXZfcmVsZWFzZSwKIAkucmVhZAkJCT0gdmZpb19jY3dfbWRldl9y
ZWFkLApAQCAtNTc2LDYgKzU3MywxNCBAQCBzdGF0aWMgY29uc3Qgc3RydWN0IG1kZXZfcGFyZW50
X29wcyB2ZmlvX2Njd19tZGV2X29wcyA9IHsKIAkuaW9jdGwJCQk9IHZmaW9fY2N3X21kZXZfaW9j
dGwsCiB9OwogCitzdGF0aWMgY29uc3Qgc3RydWN0IG1kZXZfcGFyZW50X29wcyB2ZmlvX2Njd19t
ZGV2X29wcyA9IHsKKwkub3duZXIJCQk9IFRISVNfTU9EVUxFLAorCS5zdXBwb3J0ZWRfdHlwZV9n
cm91cHMgID0gbWRldl90eXBlX2dyb3VwcywKKwkuY3JlYXRlCQkJPSB2ZmlvX2Njd19tZGV2X2Ny
ZWF0ZSwKKwkucmVtb3ZlCQkJPSB2ZmlvX2Njd19tZGV2X3JlbW92ZSwKKwkuZGV2aWNlX29wcwkJ
PSAmdmZpb19tZGV2X29wcywKK307CisKIGludCB2ZmlvX2Njd19tZGV2X3JlZyhzdHJ1Y3Qgc3Vi
Y2hhbm5lbCAqc2NoKQogewogCXJldHVybiBtZGV2X3JlZ2lzdGVyX3ZmaW9fZGV2aWNlKCZzY2gt
PmRldiwgJnZmaW9fY2N3X21kZXZfb3BzKTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvczM5MC9jcnlw
dG8vdmZpb19hcF9vcHMuYyBiL2RyaXZlcnMvczM5MC9jcnlwdG8vdmZpb19hcF9vcHMuYwppbmRl
eCBlYWNiZGUzYzdhOTcuLjY4NWVjNTk0NmM3YiAxMDA2NDQKLS0tIGEvZHJpdmVycy9zMzkwL2Ny
eXB0by92ZmlvX2FwX29wcy5jCisrKyBiL2RyaXZlcnMvczM5MC9jcnlwdG8vdmZpb19hcF9vcHMu
YwpAQCAtMTYsNiArMTYsNyBAQAogI2luY2x1ZGUgPGxpbnV4L2JpdG9wcy5oPgogI2luY2x1ZGUg
PGxpbnV4L2t2bV9ob3N0Lmg+CiAjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+CisjaW5jbHVkZSA8
bGludXgvdmZpb19tZGV2Lmg+CiAjaW5jbHVkZSA8YXNtL2t2bS5oPgogI2luY2x1ZGUgPGFzbS96
Y3J5cHQuaD4KIApAQCAtMTI4MCwxNSArMTI4MSwxOSBAQCBzdGF0aWMgc3NpemVfdCB2ZmlvX2Fw
X21kZXZfaW9jdGwoc3RydWN0IG1kZXZfZGV2aWNlICptZGV2LAogCXJldHVybiByZXQ7CiB9CiAK
K3N0YXRpYyBjb25zdCBzdHJ1Y3QgdmZpb19tZGV2X3BhcmVudF9vcHMgdmZpb19tZGV2X29wcyA9
IHsKKwkub3BlbgkJCT0gdmZpb19hcF9tZGV2X29wZW4sCisJLnJlbGVhc2UJCT0gdmZpb19hcF9t
ZGV2X3JlbGVhc2UsCisJLmlvY3RsCQkJPSB2ZmlvX2FwX21kZXZfaW9jdGwsCit9OworCiBzdGF0
aWMgY29uc3Qgc3RydWN0IG1kZXZfcGFyZW50X29wcyB2ZmlvX2FwX21hdHJpeF9vcHMgPSB7CiAJ
Lm93bmVyCQkJPSBUSElTX01PRFVMRSwKIAkuc3VwcG9ydGVkX3R5cGVfZ3JvdXBzCT0gdmZpb19h
cF9tZGV2X3R5cGVfZ3JvdXBzLAogCS5tZGV2X2F0dHJfZ3JvdXBzCT0gdmZpb19hcF9tZGV2X2F0
dHJfZ3JvdXBzLAogCS5jcmVhdGUJCQk9IHZmaW9fYXBfbWRldl9jcmVhdGUsCiAJLnJlbW92ZQkJ
CT0gdmZpb19hcF9tZGV2X3JlbW92ZSwKLQkub3BlbgkJCT0gdmZpb19hcF9tZGV2X29wZW4sCi0J
LnJlbGVhc2UJCT0gdmZpb19hcF9tZGV2X3JlbGVhc2UsCi0JLmlvY3RsCQkJPSB2ZmlvX2FwX21k
ZXZfaW9jdGwsCisJLmRldmljZV9vcHMJCT0gJnZmaW9fbWRldl9vcHMsCiB9OwogCiBpbnQgdmZp
b19hcF9tZGV2X3JlZ2lzdGVyKHZvaWQpCmRpZmYgLS1naXQgYS9kcml2ZXJzL3ZmaW8vbWRldi92
ZmlvX21kZXYuYyBiL2RyaXZlcnMvdmZpby9tZGV2L3ZmaW9fbWRldi5jCmluZGV4IGZkMmE0ZDlh
M2YyNi4uZDIzYzlmNThjODRmIDEwMDY0NAotLS0gYS9kcml2ZXJzL3ZmaW8vbWRldi92ZmlvX21k
ZXYuYworKysgYi9kcml2ZXJzL3ZmaW8vbWRldi92ZmlvX21kZXYuYwpAQCAtMTQsNiArMTQsNyBA
QAogI2luY2x1ZGUgPGxpbnV4L3NsYWIuaD4KICNpbmNsdWRlIDxsaW51eC92ZmlvLmg+CiAjaW5j
bHVkZSA8bGludXgvbWRldi5oPgorI2luY2x1ZGUgPGxpbnV4L3ZmaW9fbWRldi5oPgogCiAjaW5j
bHVkZSAibWRldl9wcml2YXRlLmgiCiAKQEAgLTI1LDE1ICsyNiwxNiBAQCBzdGF0aWMgaW50IHZm
aW9fbWRldl9vcGVuKHZvaWQgKmRldmljZV9kYXRhKQogewogCXN0cnVjdCBtZGV2X2RldmljZSAq
bWRldiA9IGRldmljZV9kYXRhOwogCXN0cnVjdCBtZGV2X3BhcmVudCAqcGFyZW50ID0gbWRldi0+
cGFyZW50OworCWNvbnN0IHN0cnVjdCB2ZmlvX21kZXZfcGFyZW50X29wcyAqb3BzID0gcGFyZW50
LT5vcHMtPmRldmljZV9vcHM7CiAJaW50IHJldDsKIAotCWlmICh1bmxpa2VseSghcGFyZW50LT5v
cHMtPm9wZW4pKQorCWlmICh1bmxpa2VseSghb3BzLT5vcGVuKSkKIAkJcmV0dXJuIC1FSU5WQUw7
CiAKIAlpZiAoIXRyeV9tb2R1bGVfZ2V0KFRISVNfTU9EVUxFKSkKIAkJcmV0dXJuIC1FTk9ERVY7
CiAKLQlyZXQgPSBwYXJlbnQtPm9wcy0+b3BlbihtZGV2KTsKKwlyZXQgPSBvcHMtPm9wZW4obWRl
dik7CiAJaWYgKHJldCkKIAkJbW9kdWxlX3B1dChUSElTX01PRFVMRSk7CiAKQEAgLTQ0LDkgKzQ2
LDEwIEBAIHN0YXRpYyB2b2lkIHZmaW9fbWRldl9yZWxlYXNlKHZvaWQgKmRldmljZV9kYXRhKQog
ewogCXN0cnVjdCBtZGV2X2RldmljZSAqbWRldiA9IGRldmljZV9kYXRhOwogCXN0cnVjdCBtZGV2
X3BhcmVudCAqcGFyZW50ID0gbWRldi0+cGFyZW50OworCWNvbnN0IHN0cnVjdCB2ZmlvX21kZXZf
cGFyZW50X29wcyAqb3BzID0gcGFyZW50LT5vcHMtPmRldmljZV9vcHM7CiAKLQlpZiAobGlrZWx5
KHBhcmVudC0+b3BzLT5yZWxlYXNlKSkKLQkJcGFyZW50LT5vcHMtPnJlbGVhc2UobWRldik7CisJ
aWYgKGxpa2VseShvcHMtPnJlbGVhc2UpKQorCQlvcHMtPnJlbGVhc2UobWRldik7CiAKIAltb2R1
bGVfcHV0KFRISVNfTU9EVUxFKTsKIH0KQEAgLTU2LDExICs1OSwxMiBAQCBzdGF0aWMgbG9uZyB2
ZmlvX21kZXZfdW5sb2NrZWRfaW9jdGwodm9pZCAqZGV2aWNlX2RhdGEsCiB7CiAJc3RydWN0IG1k
ZXZfZGV2aWNlICptZGV2ID0gZGV2aWNlX2RhdGE7CiAJc3RydWN0IG1kZXZfcGFyZW50ICpwYXJl
bnQgPSBtZGV2LT5wYXJlbnQ7CisJY29uc3Qgc3RydWN0IHZmaW9fbWRldl9wYXJlbnRfb3BzICpv
cHMgPSBwYXJlbnQtPm9wcy0+ZGV2aWNlX29wczsKIAotCWlmICh1bmxpa2VseSghcGFyZW50LT5v
cHMtPmlvY3RsKSkKKwlpZiAodW5saWtlbHkoIW9wcy0+aW9jdGwpKQogCQlyZXR1cm4gLUVJTlZB
TDsKIAotCXJldHVybiBwYXJlbnQtPm9wcy0+aW9jdGwobWRldiwgY21kLCBhcmcpOworCXJldHVy
biBvcHMtPmlvY3RsKG1kZXYsIGNtZCwgYXJnKTsKIH0KIAogc3RhdGljIHNzaXplX3QgdmZpb19t
ZGV2X3JlYWQodm9pZCAqZGV2aWNlX2RhdGEsIGNoYXIgX191c2VyICpidWYsCkBAIC02OCwxMSAr
NzIsMTIgQEAgc3RhdGljIHNzaXplX3QgdmZpb19tZGV2X3JlYWQodm9pZCAqZGV2aWNlX2RhdGEs
IGNoYXIgX191c2VyICpidWYsCiB7CiAJc3RydWN0IG1kZXZfZGV2aWNlICptZGV2ID0gZGV2aWNl
X2RhdGE7CiAJc3RydWN0IG1kZXZfcGFyZW50ICpwYXJlbnQgPSBtZGV2LT5wYXJlbnQ7CisJY29u
c3Qgc3RydWN0IHZmaW9fbWRldl9wYXJlbnRfb3BzICpvcHMgPSBwYXJlbnQtPm9wcy0+ZGV2aWNl
X29wczsKIAotCWlmICh1bmxpa2VseSghcGFyZW50LT5vcHMtPnJlYWQpKQorCWlmICh1bmxpa2Vs
eSghb3BzLT5yZWFkKSkKIAkJcmV0dXJuIC1FSU5WQUw7CiAKLQlyZXR1cm4gcGFyZW50LT5vcHMt
PnJlYWQobWRldiwgYnVmLCBjb3VudCwgcHBvcyk7CisJcmV0dXJuIG9wcy0+cmVhZChtZGV2LCBi
dWYsIGNvdW50LCBwcG9zKTsKIH0KIAogc3RhdGljIHNzaXplX3QgdmZpb19tZGV2X3dyaXRlKHZv
aWQgKmRldmljZV9kYXRhLCBjb25zdCBjaGFyIF9fdXNlciAqYnVmLApAQCAtODAsMjIgKzg1LDI0
IEBAIHN0YXRpYyBzc2l6ZV90IHZmaW9fbWRldl93cml0ZSh2b2lkICpkZXZpY2VfZGF0YSwgY29u
c3QgY2hhciBfX3VzZXIgKmJ1ZiwKIHsKIAlzdHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYgPSBkZXZp
Y2VfZGF0YTsKIAlzdHJ1Y3QgbWRldl9wYXJlbnQgKnBhcmVudCA9IG1kZXYtPnBhcmVudDsKKwlj
b25zdCBzdHJ1Y3QgdmZpb19tZGV2X3BhcmVudF9vcHMgKm9wcyA9IHBhcmVudC0+b3BzLT5kZXZp
Y2Vfb3BzOwogCi0JaWYgKHVubGlrZWx5KCFwYXJlbnQtPm9wcy0+d3JpdGUpKQorCWlmICh1bmxp
a2VseSghb3BzLT53cml0ZSkpCiAJCXJldHVybiAtRUlOVkFMOwogCi0JcmV0dXJuIHBhcmVudC0+
b3BzLT53cml0ZShtZGV2LCBidWYsIGNvdW50LCBwcG9zKTsKKwlyZXR1cm4gb3BzLT53cml0ZSht
ZGV2LCBidWYsIGNvdW50LCBwcG9zKTsKIH0KIAogc3RhdGljIGludCB2ZmlvX21kZXZfbW1hcCh2
b2lkICpkZXZpY2VfZGF0YSwgc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEpCiB7CiAJc3RydWN0
IG1kZXZfZGV2aWNlICptZGV2ID0gZGV2aWNlX2RhdGE7CiAJc3RydWN0IG1kZXZfcGFyZW50ICpw
YXJlbnQgPSBtZGV2LT5wYXJlbnQ7CisJY29uc3Qgc3RydWN0IHZmaW9fbWRldl9wYXJlbnRfb3Bz
ICpvcHMgPSBwYXJlbnQtPm9wcy0+ZGV2aWNlX29wczsKIAotCWlmICh1bmxpa2VseSghcGFyZW50
LT5vcHMtPm1tYXApKQorCWlmICh1bmxpa2VseSghb3BzLT5tbWFwKSkKIAkJcmV0dXJuIC1FSU5W
QUw7CiAKLQlyZXR1cm4gcGFyZW50LT5vcHMtPm1tYXAobWRldiwgdm1hKTsKKwlyZXR1cm4gb3Bz
LT5tbWFwKG1kZXYsIHZtYSk7CiB9CiAKIHN0YXRpYyBjb25zdCBzdHJ1Y3QgdmZpb19kZXZpY2Vf
b3BzIHZmaW9fbWRldl9kZXZfb3BzID0gewpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9tZGV2
LmggYi9pbmNsdWRlL2xpbnV4L21kZXYuaAppbmRleCBiYjBhNzQzZTVhMDMuLjk5ZmRmZDc0NDMz
ZCAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9tZGV2LmgKKysrIGIvaW5jbHVkZS9saW51eC9t
ZGV2LmgKQEAgLTQ4LDMwICs0OCw4IEBAIHN0cnVjdCBkZXZpY2UgKm1kZXZfZ2V0X2lvbW11X2Rl
dmljZShzdHJ1Y3QgZGV2aWNlICpkZXYpOwogICoJCQlAbWRldjogbWRldl9kZXZpY2UgZGV2aWNl
IHN0cnVjdHVyZSB3aGljaCBpcyBiZWluZwogICoJCQkgICAgICAgZGVzdHJveWVkCiAgKgkJCVJl
dHVybnMgaW50ZWdlcjogc3VjY2VzcyAoMCkgb3IgZXJyb3IgKDwgMCkKLSAqIEBvcGVuOgkJT3Bl
biBtZWRpYXRlZCBkZXZpY2UuCi0gKgkJCUBtZGV2OiBtZWRpYXRlZCBkZXZpY2UuCi0gKgkJCVJl
dHVybnMgaW50ZWdlcjogc3VjY2VzcyAoMCkgb3IgZXJyb3IgKDwgMCkKLSAqIEByZWxlYXNlOgkJ
cmVsZWFzZSBtZWRpYXRlZCBkZXZpY2UKLSAqCQkJQG1kZXY6IG1lZGlhdGVkIGRldmljZS4KLSAq
IEByZWFkOgkJUmVhZCBlbXVsYXRpb24gY2FsbGJhY2sKLSAqCQkJQG1kZXY6IG1lZGlhdGVkIGRl
dmljZSBzdHJ1Y3R1cmUKLSAqCQkJQGJ1ZjogcmVhZCBidWZmZXIKLSAqCQkJQGNvdW50OiBudW1i
ZXIgb2YgYnl0ZXMgdG8gcmVhZAotICoJCQlAcHBvczogYWRkcmVzcy4KLSAqCQkJUmV0dW5zIG51
bWJlciBvbiBieXRlcyByZWFkIG9uIHN1Y2Nlc3Mgb3IgZXJyb3IuCi0gKiBAd3JpdGU6CQlXcml0
ZSBlbXVsYXRpb24gY2FsbGJhY2sKLSAqCQkJQG1kZXY6IG1lZGlhdGVkIGRldmljZSBzdHJ1Y3R1
cmUKLSAqCQkJQGJ1Zjogd3JpdGUgYnVmZmVyCi0gKgkJCUBjb3VudDogbnVtYmVyIG9mIGJ5dGVz
IHRvIGJlIHdyaXR0ZW4KLSAqCQkJQHBwb3M6IGFkZHJlc3MuCi0gKgkJCVJldHVucyBudW1iZXIg
b24gYnl0ZXMgd3JpdHRlbiBvbiBzdWNjZXNzIG9yIGVycm9yLgotICogQGlvY3RsOgkJSU9DVEwg
Y2FsbGJhY2sKLSAqCQkJQG1kZXY6IG1lZGlhdGVkIGRldmljZSBzdHJ1Y3R1cmUKLSAqCQkJQGNt
ZDogaW9jdGwgY29tbWFuZAotICoJCQlAYXJnOiBhcmd1bWVudHMgdG8gaW9jdGwKLSAqIEBtbWFw
OgkJbW1hcCBjYWxsYmFjawotICoJCQlAbWRldjogbWVkaWF0ZWQgZGV2aWNlIHN0cnVjdHVyZQot
ICoJCQlAdm1hOiB2bWEgc3RydWN0dXJlCisgKiBAZGV2aWNlX29wczogICAgICAgICBEZXZpY2Ug
c3BlY2lmaWMgZW11bGF0aW9uIGNhbGxiYWNrLgorICoKICAqIFBhcmVudCBkZXZpY2UgdGhhdCBz
dXBwb3J0IG1lZGlhdGVkIGRldmljZSBzaG91bGQgYmUgcmVnaXN0ZXJlZCB3aXRoIG1kZXYKICAq
IG1vZHVsZSB3aXRoIG1kZXZfcGFyZW50X29wcyBzdHJ1Y3R1cmUuCiAgKiovCkBAIC04MywxNSAr
NjEsNyBAQCBzdHJ1Y3QgbWRldl9wYXJlbnRfb3BzIHsKIAogCWludCAgICAgKCpjcmVhdGUpKHN0
cnVjdCBrb2JqZWN0ICprb2JqLCBzdHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYpOwogCWludCAgICAg
KCpyZW1vdmUpKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldik7Ci0JaW50ICAgICAoKm9wZW4pKHN0
cnVjdCBtZGV2X2RldmljZSAqbWRldik7Ci0Jdm9pZCAgICAoKnJlbGVhc2UpKHN0cnVjdCBtZGV2
X2RldmljZSAqbWRldik7Ci0Jc3NpemVfdCAoKnJlYWQpKHN0cnVjdCBtZGV2X2RldmljZSAqbWRl
diwgY2hhciBfX3VzZXIgKmJ1ZiwKLQkJCXNpemVfdCBjb3VudCwgbG9mZl90ICpwcG9zKTsKLQlz
c2l6ZV90ICgqd3JpdGUpKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwgY29uc3QgY2hhciBfX3Vz
ZXIgKmJ1ZiwKLQkJCSBzaXplX3QgY291bnQsIGxvZmZfdCAqcHBvcyk7Ci0JbG9uZwkoKmlvY3Rs
KShzdHJ1Y3QgbWRldl9kZXZpY2UgKm1kZXYsIHVuc2lnbmVkIGludCBjbWQsCi0JCQkgdW5zaWdu
ZWQgbG9uZyBhcmcpOwotCWludAkoKm1tYXApKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwgc3Ry
dWN0IHZtX2FyZWFfc3RydWN0ICp2bWEpOworCWNvbnN0IHZvaWQgKmRldmljZV9vcHM7CiB9Owog
CiAvKiBpbnRlcmZhY2UgZm9yIGV4cG9ydGluZyBtZGV2IHN1cHBvcnRlZCB0eXBlIGF0dHJpYnV0
ZXMgKi8KQEAgLTEzNyw3ICsxMDcsOCBAQCBjb25zdCBndWlkX3QgKm1kZXZfdXVpZChzdHJ1Y3Qg
bWRldl9kZXZpY2UgKm1kZXYpOwogCiBleHRlcm4gc3RydWN0IGJ1c190eXBlIG1kZXZfYnVzX3R5
cGU7CiAKLWludCBtZGV2X3JlZ2lzdGVyX3ZmaW9fZGV2aWNlKHN0cnVjdCBkZXZpY2UgKmRldiwg
Y29uc3Qgc3RydWN0IG1kZXZfcGFyZW50X29wcyAqb3BzKTsKK2ludCBtZGV2X3JlZ2lzdGVyX3Zm
aW9fZGV2aWNlKHN0cnVjdCBkZXZpY2UgKmRldiwKKyAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIGNvbnN0IHN0cnVjdCBtZGV2X3BhcmVudF9vcHMgKm9wcyk7CiB2b2lkIG1kZXZfdW5yZWdp
c3Rlcl9kZXZpY2Uoc3RydWN0IGRldmljZSAqZGV2KTsKIAogaW50IG1kZXZfcmVnaXN0ZXJfZHJp
dmVyKHN0cnVjdCBtZGV2X2RyaXZlciAqZHJ2LCBzdHJ1Y3QgbW9kdWxlICpvd25lcik7CmRpZmYg
LS1naXQgYS9pbmNsdWRlL2xpbnV4L3ZmaW9fbWRldi5oIGIvaW5jbHVkZS9saW51eC92ZmlvX21k
ZXYuaApuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMDAuLjdmODg0Yjk0NmNi
YQotLS0gL2Rldi9udWxsCisrKyBiL2luY2x1ZGUvbGludXgvdmZpb19tZGV2LmgKQEAgLTAsMCAr
MSw1MCBAQAorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAtb25seSAqLworLyoK
KyAqIFZGSU8gTWVkaWF0ZWQgZGV2aWNlIGRlZmluaXRpb24KKyAqLworCisjaWZuZGVmIFZGSU9f
TURFVl9ICisjZGVmaW5lIFZGSU9fTURFVl9ICisKKy8qKgorICogc3RydWN0IHZmaW9fbWRldl9w
YXJlbnRfb3BzIC0gU3RydWN0dXJlIHRvIGJlIHJlZ2lzdGVyZWQgZm9yIGVhY2gKKyAqIHBhcmVu
dCBkZXZpY2UgdG8gcmVnaXN0ZXIgdGhlIGRldmljZSB0byB2ZmlvLW1kZXYgbW9kdWxlLgorICoK
KyAqIEBvcGVuOgkJT3BlbiBtZWRpYXRlZCBkZXZpY2UuCisgKgkJCUBtZGV2OiBtZWRpYXRlZCBk
ZXZpY2UuCisgKgkJCVJldHVybnMgaW50ZWdlcjogc3VjY2VzcyAoMCkgb3IgZXJyb3IgKDwgMCkK
KyAqIEByZWxlYXNlOgkJcmVsZWFzZSBtZWRpYXRlZCBkZXZpY2UKKyAqCQkJQG1kZXY6IG1lZGlh
dGVkIGRldmljZS4KKyAqIEByZWFkOgkJUmVhZCBlbXVsYXRpb24gY2FsbGJhY2sKKyAqCQkJQG1k
ZXY6IG1lZGlhdGVkIGRldmljZSBzdHJ1Y3R1cmUKKyAqCQkJQGJ1ZjogcmVhZCBidWZmZXIKKyAq
CQkJQGNvdW50OiBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZAorICoJCQlAcHBvczogYWRkcmVzcy4K
KyAqCQkJUmV0dW5zIG51bWJlciBvbiBieXRlcyByZWFkIG9uIHN1Y2Nlc3Mgb3IgZXJyb3IuCisg
KiBAd3JpdGU6CQlXcml0ZSBlbXVsYXRpb24gY2FsbGJhY2sKKyAqCQkJQG1kZXY6IG1lZGlhdGVk
IGRldmljZSBzdHJ1Y3R1cmUKKyAqCQkJQGJ1Zjogd3JpdGUgYnVmZmVyCisgKgkJCUBjb3VudDog
bnVtYmVyIG9mIGJ5dGVzIHRvIGJlIHdyaXR0ZW4KKyAqCQkJQHBwb3M6IGFkZHJlc3MuCisgKgkJ
CVJldHVucyBudW1iZXIgb24gYnl0ZXMgd3JpdHRlbiBvbiBzdWNjZXNzIG9yIGVycm9yLgorICog
QGlvY3RsOgkJSU9DVEwgY2FsbGJhY2sKKyAqCQkJQG1kZXY6IG1lZGlhdGVkIGRldmljZSBzdHJ1
Y3R1cmUKKyAqCQkJQGNtZDogaW9jdGwgY29tbWFuZAorICoJCQlAYXJnOiBhcmd1bWVudHMgdG8g
aW9jdGwKKyAqIEBtbWFwOgkJbW1hcCBjYWxsYmFjaworICoJCQlAbWRldjogbWVkaWF0ZWQgZGV2
aWNlIHN0cnVjdHVyZQorICoJCQlAdm1hOiB2bWEgc3RydWN0dXJlCisgKi8KK3N0cnVjdCB2Zmlv
X21kZXZfcGFyZW50X29wcyB7CisJaW50ICAgICAoKm9wZW4pKHN0cnVjdCBtZGV2X2RldmljZSAq
bWRldik7CisJdm9pZCAgICAoKnJlbGVhc2UpKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldik7CisJ
c3NpemVfdCAoKnJlYWQpKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwgY2hhciBfX3VzZXIgKmJ1
ZiwKKwkJCXNpemVfdCBjb3VudCwgbG9mZl90ICpwcG9zKTsKKwlzc2l6ZV90ICgqd3JpdGUpKHN0
cnVjdCBtZGV2X2RldmljZSAqbWRldiwgY29uc3QgY2hhciBfX3VzZXIgKmJ1ZiwKKwkJCSBzaXpl
X3QgY291bnQsIGxvZmZfdCAqcHBvcyk7CisJbG9uZwkoKmlvY3RsKShzdHJ1Y3QgbWRldl9kZXZp
Y2UgKm1kZXYsIHVuc2lnbmVkIGludCBjbWQsCisJCQkgdW5zaWduZWQgbG9uZyBhcmcpOworCWlu
dAkoKm1tYXApKHN0cnVjdCBtZGV2X2RldmljZSAqbWRldiwgc3RydWN0IHZtX2FyZWFfc3RydWN0
ICp2bWEpOworfTsKKworI2VuZGlmCmRpZmYgLS1naXQgYS9zYW1wbGVzL3ZmaW8tbWRldi9tYm9j
aHMuYyBiL3NhbXBsZXMvdmZpby1tZGV2L21ib2Nocy5jCmluZGV4IDcxYTQ0NjliZTg1ZC4uMTA3
Y2MzMGQwZjQ1IDEwMDY0NAotLS0gYS9zYW1wbGVzL3ZmaW8tbWRldi9tYm9jaHMuYworKysgYi9z
YW1wbGVzL3ZmaW8tbWRldi9tYm9jaHMuYwpAQCAtMzAsNiArMzAsNyBAQAogI2luY2x1ZGUgPGxp
bnV4L2lvbW11Lmg+CiAjaW5jbHVkZSA8bGludXgvc3lzZnMuaD4KICNpbmNsdWRlIDxsaW51eC9t
ZGV2Lmg+CisjaW5jbHVkZSA8bGludXgvdmZpb19tZGV2Lmg+CiAjaW5jbHVkZSA8bGludXgvcGNp
Lmg+CiAjaW5jbHVkZSA8bGludXgvZG1hLWJ1Zi5oPgogI2luY2x1ZGUgPGxpbnV4L2hpZ2htZW0u
aD4KQEAgLTE0MTgsMTIgKzE0MTksNyBAQCBzdGF0aWMgc3RydWN0IGF0dHJpYnV0ZV9ncm91cCAq
bWRldl90eXBlX2dyb3Vwc1tdID0gewogCU5VTEwsCiB9OwogCi1zdGF0aWMgY29uc3Qgc3RydWN0
IG1kZXZfcGFyZW50X29wcyBtZGV2X2ZvcHMgPSB7Ci0JLm93bmVyCQkJPSBUSElTX01PRFVMRSwK
LQkubWRldl9hdHRyX2dyb3Vwcwk9IG1kZXZfZGV2X2dyb3VwcywKLQkuc3VwcG9ydGVkX3R5cGVf
Z3JvdXBzCT0gbWRldl90eXBlX2dyb3VwcywKLQkuY3JlYXRlCQkJPSBtYm9jaHNfY3JlYXRlLAot
CS5yZW1vdmUJCQk9IG1ib2Noc19yZW1vdmUsCitzdGF0aWMgY29uc3Qgc3RydWN0IHZmaW9fbWRl
dl9wYXJlbnRfb3BzIHZmaW9fbWRldl9vcHMgPSB7CiAJLm9wZW4JCQk9IG1ib2Noc19vcGVuLAog
CS5yZWxlYXNlCQk9IG1ib2Noc19jbG9zZSwKIAkucmVhZAkJCT0gbWJvY2hzX3JlYWQsCkBAIC0x
NDMyLDYgKzE0MjgsMTUgQEAgc3RhdGljIGNvbnN0IHN0cnVjdCBtZGV2X3BhcmVudF9vcHMgbWRl
dl9mb3BzID0gewogCS5tbWFwCQkJPSBtYm9jaHNfbW1hcCwKIH07CiAKK3N0YXRpYyBjb25zdCBz
dHJ1Y3QgbWRldl9wYXJlbnRfb3BzIG1kZXZfZm9wcyA9IHsKKwkub3duZXIJCQk9IFRISVNfTU9E
VUxFLAorCS5tZGV2X2F0dHJfZ3JvdXBzCT0gbWRldl9kZXZfZ3JvdXBzLAorCS5zdXBwb3J0ZWRf
dHlwZV9ncm91cHMJPSBtZGV2X3R5cGVfZ3JvdXBzLAorCS5jcmVhdGUJCQk9IG1ib2Noc19jcmVh
dGUsCisJLnJlbW92ZQkJCT0gbWJvY2hzX3JlbW92ZSwKKwkuZGV2aWNlX29wcwkJPSAmdmZpb19t
ZGV2X29wcywKK307CisKIHN0YXRpYyBjb25zdCBzdHJ1Y3QgZmlsZV9vcGVyYXRpb25zIHZkX2Zv
cHMgPSB7CiAJLm93bmVyCQk9IFRISVNfTU9EVUxFLAogfTsKZGlmZiAtLWdpdCBhL3NhbXBsZXMv
dmZpby1tZGV2L21kcHkuYyBiL3NhbXBsZXMvdmZpby1tZGV2L21kcHkuYwppbmRleCBkMzAyOWRk
MjdkOTEuLjJjZDIwMThhNTNmOSAxMDA2NDQKLS0tIGEvc2FtcGxlcy92ZmlvLW1kZXYvbWRweS5j
CisrKyBiL3NhbXBsZXMvdmZpby1tZGV2L21kcHkuYwpAQCAtMjYsNiArMjYsNyBAQAogI2luY2x1
ZGUgPGxpbnV4L2lvbW11Lmg+CiAjaW5jbHVkZSA8bGludXgvc3lzZnMuaD4KICNpbmNsdWRlIDxs
aW51eC9tZGV2Lmg+CisjaW5jbHVkZSA8bGludXgvdmZpb19tZGV2Lmg+CiAjaW5jbHVkZSA8bGlu
dXgvcGNpLmg+CiAjaW5jbHVkZSA8ZHJtL2RybV9mb3VyY2MuaD4KICNpbmNsdWRlICJtZHB5LWRl
ZnMuaCIKQEAgLTcyNSwxMiArNzI2LDcgQEAgc3RhdGljIHN0cnVjdCBhdHRyaWJ1dGVfZ3JvdXAg
Km1kZXZfdHlwZV9ncm91cHNbXSA9IHsKIAlOVUxMLAogfTsKIAotc3RhdGljIGNvbnN0IHN0cnVj
dCBtZGV2X3BhcmVudF9vcHMgbWRldl9mb3BzID0gewotCS5vd25lcgkJCT0gVEhJU19NT0RVTEUs
Ci0JLm1kZXZfYXR0cl9ncm91cHMJPSBtZGV2X2Rldl9ncm91cHMsCi0JLnN1cHBvcnRlZF90eXBl
X2dyb3Vwcwk9IG1kZXZfdHlwZV9ncm91cHMsCi0JLmNyZWF0ZQkJCT0gbWRweV9jcmVhdGUsCi0J
LnJlbW92ZQkJCT0gbWRweV9yZW1vdmUsCitzdGF0aWMgY29uc3Qgc3RydWN0IHZmaW9fbWRldl9w
YXJlbnRfb3BzIHZmaW9fbWRldl9vcHMgPSB7CiAJLm9wZW4JCQk9IG1kcHlfb3BlbiwKIAkucmVs
ZWFzZQkJPSBtZHB5X2Nsb3NlLAogCS5yZWFkCQkJPSBtZHB5X3JlYWQsCkBAIC03MzksNiArNzM1
LDE1IEBAIHN0YXRpYyBjb25zdCBzdHJ1Y3QgbWRldl9wYXJlbnRfb3BzIG1kZXZfZm9wcyA9IHsK
IAkubW1hcAkJCT0gbWRweV9tbWFwLAogfTsKIAorc3RhdGljIGNvbnN0IHN0cnVjdCBtZGV2X3Bh
cmVudF9vcHMgbWRldl9mb3BzID0geworCS5vd25lcgkJCT0gVEhJU19NT0RVTEUsCisJLm1kZXZf
YXR0cl9ncm91cHMJPSBtZGV2X2Rldl9ncm91cHMsCisJLnN1cHBvcnRlZF90eXBlX2dyb3Vwcwk9
IG1kZXZfdHlwZV9ncm91cHMsCisJLmNyZWF0ZQkJCT0gbWRweV9jcmVhdGUsCisJLnJlbW92ZQkJ
CT0gbWRweV9yZW1vdmUsCisJLmRldmljZV9vcHMJCT0gJnZmaW9fbWRldl9vcHMsCit9OworCiBz
dGF0aWMgY29uc3Qgc3RydWN0IGZpbGVfb3BlcmF0aW9ucyB2ZF9mb3BzID0gewogCS5vd25lcgkJ
PSBUSElTX01PRFVMRSwKIH07CmRpZmYgLS1naXQgYS9zYW1wbGVzL3ZmaW8tbWRldi9tdHR5LmMg
Yi9zYW1wbGVzL3ZmaW8tbWRldi9tdHR5LmMKaW5kZXggNzQ0Yzg4YTZiMjJjLi5lNDI3NDI1YjVk
YWYgMTAwNjQ0Ci0tLSBhL3NhbXBsZXMvdmZpby1tZGV2L210dHkuYworKysgYi9zYW1wbGVzL3Zm
aW8tbWRldi9tdHR5LmMKQEAgLTI3LDYgKzI3LDcgQEAKICNpbmNsdWRlIDxsaW51eC9jdHlwZS5o
PgogI2luY2x1ZGUgPGxpbnV4L2ZpbGUuaD4KICNpbmNsdWRlIDxsaW51eC9tZGV2Lmg+CisjaW5j
bHVkZSA8bGludXgvdmZpb19tZGV2Lmg+CiAjaW5jbHVkZSA8bGludXgvcGNpLmg+CiAjaW5jbHVk
ZSA8bGludXgvc2VyaWFsLmg+CiAjaW5jbHVkZSA8dWFwaS9saW51eC9zZXJpYWxfcmVnLmg+CkBA
IC0xNDEwLDYgKzE0MTEsMTQgQEAgc3RhdGljIHN0cnVjdCBhdHRyaWJ1dGVfZ3JvdXAgKm1kZXZf
dHlwZV9ncm91cHNbXSA9IHsKIAlOVUxMLAogfTsKIAorc3RhdGljIGNvbnN0IHN0cnVjdCB2Zmlv
X21kZXZfcGFyZW50X29wcyB2ZmlvX21kZXZfb3BzID0geworCS5vcGVuICAgICAgICAgICAgICAg
ICAgID0gbXR0eV9vcGVuLAorCS5yZWxlYXNlICAgICAgICAgICAgICAgID0gbXR0eV9jbG9zZSwK
KwkucmVhZCAgICAgICAgICAgICAgICAgICA9IG10dHlfcmVhZCwKKwkud3JpdGUgICAgICAgICAg
ICAgICAgICA9IG10dHlfd3JpdGUsCisJLmlvY3RsCQkgICAgICAgID0gbXR0eV9pb2N0bCwKK307
CisKIHN0YXRpYyBjb25zdCBzdHJ1Y3QgbWRldl9wYXJlbnRfb3BzIG1kZXZfZm9wcyA9IHsKIAku
b3duZXIgICAgICAgICAgICAgICAgICA9IFRISVNfTU9EVUxFLAogCS5kZXZfYXR0cl9ncm91cHMg
ICAgICAgID0gbXR0eV9kZXZfZ3JvdXBzLApAQCAtMTQxNywxMSArMTQyNiw3IEBAIHN0YXRpYyBj
b25zdCBzdHJ1Y3QgbWRldl9wYXJlbnRfb3BzIG1kZXZfZm9wcyA9IHsKIAkuc3VwcG9ydGVkX3R5
cGVfZ3JvdXBzICA9IG1kZXZfdHlwZV9ncm91cHMsCiAJLmNyZWF0ZSAgICAgICAgICAgICAgICAg
PSBtdHR5X2NyZWF0ZSwKIAkucmVtb3ZlCQkJPSBtdHR5X3JlbW92ZSwKLQkub3BlbiAgICAgICAg
ICAgICAgICAgICA9IG10dHlfb3BlbiwKLQkucmVsZWFzZSAgICAgICAgICAgICAgICA9IG10dHlf
Y2xvc2UsCi0JLnJlYWQgICAgICAgICAgICAgICAgICAgPSBtdHR5X3JlYWQsCi0JLndyaXRlICAg
ICAgICAgICAgICAgICAgPSBtdHR5X3dyaXRlLAotCS5pb2N0bAkJICAgICAgICA9IG10dHlfaW9j
dGwsCisJLmRldmljZV9vcHMgICAgICAgICAgICAgPSAmdmZpb19tZGV2X29wcywKIH07CiAKIHN0
YXRpYyB2b2lkIG10dHlfZGV2aWNlX3JlbGVhc2Uoc3RydWN0IGRldmljZSAqZGV2KQotLSAKMi4x
OS4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkcmkt
ZGV2ZWwgbWFpbGluZyBsaXN0CmRyaS1kZXZlbEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6
Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9kcmktZGV2ZWw=
